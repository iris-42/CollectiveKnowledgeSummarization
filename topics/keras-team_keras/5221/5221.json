{"repository": {"owner": {"login": "keras-team"}, "name": "keras", "forkCount": 18725, "stargazerCount": 50877, "createdAt": "2015-03-28T00:35:42Z", "updatedAt": "2021-03-17T09:46:01Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "deep-learning"}}}, {"node": {"topic": {"name": "tensorflow"}}}, {"node": {"topic": {"name": "neural-networks"}}}, {"node": {"topic": {"name": "machine-learning"}}}, {"node": {"topic": {"name": "data-science"}}}, {"node": {"topic": {"name": "python"}}}]}, "languages": {"edges": [{"node": {"name": "Starlark"}}, {"node": {"name": "Python"}}, {"node": {"name": "Shell"}}]}, "primaryLanguage": {"name": "Python"}}, "id": "MDU6SXNzdWUyMDM4NzY0ODY=", "number": 5221, "author": {"login": "stepjam"}, "title": "Combining 2 models with batch normalizaton", "body": "Hi,\r\n\r\nThere seems to be a problem when you combine 2 models (sub-models) that use batch normalization into another model (master-model), and then try and train one of the sub-models. When removing the batch normalization, it works as expected.\r\n\r\nBelow is a code snipped to reproduce.\r\nWhen you run the example, you should see:\r\n**_InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'combined_input' with dtype float_**\r\n\r\nThank you in advanced.\r\n\r\n```\r\nfrom keras.models import Model\r\nfrom keras.layers import Dense, Input\r\nfrom keras.layers.core import Activation\r\nfrom keras.layers.normalization import BatchNormalization\r\nfrom keras.optimizers import Adam\r\nimport numpy as np\r\n\r\nLR = 0.0002\r\nBATCH_SIZE = 128\r\n\r\ndef generator_model():\r\n    input = x = Input(shape=(100,), name='generator_input')\r\n    x = Dense(40)(x)\r\n    x = BatchNormalization()(x)\r\n    x = Activation('relu')(x)\r\n    x = Dense(10)(x)\r\n    x = Activation('tanh')(x)\r\n    return Model(input, x, name='generator')\r\n\r\n\r\ndef discriminator_model():\r\n    input = x = Input(shape=(10,), name='discriminator_input')\r\n    x = Dense(60)(x)\r\n    x = BatchNormalization()(x)\r\n    x = Activation('relu')(x)\r\n    x = Dense(1, activation='sigmoid')(x)\r\n    return Model(input, x, name='discriminator')\r\n\r\n\r\ndef combined_model(generator, discriminator):\r\n    input = Input(shape=(100,), name='combined_input')\r\n    x = generator(input)\r\n    dcganOutput = discriminator(x)\r\n    return Model(input=input, output=dcganOutput)\r\n\r\n\r\nadam = Adam(lr=LR, beta_1=0.5)\r\n\r\ngenerator = generator_model()\r\ndiscriminator = discriminator_model()\r\ngenerator.summary()\r\ndiscriminator.summary()\r\ngenerator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\r\ndiscriminator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\r\n\r\ndcgan = combined_model(generator, discriminator)\r\ndcgan.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\r\n\r\ntrain_data = np.zeros((BATCH_SIZE, 10), dtype=np.float32)\r\ntrain_labels = np.ones(BATCH_SIZE)\r\n\r\n# HERE is when the error occurs\r\ndiscriminator_loss = discriminator.train_on_batch(x=train_data, y=train_labels)\r\n```", "bodyHTML": "<p>Hi,</p>\n<p>There seems to be a problem when you combine 2 models (sub-models) that use batch normalization into another model (master-model), and then try and train one of the sub-models. When removing the batch normalization, it works as expected.</p>\n<p>Below is a code snipped to reproduce.<br>\nWhen you run the example, you should see:<br>\n<strong><em>InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'combined_input' with dtype float</em></strong></p>\n<p>Thank you in advanced.</p>\n<pre><code>from keras.models import Model\nfrom keras.layers import Dense, Input\nfrom keras.layers.core import Activation\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import Adam\nimport numpy as np\n\nLR = 0.0002\nBATCH_SIZE = 128\n\ndef generator_model():\n    input = x = Input(shape=(100,), name='generator_input')\n    x = Dense(40)(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x = Dense(10)(x)\n    x = Activation('tanh')(x)\n    return Model(input, x, name='generator')\n\n\ndef discriminator_model():\n    input = x = Input(shape=(10,), name='discriminator_input')\n    x = Dense(60)(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x = Dense(1, activation='sigmoid')(x)\n    return Model(input, x, name='discriminator')\n\n\ndef combined_model(generator, discriminator):\n    input = Input(shape=(100,), name='combined_input')\n    x = generator(input)\n    dcganOutput = discriminator(x)\n    return Model(input=input, output=dcganOutput)\n\n\nadam = Adam(lr=LR, beta_1=0.5)\n\ngenerator = generator_model()\ndiscriminator = discriminator_model()\ngenerator.summary()\ndiscriminator.summary()\ngenerator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\ndiscriminator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\n\ndcgan = combined_model(generator, discriminator)\ndcgan.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\n\ntrain_data = np.zeros((BATCH_SIZE, 10), dtype=np.float32)\ntrain_labels = np.ones(BATCH_SIZE)\n\n# HERE is when the error occurs\ndiscriminator_loss = discriminator.train_on_batch(x=train_data, y=train_labels)\n</code></pre>", "bodyText": "Hi,\nThere seems to be a problem when you combine 2 models (sub-models) that use batch normalization into another model (master-model), and then try and train one of the sub-models. When removing the batch normalization, it works as expected.\nBelow is a code snipped to reproduce.\nWhen you run the example, you should see:\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'combined_input' with dtype float\nThank you in advanced.\nfrom keras.models import Model\nfrom keras.layers import Dense, Input\nfrom keras.layers.core import Activation\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import Adam\nimport numpy as np\n\nLR = 0.0002\nBATCH_SIZE = 128\n\ndef generator_model():\n    input = x = Input(shape=(100,), name='generator_input')\n    x = Dense(40)(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x = Dense(10)(x)\n    x = Activation('tanh')(x)\n    return Model(input, x, name='generator')\n\n\ndef discriminator_model():\n    input = x = Input(shape=(10,), name='discriminator_input')\n    x = Dense(60)(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x = Dense(1, activation='sigmoid')(x)\n    return Model(input, x, name='discriminator')\n\n\ndef combined_model(generator, discriminator):\n    input = Input(shape=(100,), name='combined_input')\n    x = generator(input)\n    dcganOutput = discriminator(x)\n    return Model(input=input, output=dcganOutput)\n\n\nadam = Adam(lr=LR, beta_1=0.5)\n\ngenerator = generator_model()\ndiscriminator = discriminator_model()\ngenerator.summary()\ndiscriminator.summary()\ngenerator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\ndiscriminator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\n\ndcgan = combined_model(generator, discriminator)\ndcgan.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\n\ntrain_data = np.zeros((BATCH_SIZE, 10), dtype=np.float32)\ntrain_labels = np.ones(BATCH_SIZE)\n\n# HERE is when the error occurs\ndiscriminator_loss = discriminator.train_on_batch(x=train_data, y=train_labels)", "assignees": {"edges": []}, "createdAt": "2017-01-29T15:34:36Z", "closed": true, "closedAt": "2017-07-05T22:15:40Z", "lastEditedAt": "2017-01-29T18:00:36Z", "publishedAt": "2017-01-29T15:34:36Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NTkzMDczMg==", "author": {"login": "bstriner"}, "body": "Do you have a minimal script to reproduce? Can't tell based on your description.\r\n\r\nCheers", "bodyText": "Do you have a minimal script to reproduce? Can't tell based on your description.\nCheers", "bodyHTML": "<p>Do you have a minimal script to reproduce? Can't tell based on your description.</p>\n<p>Cheers</p>", "createdAt": "2017-01-29T17:35:44Z", "publishedAt": "2017-01-29T17:35:44Z", "lastEditedAt": null, "updatedAt": "2017-01-29T17:35:44Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4105, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Do you have a minimal script to reproduce?", "sentSegmented": ["do", "you", "have", "a", "minimal", "script", "to", "reproduce"], "sentSegmentedWithoutStops": ["minimal", "script", "reproduce"], "sentSegmentedWithoutStopsStemmed": ["minim", "script", "reproduc"]}, {"number": 4106, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Can't tell based on your description.", "sentSegmented": ["ca", "n't", "tell", "based", "on", "your", "description"], "sentSegmentedWithoutStops": ["ca", "n't", "tell", "based", "description"], "sentSegmentedWithoutStopsStemmed": ["ca", "n't", "tell", "base", "descript"]}, {"number": 4107, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Cheers", "sentSegmented": ["cheers"], "sentSegmentedWithoutStops": ["cheers"], "sentSegmentedWithoutStopsStemmed": ["cheer"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NTkzMTgwMw==", "author": {"login": "stepjam"}, "body": "Of course. Start with this, and I will try and see if I can make a smaller example. Thanks\r\n\r\n**EDIT**: I have updated the description with a code example", "bodyText": "Of course. Start with this, and I will try and see if I can make a smaller example. Thanks\nEDIT: I have updated the description with a code example", "bodyHTML": "<p>Of course. Start with this, and I will try and see if I can make a smaller example. Thanks</p>\n<p><strong>EDIT</strong>: I have updated the description with a code example</p>", "createdAt": "2017-01-29T17:49:18Z", "publishedAt": "2017-01-29T17:49:18Z", "lastEditedAt": "2017-01-29T17:58:32Z", "updatedAt": "2017-01-29T17:58:32Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4108, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Of course.", "sentSegmented": ["of", "course"], "sentSegmentedWithoutStops": ["course"], "sentSegmentedWithoutStopsStemmed": ["cours"]}, {"number": 4109, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Start with this, and I will try and see if I can make a smaller example.", "sentSegmented": ["start", "with", "this", "and", "i", "will", "try", "and", "see", "if", "i", "can", "make", "a", "smaller", "example"], "sentSegmentedWithoutStops": ["start", "try", "see", "make", "smaller", "example"], "sentSegmentedWithoutStopsStemmed": ["start", "tri", "see", "make", "smaller", "exampl"]}, {"number": 4110, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 4111, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "EDIT: I have updated the description with a code example", "sentSegmented": ["edit", "i", "have", "updated", "the", "description", "with", "a", "code", "example"], "sentSegmentedWithoutStops": ["edit", "updated", "description", "code", "example"], "sentSegmentedWithoutStopsStemmed": ["edit", "updat", "descript", "code", "exampl"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NTk4NTIyNg==", "author": {"login": "bstriner"}, "body": "@stepjam Your code block works for me in theano. I can try it out in tensorflow instead. What is your backend and what version of everything are you using?\r\n\r\nOn the note of GANs, I put together this module for making a combined GAN model. It lets you train/test both the generator and the discriminator in a single fit/train_on_batch/evaluate/etc. Please let me know if it works for you, and if it doesn't, please let me know what is missing.\r\n\r\nhttps://github.com/bstriner/keras-adversarial", "bodyText": "@stepjam Your code block works for me in theano. I can try it out in tensorflow instead. What is your backend and what version of everything are you using?\nOn the note of GANs, I put together this module for making a combined GAN model. It lets you train/test both the generator and the discriminator in a single fit/train_on_batch/evaluate/etc. Please let me know if it works for you, and if it doesn't, please let me know what is missing.\nhttps://github.com/bstriner/keras-adversarial", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/stepjam/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/stepjam\">@stepjam</a> Your code block works for me in theano. I can try it out in tensorflow instead. What is your backend and what version of everything are you using?</p>\n<p>On the note of GANs, I put together this module for making a combined GAN model. It lets you train/test both the generator and the discriminator in a single fit/train_on_batch/evaluate/etc. Please let me know if it works for you, and if it doesn't, please let me know what is missing.</p>\n<p><a href=\"https://github.com/bstriner/keras-adversarial\">https://github.com/bstriner/keras-adversarial</a></p>", "createdAt": "2017-01-30T05:52:55Z", "publishedAt": "2017-01-30T05:52:55Z", "lastEditedAt": null, "updatedAt": "2017-01-30T05:52:55Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4112, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@stepjam Your code block works for me in theano.", "sentSegmented": ["stepjam", "your", "code", "block", "works", "for", "me", "in", "theano"], "sentSegmentedWithoutStops": ["stepjam", "code", "block", "works", "theano"], "sentSegmentedWithoutStopsStemmed": ["stepjam", "code", "block", "work", "theano"]}, {"number": 4113, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can try it out in tensorflow instead.", "sentSegmented": ["i", "can", "try", "it", "out", "in", "tensorflow", "instead"], "sentSegmentedWithoutStops": ["try", "tensorflow", "instead"], "sentSegmentedWithoutStopsStemmed": ["tri", "tensorflow", "instead"]}, {"number": 4114, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What is your backend and what version of everything are you using?", "sentSegmented": ["what", "is", "your", "backend", "and", "what", "version", "of", "everything", "are", "you", "using"], "sentSegmentedWithoutStops": ["backend", "version", "everything", "using"], "sentSegmentedWithoutStopsStemmed": ["backend", "version", "everyth", "use"]}, {"number": 4115, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "On the note of GANs, I put together this module for making a combined GAN model.", "sentSegmented": ["on", "the", "note", "of", "gans", "i", "put", "together", "this", "module", "for", "making", "a", "combined", "gan", "model"], "sentSegmentedWithoutStops": ["note", "gans", "put", "together", "module", "making", "combined", "gan", "model"], "sentSegmentedWithoutStopsStemmed": ["note", "gan", "put", "togeth", "modul", "make", "combin", "gan", "model"]}, {"number": 4116, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It lets you train/test both the generator and the discriminator in a single fit/train_on_batch/evaluate/etc.", "sentSegmented": ["it", "lets", "you", "train/test", "both", "the", "generator", "and", "the", "discriminator", "in", "a", "single", "fit/train_on_batch/evaluate/etc"], "sentSegmentedWithoutStops": ["lets", "train/test", "generator", "discriminator", "single", "fit/train_on_batch/evaluate/etc"], "sentSegmentedWithoutStopsStemmed": ["let", "train/test", "gener", "discrimin", "singl", "fit/train_on_batch/evaluate/etc"]}, {"number": 4117, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please let me know if it works for you, and if it doesn't, please let me know what is missing.", "sentSegmented": ["please", "let", "me", "know", "if", "it", "works", "for", "you", "and", "if", "it", "does", "n't", "please", "let", "me", "know", "what", "is", "missing"], "sentSegmentedWithoutStops": ["please", "let", "know", "works", "n't", "please", "let", "know", "missing"], "sentSegmentedWithoutStopsStemmed": ["pleas", "let", "know", "work", "n't", "pleas", "let", "know", "miss"]}, {"number": 4118, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "https://github.com/bstriner/keras-adversarial", "sentSegmented": ["https", "//github.com/bstriner/keras-adversarial"], "sentSegmentedWithoutStops": ["https", "//github.com/bstriner/keras-adversarial"], "sentSegmentedWithoutStopsStemmed": ["http", "//github.com/bstriner/keras-adversari"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NTk4NjI1Ng==", "author": {"login": "bstriner"}, "body": "OK. Replicated on tensorflow current stable release. I got a similar error on my other computer using theano but it went away when I updated theano. Not sure if it is happening in tensorflow bleeding edge.", "bodyText": "OK. Replicated on tensorflow current stable release. I got a similar error on my other computer using theano but it went away when I updated theano. Not sure if it is happening in tensorflow bleeding edge.", "bodyHTML": "<p>OK. Replicated on tensorflow current stable release. I got a similar error on my other computer using theano but it went away when I updated theano. Not sure if it is happening in tensorflow bleeding edge.</p>", "createdAt": "2017-01-30T06:03:52Z", "publishedAt": "2017-01-30T06:03:52Z", "lastEditedAt": null, "updatedAt": "2017-01-30T06:03:52Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4119, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "OK.", "sentSegmented": ["ok"], "sentSegmentedWithoutStops": ["ok"], "sentSegmentedWithoutStopsStemmed": ["ok"]}, {"number": 4120, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Replicated on tensorflow current stable release.", "sentSegmented": ["replicated", "on", "tensorflow", "current", "stable", "release"], "sentSegmentedWithoutStops": ["replicated", "tensorflow", "current", "stable", "release"], "sentSegmentedWithoutStopsStemmed": ["replic", "tensorflow", "current", "stabl", "releas"]}, {"number": 4121, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I got a similar error on my other computer using theano but it went away when I updated theano.", "sentSegmented": ["i", "got", "a", "similar", "error", "on", "my", "other", "computer", "using", "theano", "but", "it", "went", "away", "when", "i", "updated", "theano"], "sentSegmentedWithoutStops": ["got", "similar", "error", "computer", "using", "theano", "went", "away", "updated", "theano"], "sentSegmentedWithoutStopsStemmed": ["got", "similar", "error", "comput", "use", "theano", "went", "away", "updat", "theano"]}, {"number": 4122, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Not sure if it is happening in tensorflow bleeding edge.", "sentSegmented": ["not", "sure", "if", "it", "is", "happening", "in", "tensorflow", "bleeding", "edge"], "sentSegmentedWithoutStops": ["sure", "happening", "tensorflow", "bleeding", "edge"], "sentSegmentedWithoutStopsStemmed": ["sure", "happen", "tensorflow", "bleed", "edg"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NTk5NTg3MA==", "author": {"login": "bstriner"}, "body": "So the issue is that `call` adds updates to self.updates and then making the training function gets from self.updates. BN mode=0 will store a running average of the mean and std.\r\n\r\nIf you `discriminator._make_train_function()` before you build the combined model, the error goes away. You could then `layer.updates=[]` before you use that layer in a different model.\r\n\r\nOther fix would probably just be to use mode=1 or 2 instead of 0 (default).\r\n\r\nThe solution in `keras-adversarial` is to just run everything and average any updates.", "bodyText": "So the issue is that call adds updates to self.updates and then making the training function gets from self.updates. BN mode=0 will store a running average of the mean and std.\nIf you discriminator._make_train_function() before you build the combined model, the error goes away. You could then layer.updates=[] before you use that layer in a different model.\nOther fix would probably just be to use mode=1 or 2 instead of 0 (default).\nThe solution in keras-adversarial is to just run everything and average any updates.", "bodyHTML": "<p>So the issue is that <code>call</code> adds updates to self.updates and then making the training function gets from self.updates. BN mode=0 will store a running average of the mean and std.</p>\n<p>If you <code>discriminator._make_train_function()</code> before you build the combined model, the error goes away. You could then <code>layer.updates=[]</code> before you use that layer in a different model.</p>\n<p>Other fix would probably just be to use mode=1 or 2 instead of 0 (default).</p>\n<p>The solution in <code>keras-adversarial</code> is to just run everything and average any updates.</p>", "createdAt": "2017-01-30T07:32:11Z", "publishedAt": "2017-01-30T07:32:11Z", "lastEditedAt": null, "updatedAt": "2017-01-30T07:32:11Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4123, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So the issue is that call adds updates to self.updates and then making the training function gets from self.updates.", "sentSegmented": ["so", "the", "issue", "is", "that", "call", "adds", "updates", "to", "self.updates", "and", "then", "making", "the", "training", "function", "gets", "from", "self.updates"], "sentSegmentedWithoutStops": ["issue", "call", "adds", "updates", "self.updates", "making", "training", "function", "gets", "self.updates"], "sentSegmentedWithoutStopsStemmed": ["issu", "call", "add", "updat", "self.upd", "make", "train", "function", "get", "self.upd"]}, {"number": 4124, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "BN mode=0 will store a running average of the mean and std.", "sentSegmented": ["bn", "mode=0", "will", "store", "a", "running", "average", "of", "the", "mean", "and", "std"], "sentSegmentedWithoutStops": ["bn", "mode=0", "store", "running", "average", "mean", "std"], "sentSegmentedWithoutStopsStemmed": ["bn", "mode=0", "store", "run", "averag", "mean", "std"]}, {"number": 4125, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you discriminator._make_train_function() before you build the combined model, the error goes away.", "sentSegmented": ["if", "you", "discriminator._make_train_function", "before", "you", "build", "the", "combined", "model", "the", "error", "goes", "away"], "sentSegmentedWithoutStops": ["discriminator._make_train_function", "build", "combined", "model", "error", "goes", "away"], "sentSegmentedWithoutStopsStemmed": ["discriminator._make_train_funct", "build", "combin", "model", "error", "goe", "away"]}, {"number": 4126, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You could then layer.updates=[] before you use that layer in a different model.", "sentSegmented": ["you", "could", "then", "layer.updates=", "before", "you", "use", "that", "layer", "in", "a", "different", "model"], "sentSegmentedWithoutStops": ["could", "layer.updates=", "use", "layer", "different", "model"], "sentSegmentedWithoutStopsStemmed": ["could", "layer.updates=", "use", "layer", "differ", "model"]}, {"number": 4127, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Other fix would probably just be to use mode=1 or 2 instead of 0 (default).", "sentSegmented": ["other", "fix", "would", "probably", "just", "be", "to", "use", "mode=1", "or", "2", "instead", "of", "0", "default"], "sentSegmentedWithoutStops": ["fix", "would", "probably", "use", "mode=1", "2", "instead", "0", "default"], "sentSegmentedWithoutStopsStemmed": ["fix", "would", "probabl", "use", "mode=1", "2", "instead", "0", "default"]}, {"number": 4128, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The solution in keras-adversarial is to just run everything and average any updates.", "sentSegmented": ["the", "solution", "in", "keras-adversarial", "is", "to", "just", "run", "everything", "and", "average", "any", "updates"], "sentSegmentedWithoutStops": ["solution", "keras-adversarial", "run", "everything", "average", "updates"], "sentSegmentedWithoutStopsStemmed": ["solut", "keras-adversari", "run", "everyth", "averag", "updat"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NjAwODUwNg==", "author": {"login": "stepjam"}, "body": "@bstriner - Thanks for looking into this!\r\nJust so you know, I am using tesorflow as backend (tensorflow_gpu-0.12.1), and keras version: 1.2.1.\r\n\r\nOK great, thanks for finding the problem. I'll also have a look at your `keras-adversarial` work.\r\n", "bodyText": "@bstriner - Thanks for looking into this!\nJust so you know, I am using tesorflow as backend (tensorflow_gpu-0.12.1), and keras version: 1.2.1.\nOK great, thanks for finding the problem. I'll also have a look at your keras-adversarial work.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bstriner/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bstriner\">@bstriner</a> - Thanks for looking into this!<br>\nJust so you know, I am using tesorflow as backend (tensorflow_gpu-0.12.1), and keras version: 1.2.1.</p>\n<p>OK great, thanks for finding the problem. I'll also have a look at your <code>keras-adversarial</code> work.</p>", "createdAt": "2017-01-30T08:55:50Z", "publishedAt": "2017-01-30T08:55:50Z", "lastEditedAt": null, "updatedAt": "2017-01-30T08:55:50Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4129, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@bstriner - Thanks for looking into this!", "sentSegmented": ["bstriner", "thanks", "for", "looking", "into", "this"], "sentSegmentedWithoutStops": ["bstriner", "thanks", "looking"], "sentSegmentedWithoutStopsStemmed": ["bstriner", "thank", "look"]}, {"number": 4130, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Just so you know, I am using tesorflow as backend (tensorflow_gpu-0.12.1), and keras version: 1.2.1.", "sentSegmented": ["just", "so", "you", "know", "i", "am", "using", "tesorflow", "as", "backend", "tensorflow_gpu-0.12.1", "and", "keras", "version", "1.2.1"], "sentSegmentedWithoutStops": ["know", "using", "tesorflow", "backend", "tensorflow_gpu-0.12.1", "keras", "version", "1.2.1"], "sentSegmentedWithoutStopsStemmed": ["know", "use", "tesorflow", "backend", "tensorflow_gpu-0.12.1", "kera", "version", "1.2.1"]}, {"number": 4131, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "OK great, thanks for finding the problem.", "sentSegmented": ["ok", "great", "thanks", "for", "finding", "the", "problem"], "sentSegmentedWithoutStops": ["ok", "great", "thanks", "finding", "problem"], "sentSegmentedWithoutStopsStemmed": ["ok", "great", "thank", "find", "problem"]}, {"number": 4132, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'll also have a look at your keras-adversarial work.", "sentSegmented": ["i", "'ll", "also", "have", "a", "look", "at", "your", "keras-adversarial", "work"], "sentSegmentedWithoutStops": ["'ll", "also", "look", "keras-adversarial", "work"], "sentSegmentedWithoutStopsStemmed": ["'ll", "also", "look", "keras-adversari", "work"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3NjAxOTY5OQ==", "author": {"login": "bstriner"}, "body": "No problem. If you come up with anything cool in `keras-adversarial` let me know and I can add it as an example.", "bodyText": "No problem. If you come up with anything cool in keras-adversarial let me know and I can add it as an example.", "bodyHTML": "<p>No problem. If you come up with anything cool in <code>keras-adversarial</code> let me know and I can add it as an example.</p>", "createdAt": "2017-01-30T09:51:12Z", "publishedAt": "2017-01-30T09:51:12Z", "lastEditedAt": null, "updatedAt": "2017-01-30T09:51:12Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4133, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "No problem.", "sentSegmented": ["no", "problem"], "sentSegmentedWithoutStops": ["problem"], "sentSegmentedWithoutStopsStemmed": ["problem"]}, {"number": 4134, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you come up with anything cool in keras-adversarial let me know and I can add it as an example.", "sentSegmented": ["if", "you", "come", "up", "with", "anything", "cool", "in", "keras-adversarial", "let", "me", "know", "and", "i", "can", "add", "it", "as", "an", "example"], "sentSegmentedWithoutStops": ["come", "anything", "cool", "keras-adversarial", "let", "know", "add", "example"], "sentSegmentedWithoutStopsStemmed": ["come", "anyth", "cool", "keras-adversari", "let", "know", "add", "exampl"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4NDc4NDQyMQ==", "author": {"login": "adamcavendish"}, "body": "Also, there's some similar issue with Batch Normalization Layer in this question, which uses sequential mode:\r\n\r\nhttp://stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model\r\n", "bodyText": "Also, there's some similar issue with Batch Normalization Layer in this question, which uses sequential mode:\nhttp://stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model", "bodyHTML": "<p>Also, there's some similar issue with Batch Normalization Layer in this question, which uses sequential mode:</p>\n<p><a rel=\"nofollow\" href=\"http://stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model\">http://stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model</a></p>", "createdAt": "2017-03-07T16:52:12Z", "publishedAt": "2017-03-07T16:52:12Z", "lastEditedAt": null, "updatedAt": "2017-03-07T16:52:12Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4135, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Also, there's some similar issue with Batch Normalization Layer in this question, which uses sequential mode:", "sentSegmented": ["also", "there", "'s", "some", "similar", "issue", "with", "batch", "normalization", "layer", "in", "this", "question", "which", "uses", "sequential", "mode"], "sentSegmentedWithoutStops": ["also", "'s", "similar", "issue", "batch", "normalization", "layer", "question", "uses", "sequential", "mode"], "sentSegmentedWithoutStopsStemmed": ["also", "'s", "similar", "issu", "batch", "normal", "layer", "question", "use", "sequenti", "mode"]}, {"number": 4136, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model", "sentSegmented": ["http", "//stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model"], "sentSegmentedWithoutStops": ["http", "//stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model"], "sentSegmentedWithoutStopsStemmed": ["http", "//stackoverflow.com/questions/42422646/keras-train-partial-model-issue-about-gan-model"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMwNjI1MjUxMg==", "author": {"login": "stale"}, "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity  occurs, but feel free to re-open a closed issue if needed.\n", "bodyText": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity  occurs, but feel free to re-open a closed issue if needed.", "bodyHTML": "<p>This issue has been automatically marked as stale because it has not had recent activity. It will be closed after 30 days if no further activity  occurs, but feel free to re-open a closed issue if needed.</p>", "createdAt": "2017-06-05T17:34:03Z", "publishedAt": "2017-06-05T17:34:03Z", "lastEditedAt": null, "updatedAt": "2017-06-05T17:34:03Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4137, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This issue has been automatically marked as stale because it has not had recent activity.", "sentSegmented": ["this", "issue", "has", "been", "automatically", "marked", "as", "stale", "because", "it", "has", "not", "had", "recent", "activity"], "sentSegmentedWithoutStops": ["issue", "automatically", "marked", "stale", "recent", "activity"], "sentSegmentedWithoutStopsStemmed": ["issu", "automat", "mark", "stale", "recent", "activ"]}, {"number": 4138, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It will be closed after 30 days if no further activity  occurs, but feel free to re-open a closed issue if needed.", "sentSegmented": ["it", "will", "be", "closed", "after", "30", "days", "if", "no", "further", "activity", "occurs", "but", "feel", "free", "to", "re-open", "a", "closed", "issue", "if", "needed"], "sentSegmentedWithoutStops": ["closed", "30", "days", "activity", "occurs", "feel", "free", "re-open", "closed", "issue", "needed"], "sentSegmentedWithoutStopsStemmed": ["close", "30", "day", "activ", "occur", "feel", "free", "re-open", "close", "issu", "need"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOEkEK4A==", "hasNextPage": false}, "totalCount": 9}, "labels": {"edges": [{"node": {"createdAt": "2017-05-23T18:28:56Z", "name": "stale"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["combining", "2", "models", "with", "batch", "normalizaton"], "titleSegmentedWithoutStops": ["combining", "2", "models", "batch", "normalizaton"], "titleSegmentedWithoutStopsStemmed": ["combin", "2", "model", "batch", "normalizaton"], "bodyParsed": [{"number": 4057, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi,", "sentSegmented": ["hi"], "sentSegmentedWithoutStops": ["hi"], "sentSegmentedWithoutStopsStemmed": ["hi"]}, {"number": 4058, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There seems to be a problem when you combine 2 models (sub-models) that use batch normalization into another model (master-model), and then try and train one of the sub-models.", "sentSegmented": ["there", "seems", "to", "be", "a", "problem", "when", "you", "combine", "2", "models", "sub-models", "that", "use", "batch", "normalization", "into", "another", "model", "master-model", "and", "then", "try", "and", "train", "one", "of", "the", "sub-models"], "sentSegmentedWithoutStops": ["seems", "problem", "combine", "2", "models", "sub-models", "use", "batch", "normalization", "another", "model", "master-model", "try", "train", "one", "sub-models"], "sentSegmentedWithoutStopsStemmed": ["seem", "problem", "combin", "2", "model", "sub-model", "use", "batch", "normal", "anoth", "model", "master-model", "tri", "train", "one", "sub-model"]}, {"number": 4059, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When removing the batch normalization, it works as expected.", "sentSegmented": ["when", "removing", "the", "batch", "normalization", "it", "works", "as", "expected"], "sentSegmentedWithoutStops": ["removing", "batch", "normalization", "works", "expected"], "sentSegmentedWithoutStopsStemmed": ["remov", "batch", "normal", "work", "expect"]}, {"number": 4060, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Below is a code snipped to reproduce.", "sentSegmented": ["below", "is", "a", "code", "snipped", "to", "reproduce"], "sentSegmentedWithoutStops": ["code", "snipped", "reproduce"], "sentSegmentedWithoutStopsStemmed": ["code", "snip", "reproduc"]}, {"number": 4061, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When you run the example, you should see:", "sentSegmented": ["when", "you", "run", "the", "example", "you", "should", "see"], "sentSegmentedWithoutStops": ["run", "example", "see"], "sentSegmentedWithoutStopsStemmed": ["run", "exampl", "see"]}, {"number": 4062, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'combined_input' with dtype float", "sentSegmented": ["invalidargumenterror", "see", "above", "for", "traceback", "you", "must", "feed", "a", "value", "for", "placeholder", "tensor", "'combined_input", "with", "dtype", "float"], "sentSegmentedWithoutStops": ["invalidargumenterror", "see", "traceback", "must", "feed", "value", "placeholder", "tensor", "'combined_input", "dtype", "float"], "sentSegmentedWithoutStopsStemmed": ["invalidargumenterror", "see", "traceback", "must", "feed", "valu", "placehold", "tensor", "'combined_input", "dtype", "float"]}, {"number": 4063, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thank you in advanced.", "sentSegmented": ["thank", "you", "in", "advanced"], "sentSegmentedWithoutStops": ["thank", "advanced"], "sentSegmentedWithoutStopsStemmed": ["thank", "advanc"]}, {"number": 4064, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.models import Model", "sentSegmented": ["from", "keras.models", "import", "model"], "sentSegmentedWithoutStops": ["keras.models", "model"], "sentSegmentedWithoutStopsStemmed": ["keras.model", "model"]}, {"number": 4065, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.layers import Dense, Input", "sentSegmented": ["from", "keras.layers", "import", "dense", "input"], "sentSegmentedWithoutStops": ["keras.layers", "dense", "input"], "sentSegmentedWithoutStopsStemmed": ["keras.lay", "dens", "input"]}, {"number": 4066, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.layers.core import Activation", "sentSegmented": ["from", "keras.layers.core", "import", "activation"], "sentSegmentedWithoutStops": ["keras.layers.core", "activation"], "sentSegmentedWithoutStopsStemmed": ["keras.layers.cor", "activ"]}, {"number": 4067, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.layers.normalization import BatchNormalization", "sentSegmented": ["from", "keras.layers.normalization", "import", "batchnormalization"], "sentSegmentedWithoutStops": ["keras.layers.normalization", "batchnormalization"], "sentSegmentedWithoutStopsStemmed": ["keras.layers.norm", "batchnorm"]}, {"number": 4068, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.optimizers import Adam", "sentSegmented": ["from", "keras.optimizers", "import", "adam"], "sentSegmentedWithoutStops": ["keras.optimizers", "adam"], "sentSegmentedWithoutStopsStemmed": ["keras.optim", "adam"]}, {"number": 4069, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "import numpy as np", "sentSegmented": ["import", "numpy", "as", "np"], "sentSegmentedWithoutStops": ["numpy", "np"], "sentSegmentedWithoutStopsStemmed": ["numpi", "np"]}, {"number": 4070, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "LR = 0.0002", "sentSegmented": ["lr", "0.0002"], "sentSegmentedWithoutStops": ["lr", "0.0002"], "sentSegmentedWithoutStopsStemmed": ["lr", "0.0002"]}, {"number": 4071, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "BATCH_SIZE = 128", "sentSegmented": ["batch_size", "128"], "sentSegmentedWithoutStops": ["batch_size", "128"], "sentSegmentedWithoutStopsStemmed": ["batch_siz", "128"]}, {"number": 4072, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "def generator_model():", "sentSegmented": ["def", "generator_model"], "sentSegmentedWithoutStops": ["generator_model"], "sentSegmentedWithoutStopsStemmed": ["generator_model"]}, {"number": 4073, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    input = x = Input(shape=(100,), name='generator_input')", "sentSegmented": ["input", "x", "input", "shape=", "100", "name='generator_input"], "sentSegmentedWithoutStops": ["input", "x", "input", "shape=", "100", "name='generator_input"], "sentSegmentedWithoutStopsStemmed": ["input", "x", "input", "shape=", "100", "name='generator_input"]}, {"number": 4074, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Dense(40)(x)", "sentSegmented": ["x", "dense", "40", "x"], "sentSegmentedWithoutStops": ["x", "dense", "40", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "dens", "40", "x"]}, {"number": 4075, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = BatchNormalization()(x)", "sentSegmented": ["x", "batchnormalization", "x"], "sentSegmentedWithoutStops": ["x", "batchnormalization", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "batchnorm", "x"]}, {"number": 4076, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Activation('relu')(x)", "sentSegmented": ["x", "activation", "'relu", "x"], "sentSegmentedWithoutStops": ["x", "activation", "'relu", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "activ", "'relu", "x"]}, {"number": 4077, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Dense(10)(x)", "sentSegmented": ["x", "dense", "10", "x"], "sentSegmentedWithoutStops": ["x", "dense", "10", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "dens", "10", "x"]}, {"number": 4078, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Activation('tanh')(x)", "sentSegmented": ["x", "activation", "'tanh", "x"], "sentSegmentedWithoutStops": ["x", "activation", "'tanh", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "activ", "'tanh", "x"]}, {"number": 4079, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    return Model(input, x, name='generator')", "sentSegmented": ["return", "model", "input", "x", "name='generator"], "sentSegmentedWithoutStops": ["model", "input", "x", "name='generator"], "sentSegmentedWithoutStopsStemmed": ["model", "input", "x", "name='gener"]}, {"number": 4080, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "def discriminator_model():", "sentSegmented": ["def", "discriminator_model"], "sentSegmentedWithoutStops": ["discriminator_model"], "sentSegmentedWithoutStopsStemmed": ["discriminator_model"]}, {"number": 4081, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    input = x = Input(shape=(10,), name='discriminator_input')", "sentSegmented": ["input", "x", "input", "shape=", "10", "name='discriminator_input"], "sentSegmentedWithoutStops": ["input", "x", "input", "shape=", "10", "name='discriminator_input"], "sentSegmentedWithoutStopsStemmed": ["input", "x", "input", "shape=", "10", "name='discriminator_input"]}, {"number": 4082, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Dense(60)(x)", "sentSegmented": ["x", "dense", "60", "x"], "sentSegmentedWithoutStops": ["x", "dense", "60", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "dens", "60", "x"]}, {"number": 4083, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = BatchNormalization()(x)", "sentSegmented": ["x", "batchnormalization", "x"], "sentSegmentedWithoutStops": ["x", "batchnormalization", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "batchnorm", "x"]}, {"number": 4084, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Activation('relu')(x)", "sentSegmented": ["x", "activation", "'relu", "x"], "sentSegmentedWithoutStops": ["x", "activation", "'relu", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "activ", "'relu", "x"]}, {"number": 4085, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = Dense(1, activation='sigmoid')(x)", "sentSegmented": ["x", "dense", "1", "activation='sigmoid", "x"], "sentSegmentedWithoutStops": ["x", "dense", "1", "activation='sigmoid", "x"], "sentSegmentedWithoutStopsStemmed": ["x", "dens", "1", "activation='sigmoid", "x"]}, {"number": 4086, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    return Model(input, x, name='discriminator')", "sentSegmented": ["return", "model", "input", "x", "name='discriminator"], "sentSegmentedWithoutStops": ["model", "input", "x", "name='discriminator"], "sentSegmentedWithoutStopsStemmed": ["model", "input", "x", "name='discrimin"]}, {"number": 4087, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "def combined_model(generator, discriminator):", "sentSegmented": ["def", "combined_model", "generator", "discriminator"], "sentSegmentedWithoutStops": ["combined_model", "generator", "discriminator"], "sentSegmentedWithoutStopsStemmed": ["combined_model", "gener", "discrimin"]}, {"number": 4088, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    input = Input(shape=(100,), name='combined_input')", "sentSegmented": ["input", "input", "shape=", "100", "name='combined_input"], "sentSegmentedWithoutStops": ["input", "input", "shape=", "100", "name='combined_input"], "sentSegmentedWithoutStopsStemmed": ["input", "input", "shape=", "100", "name='combined_input"]}, {"number": 4089, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    x = generator(input)", "sentSegmented": ["x", "generator", "input"], "sentSegmentedWithoutStops": ["x", "generator", "input"], "sentSegmentedWithoutStopsStemmed": ["x", "gener", "input"]}, {"number": 4090, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    dcganOutput = discriminator(x)", "sentSegmented": ["dcganoutput", "discriminator", "x"], "sentSegmentedWithoutStops": ["dcganoutput", "discriminator", "x"], "sentSegmentedWithoutStopsStemmed": ["dcganoutput", "discrimin", "x"]}, {"number": 4091, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    return Model(input=input, output=dcganOutput)", "sentSegmented": ["return", "model", "input=input", "output=dcganoutput"], "sentSegmentedWithoutStops": ["model", "input=input", "output=dcganoutput"], "sentSegmentedWithoutStopsStemmed": ["model", "input=input", "output=dcganoutput"]}, {"number": 4092, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "adam = Adam(lr=LR, beta_1=0.5)", "sentSegmented": ["adam", "adam", "lr=lr", "beta_1=0.5"], "sentSegmentedWithoutStops": ["adam", "adam", "lr=lr", "beta_1=0.5"], "sentSegmentedWithoutStopsStemmed": ["adam", "adam", "lr=lr", "beta_1=0.5"]}, {"number": 4093, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "generator = generator_model()", "sentSegmented": ["generator", "generator_model"], "sentSegmentedWithoutStops": ["generator", "generator_model"], "sentSegmentedWithoutStopsStemmed": ["gener", "generator_model"]}, {"number": 4094, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "discriminator = discriminator_model()", "sentSegmented": ["discriminator", "discriminator_model"], "sentSegmentedWithoutStops": ["discriminator", "discriminator_model"], "sentSegmentedWithoutStopsStemmed": ["discrimin", "discriminator_model"]}, {"number": 4095, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "generator.summary()", "sentSegmented": ["generator.summary"], "sentSegmentedWithoutStops": ["generator.summary"], "sentSegmentedWithoutStopsStemmed": ["generator.summari"]}, {"number": 4096, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "discriminator.summary()", "sentSegmented": ["discriminator.summary"], "sentSegmentedWithoutStops": ["discriminator.summary"], "sentSegmentedWithoutStopsStemmed": ["discriminator.summari"]}, {"number": 4097, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "generator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])", "sentSegmented": ["generator.compile", "loss='binary_crossentropy", "optimizer=adam", "metrics=", "'accuracy"], "sentSegmentedWithoutStops": ["generator.compile", "loss='binary_crossentropy", "optimizer=adam", "metrics=", "'accuracy"], "sentSegmentedWithoutStopsStemmed": ["generator.compil", "loss='binary_crossentropi", "optimizer=adam", "metrics=", "'accuraci"]}, {"number": 4098, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "discriminator.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])", "sentSegmented": ["discriminator.compile", "loss='binary_crossentropy", "optimizer=adam", "metrics=", "'accuracy"], "sentSegmentedWithoutStops": ["discriminator.compile", "loss='binary_crossentropy", "optimizer=adam", "metrics=", "'accuracy"], "sentSegmentedWithoutStopsStemmed": ["discriminator.compil", "loss='binary_crossentropi", "optimizer=adam", "metrics=", "'accuraci"]}, {"number": 4099, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "dcgan = combined_model(generator, discriminator)", "sentSegmented": ["dcgan", "combined_model", "generator", "discriminator"], "sentSegmentedWithoutStops": ["dcgan", "combined_model", "generator", "discriminator"], "sentSegmentedWithoutStopsStemmed": ["dcgan", "combined_model", "gener", "discrimin"]}, {"number": 4100, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "dcgan.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])", "sentSegmented": ["dcgan.compile", "loss='binary_crossentropy", "optimizer=adam", "metrics=", "'accuracy"], "sentSegmentedWithoutStops": ["dcgan.compile", "loss='binary_crossentropy", "optimizer=adam", "metrics=", "'accuracy"], "sentSegmentedWithoutStopsStemmed": ["dcgan.compil", "loss='binary_crossentropi", "optimizer=adam", "metrics=", "'accuraci"]}, {"number": 4101, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "train_data = np.zeros((BATCH_SIZE, 10), dtype=np.float32)", "sentSegmented": ["train_data", "np.zeros", "batch_size", "10", "dtype=np.float32"], "sentSegmentedWithoutStops": ["train_data", "np.zeros", "batch_size", "10", "dtype=np.float32"], "sentSegmentedWithoutStopsStemmed": ["train_data", "np.zero", "batch_siz", "10", "dtype=np.float32"]}, {"number": 4102, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "train_labels = np.ones(BATCH_SIZE)", "sentSegmented": ["train_labels", "np.ones", "batch_size"], "sentSegmentedWithoutStops": ["train_labels", "np.ones", "batch_size"], "sentSegmentedWithoutStopsStemmed": ["train_label", "np.one", "batch_siz"]}, {"number": 4103, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "# HERE is when the error occurs", "sentSegmented": ["here", "is", "when", "the", "error", "occurs"], "sentSegmentedWithoutStops": ["error", "occurs"], "sentSegmentedWithoutStopsStemmed": ["error", "occur"]}, {"number": 4104, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "discriminator_loss = discriminator.train_on_batch(x=train_data, y=train_labels)", "sentSegmented": ["discriminator_loss", "discriminator.train_on_batch", "x=train_data", "y=train_labels"], "sentSegmentedWithoutStops": ["discriminator_loss", "discriminator.train_on_batch", "x=train_data", "y=train_labels"], "sentSegmentedWithoutStopsStemmed": ["discriminator_loss", "discriminator.train_on_batch", "x=train_data", "y=train_label"]}]}