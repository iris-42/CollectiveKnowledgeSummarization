{"repository": {"owner": {"login": "keras-team"}, "name": "keras", "forkCount": 18728, "stargazerCount": 50841, "createdAt": "2015-03-28T00:35:42Z", "updatedAt": "2021-03-11T04:31:37Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "deep-learning"}}}, {"node": {"topic": {"name": "tensorflow"}}}, {"node": {"topic": {"name": "neural-networks"}}}, {"node": {"topic": {"name": "machine-learning"}}}, {"node": {"topic": {"name": "data-science"}}}, {"node": {"topic": {"name": "python"}}}]}, "languages": {"edges": [{"node": {"name": "Starlark"}}, {"node": {"name": "Python"}}, {"node": {"name": "Shell"}}]}, "primaryLanguage": {"name": "Python"}}, "id": "MDU6SXNzdWUyMTEzNjMxMTU=", "number": 5576, "author": {"login": "JeffDong"}, "title": "Weird thing when using functional API with BatchNorm.", "body": "Hi, I'm trying to build a model with functional API. But I got some error only when I use BatchNorm layer . A toy example: \r\n\r\n```\r\nimport numpy as np\r\nfrom keras.layers import Input, BatchNormalization, Dense\r\nfrom keras.models import Model\r\n\r\n# model1:\r\ninput1 = Input((10,))\r\nbn1 = BatchNormalization()(input1)\r\nout1 = Dense(2, activation='softmax')(bn1)\r\nmodel1 = Model(input1, out1)\r\n\r\n# model2:\r\ninput2 = Input((10,))\r\nout2 = Dense(10, activation='relu')(input2)\r\nmodel2 = Model(input2, out2)\r\n\r\n# model3 is just a simple stack of model1 and model2:\r\ninput3 = Input((10,))\r\nout3 = model1(model2(input3))\r\nmodel3 = Model(input3, out3)\r\n\r\n# compile and train:\r\nmodel1.compile(loss='categorical_crossentropy',\r\n               optimizer='adam',\r\n               metrics=['accuracy'])\r\ny = np.zeros((10, 2))\r\nx = np.zeros((10, 10))\r\nmodel1.train_on_batch(x, y)\r\n```\r\nThen I get  `InvalidArgumentError: You must feed a value for placeholder tensor 'input_3' with dtype float`. But model1 has nothing to do with input3 if I train it separately. The weird thing is that if I remove bn1 of model1 or change it to layers like Dense, this error will disappear.\r\n\r\n I use tensorflow backend and both tensorflow and keras are updated. Do I use functional API in the wrong way or it is a potential bug?\r\n", "bodyHTML": "<p>Hi, I'm trying to build a model with functional API. But I got some error only when I use BatchNorm layer . A toy example:</p>\n<pre><code>import numpy as np\nfrom keras.layers import Input, BatchNormalization, Dense\nfrom keras.models import Model\n\n# model1:\ninput1 = Input((10,))\nbn1 = BatchNormalization()(input1)\nout1 = Dense(2, activation='softmax')(bn1)\nmodel1 = Model(input1, out1)\n\n# model2:\ninput2 = Input((10,))\nout2 = Dense(10, activation='relu')(input2)\nmodel2 = Model(input2, out2)\n\n# model3 is just a simple stack of model1 and model2:\ninput3 = Input((10,))\nout3 = model1(model2(input3))\nmodel3 = Model(input3, out3)\n\n# compile and train:\nmodel1.compile(loss='categorical_crossentropy',\n               optimizer='adam',\n               metrics=['accuracy'])\ny = np.zeros((10, 2))\nx = np.zeros((10, 10))\nmodel1.train_on_batch(x, y)\n</code></pre>\n<p>Then I get  <code>InvalidArgumentError: You must feed a value for placeholder tensor 'input_3' with dtype float</code>. But model1 has nothing to do with input3 if I train it separately. The weird thing is that if I remove bn1 of model1 or change it to layers like Dense, this error will disappear.</p>\n<p>I use tensorflow backend and both tensorflow and keras are updated. Do I use functional API in the wrong way or it is a potential bug?</p>", "bodyText": "Hi, I'm trying to build a model with functional API. But I got some error only when I use BatchNorm layer . A toy example:\nimport numpy as np\nfrom keras.layers import Input, BatchNormalization, Dense\nfrom keras.models import Model\n\n# model1:\ninput1 = Input((10,))\nbn1 = BatchNormalization()(input1)\nout1 = Dense(2, activation='softmax')(bn1)\nmodel1 = Model(input1, out1)\n\n# model2:\ninput2 = Input((10,))\nout2 = Dense(10, activation='relu')(input2)\nmodel2 = Model(input2, out2)\n\n# model3 is just a simple stack of model1 and model2:\ninput3 = Input((10,))\nout3 = model1(model2(input3))\nmodel3 = Model(input3, out3)\n\n# compile and train:\nmodel1.compile(loss='categorical_crossentropy',\n               optimizer='adam',\n               metrics=['accuracy'])\ny = np.zeros((10, 2))\nx = np.zeros((10, 10))\nmodel1.train_on_batch(x, y)\n\nThen I get  InvalidArgumentError: You must feed a value for placeholder tensor 'input_3' with dtype float. But model1 has nothing to do with input3 if I train it separately. The weird thing is that if I remove bn1 of model1 or change it to layers like Dense, this error will disappear.\nI use tensorflow backend and both tensorflow and keras are updated. Do I use functional API in the wrong way or it is a potential bug?", "assignees": {"edges": []}, "createdAt": "2017-03-02T11:24:48Z", "closed": true, "closedAt": "2017-03-03T04:38:39Z", "lastEditedAt": null, "publishedAt": "2017-03-02T11:24:48Z", "comments": {"totalCount": 2, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4Mzc0NDUwNg==", "author": {"login": "unrealwill"}, "body": "Hello,\r\n\r\nProbably duplicate of : \r\nhttps://github.com/fchollet/keras/issues/5221\r\n", "bodyText": "Hello,\nProbably duplicate of :\n#5221", "bodyHTML": "<p>Hello,</p>\n<p>Probably duplicate of :<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"203876486\" data-permission-text=\"Title is private\" data-url=\"https://github.com/keras-team/keras/issues/5221\" data-hovercard-type=\"issue\" data-hovercard-url=\"/keras-team/keras/issues/5221/hovercard\" href=\"https://github.com/keras-team/keras/issues/5221\">#5221</a></p>", "createdAt": "2017-03-02T18:54:39Z", "publishedAt": "2017-03-02T18:54:39Z", "lastEditedAt": null, "updatedAt": "2017-03-02T18:54:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3968, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hello,", "sentSegmented": ["hello"], "sentSegmentedWithoutStops": ["hello"], "sentSegmentedWithoutStopsStemmed": ["hello"]}, {"number": 3969, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Probably duplicate of :", "sentSegmented": ["probably", "duplicate", "of"], "sentSegmentedWithoutStops": ["probably", "duplicate"], "sentSegmentedWithoutStopsStemmed": ["probabl", "duplic"]}, {"number": 3970, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "#5221", "sentSegmented": ["5221"], "sentSegmentedWithoutStops": ["5221"], "sentSegmentedWithoutStopsStemmed": ["5221"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4Mzg2MzU5Mg==", "author": {"login": "JeffDong"}, "body": "Thanks for your reply. It works fine if I compile and `model1._make_train_function()` before define the combined model.", "bodyText": "Thanks for your reply. It works fine if I compile and model1._make_train_function() before define the combined model.", "bodyHTML": "<p>Thanks for your reply. It works fine if I compile and <code>model1._make_train_function()</code> before define the combined model.</p>", "createdAt": "2017-03-03T04:38:39Z", "publishedAt": "2017-03-03T04:38:39Z", "lastEditedAt": null, "updatedAt": "2017-03-03T04:38:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3971, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks for your reply.", "sentSegmented": ["thanks", "for", "your", "reply"], "sentSegmentedWithoutStops": ["thanks", "reply"], "sentSegmentedWithoutStopsStemmed": ["thank", "repli"]}, {"number": 3972, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It works fine if I compile and model1._make_train_function() before define the combined model.", "sentSegmented": ["it", "works", "fine", "if", "i", "compile", "and", "model1._make_train_function", "before", "define", "the", "combined", "model"], "sentSegmentedWithoutStops": ["works", "fine", "compile", "model1._make_train_function", "define", "combined", "model"], "sentSegmentedWithoutStopsStemmed": ["work", "fine", "compil", "model1._make_train_funct", "defin", "combin", "model"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOEOtqKA==", "hasNextPage": false}}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["weird", "thing", "when", "using", "functional", "api", "with", "batchnorm"], "titleSegmentedWithoutStops": ["weird", "thing", "using", "functional", "api", "batchnorm"], "titleSegmentedWithoutStopsStemmed": ["weird", "thing", "use", "function", "api", "batchnorm"], "bodyParsed": [{"number": 3937, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi, I'm trying to build a model with functional API.", "sentSegmented": ["hi", "i", "'m", "trying", "to", "build", "a", "model", "with", "functional", "api"], "sentSegmentedWithoutStops": ["hi", "'m", "trying", "build", "model", "functional", "api"], "sentSegmentedWithoutStopsStemmed": ["hi", "'m", "tri", "build", "model", "function", "api"]}, {"number": 3938, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But I got some error only when I use BatchNorm layer .", "sentSegmented": ["but", "i", "got", "some", "error", "only", "when", "i", "use", "batchnorm", "layer"], "sentSegmentedWithoutStops": ["got", "error", "use", "batchnorm", "layer"], "sentSegmentedWithoutStopsStemmed": ["got", "error", "use", "batchnorm", "layer"]}, {"number": 3939, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A toy example:", "sentSegmented": ["a", "toy", "example"], "sentSegmentedWithoutStops": ["toy", "example"], "sentSegmentedWithoutStopsStemmed": ["toy", "exampl"]}, {"number": 3940, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "import numpy as np", "sentSegmented": ["import", "numpy", "as", "np"], "sentSegmentedWithoutStops": ["numpy", "np"], "sentSegmentedWithoutStopsStemmed": ["numpi", "np"]}, {"number": 3941, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.layers import Input, BatchNormalization, Dense", "sentSegmented": ["from", "keras.layers", "import", "input", "batchnormalization", "dense"], "sentSegmentedWithoutStops": ["keras.layers", "input", "batchnormalization", "dense"], "sentSegmentedWithoutStopsStemmed": ["keras.lay", "input", "batchnorm", "dens"]}, {"number": 3942, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "from keras.models import Model", "sentSegmented": ["from", "keras.models", "import", "model"], "sentSegmentedWithoutStops": ["keras.models", "model"], "sentSegmentedWithoutStopsStemmed": ["keras.model", "model"]}, {"number": 3943, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "# model1:", "sentSegmented": ["model1"], "sentSegmentedWithoutStops": ["model1"], "sentSegmentedWithoutStopsStemmed": ["model1"]}, {"number": 3944, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "input1 = Input((10,))", "sentSegmented": ["input1", "input", "10"], "sentSegmentedWithoutStops": ["input1", "input", "10"], "sentSegmentedWithoutStopsStemmed": ["input1", "input", "10"]}, {"number": 3945, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "bn1 = BatchNormalization()(input1)", "sentSegmented": ["bn1", "batchnormalization", "input1"], "sentSegmentedWithoutStops": ["bn1", "batchnormalization", "input1"], "sentSegmentedWithoutStopsStemmed": ["bn1", "batchnorm", "input1"]}, {"number": 3946, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "out1 = Dense(2, activation='softmax')(bn1)", "sentSegmented": ["out1", "dense", "2", "activation='softmax", "bn1"], "sentSegmentedWithoutStops": ["out1", "dense", "2", "activation='softmax", "bn1"], "sentSegmentedWithoutStopsStemmed": ["out1", "dens", "2", "activation='softmax", "bn1"]}, {"number": 3947, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "model1 = Model(input1, out1)", "sentSegmented": ["model1", "model", "input1", "out1"], "sentSegmentedWithoutStops": ["model1", "model", "input1", "out1"], "sentSegmentedWithoutStopsStemmed": ["model1", "model", "input1", "out1"]}, {"number": 3948, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "# model2:", "sentSegmented": ["model2"], "sentSegmentedWithoutStops": ["model2"], "sentSegmentedWithoutStopsStemmed": ["model2"]}, {"number": 3949, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "input2 = Input((10,))", "sentSegmented": ["input2", "input", "10"], "sentSegmentedWithoutStops": ["input2", "input", "10"], "sentSegmentedWithoutStopsStemmed": ["input2", "input", "10"]}, {"number": 3950, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "out2 = Dense(10, activation='relu')(input2)", "sentSegmented": ["out2", "dense", "10", "activation='relu", "input2"], "sentSegmentedWithoutStops": ["out2", "dense", "10", "activation='relu", "input2"], "sentSegmentedWithoutStopsStemmed": ["out2", "dens", "10", "activation='relu", "input2"]}, {"number": 3951, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "model2 = Model(input2, out2)", "sentSegmented": ["model2", "model", "input2", "out2"], "sentSegmentedWithoutStops": ["model2", "model", "input2", "out2"], "sentSegmentedWithoutStopsStemmed": ["model2", "model", "input2", "out2"]}, {"number": 3952, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "# model3 is just a simple stack of model1 and model2:", "sentSegmented": ["model3", "is", "just", "a", "simple", "stack", "of", "model1", "and", "model2"], "sentSegmentedWithoutStops": ["model3", "simple", "stack", "model1", "model2"], "sentSegmentedWithoutStopsStemmed": ["model3", "simpl", "stack", "model1", "model2"]}, {"number": 3953, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "input3 = Input((10,))", "sentSegmented": ["input3", "input", "10"], "sentSegmentedWithoutStops": ["input3", "input", "10"], "sentSegmentedWithoutStopsStemmed": ["input3", "input", "10"]}, {"number": 3954, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "out3 = model1(model2(input3))", "sentSegmented": ["out3", "model1", "model2", "input3"], "sentSegmentedWithoutStops": ["out3", "model1", "model2", "input3"], "sentSegmentedWithoutStopsStemmed": ["out3", "model1", "model2", "input3"]}, {"number": 3955, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "model3 = Model(input3, out3)", "sentSegmented": ["model3", "model", "input3", "out3"], "sentSegmentedWithoutStops": ["model3", "model", "input3", "out3"], "sentSegmentedWithoutStopsStemmed": ["model3", "model", "input3", "out3"]}, {"number": 3956, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "# compile and train:", "sentSegmented": ["compile", "and", "train"], "sentSegmentedWithoutStops": ["compile", "train"], "sentSegmentedWithoutStopsStemmed": ["compil", "train"]}, {"number": 3957, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "model1.compile(loss='categorical_crossentropy',", "sentSegmented": ["model1.compile", "loss='categorical_crossentropy"], "sentSegmentedWithoutStops": ["model1.compile", "loss='categorical_crossentropy"], "sentSegmentedWithoutStopsStemmed": ["model1.compil", "loss='categorical_crossentropi"]}, {"number": 3958, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "               optimizer='adam',", "sentSegmented": ["optimizer='adam"], "sentSegmentedWithoutStops": ["optimizer='adam"], "sentSegmentedWithoutStopsStemmed": ["optimizer='adam"]}, {"number": 3959, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "               metrics=['accuracy'])", "sentSegmented": ["metrics=", "'accuracy"], "sentSegmentedWithoutStops": ["metrics=", "'accuracy"], "sentSegmentedWithoutStopsStemmed": ["metrics=", "'accuraci"]}, {"number": 3960, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "y = np.zeros((10, 2))", "sentSegmented": ["y", "np.zeros", "10", "2"], "sentSegmentedWithoutStops": ["np.zeros", "10", "2"], "sentSegmentedWithoutStopsStemmed": ["np.zero", "10", "2"]}, {"number": 3961, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "x = np.zeros((10, 10))", "sentSegmented": ["x", "np.zeros", "10", "10"], "sentSegmentedWithoutStops": ["x", "np.zeros", "10", "10"], "sentSegmentedWithoutStopsStemmed": ["x", "np.zero", "10", "10"]}, {"number": 3962, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "model1.train_on_batch(x, y)", "sentSegmented": ["model1.train_on_batch", "x", "y"], "sentSegmentedWithoutStops": ["model1.train_on_batch", "x"], "sentSegmentedWithoutStopsStemmed": ["model1.train_on_batch", "x"]}, {"number": 3963, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Then I get  InvalidArgumentError: You must feed a value for placeholder tensor 'input_3' with dtype float.", "sentSegmented": ["then", "i", "get", "invalidargumenterror", "you", "must", "feed", "a", "value", "for", "placeholder", "tensor", "'input_3", "with", "dtype", "float"], "sentSegmentedWithoutStops": ["get", "invalidargumenterror", "must", "feed", "value", "placeholder", "tensor", "'input_3", "dtype", "float"], "sentSegmentedWithoutStopsStemmed": ["get", "invalidargumenterror", "must", "feed", "valu", "placehold", "tensor", "'input_3", "dtype", "float"]}, {"number": 3964, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But model1 has nothing to do with input3 if I train it separately.", "sentSegmented": ["but", "model1", "has", "nothing", "to", "do", "with", "input3", "if", "i", "train", "it", "separately"], "sentSegmentedWithoutStops": ["model1", "nothing", "input3", "train", "separately"], "sentSegmentedWithoutStopsStemmed": ["model1", "noth", "input3", "train", "separ"]}, {"number": 3965, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The weird thing is that if I remove bn1 of model1 or change it to layers like Dense, this error will disappear.", "sentSegmented": ["the", "weird", "thing", "is", "that", "if", "i", "remove", "bn1", "of", "model1", "or", "change", "it", "to", "layers", "like", "dense", "this", "error", "will", "disappear"], "sentSegmentedWithoutStops": ["weird", "thing", "remove", "bn1", "model1", "change", "layers", "like", "dense", "error", "disappear"], "sentSegmentedWithoutStopsStemmed": ["weird", "thing", "remov", "bn1", "model1", "chang", "layer", "like", "dens", "error", "disappear"]}, {"number": 3966, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I use tensorflow backend and both tensorflow and keras are updated.", "sentSegmented": ["i", "use", "tensorflow", "backend", "and", "both", "tensorflow", "and", "keras", "are", "updated"], "sentSegmentedWithoutStops": ["use", "tensorflow", "backend", "tensorflow", "keras", "updated"], "sentSegmentedWithoutStopsStemmed": ["use", "tensorflow", "backend", "tensorflow", "kera", "updat"]}, {"number": 3967, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Do I use functional API in the wrong way or it is a potential bug?", "sentSegmented": ["do", "i", "use", "functional", "api", "in", "the", "wrong", "way", "or", "it", "is", "a", "potential", "bug"], "sentSegmentedWithoutStops": ["use", "functional", "api", "wrong", "way", "potential", "bug"], "sentSegmentedWithoutStopsStemmed": ["use", "function", "api", "wrong", "way", "potenti", "bug"]}]}