{"repository": {"owner": {"login": "pallets"}, "name": "flask", "forkCount": 14168, "stargazerCount": 54223, "createdAt": "2010-04-06T11:11:59Z", "updatedAt": "2021-03-17T10:09:52Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "python"}}}, {"node": {"topic": {"name": "flask"}}}, {"node": {"topic": {"name": "wsgi"}}}, {"node": {"topic": {"name": "web-framework"}}}, {"node": {"topic": {"name": "werkzeug"}}}, {"node": {"topic": {"name": "jinja"}}}, {"node": {"topic": {"name": "pallets"}}}]}, "languages": {"edges": [{"node": {"name": "Python"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Shell"}}]}, "primaryLanguage": {"name": "Python"}}, "id": "MDU6SXNzdWU2MDQ2MzE=", "number": 170, "author": {"login": "kwellman"}, "title": "jsonify doesn't accept a list", "body": "I was suprised to find that jsonify(['hello', 'world']) will raise a TypeError even though \n\n> [\n>     \"hello\",\n>     \"world\"\n> ]\n\nis valid json.\n\nI think there should be a check to see if the first argument is a list instance and just do a json dump of the first argument if it is or something like that.\n", "bodyHTML": "<p>I was suprised to find that jsonify(['hello', 'world']) will raise a TypeError even though</p>\n<blockquote>\n<p>[<br>\n\"hello\",<br>\n\"world\"<br>\n]</p>\n</blockquote>\n<p>is valid json.</p>\n<p>I think there should be a check to see if the first argument is a list instance and just do a json dump of the first argument if it is or something like that.</p>", "bodyText": "I was suprised to find that jsonify(['hello', 'world']) will raise a TypeError even though\n\n[\n\"hello\",\n\"world\"\n]\n\nis valid json.\nI think there should be a check to see if the first argument is a list instance and just do a json dump of the first argument if it is or something like that.", "assignees": {"edges": []}, "createdAt": "2011-02-16T20:30:58Z", "closed": true, "closedAt": "2011-02-16T20:33:09Z", "lastEditedAt": null, "publishedAt": "2011-02-16T20:30:58Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDc3OTUxNg==", "author": {"login": "mitsuhiko"}, "body": "It's there for security reasons: http://flask.pocoo.org/docs/security/#json-security\n", "bodyText": "It's there for security reasons: http://flask.pocoo.org/docs/security/#json-security", "bodyHTML": "<p>It's there for security reasons: <a rel=\"nofollow\" href=\"http://flask.pocoo.org/docs/security/#json-security\">http://flask.pocoo.org/docs/security/#json-security</a></p>", "createdAt": "2011-02-16T20:33:09Z", "publishedAt": "2011-02-16T20:33:09Z", "lastEditedAt": null, "updatedAt": "2011-02-16T20:33:09Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3611, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's there for security reasons: http://flask.pocoo.org/docs/security/#json-security", "sentSegmented": ["it", "'s", "there", "for", "security", "reasons", "http", "//flask.pocoo.org/docs/security/", "json-security"], "sentSegmentedWithoutStops": ["'s", "security", "reasons", "http", "//flask.pocoo.org/docs/security/", "json-security"], "sentSegmentedWithoutStopsStemmed": ["'s", "secur", "reason", "http", "//flask.pocoo.org/docs/security/", "json-secur"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3NjE5MDQ=", "author": {"login": "adamjernst"}, "body": "Can we have a way around this, perhaps a kwarg like `allow_lists`?\n\nI'm building a backend API with Flask and the data is public and unauthenticated, so I don't need to worry about security in this case. I respect Flask's decision to be secure by default, but it would be nice to have a way around it.\n", "bodyText": "Can we have a way around this, perhaps a kwarg like allow_lists?\nI'm building a backend API with Flask and the data is public and unauthenticated, so I don't need to worry about security in this case. I respect Flask's decision to be secure by default, but it would be nice to have a way around it.", "bodyHTML": "<p>Can we have a way around this, perhaps a kwarg like <code>allow_lists</code>?</p>\n<p>I'm building a backend API with Flask and the data is public and unauthenticated, so I don't need to worry about security in this case. I respect Flask's decision to be secure by default, but it would be nice to have a way around it.</p>", "createdAt": "2012-02-01T16:35:19Z", "publishedAt": "2012-02-01T16:35:19Z", "lastEditedAt": null, "updatedAt": "2012-02-01T16:35:19Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3612, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Can we have a way around this, perhaps a kwarg like allow_lists?", "sentSegmented": ["can", "we", "have", "a", "way", "around", "this", "perhaps", "a", "kwarg", "like", "allow_lists"], "sentSegmentedWithoutStops": ["way", "around", "perhaps", "kwarg", "like", "allow_lists"], "sentSegmentedWithoutStopsStemmed": ["way", "around", "perhap", "kwarg", "like", "allow_list"]}, {"number": 3613, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm building a backend API with Flask and the data is public and unauthenticated, so I don't need to worry about security in this case.", "sentSegmented": ["i", "'m", "building", "a", "backend", "api", "with", "flask", "and", "the", "data", "is", "public", "and", "unauthenticated", "so", "i", "do", "n't", "need", "to", "worry", "about", "security", "in", "this", "case"], "sentSegmentedWithoutStops": ["'m", "building", "backend", "api", "flask", "data", "public", "unauthenticated", "n't", "need", "worry", "security", "case"], "sentSegmentedWithoutStopsStemmed": ["'m", "build", "backend", "api", "flask", "data", "public", "unauthent", "n't", "need", "worri", "secur", "case"]}, {"number": 3614, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I respect Flask's decision to be secure by default, but it would be nice to have a way around it.", "sentSegmented": ["i", "respect", "flask", "'s", "decision", "to", "be", "secure", "by", "default", "but", "it", "would", "be", "nice", "to", "have", "a", "way", "around", "it"], "sentSegmentedWithoutStops": ["respect", "flask", "'s", "decision", "secure", "default", "would", "nice", "way", "around"], "sentSegmentedWithoutStopsStemmed": ["respect", "flask", "'s", "decis", "secur", "default", "would", "nice", "way", "around"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEyMDYyOTQ5", "author": {"login": "chrispaolini"}, "body": "I'm not sure what the point of the restriction is. Someone could easily just hit users/1 users/2 users/3 and such and get the JSON from each individually. All this does is stop jsonify from being useful for lists.\nIs there an alternative?\n", "bodyText": "I'm not sure what the point of the restriction is. Someone could easily just hit users/1 users/2 users/3 and such and get the JSON from each individually. All this does is stop jsonify from being useful for lists.\nIs there an alternative?", "bodyHTML": "<p>I'm not sure what the point of the restriction is. Someone could easily just hit users/1 users/2 users/3 and such and get the JSON from each individually. All this does is stop jsonify from being useful for lists.<br>\nIs there an alternative?</p>", "createdAt": "2013-01-09T19:44:01Z", "publishedAt": "2013-01-09T19:44:01Z", "lastEditedAt": null, "updatedAt": "2013-01-09T19:44:01Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3615, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm not sure what the point of the restriction is.", "sentSegmented": ["i", "'m", "not", "sure", "what", "the", "point", "of", "the", "restriction", "is"], "sentSegmentedWithoutStops": ["'m", "sure", "point", "restriction"], "sentSegmentedWithoutStopsStemmed": ["'m", "sure", "point", "restrict"]}, {"number": 3616, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Someone could easily just hit users/1 users/2 users/3 and such and get the JSON from each individually.", "sentSegmented": ["someone", "could", "easily", "just", "hit", "users/1", "users/2", "users/3", "and", "such", "and", "get", "the", "json", "from", "each", "individually"], "sentSegmentedWithoutStops": ["someone", "could", "easily", "hit", "users/1", "users/2", "users/3", "get", "json", "individually"], "sentSegmentedWithoutStopsStemmed": ["someon", "could", "easili", "hit", "users/1", "users/2", "users/3", "get", "json", "individu"]}, {"number": 3617, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "All this does is stop jsonify from being useful for lists.", "sentSegmented": ["all", "this", "does", "is", "stop", "jsonify", "from", "being", "useful", "for", "lists"], "sentSegmentedWithoutStops": ["stop", "jsonify", "useful", "lists"], "sentSegmentedWithoutStopsStemmed": ["stop", "jsonifi", "use", "list"]}, {"number": 3618, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is there an alternative?", "sentSegmented": ["is", "there", "an", "alternative"], "sentSegmentedWithoutStops": ["alternative"], "sentSegmentedWithoutStopsStemmed": ["altern"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEyMDY2MzI1", "author": {"login": "apiguy"}, "body": "Top level arrays are generally considered unsafe in json responses. Armin wrote an article about it once I believe: http://flask.pocoo.org/docs/security/#json-security\n\nIt's really not difficult to just do `jsonify(results=my_list)` and then in your javascript access it using `data.results` (or whatever your client language is)\n", "bodyText": "Top level arrays are generally considered unsafe in json responses. Armin wrote an article about it once I believe: http://flask.pocoo.org/docs/security/#json-security\nIt's really not difficult to just do jsonify(results=my_list) and then in your javascript access it using data.results (or whatever your client language is)", "bodyHTML": "<p>Top level arrays are generally considered unsafe in json responses. Armin wrote an article about it once I believe: <a rel=\"nofollow\" href=\"http://flask.pocoo.org/docs/security/#json-security\">http://flask.pocoo.org/docs/security/#json-security</a></p>\n<p>It's really not difficult to just do <code>jsonify(results=my_list)</code> and then in your javascript access it using <code>data.results</code> (or whatever your client language is)</p>", "createdAt": "2013-01-09T20:59:46Z", "publishedAt": "2013-01-09T20:59:46Z", "lastEditedAt": null, "updatedAt": "2013-01-09T20:59:46Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3619, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Top level arrays are generally considered unsafe in json responses.", "sentSegmented": ["top", "level", "arrays", "are", "generally", "considered", "unsafe", "in", "json", "responses"], "sentSegmentedWithoutStops": ["top", "level", "arrays", "generally", "considered", "unsafe", "json", "responses"], "sentSegmentedWithoutStopsStemmed": ["top", "level", "array", "gener", "consid", "unsaf", "json", "respons"]}, {"number": 3620, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Armin wrote an article about it once I believe: http://flask.pocoo.org/docs/security/#json-security", "sentSegmented": ["armin", "wrote", "an", "article", "about", "it", "once", "i", "believe", "http", "//flask.pocoo.org/docs/security/", "json-security"], "sentSegmentedWithoutStops": ["armin", "wrote", "article", "believe", "http", "//flask.pocoo.org/docs/security/", "json-security"], "sentSegmentedWithoutStopsStemmed": ["armin", "wrote", "articl", "believ", "http", "//flask.pocoo.org/docs/security/", "json-secur"]}, {"number": 3621, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's really not difficult to just do jsonify(results=my_list) and then in your javascript access it using data.results (or whatever your client language is)", "sentSegmented": ["it", "'s", "really", "not", "difficult", "to", "just", "do", "jsonify", "results=my_list", "and", "then", "in", "your", "javascript", "access", "it", "using", "data.results", "or", "whatever", "your", "client", "language", "is"], "sentSegmentedWithoutStops": ["'s", "really", "difficult", "jsonify", "results=my_list", "javascript", "access", "using", "data.results", "whatever", "client", "language"], "sentSegmentedWithoutStopsStemmed": ["'s", "realli", "difficult", "jsonifi", "results=my_list", "javascript", "access", "use", "data.result", "whatev", "client", "languag"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEyMDY2NDc1", "author": {"login": "sigmavirus24"}, "body": "If you're insistent on doing this, make your own response object, import the json module, dump your list as a string and fill the response object accordingly.\n", "bodyText": "If you're insistent on doing this, make your own response object, import the json module, dump your list as a string and fill the response object accordingly.", "bodyHTML": "<p>If you're insistent on doing this, make your own response object, import the json module, dump your list as a string and fill the response object accordingly.</p>", "createdAt": "2013-01-09T21:03:15Z", "publishedAt": "2013-01-09T21:03:15Z", "lastEditedAt": null, "updatedAt": "2013-01-09T21:03:15Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3622, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you're insistent on doing this, make your own response object, import the json module, dump your list as a string and fill the response object accordingly.", "sentSegmented": ["if", "you", "'re", "insistent", "on", "doing", "this", "make", "your", "own", "response", "object", "import", "the", "json", "module", "dump", "your", "list", "as", "a", "string", "and", "fill", "the", "response", "object", "accordingly"], "sentSegmentedWithoutStops": ["'re", "insistent", "make", "response", "object", "import", "json", "module", "dump", "list", "string", "fill", "response", "object", "accordingly"], "sentSegmentedWithoutStopsStemmed": ["'re", "insist", "make", "respons", "object", "import", "json", "modul", "dump", "list", "string", "fill", "respons", "object", "accordingli"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEyMDY2ODE0", "author": {"login": "chrispaolini"}, "body": "I see. So just top-level have the issues. Fair enough. Thanks for the post apiguy\n", "bodyText": "I see. So just top-level have the issues. Fair enough. Thanks for the post apiguy", "bodyHTML": "<p>I see. So just top-level have the issues. Fair enough. Thanks for the post apiguy</p>", "createdAt": "2013-01-09T21:10:50Z", "publishedAt": "2013-01-09T21:10:50Z", "lastEditedAt": null, "updatedAt": "2013-01-09T21:10:50Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3623, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I see.", "sentSegmented": ["i", "see"], "sentSegmentedWithoutStops": ["see"], "sentSegmentedWithoutStopsStemmed": ["see"]}, {"number": 3624, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So just top-level have the issues.", "sentSegmented": ["so", "just", "top-level", "have", "the", "issues"], "sentSegmentedWithoutStops": ["top-level", "issues"], "sentSegmentedWithoutStopsStemmed": ["top-level", "issu"]}, {"number": 3625, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Fair enough.", "sentSegmented": ["fair", "enough"], "sentSegmentedWithoutStops": ["fair", "enough"], "sentSegmentedWithoutStopsStemmed": ["fair", "enough"]}, {"number": 3626, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks for the post apiguy", "sentSegmented": ["thanks", "for", "the", "post", "apiguy"], "sentSegmentedWithoutStops": ["thanks", "post", "apiguy"], "sentSegmentedWithoutStopsStemmed": ["thank", "post", "apiguy"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU5NjY4NzY0", "author": {"login": "untitaker"}, "body": "Please continue discussion at #248 \n", "bodyText": "Please continue discussion at #248", "bodyHTML": "<p>Please continue discussion at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1083403\" data-permission-text=\"Title is private\" data-url=\"https://github.com/pallets/flask/issues/248\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pallets/flask/issues/248/hovercard\" href=\"https://github.com/pallets/flask/issues/248\">#248</a></p>", "createdAt": "2014-10-19T22:37:57Z", "publishedAt": "2014-10-19T22:37:57Z", "lastEditedAt": null, "updatedAt": "2014-10-19T22:37:57Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3627, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please continue discussion at #248", "sentSegmented": ["please", "continue", "discussion", "at", "248"], "sentSegmentedWithoutStops": ["please", "continue", "discussion", "248"], "sentSegmentedWithoutStopsStemmed": ["pleas", "continu", "discuss", "248"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOA455HA==", "hasNextPage": false}, "totalCount": 7}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["jsonify", "does", "n't", "accept", "a", "list"], "titleSegmentedWithoutStops": ["jsonify", "n't", "accept", "list"], "titleSegmentedWithoutStopsStemmed": ["jsonifi", "n't", "accept", "list"], "bodyParsed": [{"number": 3604, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I was suprised to find that jsonify(['hello', 'world']) will raise a TypeError even though", "sentSegmented": ["i", "was", "suprised", "to", "find", "that", "jsonify", "'hello", "'world", "will", "raise", "a", "typeerror", "even", "though"], "sentSegmentedWithoutStops": ["suprised", "find", "jsonify", "'hello", "'world", "raise", "typeerror", "even", "though"], "sentSegmentedWithoutStopsStemmed": ["supris", "find", "jsonifi", "'hello", "'world", "rais", "typeerror", "even", "though"]}, {"number": 3605, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "[", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 3606, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "\"hello\",", "sentSegmented": ["hello"], "sentSegmentedWithoutStops": ["hello"], "sentSegmentedWithoutStopsStemmed": ["hello"]}, {"number": 3607, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "\"world\"", "sentSegmented": ["world"], "sentSegmentedWithoutStops": ["world"], "sentSegmentedWithoutStopsStemmed": ["world"]}, {"number": 3608, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "]", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 3609, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "is valid json.", "sentSegmented": ["is", "valid", "json"], "sentSegmentedWithoutStops": ["valid", "json"], "sentSegmentedWithoutStopsStemmed": ["valid", "json"]}, {"number": 3610, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think there should be a check to see if the first argument is a list instance and just do a json dump of the first argument if it is or something like that.", "sentSegmented": ["i", "think", "there", "should", "be", "a", "check", "to", "see", "if", "the", "first", "argument", "is", "a", "list", "instance", "and", "just", "do", "a", "json", "dump", "of", "the", "first", "argument", "if", "it", "is", "or", "something", "like", "that"], "sentSegmentedWithoutStops": ["think", "check", "see", "first", "argument", "list", "instance", "json", "dump", "first", "argument", "something", "like"], "sentSegmentedWithoutStopsStemmed": ["think", "check", "see", "first", "argument", "list", "instanc", "json", "dump", "first", "argument", "someth", "like"]}]}