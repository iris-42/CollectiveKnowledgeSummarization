{"repository": {"owner": {"login": "vuejs"}, "name": "vue", "forkCount": 28377, "stargazerCount": 180385, "createdAt": "2013-07-29T03:24:51Z", "updatedAt": "2021-03-09T07:03:52Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "vue"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "frontend"}}}, {"node": {"topic": {"name": "framework"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "Shell"}}, {"node": {"name": "CSS"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "Vue"}}]}, "primaryLanguage": {"name": "JavaScript"}}, "id": "MDU6SXNzdWUzMzE1ODcxNjU=", "number": 8342, "author": {"login": "JosephSilber"}, "title": "Content in default slot causes component to re-render when the parent re-renders", "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/JosephSilber/pen/KeWjzr](https://codepen.io/JosephSilber/pen/KeWjzr)\r\n\r\n### Description\r\n\r\nPassing content in a slot causes the component to re-render when the parent re-renders, even if the component's data hasn't changed.\r\n\r\n### Steps to reproduce\r\n1. Create a simple component that shows the amount of times it's been rendered:\r\n\r\n    ```js\r\n    Vue.component('times-rendered', {\r\n        created() {\r\n          this.timesRendered = 0\r\n        },\r\n        render(h) {        \r\n          return h('div', `Times rendered: ${++this.timesRendered}`)\r\n        }\r\n    });\r\n    ```\r\n\r\n2. Use this component twice. Once with content in the default slot, once without. After the component is mounted, trigger any update to its data:\r\n\r\n    ```html\r\n    <template>\r\n        <div>\r\n          <div>{{ updateTrigger }}</div>\r\n          <times-rendered></times-rendered>\r\n          <times-rendered>\r\n            Any content in the default slot causes a re-render. Why?\r\n          </times-rendered>\r\n        </div>\r\n    </template>\r\n\r\n    <script>\r\n    export default {\r\n        data: () => ({ updateTrigger: false }),\r\n        \r\n        async mounted() {\r\n          await this.$nextTick()\r\n          \r\n          this.updateTrigger = true\r\n        },\r\n    };\r\n    </script>\r\n    ```\r\n\r\n### What is expected?\r\nI would expect each instance of the component to only render once.\r\n\r\n### What is actually happening?\r\nThe component with content in the slot renders twice.\r\n\r\n---\r\nI'm not actually sure whether this is a bug or a feature request. Maybe this is expected behavior currently. If it is, then I guess this would be better classified as a feature request.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->", "bodyHTML": "<h3>Version</h3>\n<p>2.5.16</p>\n<h3>Reproduction link</h3>\n<p><a rel=\"nofollow\" href=\"https://codepen.io/JosephSilber/pen/KeWjzr\">https://codepen.io/JosephSilber/pen/KeWjzr</a></p>\n<h3>Description</h3>\n<p>Passing content in a slot causes the component to re-render when the parent re-renders, even if the component's data hasn't changed.</p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>\n<p>Create a simple component that shows the amount of times it's been rendered:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-v\">Vue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">component</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'times-rendered'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">created</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">timesRendered</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">h</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>        \n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'div'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">`Times rendered: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-c1\">++</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">timesRendered</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n</li>\n<li>\n<p>Use this component twice. Once with content in the default slot, once without. After the component is mounted, trigger any update to its data:</p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">template</span><span class=\"pl-kos\">&gt;</span>\n    <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n      <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>{{ updateTrigger }}<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n      <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">times-rendered</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">times-rendered</span><span class=\"pl-kos\">&gt;</span>\n      <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">times-rendered</span><span class=\"pl-kos\">&gt;</span>\n        Any content in the default slot causes a re-render. Why?\n      <span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">times-rendered</span><span class=\"pl-kos\">&gt;</span>\n    <span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">template</span><span class=\"pl-kos\">&gt;</span>\n\n<span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">script</span><span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">data</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">updateTrigger</span>: <span class=\"pl-c1\">false</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    \n    <span class=\"pl-k\">async</span> <span class=\"pl-en\">mounted</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">$nextTick</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      \n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">updateTrigger</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">script</span><span class=\"pl-kos\">&gt;</span></pre></div>\n</li>\n</ol>\n<h3>What is expected?</h3>\n<p>I would expect each instance of the component to only render once.</p>\n<h3>What is actually happening?</h3>\n<p>The component with content in the slot renders twice.</p>\n<hr>\n<p>I'm not actually sure whether this is a bug or a feature request. Maybe this is expected behavior currently. If it is, then I guess this would be better classified as a feature request.</p>\n", "bodyText": "Version\n2.5.16\nReproduction link\nhttps://codepen.io/JosephSilber/pen/KeWjzr\nDescription\nPassing content in a slot causes the component to re-render when the parent re-renders, even if the component's data hasn't changed.\nSteps to reproduce\n\n\nCreate a simple component that shows the amount of times it's been rendered:\nVue.component('times-rendered', {\n    created() {\n      this.timesRendered = 0\n    },\n    render(h) {        \n      return h('div', `Times rendered: ${++this.timesRendered}`)\n    }\n});\n\n\nUse this component twice. Once with content in the default slot, once without. After the component is mounted, trigger any update to its data:\n<template>\n    <div>\n      <div>{{ updateTrigger }}</div>\n      <times-rendered></times-rendered>\n      <times-rendered>\n        Any content in the default slot causes a re-render. Why?\n      </times-rendered>\n    </div>\n</template>\n\n<script>\nexport default {\n    data: () => ({ updateTrigger: false }),\n    \n    async mounted() {\n      await this.$nextTick()\n      \n      this.updateTrigger = true\n    },\n};\n</script>\n\n\nWhat is expected?\nI would expect each instance of the component to only render once.\nWhat is actually happening?\nThe component with content in the slot renders twice.\n\nI'm not actually sure whether this is a bug or a feature request. Maybe this is expected behavior currently. If it is, then I guess this would be better classified as a feature request.", "assignees": {"edges": []}, "createdAt": "2018-06-12T13:26:55Z", "closed": true, "closedAt": "2018-06-13T20:52:46Z", "lastEditedAt": "2018-06-12T13:29:43Z", "publishedAt": "2018-06-12T13:26:55Z", "comments": {"totalCount": 2, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDM5NjU5MzYxNw==", "author": {"login": "jacekkarczmarczyk"}, "body": "Duplicate of https://github.com/vuejs/vue/issues/6351?", "bodyText": "Duplicate of #6351?", "bodyHTML": "<p>Duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"249706531\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuejs/vue/issues/6351\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuejs/vue/issues/6351/hovercard\" href=\"https://github.com/vuejs/vue/issues/6351\">#6351</a>?</p>", "createdAt": "2018-06-12T13:42:59Z", "publishedAt": "2018-06-12T13:42:59Z", "lastEditedAt": null, "updatedAt": "2018-06-12T13:42:59Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-06-13T20:52:49Z"}}]}, "bodyParsed": [{"number": 4893, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Duplicate of #6351?", "sentSegmented": ["duplicate", "of", "6351"], "sentSegmentedWithoutStops": ["duplicate", "6351"], "sentSegmentedWithoutStopsStemmed": ["duplic", "6351"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM5NzA4Mjg3NA==", "author": {"login": "posva"}, "body": "The rerender happens because the whole template renders again because of `updateTrigger`\r\nLet's mark this as a duplicate of #6351 ", "bodyText": "The rerender happens because the whole template renders again because of updateTrigger\nLet's mark this as a duplicate of #6351", "bodyHTML": "<p>The rerender happens because the whole template renders again because of <code>updateTrigger</code><br>\nLet's mark this as a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"249706531\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuejs/vue/issues/6351\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuejs/vue/issues/6351/hovercard\" href=\"https://github.com/vuejs/vue/issues/6351\">#6351</a></p>", "createdAt": "2018-06-13T20:52:46Z", "publishedAt": "2018-06-13T20:52:46Z", "lastEditedAt": null, "updatedAt": "2018-06-13T20:52:46Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 4894, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The rerender happens because the whole template renders again because of updateTrigger", "sentSegmented": ["the", "rerender", "happens", "because", "the", "whole", "template", "renders", "again", "because", "of", "updatetrigger"], "sentSegmentedWithoutStops": ["rerender", "happens", "whole", "template", "renders", "updatetrigger"], "sentSegmentedWithoutStopsStemmed": ["rerend", "happen", "whole", "templat", "render", "updatetrigg"]}, {"number": 4895, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Let's mark this as a duplicate of #6351", "sentSegmented": ["let", "'s", "mark", "this", "as", "a", "duplicate", "of", "6351"], "sentSegmentedWithoutStops": ["let", "'s", "mark", "duplicate", "6351"], "sentSegmentedWithoutStopsStemmed": ["let", "'s", "mark", "duplic", "6351"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOF6sA-g==", "hasNextPage": false}}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["content", "in", "default", "slot", "causes", "component", "to", "re-render", "when", "the", "parent", "re-renders"], "titleSegmentedWithoutStops": ["content", "default", "slot", "causes", "component", "re-render", "parent", "re-renders"], "titleSegmentedWithoutStopsStemmed": ["content", "default", "slot", "caus", "compon", "re-rend", "parent", "re-rend"], "bodyParsed": [{"number": 4848, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Version", "sentSegmented": ["version"], "sentSegmentedWithoutStops": ["version"], "sentSegmentedWithoutStopsStemmed": ["version"]}, {"number": 4849, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "2.5.16", "sentSegmented": ["2.5.16"], "sentSegmentedWithoutStops": ["2.5.16"], "sentSegmentedWithoutStopsStemmed": ["2.5.16"]}, {"number": 4850, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Reproduction link", "sentSegmented": ["reproduction", "link"], "sentSegmentedWithoutStops": ["reproduction", "link"], "sentSegmentedWithoutStopsStemmed": ["reproduct", "link"]}, {"number": 4851, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "https://codepen.io/JosephSilber/pen/KeWjzr", "sentSegmented": ["https", "//codepen.io/josephsilber/pen/kewjzr"], "sentSegmentedWithoutStops": ["https", "//codepen.io/josephsilber/pen/kewjzr"], "sentSegmentedWithoutStopsStemmed": ["http", "//codepen.io/josephsilber/pen/kewjzr"]}, {"number": 4852, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Description", "sentSegmented": ["description"], "sentSegmentedWithoutStops": ["description"], "sentSegmentedWithoutStopsStemmed": ["descript"]}, {"number": 4853, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Passing content in a slot causes the component to re-render when the parent re-renders, even if the component's data hasn't changed.", "sentSegmented": ["passing", "content", "in", "a", "slot", "causes", "the", "component", "to", "re-render", "when", "the", "parent", "re-renders", "even", "if", "the", "component", "'s", "data", "has", "n't", "changed"], "sentSegmentedWithoutStops": ["passing", "content", "slot", "causes", "component", "re-render", "parent", "re-renders", "even", "component", "'s", "data", "n't", "changed"], "sentSegmentedWithoutStopsStemmed": ["pass", "content", "slot", "caus", "compon", "re-rend", "parent", "re-rend", "even", "compon", "'s", "data", "n't", "chang"]}, {"number": 4854, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Steps to reproduce", "sentSegmented": ["steps", "to", "reproduce"], "sentSegmentedWithoutStops": ["steps", "reproduce"], "sentSegmentedWithoutStopsStemmed": ["step", "reproduc"]}, {"number": 4855, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Create a simple component that shows the amount of times it's been rendered:", "sentSegmented": ["create", "a", "simple", "component", "that", "shows", "the", "amount", "of", "times", "it", "'s", "been", "rendered"], "sentSegmentedWithoutStops": ["create", "simple", "component", "shows", "amount", "times", "'s", "rendered"], "sentSegmentedWithoutStopsStemmed": ["creat", "simpl", "compon", "show", "amount", "time", "'s", "render"]}, {"number": 4856, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Vue.component('times-rendered', {", "sentSegmented": ["vue.component", "'times-rendered"], "sentSegmentedWithoutStops": ["vue.component", "'times-rendered"], "sentSegmentedWithoutStopsStemmed": ["vue.compon", "'times-rend"]}, {"number": 4857, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    created() {", "sentSegmented": ["created"], "sentSegmentedWithoutStops": ["created"], "sentSegmentedWithoutStopsStemmed": ["creat"]}, {"number": 4858, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      this.timesRendered = 0", "sentSegmented": ["this.timesrendered", "0"], "sentSegmentedWithoutStops": ["this.timesrendered", "0"], "sentSegmentedWithoutStopsStemmed": ["this.timesrend", "0"]}, {"number": 4859, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    },", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 4860, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    render(h) {", "sentSegmented": ["render", "h"], "sentSegmentedWithoutStops": ["render", "h"], "sentSegmentedWithoutStopsStemmed": ["render", "h"]}, {"number": 4861, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      return h('div', `Times rendered: ${++this.timesRendered}`)", "sentSegmented": ["return", "h", "'div", "times", "rendered", "++this.timesrendered"], "sentSegmentedWithoutStops": ["return", "h", "'div", "times", "rendered", "++this.timesrendered"], "sentSegmentedWithoutStopsStemmed": ["return", "h", "'div", "time", "render", "++this.timesrend"]}, {"number": 4862, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 4863, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "});", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 4864, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Use this component twice.", "sentSegmented": ["use", "this", "component", "twice"], "sentSegmentedWithoutStops": ["use", "component", "twice"], "sentSegmentedWithoutStopsStemmed": ["use", "compon", "twice"]}, {"number": 4865, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Once with content in the default slot, once without.", "sentSegmented": ["once", "with", "content", "in", "the", "default", "slot", "once", "without"], "sentSegmentedWithoutStops": ["content", "default", "slot", "without"], "sentSegmentedWithoutStopsStemmed": ["content", "default", "slot", "without"]}, {"number": 4866, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "After the component is mounted, trigger any update to its data:", "sentSegmented": ["after", "the", "component", "is", "mounted", "trigger", "any", "update", "to", "its", "data"], "sentSegmentedWithoutStops": ["component", "mounted", "trigger", "update", "data"], "sentSegmentedWithoutStopsStemmed": ["compon", "mount", "trigger", "updat", "data"]}, {"number": 4867, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<template>", "sentSegmented": ["template"], "sentSegmentedWithoutStops": ["template"], "sentSegmentedWithoutStopsStemmed": ["templat"]}, {"number": 4868, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    <div>", "sentSegmented": ["div"], "sentSegmentedWithoutStops": ["div"], "sentSegmentedWithoutStopsStemmed": ["div"]}, {"number": 4869, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      <div>{{ updateTrigger }}div>", "sentSegmented": ["div", "updatetrigger", "div"], "sentSegmentedWithoutStops": ["div", "updatetrigger", "div"], "sentSegmentedWithoutStopsStemmed": ["div", "updatetrigg", "div"]}, {"number": 4870, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      <times-rendered>times-rendered>", "sentSegmented": ["times-rendered", "times-rendered"], "sentSegmentedWithoutStops": ["times-rendered", "times-rendered"], "sentSegmentedWithoutStopsStemmed": ["times-rend", "times-rend"]}, {"number": 4871, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      <times-rendered>", "sentSegmented": ["times-rendered"], "sentSegmentedWithoutStops": ["times-rendered"], "sentSegmentedWithoutStopsStemmed": ["times-rend"]}, {"number": 4872, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        Any content in the default slot causes a re-render.", "sentSegmented": ["any", "content", "in", "the", "default", "slot", "causes", "a", "re-render"], "sentSegmentedWithoutStops": ["content", "default", "slot", "causes", "re-render"], "sentSegmentedWithoutStopsStemmed": ["content", "default", "slot", "caus", "re-rend"]}, {"number": 4873, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Why?", "sentSegmented": ["why"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 4874, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      times-rendered>", "sentSegmented": ["times-rendered"], "sentSegmentedWithoutStops": ["times-rendered"], "sentSegmentedWithoutStopsStemmed": ["times-rend"]}, {"number": 4875, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    div>", "sentSegmented": ["div"], "sentSegmentedWithoutStops": ["div"], "sentSegmentedWithoutStopsStemmed": ["div"]}, {"number": 4876, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "template>", "sentSegmented": ["template"], "sentSegmentedWithoutStops": ["template"], "sentSegmentedWithoutStopsStemmed": ["templat"]}, {"number": 4877, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<script>", "sentSegmented": ["script"], "sentSegmentedWithoutStops": ["script"], "sentSegmentedWithoutStopsStemmed": ["script"]}, {"number": 4878, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "export default {", "sentSegmented": ["export", "default"], "sentSegmentedWithoutStops": ["export", "default"], "sentSegmentedWithoutStopsStemmed": ["export", "default"]}, {"number": 4879, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    data: () => ({ updateTrigger: false }),", "sentSegmented": ["data", "updatetrigger", "false"], "sentSegmentedWithoutStops": ["data", "updatetrigger", "false"], "sentSegmentedWithoutStopsStemmed": ["data", "updatetrigg", "fals"]}, {"number": 4880, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    async mounted() {", "sentSegmented": ["async", "mounted"], "sentSegmentedWithoutStops": ["async", "mounted"], "sentSegmentedWithoutStopsStemmed": ["async", "mount"]}, {"number": 4881, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      await this.$nextTick()", "sentSegmented": ["await", "this.", "nexttick"], "sentSegmentedWithoutStops": ["await", "this.", "nexttick"], "sentSegmentedWithoutStopsStemmed": ["await", "this.", "nexttick"]}, {"number": 4882, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      this.updateTrigger = true", "sentSegmented": ["this.updatetrigger", "true"], "sentSegmentedWithoutStops": ["this.updatetrigger", "true"], "sentSegmentedWithoutStopsStemmed": ["this.updatetrigg", "true"]}, {"number": 4883, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    },", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 4884, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "};", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 4885, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "script>", "sentSegmented": ["script"], "sentSegmentedWithoutStops": ["script"], "sentSegmentedWithoutStopsStemmed": ["script"]}, {"number": 4886, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What is expected?", "sentSegmented": ["what", "is", "expected"], "sentSegmentedWithoutStops": ["expected"], "sentSegmentedWithoutStopsStemmed": ["expect"]}, {"number": 4887, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I would expect each instance of the component to only render once.", "sentSegmented": ["i", "would", "expect", "each", "instance", "of", "the", "component", "to", "only", "render", "once"], "sentSegmentedWithoutStops": ["would", "expect", "instance", "component", "render"], "sentSegmentedWithoutStopsStemmed": ["would", "expect", "instanc", "compon", "render"]}, {"number": 4888, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What is actually happening?", "sentSegmented": ["what", "is", "actually", "happening"], "sentSegmentedWithoutStops": ["actually", "happening"], "sentSegmentedWithoutStopsStemmed": ["actual", "happen"]}, {"number": 4889, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The component with content in the slot renders twice.", "sentSegmented": ["the", "component", "with", "content", "in", "the", "slot", "renders", "twice"], "sentSegmentedWithoutStops": ["component", "content", "slot", "renders", "twice"], "sentSegmentedWithoutStopsStemmed": ["compon", "content", "slot", "render", "twice"]}, {"number": 4890, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm not actually sure whether this is a bug or a feature request.", "sentSegmented": ["i", "'m", "not", "actually", "sure", "whether", "this", "is", "a", "bug", "or", "a", "feature", "request"], "sentSegmentedWithoutStops": ["'m", "actually", "sure", "whether", "bug", "feature", "request"], "sentSegmentedWithoutStopsStemmed": ["'m", "actual", "sure", "whether", "bug", "featur", "request"]}, {"number": 4891, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Maybe this is expected behavior currently.", "sentSegmented": ["maybe", "this", "is", "expected", "behavior", "currently"], "sentSegmentedWithoutStops": ["maybe", "expected", "behavior", "currently"], "sentSegmentedWithoutStopsStemmed": ["mayb", "expect", "behavior", "current"]}, {"number": 4892, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If it is, then I guess this would be better classified as a feature request.", "sentSegmented": ["if", "it", "is", "then", "i", "guess", "this", "would", "be", "better", "classified", "as", "a", "feature", "request"], "sentSegmentedWithoutStops": ["guess", "would", "better", "classified", "feature", "request"], "sentSegmentedWithoutStopsStemmed": ["guess", "would", "better", "classifi", "featur", "request"]}]}