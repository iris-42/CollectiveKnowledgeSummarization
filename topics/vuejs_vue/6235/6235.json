{"repository": {"owner": {"login": "vuejs"}, "name": "vue", "forkCount": 28402, "stargazerCount": 180532, "createdAt": "2013-07-29T03:24:51Z", "updatedAt": "2021-03-12T08:12:57Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "vue"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "frontend"}}}, {"node": {"topic": {"name": "framework"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "Shell"}}, {"node": {"name": "CSS"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "Vue"}}]}, "primaryLanguage": {"name": "JavaScript"}}, "id": "MDU6SXNzdWUyNDU5OTg4NzA=", "number": 6235, "author": {"login": "vvpvvp"}, "title": "v-for : add a prop 'uniqueKey' to generates a unique key automatically", "body": "### What problem does this feature solve?\r\nIn our business system, there is so many :key object used.\r\nWe did so many data operate, we have to use it.\r\nAnd now, object key is not advocated, and I'm wondering if there is some prop can do it automatically.\r\nIt's will be helpful.\r\n\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<div v-for=\"item of list\" :unique-key=\"true\"></div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->", "bodyHTML": "<h3>What problem does this feature solve?</h3>\n<p>In our business system, there is so many :key object used.<br>\nWe did so many data operate, we have to use it.<br>\nAnd now, object key is not advocated, and I'm wondering if there is some prop can do it automatically.<br>\nIt's will be helpful.</p>\n<h3>What does the proposed API look like?</h3>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span> <span class=\"pl-c1\">v-for</span>=\"<span class=\"pl-s\">item of list</span>\" <span class=\"pl-c1\">:unique-key</span>=\"<span class=\"pl-s\">true</span>\"<span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span></pre></div>\n", "bodyText": "What problem does this feature solve?\nIn our business system, there is so many :key object used.\nWe did so many data operate, we have to use it.\nAnd now, object key is not advocated, and I'm wondering if there is some prop can do it automatically.\nIt's will be helpful.\nWhat does the proposed API look like?\n<div v-for=\"item of list\" :unique-key=\"true\"></div>", "assignees": {"edges": []}, "createdAt": "2017-07-27T10:40:30Z", "closed": true, "closedAt": "2017-07-27T10:47:27Z", "lastEditedAt": "2017-07-28T09:00:44Z", "publishedAt": "2017-07-27T10:40:30Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODMyNzQ3Ng==", "author": {"login": "posva"}, "body": "You can use the `index` for this (this is if you don't care about Vue reusing the elements or components). Keep in mind `key` is not always required\r\n\r\n```vue\r\n<div v-for=\"(item, index) in items\" :key=\"index\">\r\n  <!-- content -->\r\n</div>\r\n```\r\nmore at https://vuejs.org/v2/guide/list.html#key", "bodyText": "You can use the index for this (this is if you don't care about Vue reusing the elements or components). Keep in mind key is not always required\n<div v-for=\"(item, index) in items\" :key=\"index\">\n  <!-- content -->\n</div>\nmore at https://vuejs.org/v2/guide/list.html#key", "bodyHTML": "<p>You can use the <code>index</code> for this (this is if you don't care about Vue reusing the elements or components). Keep in mind <code>key</code> is not always required</p>\n<div class=\"highlight highlight-text-html-vue\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">v-for</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>(item, index) <span class=\"pl-k\">in</span> items<span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">key</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>&gt;\n  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> content <span class=\"pl-c\">--&gt;</span></span>\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<p>more at <a rel=\"nofollow\" href=\"https://vuejs.org/v2/guide/list.html#key\">https://vuejs.org/v2/guide/list.html#key</a></p>", "createdAt": "2017-07-27T10:47:27Z", "publishedAt": "2017-07-27T10:47:27Z", "lastEditedAt": "2018-12-20T20:41:48Z", "updatedAt": "2018-12-20T20:41:48Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-03-05T03:19:37Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-03-14T11:39:52Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-01T12:16:16Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-09T20:36:58Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-04-12T13:34:26Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-13T09:16:52Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-04-21T07:18:12Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-04-27T13:27:15Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-04-30T14:52:58Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-05-10T10:52:37Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-05-16T12:39:14Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-05-24T02:42:54Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-05-24T07:42:32Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-05-25T09:32:08Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-05-29T15:02:12Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-06-03T02:37:20Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-06-07T02:08:46Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-06-07T04:22:44Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-06-09T23:47:42Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2018-06-12T16:05:28Z"}}]}, "bodyParsed": [{"number": 7555, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You can use the index for this (this is if you don't care about Vue reusing the elements or components).", "sentSegmented": ["you", "can", "use", "the", "index", "for", "this", "this", "is", "if", "you", "do", "n't", "care", "about", "vue", "reusing", "the", "elements", "or", "components"], "sentSegmentedWithoutStops": ["use", "index", "n't", "care", "vue", "reusing", "elements", "components"], "sentSegmentedWithoutStopsStemmed": ["use", "index", "n't", "care", "vue", "reus", "element", "compon"]}, {"number": 7556, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Keep in mind key is not always required", "sentSegmented": ["keep", "in", "mind", "key", "is", "not", "always", "required"], "sentSegmentedWithoutStops": ["keep", "mind", "key", "always", "required"], "sentSegmentedWithoutStopsStemmed": ["keep", "mind", "key", "alway", "requir"]}, {"number": 7557, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<div v-for=\"(item, index) in items\" :key=\"index\">", "sentSegmented": ["div", "v-for=", "item", "index", "in", "items", "key=", "index"], "sentSegmentedWithoutStops": ["v-for=", "item", "index", "items", "key=", "index"], "sentSegmentedWithoutStopsStemmed": ["v-for=", "item", "index", "item", "key=", "index"]}, {"number": 7558, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "div>", "sentSegmented": ["div"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7559, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "more at https://vuejs.org/v2/guide/list.html#key", "sentSegmented": ["more", "at", "https", "//vuejs.org/v2/guide/list.html", "key"], "sentSegmentedWithoutStops": ["https", "//vuejs.org/v2/guide/list.html", "key"], "sentSegmentedWithoutStopsStemmed": ["http", "//vuejs.org/v2/guide/list.html", "key"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU1MDI1Nw==", "author": {"login": "vvpvvp"}, "body": "@posva , you can see this issue : https://github.com/vuejs/vue/issues/5410\r\n\r\n@yyx990803 : \r\n\r\n> You are using the index as the key... which is the same as no key at all. You should give each of your data objects a unique id so that they can be keyed properly.\r\n\r\n![vue](https://user-images.githubusercontent.com/7303371/28701674-3bcfa2b6-738a-11e7-8630-d62028165506.png)\r\n\r\n@posva \uff0cI know, if there a show list, we don't need it, but we has so many edit things.", "bodyText": "@posva , you can see this issue : #5410\n@yyx990803 :\n\nYou are using the index as the key... which is the same as no key at all. You should give each of your data objects a unique id so that they can be keyed properly.\n\n\n@posva \uff0cI know, if there a show list, we don't need it, but we has so many edit things.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/posva/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/posva\">@posva</a> , you can see this issue : <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"220607906\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuejs/vue/issues/5410\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuejs/vue/issues/5410/hovercard\" href=\"https://github.com/vuejs/vue/issues/5410\">#5410</a></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/yyx990803/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yyx990803\">@yyx990803</a> :</p>\n<blockquote>\n<p>You are using the index as the key... which is the same as no key at all. You should give each of your data objects a unique id so that they can be keyed properly.</p>\n</blockquote>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/7303371/28701674-3bcfa2b6-738a-11e7-8630-d62028165506.png\"><img src=\"https://user-images.githubusercontent.com/7303371/28701674-3bcfa2b6-738a-11e7-8630-d62028165506.png\" alt=\"vue\" style=\"max-width:100%;\"></a></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/posva/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/posva\">@posva</a> \uff0cI know, if there a show list, we don't need it, but we has so many edit things.</p>", "createdAt": "2017-07-28T03:46:26Z", "publishedAt": "2017-07-28T03:46:26Z", "lastEditedAt": "2017-07-28T07:09:41Z", "updatedAt": "2017-07-28T07:09:41Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-07-03T22:35:08Z"}}]}, "bodyParsed": [{"number": 7560, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@posva , you can see this issue : #5410", "sentSegmented": ["posva", "you", "can", "see", "this", "issue", "5410"], "sentSegmentedWithoutStops": ["posva", "see", "issue", "5410"], "sentSegmentedWithoutStopsStemmed": ["posva", "see", "issu", "5410"]}, {"number": 7561, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@yyx990803 :", "sentSegmented": ["yyx990803"], "sentSegmentedWithoutStops": ["yyx990803"], "sentSegmentedWithoutStopsStemmed": ["yyx990803"]}, {"number": 7562, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "You are using the index as the key... which is the same as no key at all.", "sentSegmented": ["you", "are", "using", "the", "index", "as", "the", "key", "which", "is", "the", "same", "as", "no", "key", "at", "all"], "sentSegmentedWithoutStops": ["using", "index", "key", "key"], "sentSegmentedWithoutStopsStemmed": ["use", "index", "key", "key"]}, {"number": 7563, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "You should give each of your data objects a unique id so that they can be keyed properly.", "sentSegmented": ["you", "should", "give", "each", "of", "your", "data", "objects", "a", "unique", "id", "so", "that", "they", "can", "be", "keyed", "properly"], "sentSegmentedWithoutStops": ["give", "data", "objects", "unique", "id", "keyed", "properly"], "sentSegmentedWithoutStopsStemmed": ["give", "data", "object", "uniqu", "id", "key", "properli"]}, {"number": 7564, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@posva \uff0cI know, if there a show list, we don't need it, but we has so many edit things.", "sentSegmented": ["posva", "\uff0ci", "know", "if", "there", "a", "show", "list", "we", "do", "n't", "need", "it", "but", "we", "has", "so", "many", "edit", "things"], "sentSegmentedWithoutStops": ["posva", "\uff0ci", "know", "show", "list", "n't", "need", "many", "edit", "things"], "sentSegmentedWithoutStopsStemmed": ["posva", "\uff0ci", "know", "show", "list", "n't", "need", "mani", "edit", "thing"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU1MjAzMA==", "author": {"login": "nickmessing"}, "body": "@vvpvvp, that's the point, we vue can not know how developer wants `key` to work, `index` is unique key example but most of the time it's not what you are looking for, how can Vue know what you wanted?", "bodyText": "@vvpvvp, that's the point, we vue can not know how developer wants key to work, index is unique key example but most of the time it's not what you are looking for, how can Vue know what you wanted?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a>, that's the point, we vue can not know how developer wants <code>key</code> to work, <code>index</code> is unique key example but most of the time it's not what you are looking for, how can Vue know what you wanted?</p>", "createdAt": "2017-07-28T03:56:45Z", "publishedAt": "2017-07-28T03:56:45Z", "lastEditedAt": null, "updatedAt": "2017-07-28T03:56:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7565, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@vvpvvp, that's the point, we vue can not know how developer wants key to work, index is unique key example but most of the time it's not what you are looking for, how can Vue know what you wanted?", "sentSegmented": ["vvpvvp", "that", "'s", "the", "point", "we", "vue", "can", "not", "know", "how", "developer", "wants", "key", "to", "work", "index", "is", "unique", "key", "example", "but", "most", "of", "the", "time", "it", "'s", "not", "what", "you", "are", "looking", "for", "how", "can", "vue", "know", "what", "you", "wanted"], "sentSegmentedWithoutStops": ["vvpvvp", "'s", "point", "vue", "know", "developer", "wants", "key", "work", "index", "unique", "key", "example", "time", "'s", "looking", "vue", "know", "wanted"], "sentSegmentedWithoutStopsStemmed": ["vvpvvp", "'s", "point", "vue", "know", "develop", "want", "key", "work", "index", "uniqu", "key", "exampl", "time", "'s", "look", "vue", "know", "want"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU3NDUyMQ==", "author": {"login": "vvpvvp"}, "body": "@nickmessing , I just want v-for has no question when i use it normal.\r\nfor example, I wrote an common table component , and it used v-for list data, and have some operate staffs, we don't know data's key prop, or there is no key completely.\r\nhow can I do, I used object as key.\r\nbut now, it's not advocated.\r\n\r\nand, If I don't use key, there is some problem we not expected.\r\nyou can see this issus: https://github.com/vuejs/vue/issues/5408\r\n\r\n\r\n", "bodyText": "@nickmessing , I just want v-for has no question when i use it normal.\nfor example, I wrote an common table component , and it used v-for list data, and have some operate staffs, we don't know data's key prop, or there is no key completely.\nhow can I do, I used object as key.\nbut now, it's not advocated.\nand, If I don't use key, there is some problem we not expected.\nyou can see this issus: #5408", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nickmessing/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nickmessing\">@nickmessing</a> , I just want v-for has no question when i use it normal.<br>\nfor example, I wrote an common table component , and it used v-for list data, and have some operate staffs, we don't know data's key prop, or there is no key completely.<br>\nhow can I do, I used object as key.<br>\nbut now, it's not advocated.</p>\n<p>and, If I don't use key, there is some problem we not expected.<br>\nyou can see this issus: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"220558358\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuejs/vue/issues/5408\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuejs/vue/issues/5408/hovercard\" href=\"https://github.com/vuejs/vue/issues/5408\">#5408</a></p>", "createdAt": "2017-07-28T06:45:00Z", "publishedAt": "2017-07-28T06:45:00Z", "lastEditedAt": null, "updatedAt": "2017-07-28T06:45:00Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7566, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@nickmessing , I just want v-for has no question when i use it normal.", "sentSegmented": ["nickmessing", "i", "just", "want", "v-for", "has", "no", "question", "when", "i", "use", "it", "normal"], "sentSegmentedWithoutStops": ["nickmessing", "want", "v-for", "question", "use", "normal"], "sentSegmentedWithoutStopsStemmed": ["nickmess", "want", "v-for", "question", "use", "normal"]}, {"number": 7567, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for example, I wrote an common table component , and it used v-for list data, and have some operate staffs, we don't know data's key prop, or there is no key completely.", "sentSegmented": ["for", "example", "i", "wrote", "an", "common", "table", "component", "and", "it", "used", "v-for", "list", "data", "and", "have", "some", "operate", "staffs", "we", "do", "n't", "know", "data", "'s", "key", "prop", "or", "there", "is", "no", "key", "completely"], "sentSegmentedWithoutStops": ["example", "wrote", "common", "table", "component", "used", "v-for", "list", "data", "operate", "staffs", "n't", "know", "data", "'s", "key", "prop", "key", "completely"], "sentSegmentedWithoutStopsStemmed": ["exampl", "wrote", "common", "tabl", "compon", "use", "v-for", "list", "data", "oper", "staff", "n't", "know", "data", "'s", "key", "prop", "key", "complet"]}, {"number": 7568, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "how can I do, I used object as key.", "sentSegmented": ["how", "can", "i", "do", "i", "used", "object", "as", "key"], "sentSegmentedWithoutStops": ["used", "object", "key"], "sentSegmentedWithoutStopsStemmed": ["use", "object", "key"]}, {"number": 7569, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "but now, it's not advocated.", "sentSegmented": ["but", "now", "it", "'s", "not", "advocated"], "sentSegmentedWithoutStops": ["'s", "advocated"], "sentSegmentedWithoutStopsStemmed": ["'s", "advoc"]}, {"number": 7570, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and, If I don't use key, there is some problem we not expected.", "sentSegmented": ["and", "if", "i", "do", "n't", "use", "key", "there", "is", "some", "problem", "we", "not", "expected"], "sentSegmentedWithoutStops": ["n't", "use", "key", "problem", "expected"], "sentSegmentedWithoutStopsStemmed": ["n't", "use", "key", "problem", "expect"]}, {"number": 7571, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "you can see this issus: #5408", "sentSegmented": ["you", "can", "see", "this", "issus", "5408"], "sentSegmentedWithoutStops": ["see", "issus", "5408"], "sentSegmentedWithoutStopsStemmed": ["see", "issu", "5408"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU3OTU4OA==", "author": {"login": "posva"}, "body": "I thought you were forcing yourself to use a key. You don't always need keys\r\nYou need unique keys for your objects, you probably have some kind of id. as @nickmessing said, Vue cannot guess it for you... Its guess is using the index", "bodyText": "I thought you were forcing yourself to use a key. You don't always need keys\nYou need unique keys for your objects, you probably have some kind of id. as @nickmessing said, Vue cannot guess it for you... Its guess is using the index", "bodyHTML": "<p>I thought you were forcing yourself to use a key. You don't always need keys<br>\nYou need unique keys for your objects, you probably have some kind of id. as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nickmessing/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nickmessing\">@nickmessing</a> said, Vue cannot guess it for you... Its guess is using the index</p>", "createdAt": "2017-07-28T07:14:14Z", "publishedAt": "2017-07-28T07:14:14Z", "lastEditedAt": null, "updatedAt": "2017-07-28T07:14:14Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7572, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I thought you were forcing yourself to use a key.", "sentSegmented": ["i", "thought", "you", "were", "forcing", "yourself", "to", "use", "a", "key"], "sentSegmentedWithoutStops": ["thought", "forcing", "use", "key"], "sentSegmentedWithoutStopsStemmed": ["thought", "forc", "use", "key"]}, {"number": 7573, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You don't always need keys", "sentSegmented": ["you", "do", "n't", "always", "need", "keys"], "sentSegmentedWithoutStops": ["n't", "always", "need", "keys"], "sentSegmentedWithoutStopsStemmed": ["n't", "alway", "need", "key"]}, {"number": 7574, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You need unique keys for your objects, you probably have some kind of id.", "sentSegmented": ["you", "need", "unique", "keys", "for", "your", "objects", "you", "probably", "have", "some", "kind", "of", "id"], "sentSegmentedWithoutStops": ["need", "unique", "keys", "objects", "probably", "kind", "id"], "sentSegmentedWithoutStopsStemmed": ["need", "uniqu", "key", "object", "probabl", "kind", "id"]}, {"number": 7575, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "as @nickmessing said, Vue cannot guess it for you... Its guess is using the index", "sentSegmented": ["as", "nickmessing", "said", "vue", "can", "not", "guess", "it", "for", "you", "its", "guess", "is", "using", "the", "index"], "sentSegmentedWithoutStops": ["nickmessing", "said", "vue", "guess", "guess", "using", "index"], "sentSegmentedWithoutStopsStemmed": ["nickmess", "said", "vue", "guess", "guess", "use", "index"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU4ODU0NA==", "author": {"login": "vvpvvp"}, "body": "@posva , I thought you are missing this point :\r\n> You are using the index as the key... which is the same as no key at all. --- from yyx990803.\r\n\r\nI don't want force myself to use a key, it's because if I don't use it, it will be something wrong.\r\nlink: https://codepen.io/vvpvvp/pen/oZKpgE\r\nsteps:\r\n1: click \"add\" twice\r\n2: click the last line 'click me'.\r\n3: click the first line 'delete'.\r\n\r\n\r\n", "bodyText": "@posva , I thought you are missing this point :\n\nYou are using the index as the key... which is the same as no key at all. --- from yyx990803.\n\nI don't want force myself to use a key, it's because if I don't use it, it will be something wrong.\nlink: https://codepen.io/vvpvvp/pen/oZKpgE\nsteps:\n1: click \"add\" twice\n2: click the last line 'click me'.\n3: click the first line 'delete'.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/posva/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/posva\">@posva</a> , I thought you are missing this point :</p>\n<blockquote>\n<p>You are using the index as the key... which is the same as no key at all. --- from yyx990803.</p>\n</blockquote>\n<p>I don't want force myself to use a key, it's because if I don't use it, it will be something wrong.<br>\nlink: <a rel=\"nofollow\" href=\"https://codepen.io/vvpvvp/pen/oZKpgE\">https://codepen.io/vvpvvp/pen/oZKpgE</a><br>\nsteps:<br>\n1: click \"add\" twice<br>\n2: click the last line 'click me'.<br>\n3: click the first line 'delete'.</p>", "createdAt": "2017-07-28T08:02:29Z", "publishedAt": "2017-07-28T08:02:29Z", "lastEditedAt": null, "updatedAt": "2017-07-28T08:02:29Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7576, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@posva , I thought you are missing this point :", "sentSegmented": ["posva", "i", "thought", "you", "are", "missing", "this", "point"], "sentSegmentedWithoutStops": ["posva", "thought", "missing", "point"], "sentSegmentedWithoutStopsStemmed": ["posva", "thought", "miss", "point"]}, {"number": 7577, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "You are using the index as the key... which is the same as no key at all.", "sentSegmented": ["you", "are", "using", "the", "index", "as", "the", "key", "which", "is", "the", "same", "as", "no", "key", "at", "all"], "sentSegmentedWithoutStops": ["using", "index", "key", "key"], "sentSegmentedWithoutStopsStemmed": ["use", "index", "key", "key"]}, {"number": 7578, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "--- from yyx990803.", "sentSegmented": ["from", "yyx990803"], "sentSegmentedWithoutStops": ["yyx990803"], "sentSegmentedWithoutStopsStemmed": ["yyx990803"]}, {"number": 7579, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I don't want force myself to use a key, it's because if I don't use it, it will be something wrong.", "sentSegmented": ["i", "do", "n't", "want", "force", "myself", "to", "use", "a", "key", "it", "'s", "because", "if", "i", "do", "n't", "use", "it", "it", "will", "be", "something", "wrong"], "sentSegmentedWithoutStops": ["n't", "want", "force", "use", "key", "'s", "n't", "use", "something", "wrong"], "sentSegmentedWithoutStopsStemmed": ["n't", "want", "forc", "use", "key", "'s", "n't", "use", "someth", "wrong"]}, {"number": 7580, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "link: https://codepen.io/vvpvvp/pen/oZKpgE", "sentSegmented": ["link", "https", "//codepen.io/vvpvvp/pen/ozkpge"], "sentSegmentedWithoutStops": ["link", "https", "//codepen.io/vvpvvp/pen/ozkpge"], "sentSegmentedWithoutStopsStemmed": ["link", "http", "//codepen.io/vvpvvp/pen/ozkpg"]}, {"number": 7581, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "steps:", "sentSegmented": ["steps"], "sentSegmentedWithoutStops": ["steps"], "sentSegmentedWithoutStopsStemmed": ["step"]}, {"number": 7582, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "1: click \"add\" twice", "sentSegmented": ["1", "click", "add", "twice"], "sentSegmentedWithoutStops": ["1", "click", "add", "twice"], "sentSegmentedWithoutStopsStemmed": ["1", "click", "add", "twice"]}, {"number": 7583, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "2: click the last line 'click me'.", "sentSegmented": ["2", "click", "the", "last", "line", "'click", "me"], "sentSegmentedWithoutStops": ["2", "click", "last", "line", "'click"], "sentSegmentedWithoutStopsStemmed": ["2", "click", "last", "line", "'click"]}, {"number": 7584, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "3: click the first line 'delete'.", "sentSegmented": ["3", "click", "the", "first", "line", "'delete"], "sentSegmentedWithoutStops": ["3", "click", "first", "line", "'delete"], "sentSegmentedWithoutStopsStemmed": ["3", "click", "first", "line", "'delet"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU5MTg4Ng==", "author": {"login": "posva"}, "body": "that's why I told you to use the index... because it should be the same...\r\nYou can generate a unique id with every object, and in your case, you need it. That's what we're trying to tell you", "bodyText": "that's why I told you to use the index... because it should be the same...\nYou can generate a unique id with every object, and in your case, you need it. That's what we're trying to tell you", "bodyHTML": "<p>that's why I told you to use the index... because it should be the same...<br>\nYou can generate a unique id with every object, and in your case, you need it. That's what we're trying to tell you</p>", "createdAt": "2017-07-28T08:20:05Z", "publishedAt": "2017-07-28T08:20:05Z", "lastEditedAt": "2017-07-28T08:20:08Z", "updatedAt": "2017-07-28T08:20:08Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7585, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "that's why I told you to use the index... because it should be the same...", "sentSegmented": ["that", "'s", "why", "i", "told", "you", "to", "use", "the", "index", "because", "it", "should", "be", "the", "same"], "sentSegmentedWithoutStops": ["'s", "told", "use", "index"], "sentSegmentedWithoutStopsStemmed": ["'s", "told", "use", "index"]}, {"number": 7586, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You can generate a unique id with every object, and in your case, you need it.", "sentSegmented": ["you", "can", "generate", "a", "unique", "id", "with", "every", "object", "and", "in", "your", "case", "you", "need", "it"], "sentSegmentedWithoutStops": ["generate", "unique", "id", "every", "object", "case", "need"], "sentSegmentedWithoutStopsStemmed": ["gener", "uniqu", "id", "everi", "object", "case", "need"]}, {"number": 7587, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That's what we're trying to tell you", "sentSegmented": ["that", "'s", "what", "we", "'re", "trying", "to", "tell", "you"], "sentSegmentedWithoutStops": ["'s", "'re", "trying", "tell"], "sentSegmentedWithoutStopsStemmed": ["'s", "'re", "tri", "tell"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU5NTQwMQ==", "author": {"login": "Kingwl"}, "body": "Hi @vvpvvp   \r\nas @posva said you should generate a key\r\nworkaround by https://github.com/puleos/object-hash\r\neg: https://codepen.io/anon/pen/NvGwyQ  \r\n", "bodyText": "Hi @vvpvvp\nas @posva said you should generate a key\nworkaround by https://github.com/puleos/object-hash\neg: https://codepen.io/anon/pen/NvGwyQ", "bodyHTML": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a><br>\nas <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/posva/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/posva\">@posva</a> said you should generate a key<br>\nworkaround by <a href=\"https://github.com/puleos/object-hash\">https://github.com/puleos/object-hash</a><br>\neg: <a rel=\"nofollow\" href=\"https://codepen.io/anon/pen/NvGwyQ\">https://codepen.io/anon/pen/NvGwyQ</a></p>", "createdAt": "2017-07-28T08:37:09Z", "publishedAt": "2017-07-28T08:37:09Z", "lastEditedAt": "2017-07-28T08:38:14Z", "updatedAt": "2017-07-28T08:38:14Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7588, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi @vvpvvp", "sentSegmented": ["hi", "vvpvvp"], "sentSegmentedWithoutStops": ["hi", "vvpvvp"], "sentSegmentedWithoutStopsStemmed": ["hi", "vvpvvp"]}, {"number": 7589, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "as @posva said you should generate a key", "sentSegmented": ["as", "posva", "said", "you", "should", "generate", "a", "key"], "sentSegmentedWithoutStops": ["posva", "said", "generate", "key"], "sentSegmentedWithoutStopsStemmed": ["posva", "said", "gener", "key"]}, {"number": 7590, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "workaround by https://github.com/puleos/object-hash", "sentSegmented": ["workaround", "by", "https", "//github.com/puleos/object-hash"], "sentSegmentedWithoutStops": ["workaround", "https", "//github.com/puleos/object-hash"], "sentSegmentedWithoutStopsStemmed": ["workaround", "http", "//github.com/puleos/object-hash"]}, {"number": 7591, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "eg: https://codepen.io/anon/pen/NvGwyQ", "sentSegmented": ["eg", "https", "//codepen.io/anon/pen/nvgwyq"], "sentSegmentedWithoutStops": ["eg", "https", "//codepen.io/anon/pen/nvgwyq"], "sentSegmentedWithoutStopsStemmed": ["eg", "http", "//codepen.io/anon/pen/nvgwyq"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU5NjEyNA==", "author": {"login": "jkzing"}, "body": "@vvpvvp , the point is Vue cannot infer a **unique key** for you, what vue can do and already does is to infer a key based on **index**.\r\n\r\nIf there are operations like \"add\" or \"delete\" elements in list, you really should generate a unique yourself. A simply counter could do the trick.", "bodyText": "@vvpvvp , the point is Vue cannot infer a unique key for you, what vue can do and already does is to infer a key based on index.\nIf there are operations like \"add\" or \"delete\" elements in list, you really should generate a unique yourself. A simply counter could do the trick.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a> , the point is Vue cannot infer a <strong>unique key</strong> for you, what vue can do and already does is to infer a key based on <strong>index</strong>.</p>\n<p>If there are operations like \"add\" or \"delete\" elements in list, you really should generate a unique yourself. A simply counter could do the trick.</p>", "createdAt": "2017-07-28T08:40:38Z", "publishedAt": "2017-07-28T08:40:38Z", "lastEditedAt": null, "updatedAt": "2017-07-28T08:40:38Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7592, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@vvpvvp , the point is Vue cannot infer a unique key for you, what vue can do and already does is to infer a key based on index.", "sentSegmented": ["vvpvvp", "the", "point", "is", "vue", "can", "not", "infer", "a", "unique", "key", "for", "you", "what", "vue", "can", "do", "and", "already", "does", "is", "to", "infer", "a", "key", "based", "on", "index"], "sentSegmentedWithoutStops": ["vvpvvp", "point", "vue", "infer", "unique", "key", "vue", "already", "infer", "key", "based", "index"], "sentSegmentedWithoutStopsStemmed": ["vvpvvp", "point", "vue", "infer", "uniqu", "key", "vue", "alreadi", "infer", "key", "base", "index"]}, {"number": 7593, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If there are operations like \"add\" or \"delete\" elements in list, you really should generate a unique yourself.", "sentSegmented": ["if", "there", "are", "operations", "like", "add", "or", "delete", "elements", "in", "list", "you", "really", "should", "generate", "a", "unique", "yourself"], "sentSegmentedWithoutStops": ["operations", "like", "add", "delete", "elements", "list", "really", "generate", "unique"], "sentSegmentedWithoutStopsStemmed": ["oper", "like", "add", "delet", "element", "list", "realli", "gener", "uniqu"]}, {"number": 7594, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A simply counter could do the trick.", "sentSegmented": ["a", "simply", "counter", "could", "do", "the", "trick"], "sentSegmentedWithoutStops": ["simply", "counter", "could", "trick"], "sentSegmentedWithoutStopsStemmed": ["simpli", "counter", "could", "trick"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODU5NjM5Ng==", "author": {"login": "vvpvvp"}, "body": "@Kingwl ,  I understand.\r\nso, I have a question, what's the difference between we generate and vue generate.\r\nwhy not vue do it by itself, yes, you don't know what we want, so I told you, I has no key in my data when I use v-for, and I need edit some data or do some thing else, and could you please generate unique keys for us?", "bodyText": "@Kingwl ,  I understand.\nso, I have a question, what's the difference between we generate and vue generate.\nwhy not vue do it by itself, yes, you don't know what we want, so I told you, I has no key in my data when I use v-for, and I need edit some data or do some thing else, and could you please generate unique keys for us?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Kingwl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Kingwl\">@Kingwl</a> ,  I understand.<br>\nso, I have a question, what's the difference between we generate and vue generate.<br>\nwhy not vue do it by itself, yes, you don't know what we want, so I told you, I has no key in my data when I use v-for, and I need edit some data or do some thing else, and could you please generate unique keys for us?</p>", "createdAt": "2017-07-28T08:41:48Z", "publishedAt": "2017-07-28T08:41:48Z", "lastEditedAt": "2017-07-28T08:44:52Z", "updatedAt": "2017-07-28T08:44:52Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7595, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@Kingwl ,  I understand.", "sentSegmented": ["kingwl", "i", "understand"], "sentSegmentedWithoutStops": ["kingwl", "understand"], "sentSegmentedWithoutStopsStemmed": ["kingwl", "understand"]}, {"number": 7596, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "so, I have a question, what's the difference between we generate and vue generate.", "sentSegmented": ["so", "i", "have", "a", "question", "what", "'s", "the", "difference", "between", "we", "generate", "and", "vue", "generate"], "sentSegmentedWithoutStops": ["question", "'s", "difference", "generate", "vue", "generate"], "sentSegmentedWithoutStopsStemmed": ["question", "'s", "differ", "gener", "vue", "gener"]}, {"number": 7597, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "why not vue do it by itself, yes, you don't know what we want, so I told you, I has no key in my data when I use v-for, and I need edit some data or do some thing else, and could you please generate unique keys for us?", "sentSegmented": ["why", "not", "vue", "do", "it", "by", "itself", "yes", "you", "do", "n't", "know", "what", "we", "want", "so", "i", "told", "you", "i", "has", "no", "key", "in", "my", "data", "when", "i", "use", "v-for", "and", "i", "need", "edit", "some", "data", "or", "do", "some", "thing", "else", "and", "could", "you", "please", "generate", "unique", "keys", "for", "us"], "sentSegmentedWithoutStops": ["vue", "yes", "n't", "know", "want", "told", "key", "data", "use", "v-for", "need", "edit", "data", "thing", "else", "could", "please", "generate", "unique", "keys", "us"], "sentSegmentedWithoutStopsStemmed": ["vue", "ye", "n't", "know", "want", "told", "key", "data", "use", "v-for", "need", "edit", "data", "thing", "els", "could", "pleas", "gener", "uniqu", "key", "us"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYwMjI3MQ==", "author": {"login": "Kingwl"}, "body": "@vvpvvp  calm down my friend \ud83d\ude05   \r\ngenerate unique keys is so complex to cover all case  \r\nand it not too hard to generate a unique key by user  \r\n\r\nand IMO this behavior is not normal...i(we) will try to improve it  \r\nhave @yyx990803 got some advice?  ", "bodyText": "@vvpvvp  calm down my friend \ud83d\ude05\ngenerate unique keys is so complex to cover all case\nand it not too hard to generate a unique key by user\nand IMO this behavior is not normal...i(we) will try to improve it\nhave @yyx990803 got some advice?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a>  calm down my friend <g-emoji class=\"g-emoji\" alias=\"sweat_smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png\">\ud83d\ude05</g-emoji><br>\ngenerate unique keys is so complex to cover all case<br>\nand it not too hard to generate a unique key by user</p>\n<p>and IMO this behavior is not normal...i(we) will try to improve it<br>\nhave <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/yyx990803/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yyx990803\">@yyx990803</a> got some advice?</p>", "createdAt": "2017-07-28T09:10:19Z", "publishedAt": "2017-07-28T09:10:19Z", "lastEditedAt": "2017-07-28T09:10:31Z", "updatedAt": "2017-07-28T09:10:31Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7598, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@vvpvvp  calm down my friend \ud83d\ude05", "sentSegmented": ["vvpvvp", "calm", "down", "my", "friend"], "sentSegmentedWithoutStops": ["vvpvvp", "calm", "friend"], "sentSegmentedWithoutStopsStemmed": ["vvpvvp", "calm", "friend"]}, {"number": 7599, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "generate unique keys is so complex to cover all case", "sentSegmented": ["generate", "unique", "keys", "is", "so", "complex", "to", "cover", "all", "case"], "sentSegmentedWithoutStops": ["generate", "unique", "keys", "complex", "cover", "case"], "sentSegmentedWithoutStopsStemmed": ["gener", "uniqu", "key", "complex", "cover", "case"]}, {"number": 7600, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and it not too hard to generate a unique key by user", "sentSegmented": ["and", "it", "not", "too", "hard", "to", "generate", "a", "unique", "key", "by", "user"], "sentSegmentedWithoutStops": ["hard", "generate", "unique", "key", "user"], "sentSegmentedWithoutStopsStemmed": ["hard", "gener", "uniqu", "key", "user"]}, {"number": 7601, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and IMO this behavior is not normal...i(we) will try to improve it", "sentSegmented": ["and", "imo", "this", "behavior", "is", "not", "normal", "i", "we", "will", "try", "to", "improve", "it"], "sentSegmentedWithoutStops": ["imo", "behavior", "normal", "try", "improve"], "sentSegmentedWithoutStopsStemmed": ["imo", "behavior", "normal", "tri", "improv"]}, {"number": 7602, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "have @yyx990803 got some advice?", "sentSegmented": ["have", "yyx990803", "got", "some", "advice"], "sentSegmentedWithoutStops": ["yyx990803", "got", "advice"], "sentSegmentedWithoutStopsStemmed": ["yyx990803", "got", "advic"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYwMzc5NQ==", "author": {"login": "posva"}, "body": "Vue cannot generate the unique keys for you because it doesn't know how or when you add or delete items. But it's super easy to add an id. Without using hash you can use an incrementing id: https://codepen.io/posva/pen/BdoJJz", "bodyText": "Vue cannot generate the unique keys for you because it doesn't know how or when you add or delete items. But it's super easy to add an id. Without using hash you can use an incrementing id: https://codepen.io/posva/pen/BdoJJz", "bodyHTML": "<p>Vue cannot generate the unique keys for you because it doesn't know how or when you add or delete items. But it's super easy to add an id. Without using hash you can use an incrementing id: <a rel=\"nofollow\" href=\"https://codepen.io/posva/pen/BdoJJz\">https://codepen.io/posva/pen/BdoJJz</a></p>", "createdAt": "2017-07-28T09:17:30Z", "publishedAt": "2017-07-28T09:17:30Z", "lastEditedAt": null, "updatedAt": "2017-07-28T09:17:30Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-12-26T21:22:09Z"}}]}, "bodyParsed": [{"number": 7603, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Vue cannot generate the unique keys for you because it doesn't know how or when you add or delete items.", "sentSegmented": ["vue", "can", "not", "generate", "the", "unique", "keys", "for", "you", "because", "it", "does", "n't", "know", "how", "or", "when", "you", "add", "or", "delete", "items"], "sentSegmentedWithoutStops": ["vue", "generate", "unique", "keys", "n't", "know", "add", "delete", "items"], "sentSegmentedWithoutStopsStemmed": ["vue", "gener", "uniqu", "key", "n't", "know", "add", "delet", "item"]}, {"number": 7604, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But it's super easy to add an id.", "sentSegmented": ["but", "it", "'s", "super", "easy", "to", "add", "an", "id"], "sentSegmentedWithoutStops": ["'s", "super", "easy", "add", "id"], "sentSegmentedWithoutStopsStemmed": ["'s", "super", "easi", "add", "id"]}, {"number": 7605, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Without using hash you can use an incrementing id: https://codepen.io/posva/pen/BdoJJz", "sentSegmented": ["without", "using", "hash", "you", "can", "use", "an", "incrementing", "id", "https", "//codepen.io/posva/pen/bdojjz"], "sentSegmentedWithoutStops": ["without", "using", "hash", "use", "incrementing", "id", "https", "//codepen.io/posva/pen/bdojjz"], "sentSegmentedWithoutStopsStemmed": ["without", "use", "hash", "use", "increment", "id", "http", "//codepen.io/posva/pen/bdojjz"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYwNTkxNA==", "author": {"login": "Kingwl"}, "body": "he told you that is a ```  unexpected behavior ``` not ``` expected behavior ```   \ud83c\udf1a  \r\nand add a key can resolve that  ", "bodyText": "he told you that is a  unexpected behavior not expected behavior   \ud83c\udf1a\nand add a key can resolve that", "bodyHTML": "<p>he told you that is a <code> unexpected behavior</code> not <code>expected behavior</code>   <g-emoji class=\"g-emoji\" alias=\"new_moon_with_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png\">\ud83c\udf1a</g-emoji><br>\nand add a key can resolve that</p>", "createdAt": "2017-07-28T09:27:23Z", "publishedAt": "2017-07-28T09:27:23Z", "lastEditedAt": "2017-07-28T09:29:51Z", "updatedAt": "2017-07-28T09:29:51Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7606, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "he told you that is a  unexpected behavior not expected behavior \ud83c\udf1a", "sentSegmented": ["he", "told", "you", "that", "is", "a", "unexpected", "behavior", "not", "expected", "behavior"], "sentSegmentedWithoutStops": ["told", "unexpected", "behavior", "expected", "behavior"], "sentSegmentedWithoutStopsStemmed": ["told", "unexpect", "behavior", "expect", "behavior"]}, {"number": 7607, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and add a key can resolve that", "sentSegmented": ["and", "add", "a", "key", "can", "resolve", "that"], "sentSegmentedWithoutStops": ["add", "key", "resolve"], "sentSegmentedWithoutStopsStemmed": ["add", "key", "resolv"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYwNzI5Ng==", "author": {"login": "javoski"}, "body": "IMO the feature of supporting object type keys is more constructive than this, and it's likely to be implemented in the future. See [https://github.com/vuejs/vue/issues/5804#issuecomment-305950427](https://github.com/vuejs/vue/issues/5804#issuecomment-305950427)\r\n\r\nAs you know, the unique key must be attached to the item object, when it's automatically generated inside Vue, it may cause some problems if users are unaware of that.\r\nIf you really feel troublesome to generate unique ids for objects by yourself, you can write a common util function to achieve it. It's similar to the workaround @Kingwl  provided, but much lighter (and may lead to a performance issue\ud83d\ude02, you can test it in your App):\r\n```js\r\nconst UNIQUE_KEY_PROP = '__unique_key_prop__'\r\nconst KEY_PREFIX = '__key_prefix__' + Date.now() + '_'\r\nlet uid = 0\r\n\r\nconst isObject = val => val !== null && typeof val === 'object'\r\n\r\nconst genUniqueKey = obj => {\r\n  if (isObject(obj)) {\r\n    if (UNIQUE_KEY_PROP in obj) {\r\n      return obj[UNIQUE_KEY_PROP]\r\n    }\r\n    const value = KEY_PREFIX + uid++\r\n    Object.defineProperty(obj, UNIQUE_KEY_PROP, { value })\r\n    return value\r\n  }\r\n  return obj\r\n}\r\n\r\nVue.mixin({\r\n  methods: { genUniqueKey }\r\n})\r\n```\r\n```html\r\n<div v-for=\"item in items\" :key=\"genUniqueKey(item)\">\r\n```\r\nHere's a demo - [https://jsfiddle.net/xujiongbo/3wt7hv7c/](https://jsfiddle.net/xujiongbo/3wt7hv7c/)", "bodyText": "IMO the feature of supporting object type keys is more constructive than this, and it's likely to be implemented in the future. See #5804 (comment)\nAs you know, the unique key must be attached to the item object, when it's automatically generated inside Vue, it may cause some problems if users are unaware of that.\nIf you really feel troublesome to generate unique ids for objects by yourself, you can write a common util function to achieve it. It's similar to the workaround @Kingwl  provided, but much lighter (and may lead to a performance issue\ud83d\ude02, you can test it in your App):\nconst UNIQUE_KEY_PROP = '__unique_key_prop__'\nconst KEY_PREFIX = '__key_prefix__' + Date.now() + '_'\nlet uid = 0\n\nconst isObject = val => val !== null && typeof val === 'object'\n\nconst genUniqueKey = obj => {\n  if (isObject(obj)) {\n    if (UNIQUE_KEY_PROP in obj) {\n      return obj[UNIQUE_KEY_PROP]\n    }\n    const value = KEY_PREFIX + uid++\n    Object.defineProperty(obj, UNIQUE_KEY_PROP, { value })\n    return value\n  }\n  return obj\n}\n\nVue.mixin({\n  methods: { genUniqueKey }\n})\n<div v-for=\"item in items\" :key=\"genUniqueKey(item)\">\nHere's a demo - https://jsfiddle.net/xujiongbo/3wt7hv7c/", "bodyHTML": "<p>IMO the feature of supporting object type keys is more constructive than this, and it's likely to be implemented in the future. See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"233133261\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuejs/vue/issues/5804\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuejs/vue/issues/5804/hovercard?comment_id=305950427&amp;comment_type=issue_comment\" href=\"https://github.com/vuejs/vue/issues/5804#issuecomment-305950427\">#5804 (comment)</a></p>\n<p>As you know, the unique key must be attached to the item object, when it's automatically generated inside Vue, it may cause some problems if users are unaware of that.<br>\nIf you really feel troublesome to generate unique ids for objects by yourself, you can write a common util function to achieve it. It's similar to the workaround <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Kingwl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Kingwl\">@Kingwl</a>  provided, but much lighter (and may lead to a performance issue<g-emoji class=\"g-emoji\" alias=\"joy\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png\">\ud83d\ude02</g-emoji>, you can test it in your App):</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">UNIQUE_KEY_PROP</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'__unique_key_prop__'</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">KEY_PREFIX</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'__key_prefix__'</span> <span class=\"pl-c1\">+</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">now</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'_'</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">uid</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isObject</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">val</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">val</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">val</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">genUniqueKey</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">UNIQUE_KEY_PROP</span> <span class=\"pl-k\">in</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">UNIQUE_KEY_PROP</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">KEY_PREFIX</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">uid</span><span class=\"pl-c1\">++</span>\n    <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">defineProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">UNIQUE_KEY_PROP</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> value <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">value</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">obj</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">Vue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">mixin</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">methods</span>: <span class=\"pl-kos\">{</span> genUniqueKey <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span> <span class=\"pl-c1\">v-for</span>=\"<span class=\"pl-s\">item in items</span>\" <span class=\"pl-c1\">:key</span>=\"<span class=\"pl-s\">genUniqueKey(item)</span>\"<span class=\"pl-kos\">&gt;</span></pre></div>\n<p>Here's a demo - <a rel=\"nofollow\" href=\"https://jsfiddle.net/xujiongbo/3wt7hv7c/\">https://jsfiddle.net/xujiongbo/3wt7hv7c/</a></p>", "createdAt": "2017-07-28T09:33:32Z", "publishedAt": "2017-07-28T09:33:32Z", "lastEditedAt": "2018-07-05T14:23:24Z", "updatedAt": "2018-07-05T14:23:24Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-07-28T13:35:44Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-03-07T06:12:57Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-05-24T13:45:36Z"}}]}, "bodyParsed": [{"number": 7608, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "IMO the feature of supporting object type keys is more constructive than this, and it's likely to be implemented in the future.", "sentSegmented": ["imo", "the", "feature", "of", "supporting", "object", "type", "keys", "is", "more", "constructive", "than", "this", "and", "it", "'s", "likely", "to", "be", "implemented", "in", "the", "future"], "sentSegmentedWithoutStops": ["imo", "feature", "supporting", "object", "type", "keys", "constructive", "'s", "likely", "implemented", "future"], "sentSegmentedWithoutStopsStemmed": ["imo", "featur", "support", "object", "type", "key", "construct", "'s", "like", "implement", "futur"]}, {"number": 7609, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "See #5804 (comment)", "sentSegmented": ["see", "5804", "comment"], "sentSegmentedWithoutStops": ["see", "5804", "comment"], "sentSegmentedWithoutStopsStemmed": ["see", "5804", "comment"]}, {"number": 7610, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As you know, the unique key must be attached to the item object, when it's automatically generated inside Vue, it may cause some problems if users are unaware of that.", "sentSegmented": ["as", "you", "know", "the", "unique", "key", "must", "be", "attached", "to", "the", "item", "object", "when", "it", "'s", "automatically", "generated", "inside", "vue", "it", "may", "cause", "some", "problems", "if", "users", "are", "unaware", "of", "that"], "sentSegmentedWithoutStops": ["know", "unique", "key", "must", "attached", "item", "object", "'s", "automatically", "generated", "inside", "vue", "may", "cause", "problems", "users", "unaware"], "sentSegmentedWithoutStopsStemmed": ["know", "uniqu", "key", "must", "attach", "item", "object", "'s", "automat", "gener", "insid", "vue", "may", "caus", "problem", "user", "unawar"]}, {"number": 7611, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you really feel troublesome to generate unique ids for objects by yourself, you can write a common util function to achieve it.", "sentSegmented": ["if", "you", "really", "feel", "troublesome", "to", "generate", "unique", "ids", "for", "objects", "by", "yourself", "you", "can", "write", "a", "common", "util", "function", "to", "achieve", "it"], "sentSegmentedWithoutStops": ["really", "feel", "troublesome", "generate", "unique", "ids", "objects", "write", "common", "util", "function", "achieve"], "sentSegmentedWithoutStopsStemmed": ["realli", "feel", "troublesom", "gener", "uniqu", "id", "object", "write", "common", "util", "function", "achiev"]}, {"number": 7612, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's similar to the workaround @Kingwl  provided, but much lighter (and may lead to a performance issue\ud83d\ude02, you can test it in your App):", "sentSegmented": ["it", "'s", "similar", "to", "the", "workaround", "kingwl", "provided", "but", "much", "lighter", "and", "may", "lead", "to", "a", "performance", "issue\ud83d\ude02", "you", "can", "test", "it", "in", "your", "app"], "sentSegmentedWithoutStops": ["'s", "similar", "workaround", "kingwl", "provided", "much", "lighter", "may", "lead", "performance", "issue\ud83d\ude02", "test", "app"], "sentSegmentedWithoutStopsStemmed": ["'s", "similar", "workaround", "kingwl", "provid", "much", "lighter", "may", "lead", "perform", "issue\ud83d\ude02", "test", "app"]}, {"number": 7613, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const UNIQUE_KEY_PROP = '__unique_key_prop__'", "sentSegmented": ["const", "unique_key_prop", "'__unique_key_prop__"], "sentSegmentedWithoutStops": ["unique_key_prop", "'__unique_key_prop__"], "sentSegmentedWithoutStopsStemmed": ["unique_key_prop", "'__unique_key_prop__"]}, {"number": 7614, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const KEY_PREFIX = '__key_prefix__' + Date.now() + '_'", "sentSegmented": ["const", "key_prefix", "'__key_prefix__", "date.now", "_"], "sentSegmentedWithoutStops": ["key_prefix", "'__key_prefix__", "date.now"], "sentSegmentedWithoutStopsStemmed": ["key_prefix", "'__key_prefix__", "date.now"]}, {"number": 7615, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "let uid = 0", "sentSegmented": ["let", "uid", "0"], "sentSegmentedWithoutStops": ["uid", "0"], "sentSegmentedWithoutStopsStemmed": ["uid", "0"]}, {"number": 7616, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const isObject = val => val !== null && typeof val === 'object'", "sentSegmented": ["const", "isobject", "val", "val", "null", "typeof", "val", "'object"], "sentSegmentedWithoutStops": ["isobject", "val", "val", "val", "'object"], "sentSegmentedWithoutStopsStemmed": ["isobject", "val", "val", "val", "'object"]}, {"number": 7617, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const genUniqueKey = obj => {", "sentSegmented": ["const", "genuniquekey", "obj"], "sentSegmentedWithoutStops": ["genuniquekey", "obj"], "sentSegmentedWithoutStopsStemmed": ["genuniquekey", "obj"]}, {"number": 7618, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  if (isObject(obj)) {", "sentSegmented": ["if", "isobject", "obj"], "sentSegmentedWithoutStops": ["isobject", "obj"], "sentSegmentedWithoutStopsStemmed": ["isobject", "obj"]}, {"number": 7619, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    if (UNIQUE_KEY_PROP in obj) {", "sentSegmented": ["if", "unique_key_prop", "in", "obj"], "sentSegmentedWithoutStops": ["unique_key_prop", "obj"], "sentSegmentedWithoutStopsStemmed": ["unique_key_prop", "obj"]}, {"number": 7620, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      return obj[UNIQUE_KEY_PROP]", "sentSegmented": ["return", "obj", "unique_key_prop"], "sentSegmentedWithoutStops": ["obj", "unique_key_prop"], "sentSegmentedWithoutStopsStemmed": ["obj", "unique_key_prop"]}, {"number": 7621, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7622, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    const value = KEY_PREFIX + uid++", "sentSegmented": ["const", "value", "key_prefix", "uid++"], "sentSegmentedWithoutStops": ["value", "key_prefix", "uid++"], "sentSegmentedWithoutStopsStemmed": ["valu", "key_prefix", "uid++"]}, {"number": 7623, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    Object.defineProperty(obj, UNIQUE_KEY_PROP, { value })", "sentSegmented": ["object.defineproperty", "obj", "unique_key_prop", "value"], "sentSegmentedWithoutStops": ["object.defineproperty", "obj", "unique_key_prop", "value"], "sentSegmentedWithoutStopsStemmed": ["object.defineproperti", "obj", "unique_key_prop", "valu"]}, {"number": 7624, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    return value", "sentSegmented": ["return", "value"], "sentSegmentedWithoutStops": ["value"], "sentSegmentedWithoutStopsStemmed": ["valu"]}, {"number": 7625, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7626, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  return obj", "sentSegmented": ["return", "obj"], "sentSegmentedWithoutStops": ["obj"], "sentSegmentedWithoutStopsStemmed": ["obj"]}, {"number": 7627, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7628, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Vue.mixin({", "sentSegmented": ["vue.mixin"], "sentSegmentedWithoutStops": ["vue.mixin"], "sentSegmentedWithoutStopsStemmed": ["vue.mixin"]}, {"number": 7629, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  methods: { genUniqueKey }", "sentSegmented": ["methods", "genuniquekey"], "sentSegmentedWithoutStops": ["methods", "genuniquekey"], "sentSegmentedWithoutStopsStemmed": ["method", "genuniquekey"]}, {"number": 7630, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "})", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7631, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<div v-for=\"item in items\" :key=\"genUniqueKey(item)\">", "sentSegmented": ["div", "v-for=", "item", "in", "items", "key=", "genuniquekey", "item"], "sentSegmentedWithoutStops": ["v-for=", "item", "items", "key=", "genuniquekey", "item"], "sentSegmentedWithoutStopsStemmed": ["v-for=", "item", "item", "key=", "genuniquekey", "item"]}, {"number": 7632, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Here's a demo - https://jsfiddle.net/xujiongbo/3wt7hv7c/", "sentSegmented": ["here", "'s", "a", "demo", "https", "//jsfiddle.net/xujiongbo/3wt7hv7c/"], "sentSegmentedWithoutStops": ["'s", "demo", "https", "//jsfiddle.net/xujiongbo/3wt7hv7c/"], "sentSegmentedWithoutStopsStemmed": ["'s", "demo", "http", "//jsfiddle.net/xujiongbo/3wt7hv7c/"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYwNzU3Mg==", "author": {"login": "Akryum"}, "body": "By default, Vue uses the index of the items since it's the only thing it can do without having to \"guess\" what the developer wants.\r\nVue won't generate unique keys for you, there is no point in this. The developer needs to provide unique keys because Vue can't guess them. Also, Vue mutating your objects on its own would be very wrong in my opinion. \r\nIf your data don't have any field that could be used as unique keys, there is something not right about it, ask your backend team.", "bodyText": "By default, Vue uses the index of the items since it's the only thing it can do without having to \"guess\" what the developer wants.\nVue won't generate unique keys for you, there is no point in this. The developer needs to provide unique keys because Vue can't guess them. Also, Vue mutating your objects on its own would be very wrong in my opinion.\nIf your data don't have any field that could be used as unique keys, there is something not right about it, ask your backend team.", "bodyHTML": "<p>By default, Vue uses the index of the items since it's the only thing it can do without having to \"guess\" what the developer wants.<br>\nVue won't generate unique keys for you, there is no point in this. The developer needs to provide unique keys because Vue can't guess them. Also, Vue mutating your objects on its own would be very wrong in my opinion.<br>\nIf your data don't have any field that could be used as unique keys, there is something not right about it, ask your backend team.</p>", "createdAt": "2017-07-28T09:34:49Z", "publishedAt": "2017-07-28T09:34:49Z", "lastEditedAt": null, "updatedAt": "2017-07-28T09:34:49Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-07-28T09:42:55Z"}}]}, "bodyParsed": [{"number": 7633, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "By default, Vue uses the index of the items since it's the only thing it can do without having to \"guess\" what the developer wants.", "sentSegmented": ["by", "default", "vue", "uses", "the", "index", "of", "the", "items", "since", "it", "'s", "the", "only", "thing", "it", "can", "do", "without", "having", "to", "guess", "what", "the", "developer", "wants"], "sentSegmentedWithoutStops": ["default", "vue", "uses", "index", "items", "since", "'s", "thing", "without", "guess", "developer", "wants"], "sentSegmentedWithoutStopsStemmed": ["default", "vue", "use", "index", "item", "sinc", "'s", "thing", "without", "guess", "develop", "want"]}, {"number": 7634, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Vue won't generate unique keys for you, there is no point in this.", "sentSegmented": ["vue", "wo", "n't", "generate", "unique", "keys", "for", "you", "there", "is", "no", "point", "in", "this"], "sentSegmentedWithoutStops": ["vue", "wo", "n't", "generate", "unique", "keys", "point"], "sentSegmentedWithoutStopsStemmed": ["vue", "wo", "n't", "gener", "uniqu", "key", "point"]}, {"number": 7635, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The developer needs to provide unique keys because Vue can't guess them.", "sentSegmented": ["the", "developer", "needs", "to", "provide", "unique", "keys", "because", "vue", "ca", "n't", "guess", "them"], "sentSegmentedWithoutStops": ["developer", "needs", "provide", "unique", "keys", "vue", "ca", "n't", "guess"], "sentSegmentedWithoutStopsStemmed": ["develop", "need", "provid", "uniqu", "key", "vue", "ca", "n't", "guess"]}, {"number": 7636, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Also, Vue mutating your objects on its own would be very wrong in my opinion.", "sentSegmented": ["also", "vue", "mutating", "your", "objects", "on", "its", "own", "would", "be", "very", "wrong", "in", "my", "opinion"], "sentSegmentedWithoutStops": ["also", "vue", "mutating", "objects", "would", "wrong", "opinion"], "sentSegmentedWithoutStopsStemmed": ["also", "vue", "mutat", "object", "would", "wrong", "opinion"]}, {"number": 7637, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If your data don't have any field that could be used as unique keys, there is something not right about it, ask your backend team.", "sentSegmented": ["if", "your", "data", "do", "n't", "have", "any", "field", "that", "could", "be", "used", "as", "unique", "keys", "there", "is", "something", "not", "right", "about", "it", "ask", "your", "backend", "team"], "sentSegmentedWithoutStops": ["data", "n't", "field", "could", "used", "unique", "keys", "something", "right", "ask", "backend", "team"], "sentSegmentedWithoutStopsStemmed": ["data", "n't", "field", "could", "use", "uniqu", "key", "someth", "right", "ask", "backend", "team"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYxODQwNQ==", "author": {"login": "vvpvvp"}, "body": "@posva , \r\n\r\n> But it's super easy to add an id. \r\n\r\nno..........\r\n\r\n1st, it' s ugly.\r\n\r\n2nd, it's easy to add an id in a simple demos. but, it's not easy to add an id in our complex datas with complex system. and the data is nested structure. and it's nested and nested and nested...\r\n\r\nfinally, it 's good in vue1.0 , and we don't need key at all, I know vue mechanism changed, I just wonder if there is some way can handle it, it will be so helpful.\r\n\r\ntips: it's not only v-for problems, some adjacent element with directive used, if you don't add some key, it's also has some problem.\r\n\r\n\r\n\r\n@Kingwl , my English is not good, maybe my words is not readability, I'm sorry about it,  but I am  also  peaceful.", "bodyText": "@posva ,\n\nBut it's super easy to add an id.\n\nno..........\n1st, it' s ugly.\n2nd, it's easy to add an id in a simple demos. but, it's not easy to add an id in our complex datas with complex system. and the data is nested structure. and it's nested and nested and nested...\nfinally, it 's good in vue1.0 , and we don't need key at all, I know vue mechanism changed, I just wonder if there is some way can handle it, it will be so helpful.\ntips: it's not only v-for problems, some adjacent element with directive used, if you don't add some key, it's also has some problem.\n@Kingwl , my English is not good, maybe my words is not readability, I'm sorry about it,  but I am  also  peaceful.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/posva/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/posva\">@posva</a> ,</p>\n<blockquote>\n<p>But it's super easy to add an id.</p>\n</blockquote>\n<p>no..........</p>\n<p>1st, it' s ugly.</p>\n<p>2nd, it's easy to add an id in a simple demos. but, it's not easy to add an id in our complex datas with complex system. and the data is nested structure. and it's nested and nested and nested...</p>\n<p>finally, it 's good in vue1.0 , and we don't need key at all, I know vue mechanism changed, I just wonder if there is some way can handle it, it will be so helpful.</p>\n<p>tips: it's not only v-for problems, some adjacent element with directive used, if you don't add some key, it's also has some problem.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Kingwl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Kingwl\">@Kingwl</a> , my English is not good, maybe my words is not readability, I'm sorry about it,  but I am  also  peaceful.</p>", "createdAt": "2017-07-28T10:27:25Z", "publishedAt": "2017-07-28T10:27:25Z", "lastEditedAt": null, "updatedAt": "2017-07-28T10:27:25Z", "reactions": {"edges": [{"node": {"content": "LAUGH", "createdAt": "2017-07-28T10:30:06Z"}}, {"node": {"content": "LAUGH", "createdAt": "2017-11-13T23:09:11Z"}}]}, "bodyParsed": [{"number": 7638, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@posva ,", "sentSegmented": ["posva"], "sentSegmentedWithoutStops": ["posva"], "sentSegmentedWithoutStopsStemmed": ["posva"]}, {"number": 7639, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "But it's super easy to add an id.", "sentSegmented": ["but", "it", "'s", "super", "easy", "to", "add", "an", "id"], "sentSegmentedWithoutStops": ["'s", "super", "easy", "add", "id"], "sentSegmentedWithoutStopsStemmed": ["'s", "super", "easi", "add", "id"]}, {"number": 7640, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "no..........", "sentSegmented": ["no"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7641, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "1st, it' s ugly.", "sentSegmented": ["1st", "it", "s", "ugly"], "sentSegmentedWithoutStops": ["1st", "ugly"], "sentSegmentedWithoutStopsStemmed": ["1st", "ugli"]}, {"number": 7642, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "2nd, it's easy to add an id in a simple demos.", "sentSegmented": ["2nd", "it", "'s", "easy", "to", "add", "an", "id", "in", "a", "simple", "demos"], "sentSegmentedWithoutStops": ["2nd", "'s", "easy", "add", "id", "simple", "demos"], "sentSegmentedWithoutStopsStemmed": ["2nd", "'s", "easi", "add", "id", "simpl", "demo"]}, {"number": 7643, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "but, it's not easy to add an id in our complex datas with complex system.", "sentSegmented": ["but", "it", "'s", "not", "easy", "to", "add", "an", "id", "in", "our", "complex", "datas", "with", "complex", "system"], "sentSegmentedWithoutStops": ["'s", "easy", "add", "id", "complex", "datas", "complex", "system"], "sentSegmentedWithoutStopsStemmed": ["'s", "easi", "add", "id", "complex", "data", "complex", "system"]}, {"number": 7644, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and the data is nested structure.", "sentSegmented": ["and", "the", "data", "is", "nested", "structure"], "sentSegmentedWithoutStops": ["data", "nested", "structure"], "sentSegmentedWithoutStopsStemmed": ["data", "nest", "structur"]}, {"number": 7645, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and it's nested and nested and nested...", "sentSegmented": ["and", "it", "'s", "nested", "and", "nested", "and", "nested"], "sentSegmentedWithoutStops": ["'s", "nested", "nested", "nested"], "sentSegmentedWithoutStopsStemmed": ["'s", "nest", "nest", "nest"]}, {"number": 7646, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "finally, it 's good in vue1.0 , and we don't need key at all, I know vue mechanism changed, I just wonder if there is some way can handle it, it will be so helpful.", "sentSegmented": ["finally", "it", "'s", "good", "in", "vue1.0", "and", "we", "do", "n't", "need", "key", "at", "all", "i", "know", "vue", "mechanism", "changed", "i", "just", "wonder", "if", "there", "is", "some", "way", "can", "handle", "it", "it", "will", "be", "so", "helpful"], "sentSegmentedWithoutStops": ["finally", "'s", "good", "vue1.0", "n't", "need", "key", "know", "vue", "mechanism", "changed", "wonder", "way", "handle", "helpful"], "sentSegmentedWithoutStopsStemmed": ["final", "'s", "good", "vue1.0", "n't", "need", "key", "know", "vue", "mechan", "chang", "wonder", "way", "handl", "help"]}, {"number": 7647, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "tips: it's not only v-for problems, some adjacent element with directive used, if you don't add some key, it's also has some problem.", "sentSegmented": ["tips", "it", "'s", "not", "only", "v-for", "problems", "some", "adjacent", "element", "with", "directive", "used", "if", "you", "do", "n't", "add", "some", "key", "it", "'s", "also", "has", "some", "problem"], "sentSegmentedWithoutStops": ["tips", "'s", "v-for", "problems", "adjacent", "element", "directive", "used", "n't", "add", "key", "'s", "also", "problem"], "sentSegmentedWithoutStopsStemmed": ["tip", "'s", "v-for", "problem", "adjac", "element", "direct", "use", "n't", "add", "key", "'s", "also", "problem"]}, {"number": 7648, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@Kingwl , my English is not good, maybe my words is not readability, I'm sorry about it,  but I am  also  peaceful.", "sentSegmented": ["kingwl", "my", "english", "is", "not", "good", "maybe", "my", "words", "is", "not", "readability", "i", "'m", "sorry", "about", "it", "but", "i", "am", "also", "peaceful"], "sentSegmentedWithoutStops": ["kingwl", "english", "good", "maybe", "words", "readability", "'m", "sorry", "also", "peaceful"], "sentSegmentedWithoutStopsStemmed": ["kingwl", "english", "good", "mayb", "word", "readabl", "'m", "sorri", "also", "peac"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYyMTczNA==", "author": {"login": "Akryum"}, "body": "> 1st, it' s ugly.\r\n\r\nWhy?\r\n\r\n> 2nd, it's easy to add an id in a simple demos. but, it's not easy to add an id in our complex datas with complex system. and the data is nested structure. and it's nested and nested and nested...\r\n\r\nDon't you have fields in your data to make them unique? How do you make the relations between your objects?\r\n\r\n> finally, it 's good in vue1.0 , and we don't need key at all\r\n\r\nIf you want the default behavior, you can just use the index:\r\n\r\n```vue\r\n<MyComponent v-for=\"(item, index) of items\" :key=\"index\"/>\r\n```\r\n\r\n*Note that you don't need this if you are looping over HTML standard elements.*", "bodyText": "1st, it' s ugly.\n\nWhy?\n\n2nd, it's easy to add an id in a simple demos. but, it's not easy to add an id in our complex datas with complex system. and the data is nested structure. and it's nested and nested and nested...\n\nDon't you have fields in your data to make them unique? How do you make the relations between your objects?\n\nfinally, it 's good in vue1.0 , and we don't need key at all\n\nIf you want the default behavior, you can just use the index:\n<MyComponent v-for=\"(item, index) of items\" :key=\"index\"/>\nNote that you don't need this if you are looping over HTML standard elements.", "bodyHTML": "<blockquote>\n<p>1st, it' s ugly.</p>\n</blockquote>\n<p>Why?</p>\n<blockquote>\n<p>2nd, it's easy to add an id in a simple demos. but, it's not easy to add an id in our complex datas with complex system. and the data is nested structure. and it's nested and nested and nested...</p>\n</blockquote>\n<p>Don't you have fields in your data to make them unique? How do you make the relations between your objects?</p>\n<blockquote>\n<p>finally, it 's good in vue1.0 , and we don't need key at all</p>\n</blockquote>\n<p>If you want the default behavior, you can just use the index:</p>\n<div class=\"highlight highlight-text-html-vue\"><pre>&lt;<span class=\"pl-ent\">MyComponent</span> <span class=\"pl-e\">v-for</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>(item, index) <span class=\"pl-k\">of</span> items<span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">key</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>/&gt;</pre></div>\n<p><em>Note that you don't need this if you are looping over HTML standard elements.</em></p>", "createdAt": "2017-07-28T10:46:44Z", "publishedAt": "2017-07-28T10:46:44Z", "lastEditedAt": "2017-07-28T10:47:53Z", "updatedAt": "2017-07-28T10:47:53Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7649, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "1st, it' s ugly.", "sentSegmented": ["1st", "it", "s", "ugly"], "sentSegmentedWithoutStops": ["1st", "ugly"], "sentSegmentedWithoutStopsStemmed": ["1st", "ugli"]}, {"number": 7650, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Why?", "sentSegmented": ["why"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7651, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "2nd, it's easy to add an id in a simple demos.", "sentSegmented": ["2nd", "it", "'s", "easy", "to", "add", "an", "id", "in", "a", "simple", "demos"], "sentSegmentedWithoutStops": ["2nd", "'s", "easy", "add", "id", "simple", "demos"], "sentSegmentedWithoutStopsStemmed": ["2nd", "'s", "easi", "add", "id", "simpl", "demo"]}, {"number": 7652, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "but, it's not easy to add an id in our complex datas with complex system.", "sentSegmented": ["but", "it", "'s", "not", "easy", "to", "add", "an", "id", "in", "our", "complex", "datas", "with", "complex", "system"], "sentSegmentedWithoutStops": ["'s", "easy", "add", "id", "complex", "datas", "complex", "system"], "sentSegmentedWithoutStopsStemmed": ["'s", "easi", "add", "id", "complex", "data", "complex", "system"]}, {"number": 7653, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "and the data is nested structure.", "sentSegmented": ["and", "the", "data", "is", "nested", "structure"], "sentSegmentedWithoutStops": ["data", "nested", "structure"], "sentSegmentedWithoutStopsStemmed": ["data", "nest", "structur"]}, {"number": 7654, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "and it's nested and nested and nested...", "sentSegmented": ["and", "it", "'s", "nested", "and", "nested", "and", "nested"], "sentSegmentedWithoutStops": ["'s", "nested", "nested", "nested"], "sentSegmentedWithoutStopsStemmed": ["'s", "nest", "nest", "nest"]}, {"number": 7655, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Don't you have fields in your data to make them unique?", "sentSegmented": ["do", "n't", "you", "have", "fields", "in", "your", "data", "to", "make", "them", "unique"], "sentSegmentedWithoutStops": ["n't", "fields", "data", "make", "unique"], "sentSegmentedWithoutStopsStemmed": ["n't", "field", "data", "make", "uniqu"]}, {"number": 7656, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "How do you make the relations between your objects?", "sentSegmented": ["how", "do", "you", "make", "the", "relations", "between", "your", "objects"], "sentSegmentedWithoutStops": ["make", "relations", "objects"], "sentSegmentedWithoutStopsStemmed": ["make", "relat", "object"]}, {"number": 7657, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "finally, it 's good in vue1.0 , and we don't need key at all", "sentSegmented": ["finally", "it", "'s", "good", "in", "vue1.0", "and", "we", "do", "n't", "need", "key", "at", "all"], "sentSegmentedWithoutStops": ["finally", "'s", "good", "vue1.0", "n't", "need", "key"], "sentSegmentedWithoutStopsStemmed": ["final", "'s", "good", "vue1.0", "n't", "need", "key"]}, {"number": 7658, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you want the default behavior, you can just use the index:", "sentSegmented": ["if", "you", "want", "the", "default", "behavior", "you", "can", "just", "use", "the", "index"], "sentSegmentedWithoutStops": ["want", "default", "behavior", "use", "index"], "sentSegmentedWithoutStopsStemmed": ["want", "default", "behavior", "use", "index"]}, {"number": 7659, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<MyComponent v-for=\"(item, index) of items\" :key=\"index\"/>", "sentSegmented": ["mycomponent", "v-for=", "item", "index", "of", "items", "key=", "index"], "sentSegmentedWithoutStops": ["mycomponent", "v-for=", "item", "index", "items", "key=", "index"], "sentSegmentedWithoutStopsStemmed": ["mycompon", "v-for=", "item", "index", "item", "key=", "index"]}, {"number": 7660, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Note that you don't need this if you are looping over HTML standard elements.", "sentSegmented": ["note", "that", "you", "do", "n't", "need", "this", "if", "you", "are", "looping", "over", "html", "standard", "elements"], "sentSegmentedWithoutStops": ["note", "n't", "need", "looping", "html", "standard", "elements"], "sentSegmentedWithoutStopsStemmed": ["note", "n't", "need", "loop", "html", "standard", "element"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYyMjE2MA==", "author": {"login": "vvpvvp"}, "body": "I wrote very slowly,  so when i complete my answer,  always a new answer to me.\r\n\r\n@javoski , you are so kindly,  function `genUniqueKey `, I  can wrote it myself, there is no problem at all.\r\n\r\nvue can't change the datas we define, and also I can't change the data used on my ui components, like table component and so on.\r\n\r\nI wrote an ui toolkit with vue2.0, http://www.heyui.top/component, if i used kind of `genUniqueKey ` function,  maybe i can do, but it's too hard, and i really don't like the way.", "bodyText": "I wrote very slowly,  so when i complete my answer,  always a new answer to me.\n@javoski , you are so kindly,  function genUniqueKey , I  can wrote it myself, there is no problem at all.\nvue can't change the datas we define, and also I can't change the data used on my ui components, like table component and so on.\nI wrote an ui toolkit with vue2.0, http://www.heyui.top/component, if i used kind of genUniqueKey  function,  maybe i can do, but it's too hard, and i really don't like the way.", "bodyHTML": "<p>I wrote very slowly,  so when i complete my answer,  always a new answer to me.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/javoski/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/javoski\">@javoski</a> , you are so kindly,  function <code>genUniqueKey </code>, I  can wrote it myself, there is no problem at all.</p>\n<p>vue can't change the datas we define, and also I can't change the data used on my ui components, like table component and so on.</p>\n<p>I wrote an ui toolkit with vue2.0, <a rel=\"nofollow\" href=\"http://www.heyui.top/component\">http://www.heyui.top/component</a>, if i used kind of <code>genUniqueKey </code> function,  maybe i can do, but it's too hard, and i really don't like the way.</p>", "createdAt": "2017-07-28T10:49:12Z", "publishedAt": "2017-07-28T10:49:12Z", "lastEditedAt": null, "updatedAt": "2017-07-28T10:49:12Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7661, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I wrote very slowly,  so when i complete my answer,  always a new answer to me.", "sentSegmented": ["i", "wrote", "very", "slowly", "so", "when", "i", "complete", "my", "answer", "always", "a", "new", "answer", "to", "me"], "sentSegmentedWithoutStops": ["wrote", "slowly", "complete", "answer", "always", "new", "answer"], "sentSegmentedWithoutStopsStemmed": ["wrote", "slowli", "complet", "answer", "alway", "new", "answer"]}, {"number": 7662, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@javoski , you are so kindly,  function genUniqueKey , I  can wrote it myself, there is no problem at all.", "sentSegmented": ["javoski", "you", "are", "so", "kindly", "function", "genuniquekey", "i", "can", "wrote", "it", "myself", "there", "is", "no", "problem", "at", "all"], "sentSegmentedWithoutStops": ["javoski", "kindly", "function", "genuniquekey", "wrote", "problem"], "sentSegmentedWithoutStopsStemmed": ["javoski", "kindli", "function", "genuniquekey", "wrote", "problem"]}, {"number": 7663, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "vue can't change the datas we define, and also I can't change the data used on my ui components, like table component and so on.", "sentSegmented": ["vue", "ca", "n't", "change", "the", "datas", "we", "define", "and", "also", "i", "ca", "n't", "change", "the", "data", "used", "on", "my", "ui", "components", "like", "table", "component", "and", "so", "on"], "sentSegmentedWithoutStops": ["vue", "ca", "n't", "change", "datas", "define", "also", "ca", "n't", "change", "data", "used", "ui", "components", "like", "table", "component"], "sentSegmentedWithoutStopsStemmed": ["vue", "ca", "n't", "chang", "data", "defin", "also", "ca", "n't", "chang", "data", "use", "ui", "compon", "like", "tabl", "compon"]}, {"number": 7664, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I wrote an ui toolkit with vue2.0, http://www.heyui.top/component, if i used kind of genUniqueKey  function,  maybe i can do, but it's too hard, and i really don't like the way.", "sentSegmented": ["i", "wrote", "an", "ui", "toolkit", "with", "vue2.0", "http", "//www.heyui.top/component", "if", "i", "used", "kind", "of", "genuniquekey", "function", "maybe", "i", "can", "do", "but", "it", "'s", "too", "hard", "and", "i", "really", "do", "n't", "like", "the", "way"], "sentSegmentedWithoutStops": ["wrote", "ui", "toolkit", "vue2.0", "http", "//www.heyui.top/component", "used", "kind", "genuniquekey", "function", "maybe", "'s", "hard", "really", "n't", "like", "way"], "sentSegmentedWithoutStopsStemmed": ["wrote", "ui", "toolkit", "vue2.0", "http", "//www.heyui.top/compon", "use", "kind", "genuniquekey", "function", "mayb", "'s", "hard", "realli", "n't", "like", "way"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYyMjY2OA==", "author": {"login": "vvpvvp"}, "body": "@Akryum , I don't want to answer it so many times. index is not useful, please read this demo .\r\n\r\nlink: https://codepen.io/vvpvvp/pen/oZKpgE\r\nsteps:\r\n1: click \"add\" twice\r\n2: click the last line 'click me'.\r\n3: click the first line 'delete'.", "bodyText": "@Akryum , I don't want to answer it so many times. index is not useful, please read this demo .\nlink: https://codepen.io/vvpvvp/pen/oZKpgE\nsteps:\n1: click \"add\" twice\n2: click the last line 'click me'.\n3: click the first line 'delete'.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Akryum/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Akryum\">@Akryum</a> , I don't want to answer it so many times. index is not useful, please read this demo .</p>\n<p>link: <a rel=\"nofollow\" href=\"https://codepen.io/vvpvvp/pen/oZKpgE\">https://codepen.io/vvpvvp/pen/oZKpgE</a><br>\nsteps:<br>\n1: click \"add\" twice<br>\n2: click the last line 'click me'.<br>\n3: click the first line 'delete'.</p>", "createdAt": "2017-07-28T10:52:07Z", "publishedAt": "2017-07-28T10:52:07Z", "lastEditedAt": null, "updatedAt": "2017-07-28T10:52:07Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7665, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@Akryum , I don't want to answer it so many times.", "sentSegmented": ["akryum", "i", "do", "n't", "want", "to", "answer", "it", "so", "many", "times"], "sentSegmentedWithoutStops": ["akryum", "n't", "want", "answer", "many", "times"], "sentSegmentedWithoutStopsStemmed": ["akryum", "n't", "want", "answer", "mani", "time"]}, {"number": 7666, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "index is not useful, please read this demo .", "sentSegmented": ["index", "is", "not", "useful", "please", "read", "this", "demo"], "sentSegmentedWithoutStops": ["index", "useful", "please", "read", "demo"], "sentSegmentedWithoutStopsStemmed": ["index", "use", "pleas", "read", "demo"]}, {"number": 7667, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "link: https://codepen.io/vvpvvp/pen/oZKpgE", "sentSegmented": ["link", "https", "//codepen.io/vvpvvp/pen/ozkpge"], "sentSegmentedWithoutStops": ["link", "https", "//codepen.io/vvpvvp/pen/ozkpge"], "sentSegmentedWithoutStopsStemmed": ["link", "http", "//codepen.io/vvpvvp/pen/ozkpg"]}, {"number": 7668, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "steps:", "sentSegmented": ["steps"], "sentSegmentedWithoutStops": ["steps"], "sentSegmentedWithoutStopsStemmed": ["step"]}, {"number": 7669, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "1: click \"add\" twice", "sentSegmented": ["1", "click", "add", "twice"], "sentSegmentedWithoutStops": ["1", "click", "add", "twice"], "sentSegmentedWithoutStopsStemmed": ["1", "click", "add", "twice"]}, {"number": 7670, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "2: click the last line 'click me'.", "sentSegmented": ["2", "click", "the", "last", "line", "'click", "me"], "sentSegmentedWithoutStops": ["2", "click", "last", "line", "'click"], "sentSegmentedWithoutStopsStemmed": ["2", "click", "last", "line", "'click"]}, {"number": 7671, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "3: click the first line 'delete'.", "sentSegmented": ["3", "click", "the", "first", "line", "'delete"], "sentSegmentedWithoutStops": ["3", "click", "first", "line", "'delete"], "sentSegmentedWithoutStopsStemmed": ["3", "click", "first", "line", "'delet"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYyMzY1NA==", "author": {"login": "Akryum"}, "body": "@vvpvvp I was answering just a part of your comment. As you should know by now, your issue will be resolved when you will provide a unique key for each item in your data.", "bodyText": "@vvpvvp I was answering just a part of your comment. As you should know by now, your issue will be resolved when you will provide a unique key for each item in your data.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a> I was answering just a part of your comment. As you should know by now, your issue will be resolved when you will provide a unique key for each item in your data.</p>", "createdAt": "2017-07-28T10:57:35Z", "publishedAt": "2017-07-28T10:57:35Z", "lastEditedAt": null, "updatedAt": "2017-07-28T10:57:35Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7672, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@vvpvvp I was answering just a part of your comment.", "sentSegmented": ["vvpvvp", "i", "was", "answering", "just", "a", "part", "of", "your", "comment"], "sentSegmentedWithoutStops": ["vvpvvp", "answering", "part", "comment"], "sentSegmentedWithoutStopsStemmed": ["vvpvvp", "answer", "part", "comment"]}, {"number": 7673, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As you should know by now, your issue will be resolved when you will provide a unique key for each item in your data.", "sentSegmented": ["as", "you", "should", "know", "by", "now", "your", "issue", "will", "be", "resolved", "when", "you", "will", "provide", "a", "unique", "key", "for", "each", "item", "in", "your", "data"], "sentSegmentedWithoutStops": ["know", "issue", "resolved", "provide", "unique", "key", "item", "data"], "sentSegmentedWithoutStopsStemmed": ["know", "issu", "resolv", "provid", "uniqu", "key", "item", "data"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODYzMjc2MA==", "author": {"login": "posva"}, "body": "Let's move the discussion to the [Discord server](https://vue-land.js.org/) (or the [forum](http://forum.vuejs.org/)). Other people will be able to help you with insights that are more specific to your project @vvpvvp \ud83d\ude42 \r\nThanks", "bodyText": "Let's move the discussion to the Discord server (or the forum). Other people will be able to help you with insights that are more specific to your project @vvpvvp \ud83d\ude42\nThanks", "bodyHTML": "<p>Let's move the discussion to the <a href=\"https://vue-land.js.org/\" rel=\"nofollow\">Discord server</a> (or the <a href=\"http://forum.vuejs.org/\" rel=\"nofollow\">forum</a>). Other people will be able to help you with insights that are more specific to your project <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a> <g-emoji class=\"g-emoji\" alias=\"slightly_smiling_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f642.png\">\ud83d\ude42</g-emoji><br>\nThanks</p>", "createdAt": "2017-07-28T11:52:54Z", "publishedAt": "2017-07-28T11:52:54Z", "lastEditedAt": null, "updatedAt": "2017-07-28T11:52:54Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7674, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Let's move the discussion to the Discord server (or the forum).", "sentSegmented": ["let", "'s", "move", "the", "discussion", "to", "the", "discord", "server", "or", "the", "forum"], "sentSegmentedWithoutStops": ["let", "'s", "move", "discussion", "discord", "server", "forum"], "sentSegmentedWithoutStopsStemmed": ["let", "'s", "move", "discuss", "discord", "server", "forum"]}, {"number": 7675, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Other people will be able to help you with insights that are more specific to your project @vvpvvp \ud83d\ude42", "sentSegmented": ["other", "people", "will", "be", "able", "to", "help", "you", "with", "insights", "that", "are", "more", "specific", "to", "your", "project", "vvpvvp"], "sentSegmentedWithoutStops": ["people", "able", "help", "insights", "specific", "project", "vvpvvp"], "sentSegmentedWithoutStopsStemmed": ["peopl", "abl", "help", "insight", "specif", "project", "vvpvvp"]}, {"number": 7676, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMyNzgwMjQzMA==", "author": {"login": "nauzethc"}, "body": "@vvpvvp I came to a similar situation using Vue components inside a list that it can be edited (add/remove items and change the order using [VueDraggable](https://github.com/SortableJS/Vue.Draggable)). Items haven't any unique id because they are generated data within a form. The solution I've found is to use a \"shadow\" list where I save unique ids, for rendering purpose, and to edit both lists on user interaction.\r\n\r\nHere is an example using your code\r\nhttps://codepen.io/anon/pen/RZzbmM", "bodyText": "@vvpvvp I came to a similar situation using Vue components inside a list that it can be edited (add/remove items and change the order using VueDraggable). Items haven't any unique id because they are generated data within a form. The solution I've found is to use a \"shadow\" list where I save unique ids, for rendering purpose, and to edit both lists on user interaction.\nHere is an example using your code\nhttps://codepen.io/anon/pen/RZzbmM", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a> I came to a similar situation using Vue components inside a list that it can be edited (add/remove items and change the order using <a href=\"https://github.com/SortableJS/Vue.Draggable\">VueDraggable</a>). Items haven't any unique id because they are generated data within a form. The solution I've found is to use a \"shadow\" list where I save unique ids, for rendering purpose, and to edit both lists on user interaction.</p>\n<p>Here is an example using your code<br>\n<a rel=\"nofollow\" href=\"https://codepen.io/anon/pen/RZzbmM\">https://codepen.io/anon/pen/RZzbmM</a></p>", "createdAt": "2017-09-07T13:40:29Z", "publishedAt": "2017-09-07T13:40:29Z", "lastEditedAt": null, "updatedAt": "2017-09-07T13:40:29Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-05-22T14:38:40Z"}}]}, "bodyParsed": [{"number": 7677, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@vvpvvp I came to a similar situation using Vue components inside a list that it can be edited (add/remove items and change the order using VueDraggable).", "sentSegmented": ["vvpvvp", "i", "came", "to", "a", "similar", "situation", "using", "vue", "components", "inside", "a", "list", "that", "it", "can", "be", "edited", "add/remove", "items", "and", "change", "the", "order", "using", "vuedraggable"], "sentSegmentedWithoutStops": ["vvpvvp", "came", "similar", "situation", "using", "vue", "components", "inside", "list", "edited", "add/remove", "items", "change", "order", "using", "vuedraggable"], "sentSegmentedWithoutStopsStemmed": ["vvpvvp", "came", "similar", "situat", "use", "vue", "compon", "insid", "list", "edit", "add/remov", "item", "chang", "order", "use", "vuedragg"]}, {"number": 7678, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Items haven't any unique id because they are generated data within a form.", "sentSegmented": ["items", "have", "n't", "any", "unique", "id", "because", "they", "are", "generated", "data", "within", "a", "form"], "sentSegmentedWithoutStops": ["items", "n't", "unique", "id", "generated", "data", "within", "form"], "sentSegmentedWithoutStopsStemmed": ["item", "n't", "uniqu", "id", "gener", "data", "within", "form"]}, {"number": 7679, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The solution I've found is to use a \"shadow\" list where I save unique ids, for rendering purpose, and to edit both lists on user interaction.", "sentSegmented": ["the", "solution", "i", "'ve", "found", "is", "to", "use", "a", "shadow", "list", "where", "i", "save", "unique", "ids", "for", "rendering", "purpose", "and", "to", "edit", "both", "lists", "on", "user", "interaction"], "sentSegmentedWithoutStops": ["solution", "'ve", "found", "use", "shadow", "list", "save", "unique", "ids", "rendering", "purpose", "edit", "lists", "user", "interaction"], "sentSegmentedWithoutStopsStemmed": ["solut", "'ve", "found", "use", "shadow", "list", "save", "uniqu", "id", "render", "purpos", "edit", "list", "user", "interact"]}, {"number": 7680, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Here is an example using your code", "sentSegmented": ["here", "is", "an", "example", "using", "your", "code"], "sentSegmentedWithoutStops": ["example", "using", "code"], "sentSegmentedWithoutStopsStemmed": ["exampl", "use", "code"]}, {"number": 7681, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "https://codepen.io/anon/pen/RZzbmM", "sentSegmented": ["https", "//codepen.io/anon/pen/rzzbmm"], "sentSegmentedWithoutStops": ["https", "//codepen.io/anon/pen/rzzbmm"], "sentSegmentedWithoutStopsStemmed": ["http", "//codepen.io/anon/pen/rzzbmm"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMyNzk4ODQzMA==", "author": {"login": "vvpvvp"}, "body": "@nauzethc, thank you very much.\r\nI must explain that I know all this solution about solve this question.\r\nBut It's will be better if we don't need a key In the ordinary way.\r\nIt's not a problem when we use `v-for`, I met so many inexplicable problems in my development.", "bodyText": "@nauzethc, thank you very much.\nI must explain that I know all this solution about solve this question.\nBut It's will be better if we don't need a key In the ordinary way.\nIt's not a problem when we use v-for, I met so many inexplicable problems in my development.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nauzethc/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nauzethc\">@nauzethc</a>, thank you very much.<br>\nI must explain that I know all this solution about solve this question.<br>\nBut It's will be better if we don't need a key In the ordinary way.<br>\nIt's not a problem when we use <code>v-for</code>, I met so many inexplicable problems in my development.</p>", "createdAt": "2017-09-08T03:18:53Z", "publishedAt": "2017-09-08T03:18:53Z", "lastEditedAt": null, "updatedAt": "2017-09-08T03:18:53Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7682, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@nauzethc, thank you very much.", "sentSegmented": ["nauzethc", "thank", "you", "very", "much"], "sentSegmentedWithoutStops": ["nauzethc", "thank", "much"], "sentSegmentedWithoutStopsStemmed": ["nauzethc", "thank", "much"]}, {"number": 7683, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I must explain that I know all this solution about solve this question.", "sentSegmented": ["i", "must", "explain", "that", "i", "know", "all", "this", "solution", "about", "solve", "this", "question"], "sentSegmentedWithoutStops": ["must", "explain", "know", "solution", "solve", "question"], "sentSegmentedWithoutStopsStemmed": ["must", "explain", "know", "solut", "solv", "question"]}, {"number": 7684, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But It's will be better if we don't need a key In the ordinary way.", "sentSegmented": ["but", "it", "'s", "will", "be", "better", "if", "we", "do", "n't", "need", "a", "key", "in", "the", "ordinary", "way"], "sentSegmentedWithoutStops": ["'s", "better", "n't", "need", "key", "ordinary", "way"], "sentSegmentedWithoutStopsStemmed": ["'s", "better", "n't", "need", "key", "ordinari", "way"]}, {"number": 7685, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's not a problem when we use v-for, I met so many inexplicable problems in my development.", "sentSegmented": ["it", "'s", "not", "a", "problem", "when", "we", "use", "v-for", "i", "met", "so", "many", "inexplicable", "problems", "in", "my", "development"], "sentSegmentedWithoutStops": ["'s", "problem", "use", "v-for", "met", "many", "inexplicable", "problems", "development"], "sentSegmentedWithoutStopsStemmed": ["'s", "problem", "use", "v-for", "met", "mani", "inexplic", "problem", "develop"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMyODAwNjIxNw==", "author": {"login": "cyberm1nd"}, "body": "@vvpvvp, i understand your problem.\r\nThe main problem with key here is if your data realy have unique ids but, when you create new items in list/table you add them with blank ids like 000-000, then when it goes to server it generates proper uids. \r\nBut as far as your are in edit mode and adding new items you don't realy want to generate ids for them, server needs em as blank, so to handle this problem you have to add another one ids and that's not realy something you want.\r\nAdding an option that would generate keys for inner Vue use seems legit request.", "bodyText": "@vvpvvp, i understand your problem.\nThe main problem with key here is if your data realy have unique ids but, when you create new items in list/table you add them with blank ids like 000-000, then when it goes to server it generates proper uids.\nBut as far as your are in edit mode and adding new items you don't realy want to generate ids for them, server needs em as blank, so to handle this problem you have to add another one ids and that's not realy something you want.\nAdding an option that would generate keys for inner Vue use seems legit request.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vvpvvp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvpvvp\">@vvpvvp</a>, i understand your problem.<br>\nThe main problem with key here is if your data realy have unique ids but, when you create new items in list/table you add them with blank ids like 000-000, then when it goes to server it generates proper uids.<br>\nBut as far as your are in edit mode and adding new items you don't realy want to generate ids for them, server needs em as blank, so to handle this problem you have to add another one ids and that's not realy something you want.<br>\nAdding an option that would generate keys for inner Vue use seems legit request.</p>", "createdAt": "2017-09-08T05:55:38Z", "publishedAt": "2017-09-08T05:55:38Z", "lastEditedAt": null, "updatedAt": "2017-09-08T05:55:38Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-09-08T06:35:21Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-11-30T10:53:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-03T13:31:42Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-17T16:41:29Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-06-25T21:15:49Z"}}]}, "bodyParsed": [{"number": 7686, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@vvpvvp, i understand your problem.", "sentSegmented": ["vvpvvp", "i", "understand", "your", "problem"], "sentSegmentedWithoutStops": ["vvpvvp", "understand", "problem"], "sentSegmentedWithoutStopsStemmed": ["vvpvvp", "understand", "problem"]}, {"number": 7687, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The main problem with key here is if your data realy have unique ids but, when you create new items in list/table you add them with blank ids like 000-000, then when it goes to server it generates proper uids.", "sentSegmented": ["the", "main", "problem", "with", "key", "here", "is", "if", "your", "data", "realy", "have", "unique", "ids", "but", "when", "you", "create", "new", "items", "in", "list/table", "you", "add", "them", "with", "blank", "ids", "like", "000-000", "then", "when", "it", "goes", "to", "server", "it", "generates", "proper", "uids"], "sentSegmentedWithoutStops": ["main", "problem", "key", "data", "realy", "unique", "ids", "create", "new", "items", "list/table", "add", "blank", "ids", "like", "000-000", "goes", "server", "generates", "proper", "uids"], "sentSegmentedWithoutStopsStemmed": ["main", "problem", "key", "data", "reali", "uniqu", "id", "creat", "new", "item", "list/tabl", "add", "blank", "id", "like", "000-000", "goe", "server", "gener", "proper", "uid"]}, {"number": 7688, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But as far as your are in edit mode and adding new items you don't realy want to generate ids for them, server needs em as blank, so to handle this problem you have to add another one ids and that's not realy something you want.", "sentSegmented": ["but", "as", "far", "as", "your", "are", "in", "edit", "mode", "and", "adding", "new", "items", "you", "do", "n't", "realy", "want", "to", "generate", "ids", "for", "them", "server", "needs", "em", "as", "blank", "so", "to", "handle", "this", "problem", "you", "have", "to", "add", "another", "one", "ids", "and", "that", "'s", "not", "realy", "something", "you", "want"], "sentSegmentedWithoutStops": ["far", "edit", "mode", "adding", "new", "items", "n't", "realy", "want", "generate", "ids", "server", "needs", "em", "blank", "handle", "problem", "add", "another", "one", "ids", "'s", "realy", "something", "want"], "sentSegmentedWithoutStopsStemmed": ["far", "edit", "mode", "ad", "new", "item", "n't", "reali", "want", "gener", "id", "server", "need", "em", "blank", "handl", "problem", "add", "anoth", "one", "id", "'s", "reali", "someth", "want"]}, {"number": 7689, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Adding an option that would generate keys for inner Vue use seems legit request.", "sentSegmented": ["adding", "an", "option", "that", "would", "generate", "keys", "for", "inner", "vue", "use", "seems", "legit", "request"], "sentSegmentedWithoutStops": ["adding", "option", "would", "generate", "keys", "inner", "vue", "use", "seems", "legit", "request"], "sentSegmentedWithoutStopsStemmed": ["ad", "option", "would", "gener", "key", "inner", "vue", "use", "seem", "legit", "request"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3NDY5ODc3MQ==", "author": {"login": "iamohd"}, "body": "I came across this issue and resolved it by adding \"key\" attribute with Date.now() value as a key.", "bodyText": "I came across this issue and resolved it by adding \"key\" attribute with Date.now() value as a key.", "bodyHTML": "<p>I came across this issue and resolved it by adding \"key\" attribute with Date.now() value as a key.</p>", "createdAt": "2018-03-20T18:03:17Z", "publishedAt": "2018-03-20T18:03:17Z", "lastEditedAt": null, "updatedAt": "2019-07-22T22:27:04Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-03-21T05:19:04Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-06-29T14:04:49Z"}}]}, "bodyParsed": [{"number": 7690, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I came across this issue and resolved it by adding \"key\" attribute with Date.now() value as a key.", "sentSegmented": ["i", "came", "across", "this", "issue", "and", "resolved", "it", "by", "adding", "key", "attribute", "with", "date.now", "value", "as", "a", "key"], "sentSegmentedWithoutStops": ["came", "across", "issue", "resolved", "adding", "key", "attribute", "date.now", "value", "key"], "sentSegmentedWithoutStopsStemmed": ["came", "across", "issu", "resolv", "ad", "key", "attribut", "date.now", "valu", "key"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3NDgxODcxMQ==", "author": {"login": "vvpvvp"}, "body": "e....\r\ngood solution?\r\nIt's mean you give up use \u201cin-place patch\u201d strategy", "bodyText": "e....\ngood solution?\nIt's mean you give up use \u201cin-place patch\u201d strategy", "bodyHTML": "<p>e....<br>\ngood solution?<br>\nIt's mean you give up use \u201cin-place patch\u201d strategy</p>", "createdAt": "2018-03-21T02:33:59Z", "publishedAt": "2018-03-21T02:33:59Z", "lastEditedAt": null, "updatedAt": "2018-03-21T02:33:59Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7691, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "e....", "sentSegmented": ["e"], "sentSegmentedWithoutStops": ["e"], "sentSegmentedWithoutStopsStemmed": ["e"]}, {"number": 7692, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "good solution?", "sentSegmented": ["good", "solution"], "sentSegmentedWithoutStops": ["good", "solution"], "sentSegmentedWithoutStopsStemmed": ["good", "solut"]}, {"number": 7693, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's mean you give up use \u201cin-place patch\u201d strategy", "sentSegmented": ["it", "'s", "mean", "you", "give", "up", "use", "in-place", "patch", "strategy"], "sentSegmentedWithoutStops": ["'s", "mean", "give", "use", "in-place", "patch", "strategy"], "sentSegmentedWithoutStopsStemmed": ["'s", "mean", "give", "use", "in-plac", "patch", "strategi"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMjY5NTcwMw==", "author": {"login": "nickensoul"}, "body": "@mohd-isa \r\nIt's unsafe method. Iteration loop may take place more than one in the same Date.now() period.\r\nLook: http://snpy.in/pjuT8K\r\n`Date.now()` used in screenshot.\r\n\r\nActually, the problem appears in cases we can't get UID from item; items could change (they come as a props for ex.); they should take place simultaneously (transition-group, for ex.).\r\nThats the point \u2013 we can't set simply index, or `my-awesome-item${index}`, etc.\r\n\r\nIMO, the best way is provide build-in mechanism for generating UIDs. That isn't hard to write helpers, it's hard to do it every time in every project.\r\nJust include generator to the Vue core or add helpers (we just have Map-helpers in Vuex, why not?).", "bodyText": "@mohd-isa\nIt's unsafe method. Iteration loop may take place more than one in the same Date.now() period.\nLook: http://snpy.in/pjuT8K\nDate.now() used in screenshot.\nActually, the problem appears in cases we can't get UID from item; items could change (they come as a props for ex.); they should take place simultaneously (transition-group, for ex.).\nThats the point \u2013 we can't set simply index, or my-awesome-item${index}, etc.\nIMO, the best way is provide build-in mechanism for generating UIDs. That isn't hard to write helpers, it's hard to do it every time in every project.\nJust include generator to the Vue core or add helpers (we just have Map-helpers in Vuex, why not?).", "bodyHTML": "<p>@mohd-isa<br>\nIt's unsafe method. Iteration loop may take place more than one in the same Date.now() period.<br>\nLook: <a rel=\"nofollow\" href=\"http://snpy.in/pjuT8K\">http://snpy.in/pjuT8K</a><br>\n<code>Date.now()</code> used in screenshot.</p>\n<p>Actually, the problem appears in cases we can't get UID from item; items could change (they come as a props for ex.); they should take place simultaneously (transition-group, for ex.).<br>\nThats the point \u2013 we can't set simply index, or <code>my-awesome-item${index}</code>, etc.</p>\n<p>IMO, the best way is provide build-in mechanism for generating UIDs. That isn't hard to write helpers, it's hard to do it every time in every project.<br>\nJust include generator to the Vue core or add helpers (we just have Map-helpers in Vuex, why not?).</p>", "createdAt": "2018-07-05T11:44:10Z", "publishedAt": "2018-07-05T11:44:10Z", "lastEditedAt": null, "updatedAt": "2018-07-05T11:44:10Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7694, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@mohd-isa", "sentSegmented": ["mohd-isa"], "sentSegmentedWithoutStops": ["mohd-isa"], "sentSegmentedWithoutStopsStemmed": ["mohd-isa"]}, {"number": 7695, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's unsafe method.", "sentSegmented": ["it", "'s", "unsafe", "method"], "sentSegmentedWithoutStops": ["'s", "unsafe", "method"], "sentSegmentedWithoutStopsStemmed": ["'s", "unsaf", "method"]}, {"number": 7696, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Iteration loop may take place more than one in the same Date.now() period.", "sentSegmented": ["iteration", "loop", "may", "take", "place", "more", "than", "one", "in", "the", "same", "date.now", "period"], "sentSegmentedWithoutStops": ["iteration", "loop", "may", "take", "place", "one", "date.now", "period"], "sentSegmentedWithoutStopsStemmed": ["iter", "loop", "may", "take", "place", "one", "date.now", "period"]}, {"number": 7697, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Look: http://snpy.in/pjuT8K", "sentSegmented": ["look", "http", "//snpy.in/pjut8k"], "sentSegmentedWithoutStops": ["look", "http", "//snpy.in/pjut8k"], "sentSegmentedWithoutStopsStemmed": ["look", "http", "//snpy.in/pjut8k"]}, {"number": 7698, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Date.now() used in screenshot.", "sentSegmented": ["date.now", "used", "in", "screenshot"], "sentSegmentedWithoutStops": ["date.now", "used", "screenshot"], "sentSegmentedWithoutStopsStemmed": ["date.now", "use", "screenshot"]}, {"number": 7699, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Actually, the problem appears in cases we can't get UID from item; items could change (they come as a props for ex.", "sentSegmented": ["actually", "the", "problem", "appears", "in", "cases", "we", "ca", "n't", "get", "uid", "from", "item", "items", "could", "change", "they", "come", "as", "a", "props", "for", "ex"], "sentSegmentedWithoutStops": ["actually", "problem", "appears", "cases", "ca", "n't", "get", "uid", "item", "items", "could", "change", "come", "props", "ex"], "sentSegmentedWithoutStopsStemmed": ["actual", "problem", "appear", "case", "ca", "n't", "get", "uid", "item", "item", "could", "chang", "come", "prop", "ex"]}, {"number": 7700, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "); they should take place simultaneously (transition-group, for ex.", "sentSegmented": ["they", "should", "take", "place", "simultaneously", "transition-group", "for", "ex"], "sentSegmentedWithoutStops": ["take", "place", "simultaneously", "transition-group", "ex"], "sentSegmentedWithoutStopsStemmed": ["take", "place", "simultan", "transition-group", "ex"]}, {"number": 7701, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ").", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7702, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thats the point \u2013 we can't set simply index, or my-awesome-item${index}, etc.", "sentSegmented": ["thats", "the", "point", "we", "ca", "n't", "set", "simply", "index", "or", "my-awesome-item", "index", "etc"], "sentSegmentedWithoutStops": ["thats", "point", "ca", "n't", "set", "simply", "index", "my-awesome-item", "index", "etc"], "sentSegmentedWithoutStopsStemmed": ["that", "point", "ca", "n't", "set", "simpli", "index", "my-awesome-item", "index", "etc"]}, {"number": 7703, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "IMO, the best way is provide build-in mechanism for generating UIDs.", "sentSegmented": ["imo", "the", "best", "way", "is", "provide", "build-in", "mechanism", "for", "generating", "uids"], "sentSegmentedWithoutStops": ["imo", "best", "way", "provide", "build-in", "mechanism", "generating", "uids"], "sentSegmentedWithoutStopsStemmed": ["imo", "best", "way", "provid", "build-in", "mechan", "gener", "uid"]}, {"number": 7704, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That isn't hard to write helpers, it's hard to do it every time in every project.", "sentSegmented": ["that", "is", "n't", "hard", "to", "write", "helpers", "it", "'s", "hard", "to", "do", "it", "every", "time", "in", "every", "project"], "sentSegmentedWithoutStops": ["n't", "hard", "write", "helpers", "'s", "hard", "every", "time", "every", "project"], "sentSegmentedWithoutStopsStemmed": ["n't", "hard", "write", "helper", "'s", "hard", "everi", "time", "everi", "project"]}, {"number": 7705, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Just include generator to the Vue core or add helpers (we just have Map-helpers in Vuex, why not?", "sentSegmented": ["just", "include", "generator", "to", "the", "vue", "core", "or", "add", "helpers", "we", "just", "have", "map-helpers", "in", "vuex", "why", "not"], "sentSegmentedWithoutStops": ["include", "generator", "vue", "core", "add", "helpers", "map-helpers", "vuex"], "sentSegmentedWithoutStopsStemmed": ["includ", "gener", "vue", "core", "add", "helper", "map-help", "vuex"]}, {"number": 7706, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ").", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMjcyMDUzNg==", "author": {"login": "posva"}, "body": "Please refer to https://vuejs.org/v2/guide/list.html#key to see all the implications about setting a `key` and why Vue needs it for component.\r\n**Using Date.now() for keys is a very bad idea as it will tell Vue to never reuse components.**\r\nMost of the time using the index of the iteration is fine but if your component have a state and the list may change (new elements, removed, reordered), make sure to use an _id_ that uniquely represents the object that is passed to your component. For example: if you have a `contact` component that displays a contact information and has a `contact` prop, use the `id` of the contact (usually coming from the db) as the `key`:\r\n\r\n```vue\r\n<Contact v-for=\"contact in contacts\" :contact=\"contact\" :key=\"contact.id\" />\r\n```\r\n\r\nA built-in mechanism to generate UID have no place in Vue as it is not related to building interfaces.\r\nSometimes you can use other content that is unique like names. A cleaner way if to generate a new version of your list that augment your items with UIDs", "bodyText": "Please refer to https://vuejs.org/v2/guide/list.html#key to see all the implications about setting a key and why Vue needs it for component.\nUsing Date.now() for keys is a very bad idea as it will tell Vue to never reuse components.\nMost of the time using the index of the iteration is fine but if your component have a state and the list may change (new elements, removed, reordered), make sure to use an id that uniquely represents the object that is passed to your component. For example: if you have a contact component that displays a contact information and has a contact prop, use the id of the contact (usually coming from the db) as the key:\n<Contact v-for=\"contact in contacts\" :contact=\"contact\" :key=\"contact.id\" />\nA built-in mechanism to generate UID have no place in Vue as it is not related to building interfaces.\nSometimes you can use other content that is unique like names. A cleaner way if to generate a new version of your list that augment your items with UIDs", "bodyHTML": "<p>Please refer to <a rel=\"nofollow\" href=\"https://vuejs.org/v2/guide/list.html#key\">https://vuejs.org/v2/guide/list.html#key</a> to see all the implications about setting a <code>key</code> and why Vue needs it for component.<br>\n<strong>Using Date.now() for keys is a very bad idea as it will tell Vue to never reuse components.</strong><br>\nMost of the time using the index of the iteration is fine but if your component have a state and the list may change (new elements, removed, reordered), make sure to use an <em>id</em> that uniquely represents the object that is passed to your component. For example: if you have a <code>contact</code> component that displays a contact information and has a <code>contact</code> prop, use the <code>id</code> of the contact (usually coming from the db) as the <code>key</code>:</p>\n<div class=\"highlight highlight-text-html-vue\"><pre>&lt;<span class=\"pl-ent\">Contact</span> <span class=\"pl-e\">v-for</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>contact <span class=\"pl-k\">in</span> contacts<span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">contact</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>contact<span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">key</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">contact</span>.<span class=\"pl-c1\">id</span><span class=\"pl-pds\">\"</span></span> /&gt;</pre></div>\n<p>A built-in mechanism to generate UID have no place in Vue as it is not related to building interfaces.<br>\nSometimes you can use other content that is unique like names. A cleaner way if to generate a new version of your list that augment your items with UIDs</p>", "createdAt": "2018-07-05T13:24:33Z", "publishedAt": "2018-07-05T13:24:33Z", "lastEditedAt": null, "updatedAt": "2018-07-05T13:24:33Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7707, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please refer to https://vuejs.org/v2/guide/list.html#key to see all the implications about setting a key and why Vue needs it for component.", "sentSegmented": ["please", "refer", "to", "https", "//vuejs.org/v2/guide/list.html", "key", "to", "see", "all", "the", "implications", "about", "setting", "a", "key", "and", "why", "vue", "needs", "it", "for", "component"], "sentSegmentedWithoutStops": ["please", "refer", "https", "//vuejs.org/v2/guide/list.html", "key", "see", "implications", "setting", "key", "vue", "needs", "component"], "sentSegmentedWithoutStopsStemmed": ["pleas", "refer", "http", "//vuejs.org/v2/guide/list.html", "key", "see", "implic", "set", "key", "vue", "need", "compon"]}, {"number": 7708, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Using Date.now() for keys is a very bad idea as it will tell Vue to never reuse components.", "sentSegmented": ["using", "date.now", "for", "keys", "is", "a", "very", "bad", "idea", "as", "it", "will", "tell", "vue", "to", "never", "reuse", "components"], "sentSegmentedWithoutStops": ["using", "date.now", "keys", "bad", "idea", "tell", "vue", "never", "reuse", "components"], "sentSegmentedWithoutStopsStemmed": ["use", "date.now", "key", "bad", "idea", "tell", "vue", "never", "reus", "compon"]}, {"number": 7709, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Most of the time using the index of the iteration is fine but if your component have a state and the list may change (new elements, removed, reordered), make sure to use an id that uniquely represents the object that is passed to your component.", "sentSegmented": ["most", "of", "the", "time", "using", "the", "index", "of", "the", "iteration", "is", "fine", "but", "if", "your", "component", "have", "a", "state", "and", "the", "list", "may", "change", "new", "elements", "removed", "reordered", "make", "sure", "to", "use", "an", "id", "that", "uniquely", "represents", "the", "object", "that", "is", "passed", "to", "your", "component"], "sentSegmentedWithoutStops": ["time", "using", "index", "iteration", "fine", "component", "state", "list", "may", "change", "new", "elements", "removed", "reordered", "make", "sure", "use", "id", "uniquely", "represents", "object", "passed", "component"], "sentSegmentedWithoutStopsStemmed": ["time", "use", "index", "iter", "fine", "compon", "state", "list", "may", "chang", "new", "element", "remov", "reorder", "make", "sure", "use", "id", "uniqu", "repres", "object", "pass", "compon"]}, {"number": 7710, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For example: if you have a contact component that displays a contact information and has a contact prop, use the id of the contact (usually coming from the db) as the key:", "sentSegmented": ["for", "example", "if", "you", "have", "a", "contact", "component", "that", "displays", "a", "contact", "information", "and", "has", "a", "contact", "prop", "use", "the", "id", "of", "the", "contact", "usually", "coming", "from", "the", "db", "as", "the", "key"], "sentSegmentedWithoutStops": ["example", "contact", "component", "displays", "contact", "information", "contact", "prop", "use", "id", "contact", "usually", "coming", "db", "key"], "sentSegmentedWithoutStopsStemmed": ["exampl", "contact", "compon", "display", "contact", "inform", "contact", "prop", "use", "id", "contact", "usual", "come", "db", "key"]}, {"number": 7711, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<Contact v-for=\"contact in contacts\" :contact=\"contact\" :key=\"contact.id\" />", "sentSegmented": ["contact", "v-for=", "contact", "in", "contacts", "contact=", "contact", "key=", "contact.id"], "sentSegmentedWithoutStops": ["contact", "v-for=", "contact", "contacts", "contact=", "contact", "key=", "contact.id"], "sentSegmentedWithoutStopsStemmed": ["contact", "v-for=", "contact", "contact", "contact=", "contact", "key=", "contact.id"]}, {"number": 7712, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A built-in mechanism to generate UID have no place in Vue as it is not related to building interfaces.", "sentSegmented": ["a", "built-in", "mechanism", "to", "generate", "uid", "have", "no", "place", "in", "vue", "as", "it", "is", "not", "related", "to", "building", "interfaces"], "sentSegmentedWithoutStops": ["built-in", "mechanism", "generate", "uid", "place", "vue", "related", "building", "interfaces"], "sentSegmentedWithoutStopsStemmed": ["built-in", "mechan", "gener", "uid", "place", "vue", "relat", "build", "interfac"]}, {"number": 7713, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sometimes you can use other content that is unique like names.", "sentSegmented": ["sometimes", "you", "can", "use", "other", "content", "that", "is", "unique", "like", "names"], "sentSegmentedWithoutStops": ["sometimes", "use", "content", "unique", "like", "names"], "sentSegmentedWithoutStopsStemmed": ["sometim", "use", "content", "uniqu", "like", "name"]}, {"number": 7714, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A cleaner way if to generate a new version of your list that augment your items with UIDs", "sentSegmented": ["a", "cleaner", "way", "if", "to", "generate", "a", "new", "version", "of", "your", "list", "that", "augment", "your", "items", "with", "uids"], "sentSegmentedWithoutStops": ["cleaner", "way", "generate", "new", "version", "list", "augment", "items", "uids"], "sentSegmentedWithoutStopsStemmed": ["cleaner", "way", "gener", "new", "version", "list", "augment", "item", "uid"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOEv3Ppg==", "hasNextPage": true}, "totalCount": 28}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-11-13T23:01:22Z"}}]}, "state": "CLOSED", "titleSegmented": ["v-for", "add", "a", "prop", "'uniquekey", "to", "generates", "a", "unique", "key", "automatically"], "titleSegmentedWithoutStops": ["v-for", "add", "prop", "'uniquekey", "generates", "unique", "key", "automatically"], "titleSegmentedWithoutStopsStemmed": ["v-for", "add", "prop", "'uniquekey", "gener", "uniqu", "key", "automat"], "bodyParsed": [{"number": 7548, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What problem does this feature solve?", "sentSegmented": ["what", "problem", "does", "this", "feature", "solve"], "sentSegmentedWithoutStops": ["problem", "feature", "solve"], "sentSegmentedWithoutStopsStemmed": ["problem", "featur", "solv"]}, {"number": 7549, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In our business system, there is so many :key object used.", "sentSegmented": ["in", "our", "business", "system", "there", "is", "so", "many", "key", "object", "used"], "sentSegmentedWithoutStops": ["business", "system", "many", "key", "object", "used"], "sentSegmentedWithoutStopsStemmed": ["busi", "system", "mani", "key", "object", "use"]}, {"number": 7550, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We did so many data operate, we have to use it.", "sentSegmented": ["we", "did", "so", "many", "data", "operate", "we", "have", "to", "use", "it"], "sentSegmentedWithoutStops": ["many", "data", "operate", "use"], "sentSegmentedWithoutStopsStemmed": ["mani", "data", "oper", "use"]}, {"number": 7551, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And now, object key is not advocated, and I'm wondering if there is some prop can do it automatically.", "sentSegmented": ["and", "now", "object", "key", "is", "not", "advocated", "and", "i", "'m", "wondering", "if", "there", "is", "some", "prop", "can", "do", "it", "automatically"], "sentSegmentedWithoutStops": ["object", "key", "advocated", "'m", "wondering", "prop", "automatically"], "sentSegmentedWithoutStopsStemmed": ["object", "key", "advoc", "'m", "wonder", "prop", "automat"]}, {"number": 7552, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's will be helpful.", "sentSegmented": ["it", "'s", "will", "be", "helpful"], "sentSegmentedWithoutStops": ["'s", "helpful"], "sentSegmentedWithoutStopsStemmed": ["'s", "help"]}, {"number": 7553, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What does the proposed API look like?", "sentSegmented": ["what", "does", "the", "proposed", "api", "look", "like"], "sentSegmentedWithoutStops": ["proposed", "api", "look", "like"], "sentSegmentedWithoutStopsStemmed": ["propos", "api", "look", "like"]}, {"number": 7554, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<div v-for=\"item of list\" :unique-key=\"true\">div>", "sentSegmented": ["div", "v-for=", "item", "of", "list", "unique-key=", "true", "div"], "sentSegmentedWithoutStops": ["v-for=", "item", "list", "unique-key="], "sentSegmentedWithoutStopsStemmed": ["v-for=", "item", "list", "unique-key="]}]}