{"repository": {"owner": {"login": "vuejs"}, "name": "vue", "forkCount": 28377, "stargazerCount": 180385, "createdAt": "2013-07-29T03:24:51Z", "updatedAt": "2021-03-09T07:03:52Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "vue"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "frontend"}}}, {"node": {"topic": {"name": "framework"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "Shell"}}, {"node": {"name": "CSS"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "Vue"}}]}, "primaryLanguage": {"name": "JavaScript"}}, "id": "MDU6SXNzdWUzOTMyMDIzMjA=", "number": 9235, "author": {"login": "catskull"}, "title": "Auto generate a key in v-for if one is not specified", "body": "### What problem does this feature solve?\r\nIf a key is not supplied in v-for, there will be a warning linking to the docs (which is helpful). However if Vue really just needs a unique ID so it can keep track of the elements, and the developer doesn't need a key, then Vue should just create it's own key to use rather than warning the developer.\r\n\r\nOften items I have in a v-for don't really have any unique identifiers that would be good to use for a key, so I'm left with doing janky things to create a unique key, which seems brittle since unique identifier generation is a non-trivial problem. Someone proposed using something like https://github.com/ericelliott/cuid to do it, but I though, why not just have Vue do it for me under the hood?\r\n\r\n### What does the proposed API look like?\r\nCurrent API:\r\n```\r\n<div v-for=\"item in items\" :key=\"item.id\">\r\n  <!-- content -->\r\n</div>\r\n```\r\n\r\nCurrent API which results in a warning:\r\n```\r\n<div v-for=\"item in items\">\r\n  <!-- content -->\r\n</div>\r\n```\r\n\r\nProposed API which will not result in a warning:\r\n```\r\n<div v-for=\"item in items\">\r\n  <!-- content -->\r\n</div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->", "bodyHTML": "<h3>What problem does this feature solve?</h3>\n<p>If a key is not supplied in v-for, there will be a warning linking to the docs (which is helpful). However if Vue really just needs a unique ID so it can keep track of the elements, and the developer doesn't need a key, then Vue should just create it's own key to use rather than warning the developer.</p>\n<p>Often items I have in a v-for don't really have any unique identifiers that would be good to use for a key, so I'm left with doing janky things to create a unique key, which seems brittle since unique identifier generation is a non-trivial problem. Someone proposed using something like <a href=\"https://github.com/ericelliott/cuid\">https://github.com/ericelliott/cuid</a> to do it, but I though, why not just have Vue do it for me under the hood?</p>\n<h3>What does the proposed API look like?</h3>\n<p>Current API:</p>\n<pre><code>&lt;div v-for=\"item in items\" :key=\"item.id\"&gt;\n  &lt;!-- content --&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Current API which results in a warning:</p>\n<pre><code>&lt;div v-for=\"item in items\"&gt;\n  &lt;!-- content --&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Proposed API which will not result in a warning:</p>\n<pre><code>&lt;div v-for=\"item in items\"&gt;\n  &lt;!-- content --&gt;\n&lt;/div&gt;\n</code></pre>\n", "bodyText": "What problem does this feature solve?\nIf a key is not supplied in v-for, there will be a warning linking to the docs (which is helpful). However if Vue really just needs a unique ID so it can keep track of the elements, and the developer doesn't need a key, then Vue should just create it's own key to use rather than warning the developer.\nOften items I have in a v-for don't really have any unique identifiers that would be good to use for a key, so I'm left with doing janky things to create a unique key, which seems brittle since unique identifier generation is a non-trivial problem. Someone proposed using something like https://github.com/ericelliott/cuid to do it, but I though, why not just have Vue do it for me under the hood?\nWhat does the proposed API look like?\nCurrent API:\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n\nCurrent API which results in a warning:\n<div v-for=\"item in items\">\n  <!-- content -->\n</div>\n\nProposed API which will not result in a warning:\n<div v-for=\"item in items\">\n  <!-- content -->\n</div>", "assignees": {"edges": []}, "createdAt": "2018-12-20T20:35:35Z", "closed": true, "closedAt": "2018-12-20T20:40:51Z", "lastEditedAt": null, "publishedAt": "2018-12-20T20:35:35Z", "comments": {"totalCount": 2, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ0OTEyNzgzMw==", "author": {"login": "catskull"}, "body": "I am not familiar with the Vue source, but it appears this would be implemented somewhere here: https://github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js#L199\r\n\r\nInstead of the warning, it would just need to generate a key and use it.", "bodyText": "I am not familiar with the Vue source, but it appears this would be implemented somewhere here: https://github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js#L199\nInstead of the warning, it would just need to generate a key and use it.", "bodyHTML": "<p>I am not familiar with the Vue source, but it appears this would be implemented somewhere here: <a href=\"https://github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js#L199\">https://github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js#L199</a></p>\n<p>Instead of the warning, it would just need to generate a key and use it.</p>", "createdAt": "2018-12-20T20:36:55Z", "publishedAt": "2018-12-20T20:36:55Z", "lastEditedAt": null, "updatedAt": "2018-12-20T20:36:55Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7724, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I am not familiar with the Vue source, but it appears this would be implemented somewhere here: https://github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js#L199", "sentSegmented": ["i", "am", "not", "familiar", "with", "the", "vue", "source", "but", "it", "appears", "this", "would", "be", "implemented", "somewhere", "here", "https", "//github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js", "l199"], "sentSegmentedWithoutStops": ["familiar", "vue", "source", "appears", "would", "implemented", "somewhere", "https", "//github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js", "l199"], "sentSegmentedWithoutStopsStemmed": ["familiar", "vue", "sourc", "appear", "would", "implement", "somewher", "http", "//github.com/vuejs/vue/blob/dev/src/compiler/codegen/index.j", "l199"]}, {"number": 7725, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Instead of the warning, it would just need to generate a key and use it.", "sentSegmented": ["instead", "of", "the", "warning", "it", "would", "just", "need", "to", "generate", "a", "key", "and", "use", "it"], "sentSegmentedWithoutStops": ["instead", "warning", "would", "need", "generate", "key", "use"], "sentSegmentedWithoutStopsStemmed": ["instead", "warn", "would", "need", "gener", "key", "use"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ0OTEyODg4Ng==", "author": {"login": "posva"}, "body": "Duplicate of #6235", "bodyText": "Duplicate of #6235", "bodyHTML": "<p><span aria-label=\"This issue is a duplicate of #6235\" class=\"issue-keyword tooltipped tooltipped-se\">Duplicate of</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"245998870\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuejs/vue/issues/6235\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuejs/vue/issues/6235/hovercard\" href=\"https://github.com/vuejs/vue/issues/6235\">#6235</a></p>", "createdAt": "2018-12-20T20:40:51Z", "publishedAt": "2018-12-20T20:40:51Z", "lastEditedAt": null, "updatedAt": "2018-12-20T20:40:51Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7726, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Duplicate of #6235", "sentSegmented": ["duplicate", "of", "6235"], "sentSegmentedWithoutStops": ["duplicate", "6235"], "sentSegmentedWithoutStopsStemmed": ["duplic", "6235"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOGsUptg==", "hasNextPage": false}}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["auto", "generate", "a", "key", "in", "v-for", "if", "one", "is", "not", "specified"], "titleSegmentedWithoutStops": ["auto", "generate", "key", "v-for", "one", "specified"], "titleSegmentedWithoutStopsStemmed": ["auto", "gener", "key", "v-for", "one", "specifi"], "bodyParsed": [{"number": 7715, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What problem does this feature solve?", "sentSegmented": ["what", "problem", "does", "this", "feature", "solve"], "sentSegmentedWithoutStops": ["problem", "feature", "solve"], "sentSegmentedWithoutStopsStemmed": ["problem", "featur", "solv"]}, {"number": 7716, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If a key is not supplied in v-for, there will be a warning linking to the docs (which is helpful).", "sentSegmented": ["if", "a", "key", "is", "not", "supplied", "in", "v-for", "there", "will", "be", "a", "warning", "linking", "to", "the", "docs", "which", "is", "helpful"], "sentSegmentedWithoutStops": ["key", "supplied", "v-for", "warning", "linking", "docs", "helpful"], "sentSegmentedWithoutStopsStemmed": ["key", "suppli", "v-for", "warn", "link", "doc", "help"]}, {"number": 7717, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However if Vue really just needs a unique ID so it can keep track of the elements, and the developer doesn't need a key, then Vue should just create it's own key to use rather than warning the developer.", "sentSegmented": ["however", "if", "vue", "really", "just", "needs", "a", "unique", "id", "so", "it", "can", "keep", "track", "of", "the", "elements", "and", "the", "developer", "does", "n't", "need", "a", "key", "then", "vue", "should", "just", "create", "it", "'s", "own", "key", "to", "use", "rather", "than", "warning", "the", "developer"], "sentSegmentedWithoutStops": ["however", "vue", "really", "needs", "unique", "id", "keep", "track", "elements", "developer", "n't", "need", "key", "vue", "create", "'s", "key", "use", "rather", "warning", "developer"], "sentSegmentedWithoutStopsStemmed": ["howev", "vue", "realli", "need", "uniqu", "id", "keep", "track", "element", "develop", "n't", "need", "key", "vue", "creat", "'s", "key", "use", "rather", "warn", "develop"]}, {"number": 7718, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Often items I have in a v-for don't really have any unique identifiers that would be good to use for a key, so I'm left with doing janky things to create a unique key, which seems brittle since unique identifier generation is a non-trivial problem.", "sentSegmented": ["often", "items", "i", "have", "in", "a", "v-for", "do", "n't", "really", "have", "any", "unique", "identifiers", "that", "would", "be", "good", "to", "use", "for", "a", "key", "so", "i", "'m", "left", "with", "doing", "janky", "things", "to", "create", "a", "unique", "key", "which", "seems", "brittle", "since", "unique", "identifier", "generation", "is", "a", "non-trivial", "problem"], "sentSegmentedWithoutStops": ["often", "items", "v-for", "n't", "really", "unique", "identifiers", "would", "good", "use", "key", "'m", "left", "janky", "things", "create", "unique", "key", "seems", "brittle", "since", "unique", "identifier", "generation", "non-trivial", "problem"], "sentSegmentedWithoutStopsStemmed": ["often", "item", "v-for", "n't", "realli", "uniqu", "identifi", "would", "good", "use", "key", "'m", "left", "janki", "thing", "creat", "uniqu", "key", "seem", "brittl", "sinc", "uniqu", "identifi", "gener", "non-trivi", "problem"]}, {"number": 7719, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Someone proposed using something like https://github.com/ericelliott/cuid to do it, but I though, why not just have Vue do it for me under the hood?", "sentSegmented": ["someone", "proposed", "using", "something", "like", "https", "//github.com/ericelliott/cuid", "to", "do", "it", "but", "i", "though", "why", "not", "just", "have", "vue", "do", "it", "for", "me", "under", "the", "hood"], "sentSegmentedWithoutStops": ["someone", "proposed", "using", "something", "like", "https", "//github.com/ericelliott/cuid", "though", "vue", "hood"], "sentSegmentedWithoutStopsStemmed": ["someon", "propos", "use", "someth", "like", "http", "//github.com/ericelliott/cuid", "though", "vue", "hood"]}, {"number": 7720, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What does the proposed API look like?", "sentSegmented": ["what", "does", "the", "proposed", "api", "look", "like"], "sentSegmentedWithoutStops": ["proposed", "api", "look", "like"], "sentSegmentedWithoutStopsStemmed": ["propos", "api", "look", "like"]}, {"number": 7721, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Current API:", "sentSegmented": ["current", "api"], "sentSegmentedWithoutStops": ["current", "api"], "sentSegmentedWithoutStopsStemmed": ["current", "api"]}, {"number": 7722, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Current API which results in a warning:", "sentSegmented": ["current", "api", "which", "results", "in", "a", "warning"], "sentSegmentedWithoutStops": ["current", "api", "results", "warning"], "sentSegmentedWithoutStopsStemmed": ["current", "api", "result", "warn"]}, {"number": 7723, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Proposed API which will not result in a warning:", "sentSegmented": ["proposed", "api", "which", "will", "not", "result", "in", "a", "warning"], "sentSegmentedWithoutStops": ["proposed", "api", "result", "warning"], "sentSegmentedWithoutStopsStemmed": ["propos", "api", "result", "warn"]}]}