{"repository": {"owner": {"login": "spring-projects"}, "name": "spring-boot", "forkCount": 33115, "stargazerCount": 54017, "createdAt": "2012-10-19T15:02:57Z", "updatedAt": "2021-03-18T06:46:00Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "java"}}}, {"node": {"topic": {"name": "spring-boot"}}}, {"node": {"topic": {"name": "spring"}}}, {"node": {"topic": {"name": "framework"}}}]}, "languages": {"edges": [{"node": {"name": "Java"}}, {"node": {"name": "Smarty"}}, {"node": {"name": "HTML"}}, {"node": {"name": "Groovy"}}, {"node": {"name": "Shell"}}, {"node": {"name": "Ruby"}}, {"node": {"name": "CSS"}}, {"node": {"name": "JavaScript"}}, {"node": {"name": "Batchfile"}}, {"node": {"name": "Kotlin"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "Vim Snippet"}}, {"node": {"name": "Mustache"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWU3NjM2OTkxNzY=", "number": 24479, "author": {"login": "dimovelev"}, "title": "Graceful shutdown without client impact", "body": "With 2.3 a graceful shutdown has been introduced. After a shutdown has been initiated, the web server will reject new requests with HTTP 503. This is unfortunately something that the clients will notice (for requests sent after the shutdown has been initiated). I propose that we add logic in the shutdown hook that will trip the readiness probe to REFUSING_TRAFFIC and then wait for a configurable amount of time (default would be 0 so that it behaves as it does right now). During that wait-time, new requests will be accepted and processed but the /actuator/health/readiness will return 503. This will allow a load-balancer to notice that a node is going down and stop forwarding traffic to it. After the wait time we will proceed with the current graceful shutdown (closing the application context) - however, no new requests will arrive (and fail with 503) as we have been taken out of the pool.\r\n\r\nThat of course is easily done in the application but I guess other users might also need it so it would be nice to have it in spring-boot.\r\n\r\nPS. I tried doing that with a smartlifecycle bean but it gets called after the shutdown has terminated the management connector and I did not like that. I think that the right place is the shutdown hook and the change would be something like:\r\n```\r\n                AvailabilityChangeEvent.publish(ctx, ReadinessState.REFUSING_TRAFFIC);\r\n                try {\r\n                    Thread.sleep(20_000); // make configurable\r\n                } catch (final InterruptedException e) {\r\n                    Thread.currentThread().interrupt();\r\n                }\r\n```\r\njust before closing the application context. I have not considered what should happen in case of context refresh.", "bodyHTML": "<p>With 2.3 a graceful shutdown has been introduced. After a shutdown has been initiated, the web server will reject new requests with HTTP 503. This is unfortunately something that the clients will notice (for requests sent after the shutdown has been initiated). I propose that we add logic in the shutdown hook that will trip the readiness probe to REFUSING_TRAFFIC and then wait for a configurable amount of time (default would be 0 so that it behaves as it does right now). During that wait-time, new requests will be accepted and processed but the /actuator/health/readiness will return 503. This will allow a load-balancer to notice that a node is going down and stop forwarding traffic to it. After the wait time we will proceed with the current graceful shutdown (closing the application context) - however, no new requests will arrive (and fail with 503) as we have been taken out of the pool.</p>\n<p>That of course is easily done in the application but I guess other users might also need it so it would be nice to have it in spring-boot.</p>\n<p>PS. I tried doing that with a smartlifecycle bean but it gets called after the shutdown has terminated the management connector and I did not like that. I think that the right place is the shutdown hook and the change would be something like:</p>\n<pre><code>                AvailabilityChangeEvent.publish(ctx, ReadinessState.REFUSING_TRAFFIC);\n                try {\n                    Thread.sleep(20_000); // make configurable\n                } catch (final InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n</code></pre>\n<p>just before closing the application context. I have not considered what should happen in case of context refresh.</p>", "bodyText": "With 2.3 a graceful shutdown has been introduced. After a shutdown has been initiated, the web server will reject new requests with HTTP 503. This is unfortunately something that the clients will notice (for requests sent after the shutdown has been initiated). I propose that we add logic in the shutdown hook that will trip the readiness probe to REFUSING_TRAFFIC and then wait for a configurable amount of time (default would be 0 so that it behaves as it does right now). During that wait-time, new requests will be accepted and processed but the /actuator/health/readiness will return 503. This will allow a load-balancer to notice that a node is going down and stop forwarding traffic to it. After the wait time we will proceed with the current graceful shutdown (closing the application context) - however, no new requests will arrive (and fail with 503) as we have been taken out of the pool.\nThat of course is easily done in the application but I guess other users might also need it so it would be nice to have it in spring-boot.\nPS. I tried doing that with a smartlifecycle bean but it gets called after the shutdown has terminated the management connector and I did not like that. I think that the right place is the shutdown hook and the change would be something like:\n                AvailabilityChangeEvent.publish(ctx, ReadinessState.REFUSING_TRAFFIC);\n                try {\n                    Thread.sleep(20_000); // make configurable\n                } catch (final InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n\njust before closing the application context. I have not considered what should happen in case of context refresh.", "assignees": {"edges": []}, "createdAt": "2020-12-12T12:18:49Z", "closed": true, "closedAt": "2020-12-12T15:30:47Z", "lastEditedAt": null, "publishedAt": "2020-12-12T12:18:49Z", "comments": {"totalCount": 1, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDc0Mzc3MjQwOQ==", "author": {"login": "bclozel"}, "body": "This is a duplicate of #20995. I'm closing this issue as a result. Thanks!", "bodyText": "This is a duplicate of #20995. I'm closing this issue as a result. Thanks!", "bodyHTML": "<p>This is a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"601575446\" data-permission-text=\"Title is private\" data-url=\"https://github.com/spring-projects/spring-boot/issues/20995\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-boot/issues/20995/hovercard\" href=\"https://github.com/spring-projects/spring-boot/issues/20995\">#20995</a>. I'm closing this issue as a result. Thanks!</p>", "createdAt": "2020-12-12T15:30:34Z", "publishedAt": "2020-12-12T15:30:34Z", "lastEditedAt": null, "updatedAt": "2020-12-12T15:30:34Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32902, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is a duplicate of #20995.", "sentSegmented": ["this", "is", "a", "duplicate", "of", "20995"], "sentSegmentedWithoutStops": ["duplicate", "20995"], "sentSegmentedWithoutStopsStemmed": ["duplic", "20995"]}, {"number": 32903, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm closing this issue as a result.", "sentSegmented": ["i", "'m", "closing", "this", "issue", "as", "a", "result"], "sentSegmentedWithoutStops": ["'m", "closing", "issue", "result"], "sentSegmentedWithoutStopsStemmed": ["'m", "close", "issu", "result"]}, {"number": 32904, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks!", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOLFUQ-Q==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2012-10-19T15:02:58Z", "name": "status: duplicate"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["graceful", "shutdown", "without", "client", "impact"], "titleSegmentedWithoutStops": ["graceful", "shutdown", "without", "client", "impact"], "titleSegmentedWithoutStopsStemmed": ["grace", "shutdown", "without", "client", "impact"], "bodyParsed": [{"number": 32883, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "With 2.3 a graceful shutdown has been introduced.", "sentSegmented": ["with", "2.3", "a", "graceful", "shutdown", "has", "been", "introduced"], "sentSegmentedWithoutStops": ["2.3", "graceful", "shutdown", "introduced"], "sentSegmentedWithoutStopsStemmed": ["2.3", "grace", "shutdown", "introduc"]}, {"number": 32884, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "After a shutdown has been initiated, the web server will reject new requests with HTTP 503.", "sentSegmented": ["after", "a", "shutdown", "has", "been", "initiated", "the", "web", "server", "will", "reject", "new", "requests", "with", "http", "503"], "sentSegmentedWithoutStops": ["shutdown", "initiated", "web", "server", "reject", "new", "requests", "http", "503"], "sentSegmentedWithoutStopsStemmed": ["shutdown", "initi", "web", "server", "reject", "new", "request", "http", "503"]}, {"number": 32885, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is unfortunately something that the clients will notice (for requests sent after the shutdown has been initiated).", "sentSegmented": ["this", "is", "unfortunately", "something", "that", "the", "clients", "will", "notice", "for", "requests", "sent", "after", "the", "shutdown", "has", "been", "initiated"], "sentSegmentedWithoutStops": ["unfortunately", "something", "clients", "notice", "requests", "sent", "shutdown", "initiated"], "sentSegmentedWithoutStopsStemmed": ["unfortun", "someth", "client", "notic", "request", "sent", "shutdown", "initi"]}, {"number": 32886, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I propose that we add logic in the shutdown hook that will trip the readiness probe to REFUSING_TRAFFIC and then wait for a configurable amount of time (default would be 0 so that it behaves as it does right now).", "sentSegmented": ["i", "propose", "that", "we", "add", "logic", "in", "the", "shutdown", "hook", "that", "will", "trip", "the", "readiness", "probe", "to", "refusing_traffic", "and", "then", "wait", "for", "a", "configurable", "amount", "of", "time", "default", "would", "be", "0", "so", "that", "it", "behaves", "as", "it", "does", "right", "now"], "sentSegmentedWithoutStops": ["propose", "add", "logic", "shutdown", "hook", "trip", "readiness", "probe", "refusing_traffic", "wait", "configurable", "amount", "time", "default", "would", "0", "behaves", "right"], "sentSegmentedWithoutStopsStemmed": ["propos", "add", "logic", "shutdown", "hook", "trip", "readi", "probe", "refusing_traff", "wait", "configur", "amount", "time", "default", "would", "0", "behav", "right"]}, {"number": 32887, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "During that wait-time, new requests will be accepted and processed but the /actuator/health/readiness will return 503.", "sentSegmented": ["during", "that", "wait-time", "new", "requests", "will", "be", "accepted", "and", "processed", "but", "the", "/actuator/health/readiness", "will", "return", "503"], "sentSegmentedWithoutStops": ["wait-time", "new", "requests", "accepted", "processed", "/actuator/health/readiness", "return", "503"], "sentSegmentedWithoutStopsStemmed": ["wait-tim", "new", "request", "accept", "process", "/actuator/health/readi", "return", "503"]}, {"number": 32888, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This will allow a load-balancer to notice that a node is going down and stop forwarding traffic to it.", "sentSegmented": ["this", "will", "allow", "a", "load-balancer", "to", "notice", "that", "a", "node", "is", "going", "down", "and", "stop", "forwarding", "traffic", "to", "it"], "sentSegmentedWithoutStops": ["allow", "load-balancer", "notice", "node", "going", "stop", "forwarding", "traffic"], "sentSegmentedWithoutStopsStemmed": ["allow", "load-balanc", "notic", "node", "go", "stop", "forward", "traffic"]}, {"number": 32889, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "After the wait time we will proceed with the current graceful shutdown (closing the application context) - however, no new requests will arrive (and fail with 503) as we have been taken out of the pool.", "sentSegmented": ["after", "the", "wait", "time", "we", "will", "proceed", "with", "the", "current", "graceful", "shutdown", "closing", "the", "application", "context", "however", "no", "new", "requests", "will", "arrive", "and", "fail", "with", "503", "as", "we", "have", "been", "taken", "out", "of", "the", "pool"], "sentSegmentedWithoutStops": ["wait", "time", "proceed", "current", "graceful", "shutdown", "closing", "application", "context", "however", "new", "requests", "arrive", "fail", "503", "taken", "pool"], "sentSegmentedWithoutStopsStemmed": ["wait", "time", "proceed", "current", "grace", "shutdown", "close", "applic", "context", "howev", "new", "request", "arriv", "fail", "503", "taken", "pool"]}, {"number": 32890, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That of course is easily done in the application but I guess other users might also need it so it would be nice to have it in spring-boot.", "sentSegmented": ["that", "of", "course", "is", "easily", "done", "in", "the", "application", "but", "i", "guess", "other", "users", "might", "also", "need", "it", "so", "it", "would", "be", "nice", "to", "have", "it", "in", "spring-boot"], "sentSegmentedWithoutStops": ["course", "easily", "done", "application", "guess", "users", "might", "also", "need", "would", "nice", "spring-boot"], "sentSegmentedWithoutStopsStemmed": ["cours", "easili", "done", "applic", "guess", "user", "might", "also", "need", "would", "nice", "spring-boot"]}, {"number": 32891, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "PS.", "sentSegmented": ["ps"], "sentSegmentedWithoutStops": ["ps"], "sentSegmentedWithoutStopsStemmed": ["ps"]}, {"number": 32892, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I tried doing that with a smartlifecycle bean but it gets called after the shutdown has terminated the management connector and I did not like that.", "sentSegmented": ["i", "tried", "doing", "that", "with", "a", "smartlifecycle", "bean", "but", "it", "gets", "called", "after", "the", "shutdown", "has", "terminated", "the", "management", "connector", "and", "i", "did", "not", "like", "that"], "sentSegmentedWithoutStops": ["tried", "smartlifecycle", "bean", "gets", "called", "shutdown", "terminated", "management", "connector", "like"], "sentSegmentedWithoutStopsStemmed": ["tri", "smartlifecycl", "bean", "get", "call", "shutdown", "termin", "manag", "connector", "like"]}, {"number": 32893, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think that the right place is the shutdown hook and the change would be something like:", "sentSegmented": ["i", "think", "that", "the", "right", "place", "is", "the", "shutdown", "hook", "and", "the", "change", "would", "be", "something", "like"], "sentSegmentedWithoutStops": ["think", "right", "place", "shutdown", "hook", "change", "would", "something", "like"], "sentSegmentedWithoutStopsStemmed": ["think", "right", "place", "shutdown", "hook", "chang", "would", "someth", "like"]}, {"number": 32894, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "AvailabilityChangeEvent.publish(ctx, ReadinessState.REFUSING_TRAFFIC);", "sentSegmented": ["availabilitychangeevent.publish", "ctx", "readinessstate.refusing_traffic"], "sentSegmentedWithoutStops": ["availabilitychangeevent.publish", "ctx", "readinessstate.refusing_traffic"], "sentSegmentedWithoutStopsStemmed": ["availabilitychangeevent.publish", "ctx", "readinessstate.refusing_traff"]}, {"number": 32895, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                try {", "sentSegmented": ["try"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 32896, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    Thread.sleep(20_000); // make configurable", "sentSegmented": ["thread.sleep", "20_000", "make", "configurable"], "sentSegmentedWithoutStops": ["thread.sleep", "20_000", "make", "configurable"], "sentSegmentedWithoutStopsStemmed": ["thread.sleep", "20_000", "make", "configur"]}, {"number": 32897, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                } catch (final InterruptedException e) {", "sentSegmented": ["catch", "final", "interruptedexception", "e"], "sentSegmentedWithoutStops": ["interruptedexception", "e"], "sentSegmentedWithoutStopsStemmed": ["interruptedexcept", "e"]}, {"number": 32898, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    Thread.currentThread().interrupt();", "sentSegmented": ["thread.currentthread", ".interrupt"], "sentSegmentedWithoutStops": ["thread.currentthread", ".interrupt"], "sentSegmentedWithoutStopsStemmed": ["thread.currentthread", ".interrupt"]}, {"number": 32899, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 32900, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "just before closing the application context.", "sentSegmented": ["just", "before", "closing", "the", "application", "context"], "sentSegmentedWithoutStops": ["closing", "application", "context"], "sentSegmentedWithoutStopsStemmed": ["close", "applic", "context"]}, {"number": 32901, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I have not considered what should happen in case of context refresh.", "sentSegmented": ["i", "have", "not", "considered", "what", "should", "happen", "in", "case", "of", "context", "refresh"], "sentSegmentedWithoutStops": ["considered", "happen", "case", "context", "refresh"], "sentSegmentedWithoutStopsStemmed": ["consid", "happen", "case", "context", "refresh"]}]}