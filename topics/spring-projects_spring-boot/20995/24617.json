{"repository": {"owner": {"login": "spring-projects"}, "name": "spring-boot", "forkCount": 33115, "stargazerCount": 54017, "createdAt": "2012-10-19T15:02:57Z", "updatedAt": "2021-03-18T06:46:00Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "java"}}}, {"node": {"topic": {"name": "spring-boot"}}}, {"node": {"topic": {"name": "spring"}}}, {"node": {"topic": {"name": "framework"}}}]}, "languages": {"edges": [{"node": {"name": "Java"}}, {"node": {"name": "Smarty"}}, {"node": {"name": "HTML"}}, {"node": {"name": "Groovy"}}, {"node": {"name": "Shell"}}, {"node": {"name": "Ruby"}}, {"node": {"name": "CSS"}}, {"node": {"name": "JavaScript"}}, {"node": {"name": "Batchfile"}}, {"node": {"name": "Kotlin"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "Vim Snippet"}}, {"node": {"name": "Mustache"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWU3NzU1MjMxMDE=", "number": 24617, "author": {"login": "paoven"}, "title": "Liveness/Readiness probes failure while using graceful shutdown", "body": "Hi! While I was investigating on Spring Boot **graceful shutdown** feature as well as l**iveness/readiness endpoints** (to be called at a later stage from Kubernetes probes) I discovered that the **mentioned endpoints become unreacheble as soon as shutdown is initiated** by a SIGTERM. This would cause Kubernetes liveness probe fail and may lead to unclean shutdown. As the purpose of graceful shutdown is the opposite I filled this report. \r\n\r\nI created a sample Spring Boot project on GitHub to simplify issue testing. The service exposes a controller that, when invoked, will sleep for the desired amount of time. \r\n\r\n Please see instructions to reproduce the issue below. Many thanks for your support, best regards\r\n\r\n Paolo\r\n\r\n### Environment:\r\n\r\n- OS: Windows 10 Pro\r\n- JDK: openjdk 11.0.7 2020-04-14 LTS\r\n- Spring boot starter parent : 2.4.1\r\n- Servlet Engine: Apache Tomcat/9.0.41\r\n\r\n### How to reproduce:\r\n\r\n- Please checkout sample project https://github.com/paoven/graceful-shutdown\r\n- Run the project and call the endpoint (E.g. curl -H \"Content-Type:application/json\" -H \"Accept:application/json\" -XPOST -d \"1\" http://localhost:8080/wait?waitMs=20000)\r\n- Take note of process PID and initiate a graceful shutdown by issuing a SIGTERM signal within 20seconds. (E.g. kill -SIGTERM [PID])\r\n- The Spring Boot service logs the graceful shutdown and the request is fulfilled as it takes less than the configured graceful shutdown timeout (30s). The problem is that, as soon as you issue the SIGTERM, the Spring Boot actuator health endpoints become unreachable (both liveness and rediness groups). External Systems relying on that endpoints for availability/healthy checks (such as Kubernetes) would think that the service is not available anymore too soon.", "bodyHTML": "<p>Hi! While I was investigating on Spring Boot <strong>graceful shutdown</strong> feature as well as l<strong>iveness/readiness endpoints</strong> (to be called at a later stage from Kubernetes probes) I discovered that the <strong>mentioned endpoints become unreacheble as soon as shutdown is initiated</strong> by a SIGTERM. This would cause Kubernetes liveness probe fail and may lead to unclean shutdown. As the purpose of graceful shutdown is the opposite I filled this report.</p>\n<p>I created a sample Spring Boot project on GitHub to simplify issue testing. The service exposes a controller that, when invoked, will sleep for the desired amount of time.</p>\n<p>Please see instructions to reproduce the issue below. Many thanks for your support, best regards</p>\n<p>Paolo</p>\n<h3>Environment:</h3>\n<ul>\n<li>OS: Windows 10 Pro</li>\n<li>JDK: openjdk 11.0.7 2020-04-14 LTS</li>\n<li>Spring boot starter parent : 2.4.1</li>\n<li>Servlet Engine: Apache Tomcat/9.0.41</li>\n</ul>\n<h3>How to reproduce:</h3>\n<ul>\n<li>Please checkout sample project <a href=\"https://github.com/paoven/graceful-shutdown\">https://github.com/paoven/graceful-shutdown</a></li>\n<li>Run the project and call the endpoint (E.g. curl -H \"Content-Type:application/json\" -H \"Accept:application/json\" -XPOST -d \"1\" <a href=\"http://localhost:8080/wait?waitMs=20000\" rel=\"nofollow\">http://localhost:8080/wait?waitMs=20000</a>)</li>\n<li>Take note of process PID and initiate a graceful shutdown by issuing a SIGTERM signal within 20seconds. (E.g. kill -SIGTERM [PID])</li>\n<li>The Spring Boot service logs the graceful shutdown and the request is fulfilled as it takes less than the configured graceful shutdown timeout (30s). The problem is that, as soon as you issue the SIGTERM, the Spring Boot actuator health endpoints become unreachable (both liveness and rediness groups). External Systems relying on that endpoints for availability/healthy checks (such as Kubernetes) would think that the service is not available anymore too soon.</li>\n</ul>", "bodyText": "Hi! While I was investigating on Spring Boot graceful shutdown feature as well as liveness/readiness endpoints (to be called at a later stage from Kubernetes probes) I discovered that the mentioned endpoints become unreacheble as soon as shutdown is initiated by a SIGTERM. This would cause Kubernetes liveness probe fail and may lead to unclean shutdown. As the purpose of graceful shutdown is the opposite I filled this report.\nI created a sample Spring Boot project on GitHub to simplify issue testing. The service exposes a controller that, when invoked, will sleep for the desired amount of time.\nPlease see instructions to reproduce the issue below. Many thanks for your support, best regards\nPaolo\nEnvironment:\n\nOS: Windows 10 Pro\nJDK: openjdk 11.0.7 2020-04-14 LTS\nSpring boot starter parent : 2.4.1\nServlet Engine: Apache Tomcat/9.0.41\n\nHow to reproduce:\n\nPlease checkout sample project https://github.com/paoven/graceful-shutdown\nRun the project and call the endpoint (E.g. curl -H \"Content-Type:application/json\" -H \"Accept:application/json\" -XPOST -d \"1\" http://localhost:8080/wait?waitMs=20000)\nTake note of process PID and initiate a graceful shutdown by issuing a SIGTERM signal within 20seconds. (E.g. kill -SIGTERM [PID])\nThe Spring Boot service logs the graceful shutdown and the request is fulfilled as it takes less than the configured graceful shutdown timeout (30s). The problem is that, as soon as you issue the SIGTERM, the Spring Boot actuator health endpoints become unreachable (both liveness and rediness groups). External Systems relying on that endpoints for availability/healthy checks (such as Kubernetes) would think that the service is not available anymore too soon.", "assignees": {"edges": []}, "createdAt": "2020-12-28T18:10:39Z", "closed": true, "closedAt": "2021-01-04T10:06:05Z", "lastEditedAt": "2020-12-28T18:19:52Z", "publishedAt": "2020-12-28T18:10:39Z", "comments": {"totalCount": 9, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDc1MTg2MDIzNw==", "author": {"login": "bclozel"}, "body": "@paoven Have you seen [the kubernetes deployment section in the reference documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#cloud-deployment-kubernetes)?\r\n\r\nWe assume that [the graceful shutdown sequence should start once the platform has stopped routing traffic to the application instance](https://github.com/spring-projects/spring-boot/issues/20995#issuecomment-744409432). The shutdown delay really depends on the platform (in your case the readiness check period, which is configurable).\r\n\r\nWe're considering adding an optional delay in #20995 - but a possible solution here is to configure a `preStop` hook as explained in our documentation.", "bodyText": "@paoven Have you seen the kubernetes deployment section in the reference documentation?\nWe assume that the graceful shutdown sequence should start once the platform has stopped routing traffic to the application instance. The shutdown delay really depends on the platform (in your case the readiness check period, which is configurable).\nWe're considering adding an optional delay in #20995 - but a possible solution here is to configure a preStop hook as explained in our documentation.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/paoven/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/paoven\">@paoven</a> Have you seen <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#cloud-deployment-kubernetes\" rel=\"nofollow\">the kubernetes deployment section in the reference documentation</a>?</p>\n<p>We assume that <a href=\"https://github.com/spring-projects/spring-boot/issues/20995#issuecomment-744409432\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-boot/issues/20995/hovercard\">the graceful shutdown sequence should start once the platform has stopped routing traffic to the application instance</a>. The shutdown delay really depends on the platform (in your case the readiness check period, which is configurable).</p>\n<p>We're considering adding an optional delay in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"601575446\" data-permission-text=\"Title is private\" data-url=\"https://github.com/spring-projects/spring-boot/issues/20995\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-boot/issues/20995/hovercard\" href=\"https://github.com/spring-projects/spring-boot/issues/20995\">#20995</a> - but a possible solution here is to configure a <code>preStop</code> hook as explained in our documentation.</p>", "createdAt": "2020-12-28T20:51:05Z", "publishedAt": "2020-12-28T20:51:05Z", "lastEditedAt": null, "updatedAt": "2020-12-28T20:51:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32861, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@paoven Have you seen the kubernetes deployment section in the reference documentation?", "sentSegmented": ["paoven", "have", "you", "seen", "the", "kubernetes", "deployment", "section", "in", "the", "reference", "documentation"], "sentSegmentedWithoutStops": ["paoven", "seen", "kubernetes", "deployment", "section", "reference", "documentation"], "sentSegmentedWithoutStopsStemmed": ["paoven", "seen", "kubernet", "deploy", "section", "refer", "document"]}, {"number": 32862, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We assume that the graceful shutdown sequence should start once the platform has stopped routing traffic to the application instance.", "sentSegmented": ["we", "assume", "that", "the", "graceful", "shutdown", "sequence", "should", "start", "once", "the", "platform", "has", "stopped", "routing", "traffic", "to", "the", "application", "instance"], "sentSegmentedWithoutStops": ["assume", "graceful", "shutdown", "sequence", "start", "platform", "stopped", "routing", "traffic", "application", "instance"], "sentSegmentedWithoutStopsStemmed": ["assum", "grace", "shutdown", "sequenc", "start", "platform", "stop", "rout", "traffic", "applic", "instanc"]}, {"number": 32863, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The shutdown delay really depends on the platform (in your case the readiness check period, which is configurable).", "sentSegmented": ["the", "shutdown", "delay", "really", "depends", "on", "the", "platform", "in", "your", "case", "the", "readiness", "check", "period", "which", "is", "configurable"], "sentSegmentedWithoutStops": ["shutdown", "delay", "really", "depends", "platform", "case", "readiness", "check", "period", "configurable"], "sentSegmentedWithoutStopsStemmed": ["shutdown", "delay", "realli", "depend", "platform", "case", "readi", "check", "period", "configur"]}, {"number": 32864, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We're considering adding an optional delay in #20995 - but a possible solution here is to configure a preStop hook as explained in our documentation.", "sentSegmented": ["we", "'re", "considering", "adding", "an", "optional", "delay", "in", "20995", "but", "a", "possible", "solution", "here", "is", "to", "configure", "a", "prestop", "hook", "as", "explained", "in", "our", "documentation"], "sentSegmentedWithoutStops": ["'re", "considering", "adding", "optional", "delay", "20995", "possible", "solution", "configure", "prestop", "hook", "explained", "documentation"], "sentSegmentedWithoutStopsStemmed": ["'re", "consid", "ad", "option", "delay", "20995", "possibl", "solut", "configur", "prestop", "hook", "explain", "document"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc1MjYzMTk1Nw==", "author": {"login": "paoven"}, "body": "@bclozel  Thanks for prompt answer. I was able to obtain a clean shutdown (both on client and server side) by leveraging on preStop hook and a sleeping thread which introduces the mentioned delay. About the relation between the shutdown delay and readiness check period, as far as I can see Kubernetes is not relying on liveness/readiness checks anymore as soon as the Pod enters Terminating state but of course the delay is necessary  in order to guarantee that the platform removes the Pod reference from Services/RS/ and has effectively stopped sending traffic to it). Thanks again, kind regards", "bodyText": "@bclozel  Thanks for prompt answer. I was able to obtain a clean shutdown (both on client and server side) by leveraging on preStop hook and a sleeping thread which introduces the mentioned delay. About the relation between the shutdown delay and readiness check period, as far as I can see Kubernetes is not relying on liveness/readiness checks anymore as soon as the Pod enters Terminating state but of course the delay is necessary  in order to guarantee that the platform removes the Pod reference from Services/RS/ and has effectively stopped sending traffic to it). Thanks again, kind regards", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bclozel/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bclozel\">@bclozel</a>  Thanks for prompt answer. I was able to obtain a clean shutdown (both on client and server side) by leveraging on preStop hook and a sleeping thread which introduces the mentioned delay. About the relation between the shutdown delay and readiness check period, as far as I can see Kubernetes is not relying on liveness/readiness checks anymore as soon as the Pod enters Terminating state but of course the delay is necessary  in order to guarantee that the platform removes the Pod reference from Services/RS/ and has effectively stopped sending traffic to it). Thanks again, kind regards</p>", "createdAt": "2020-12-30T14:00:47Z", "publishedAt": "2020-12-30T14:00:47Z", "lastEditedAt": "2020-12-30T14:02:00Z", "updatedAt": "2020-12-30T14:02:00Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32865, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@bclozel  Thanks for prompt answer.", "sentSegmented": ["bclozel", "thanks", "for", "prompt", "answer"], "sentSegmentedWithoutStops": ["bclozel", "thanks", "prompt", "answer"], "sentSegmentedWithoutStopsStemmed": ["bclozel", "thank", "prompt", "answer"]}, {"number": 32866, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I was able to obtain a clean shutdown (both on client and server side) by leveraging on preStop hook and a sleeping thread which introduces the mentioned delay.", "sentSegmented": ["i", "was", "able", "to", "obtain", "a", "clean", "shutdown", "both", "on", "client", "and", "server", "side", "by", "leveraging", "on", "prestop", "hook", "and", "a", "sleeping", "thread", "which", "introduces", "the", "mentioned", "delay"], "sentSegmentedWithoutStops": ["able", "obtain", "clean", "shutdown", "client", "server", "side", "leveraging", "prestop", "hook", "sleeping", "thread", "introduces", "mentioned", "delay"], "sentSegmentedWithoutStopsStemmed": ["abl", "obtain", "clean", "shutdown", "client", "server", "side", "leverag", "prestop", "hook", "sleep", "thread", "introduc", "mention", "delay"]}, {"number": 32867, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "About the relation between the shutdown delay and readiness check period, as far as I can see Kubernetes is not relying on liveness/readiness checks anymore as soon as the Pod enters Terminating state but of course the delay is necessary  in order to guarantee that the platform removes the Pod reference from Services/RS/ and has effectively stopped sending traffic to it).", "sentSegmented": ["about", "the", "relation", "between", "the", "shutdown", "delay", "and", "readiness", "check", "period", "as", "far", "as", "i", "can", "see", "kubernetes", "is", "not", "relying", "on", "liveness/readiness", "checks", "anymore", "as", "soon", "as", "the", "pod", "enters", "terminating", "state", "but", "of", "course", "the", "delay", "is", "necessary", "in", "order", "to", "guarantee", "that", "the", "platform", "removes", "the", "pod", "reference", "from", "services/rs/", "and", "has", "effectively", "stopped", "sending", "traffic", "to", "it"], "sentSegmentedWithoutStops": ["relation", "shutdown", "delay", "readiness", "check", "period", "far", "see", "kubernetes", "relying", "liveness/readiness", "checks", "anymore", "soon", "pod", "enters", "terminating", "state", "course", "delay", "necessary", "order", "guarantee", "platform", "removes", "pod", "reference", "services/rs/", "effectively", "stopped", "sending", "traffic"], "sentSegmentedWithoutStopsStemmed": ["relat", "shutdown", "delay", "readi", "check", "period", "far", "see", "kubernet", "reli", "liveness/readi", "check", "anymor", "soon", "pod", "enter", "termin", "state", "cours", "delay", "necessari", "order", "guarante", "platform", "remov", "pod", "refer", "services/rs/", "effect", "stop", "send", "traffic"]}, {"number": 32868, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks again, kind regards", "sentSegmented": ["thanks", "again", "kind", "regards"], "sentSegmentedWithoutStops": ["thanks", "kind", "regards"], "sentSegmentedWithoutStopsStemmed": ["thank", "kind", "regard"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc1MjY1OTE2OQ==", "author": {"login": "jcook793"}, "body": "The problem with `preStop` delays is that they are fixed amounts of time. So if I'm willing to let uploads take 3 minutes if necessary, that means every time I do a pod deployment it is going to take 3 minutes, even if there is no traffic at all.", "bodyText": "The problem with preStop delays is that they are fixed amounts of time. So if I'm willing to let uploads take 3 minutes if necessary, that means every time I do a pod deployment it is going to take 3 minutes, even if there is no traffic at all.", "bodyHTML": "<p>The problem with <code>preStop</code> delays is that they are fixed amounts of time. So if I'm willing to let uploads take 3 minutes if necessary, that means every time I do a pod deployment it is going to take 3 minutes, even if there is no traffic at all.</p>", "createdAt": "2020-12-30T15:21:00Z", "publishedAt": "2020-12-30T15:21:00Z", "lastEditedAt": null, "updatedAt": "2020-12-30T15:21:00Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32869, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The problem with preStop delays is that they are fixed amounts of time.", "sentSegmented": ["the", "problem", "with", "prestop", "delays", "is", "that", "they", "are", "fixed", "amounts", "of", "time"], "sentSegmentedWithoutStops": ["problem", "prestop", "delays", "fixed", "amounts", "time"], "sentSegmentedWithoutStopsStemmed": ["problem", "prestop", "delay", "fix", "amount", "time"]}, {"number": 32870, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So if I'm willing to let uploads take 3 minutes if necessary, that means every time I do a pod deployment it is going to take 3 minutes, even if there is no traffic at all.", "sentSegmented": ["so", "if", "i", "'m", "willing", "to", "let", "uploads", "take", "3", "minutes", "if", "necessary", "that", "means", "every", "time", "i", "do", "a", "pod", "deployment", "it", "is", "going", "to", "take", "3", "minutes", "even", "if", "there", "is", "no", "traffic", "at", "all"], "sentSegmentedWithoutStops": ["'m", "willing", "let", "uploads", "take", "3", "minutes", "necessary", "means", "every", "time", "pod", "deployment", "going", "take", "3", "minutes", "even", "traffic"], "sentSegmentedWithoutStopsStemmed": ["'m", "will", "let", "upload", "take", "3", "minut", "necessari", "mean", "everi", "time", "pod", "deploy", "go", "take", "3", "minut", "even", "traffic"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc1MjcyMjc1MA==", "author": {"login": "paoven"}, "body": "@jcook793 as far as I understoop preStop delay is just necessary to let the platform/load balancer to stop routing new traffic to the shutting down service (In Kubernetes should be 5/10 seconds according to [this useful article](https://blog.gruntwork.io/delaying-shutdown-to-wait-for-pod-deletion-propagation-445f779a8304)). \r\n\r\nAlready existing connections are not forcibly dropped at this stage. In the upload example you mentioned, when Spring Boot receives the SIGTERM signal, it will wait for pending requests to terminate up to the maximum shutdown timeout  (e.g. spring.lifecycle.timeout-per-shutdown-phase configured to 3mins), but if there are no requests it will shutdown fast without waiting 3 minutes. ", "bodyText": "@jcook793 as far as I understoop preStop delay is just necessary to let the platform/load balancer to stop routing new traffic to the shutting down service (In Kubernetes should be 5/10 seconds according to this useful article).\nAlready existing connections are not forcibly dropped at this stage. In the upload example you mentioned, when Spring Boot receives the SIGTERM signal, it will wait for pending requests to terminate up to the maximum shutdown timeout  (e.g. spring.lifecycle.timeout-per-shutdown-phase configured to 3mins), but if there are no requests it will shutdown fast without waiting 3 minutes.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jcook793/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jcook793\">@jcook793</a> as far as I understoop preStop delay is just necessary to let the platform/load balancer to stop routing new traffic to the shutting down service (In Kubernetes should be 5/10 seconds according to <a href=\"https://blog.gruntwork.io/delaying-shutdown-to-wait-for-pod-deletion-propagation-445f779a8304\" rel=\"nofollow\">this useful article</a>).</p>\n<p>Already existing connections are not forcibly dropped at this stage. In the upload example you mentioned, when Spring Boot receives the SIGTERM signal, it will wait for pending requests to terminate up to the maximum shutdown timeout  (e.g. spring.lifecycle.timeout-per-shutdown-phase configured to 3mins), but if there are no requests it will shutdown fast without waiting 3 minutes.</p>", "createdAt": "2020-12-30T18:52:15Z", "publishedAt": "2020-12-30T18:52:15Z", "lastEditedAt": "2020-12-30T18:53:13Z", "updatedAt": "2020-12-30T18:53:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32871, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@jcook793 as far as I understoop preStop delay is just necessary to let the platform/load balancer to stop routing new traffic to the shutting down service (In Kubernetes should be 5/10 seconds according to this useful article).", "sentSegmented": ["jcook793", "as", "far", "as", "i", "understoop", "prestop", "delay", "is", "just", "necessary", "to", "let", "the", "platform/load", "balancer", "to", "stop", "routing", "new", "traffic", "to", "the", "shutting", "down", "service", "in", "kubernetes", "should", "be", "5/10", "seconds", "according", "to", "this", "useful", "article"], "sentSegmentedWithoutStops": ["jcook793", "far", "understoop", "prestop", "delay", "necessary", "let", "platform/load", "balancer", "stop", "routing", "new", "traffic", "shutting", "service", "kubernetes", "5/10", "seconds", "according", "useful", "article"], "sentSegmentedWithoutStopsStemmed": ["jcook793", "far", "understoop", "prestop", "delay", "necessari", "let", "platform/load", "balanc", "stop", "rout", "new", "traffic", "shut", "servic", "kubernet", "5/10", "second", "accord", "use", "articl"]}, {"number": 32872, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Already existing connections are not forcibly dropped at this stage.", "sentSegmented": ["already", "existing", "connections", "are", "not", "forcibly", "dropped", "at", "this", "stage"], "sentSegmentedWithoutStops": ["already", "existing", "connections", "forcibly", "dropped", "stage"], "sentSegmentedWithoutStopsStemmed": ["alreadi", "exist", "connect", "forcibl", "drop", "stage"]}, {"number": 32873, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In the upload example you mentioned, when Spring Boot receives the SIGTERM signal, it will wait for pending requests to terminate up to the maximum shutdown timeout  (e.g.", "sentSegmented": ["in", "the", "upload", "example", "you", "mentioned", "when", "spring", "boot", "receives", "the", "sigterm", "signal", "it", "will", "wait", "for", "pending", "requests", "to", "terminate", "up", "to", "the", "maximum", "shutdown", "timeout", "e.g"], "sentSegmentedWithoutStops": ["upload", "example", "mentioned", "spring", "boot", "receives", "sigterm", "signal", "wait", "pending", "requests", "terminate", "maximum", "shutdown", "timeout", "e.g"], "sentSegmentedWithoutStopsStemmed": ["upload", "exampl", "mention", "spring", "boot", "receiv", "sigterm", "signal", "wait", "pend", "request", "termin", "maximum", "shutdown", "timeout", "e.g"]}, {"number": 32874, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "spring.lifecycle.timeout-per-shutdown-phase configured to 3mins), but if there are no requests it will shutdown fast without waiting 3 minutes.", "sentSegmented": ["spring.lifecycle.timeout-per-shutdown-phase", "configured", "to", "3mins", "but", "if", "there", "are", "no", "requests", "it", "will", "shutdown", "fast", "without", "waiting", "3", "minutes"], "sentSegmentedWithoutStops": ["spring.lifecycle.timeout-per-shutdown-phase", "configured", "3mins", "requests", "shutdown", "fast", "without", "waiting", "3", "minutes"], "sentSegmentedWithoutStopsStemmed": ["spring.lifecycle.timeout-per-shutdown-phas", "configur", "3min", "request", "shutdown", "fast", "without", "wait", "3", "minut"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc1Mzg4MjQ4OQ==", "author": {"login": "bclozel"}, "body": "@jcook793 See @paoven 's comment - the app is shutting down as soon as possible.\r\n\r\nI'm closing this issue as a duplicate of #20995 - I don't know if we'll implement it, but in the meantime the preStop hook seems like the sensible solution here.", "bodyText": "@jcook793 See @paoven 's comment - the app is shutting down as soon as possible.\nI'm closing this issue as a duplicate of #20995 - I don't know if we'll implement it, but in the meantime the preStop hook seems like the sensible solution here.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jcook793/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jcook793\">@jcook793</a> See <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/paoven/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/paoven\">@paoven</a> 's comment - the app is shutting down as soon as possible.</p>\n<p>I'm closing this issue as a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"601575446\" data-permission-text=\"Title is private\" data-url=\"https://github.com/spring-projects/spring-boot/issues/20995\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-boot/issues/20995/hovercard\" href=\"https://github.com/spring-projects/spring-boot/issues/20995\">#20995</a> - I don't know if we'll implement it, but in the meantime the preStop hook seems like the sensible solution here.</p>", "createdAt": "2021-01-04T10:06:05Z", "publishedAt": "2021-01-04T10:06:05Z", "lastEditedAt": null, "updatedAt": "2021-01-04T10:06:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32875, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@jcook793 See @paoven 's comment - the app is shutting down as soon as possible.", "sentSegmented": ["jcook793", "see", "paoven", "'s", "comment", "the", "app", "is", "shutting", "down", "as", "soon", "as", "possible"], "sentSegmentedWithoutStops": ["jcook793", "see", "paoven", "'s", "comment", "app", "shutting", "soon", "possible"], "sentSegmentedWithoutStopsStemmed": ["jcook793", "see", "paoven", "'s", "comment", "app", "shut", "soon", "possibl"]}, {"number": 32876, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm closing this issue as a duplicate of #20995 - I don't know if we'll implement it, but in the meantime the preStop hook seems like the sensible solution here.", "sentSegmented": ["i", "'m", "closing", "this", "issue", "as", "a", "duplicate", "of", "20995", "i", "do", "n't", "know", "if", "we", "'ll", "implement", "it", "but", "in", "the", "meantime", "the", "prestop", "hook", "seems", "like", "the", "sensible", "solution", "here"], "sentSegmentedWithoutStops": ["'m", "closing", "issue", "duplicate", "20995", "n't", "know", "'ll", "implement", "meantime", "prestop", "hook", "seems", "like", "sensible", "solution"], "sentSegmentedWithoutStopsStemmed": ["'m", "close", "issu", "duplic", "20995", "n't", "know", "'ll", "implement", "meantim", "prestop", "hook", "seem", "like", "sensibl", "solut"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc2MDE0MTg1Ng==", "author": {"login": "lturcsanyi"}, "body": "The documentation is still wrong, because it states that during the graceful shutdown period the liveness probe should report LIVE state, but both endpoints are unreachable.\r\n[docs](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-application-availability-liveness-state)", "bodyText": "The documentation is still wrong, because it states that during the graceful shutdown period the liveness probe should report LIVE state, but both endpoints are unreachable.\ndocs", "bodyHTML": "<p>The documentation is still wrong, because it states that during the graceful shutdown period the liveness probe should report LIVE state, but both endpoints are unreachable.<br>\n<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-application-availability-liveness-state\" rel=\"nofollow\">docs</a></p>", "createdAt": "2021-01-14T11:37:01Z", "publishedAt": "2021-01-14T11:37:01Z", "lastEditedAt": null, "updatedAt": "2021-01-14T11:37:01Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32877, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The documentation is still wrong, because it states that during the graceful shutdown period the liveness probe should report LIVE state, but both endpoints are unreachable.", "sentSegmented": ["the", "documentation", "is", "still", "wrong", "because", "it", "states", "that", "during", "the", "graceful", "shutdown", "period", "the", "liveness", "probe", "should", "report", "live", "state", "but", "both", "endpoints", "are", "unreachable"], "sentSegmentedWithoutStops": ["documentation", "still", "wrong", "states", "graceful", "shutdown", "period", "liveness", "probe", "report", "live", "state", "endpoints", "unreachable"], "sentSegmentedWithoutStopsStemmed": ["document", "still", "wrong", "state", "grace", "shutdown", "period", "live", "probe", "report", "live", "state", "endpoint", "unreach"]}, {"number": 32878, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "docs", "sentSegmented": ["docs"], "sentSegmentedWithoutStops": ["docs"], "sentSegmentedWithoutStopsStemmed": ["doc"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc2MDE0NDMxMA==", "author": {"login": "bclozel"}, "body": "@lturcsanyi could you quote here exactly the section that states this?", "bodyText": "@lturcsanyi could you quote here exactly the section that states this?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lturcsanyi/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lturcsanyi\">@lturcsanyi</a> could you quote here exactly the section that states this?</p>", "createdAt": "2021-01-14T11:42:06Z", "publishedAt": "2021-01-14T11:42:06Z", "lastEditedAt": null, "updatedAt": "2021-01-14T11:42:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32879, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@lturcsanyi could you quote here exactly the section that states this?", "sentSegmented": ["lturcsanyi", "could", "you", "quote", "here", "exactly", "the", "section", "that", "states", "this"], "sentSegmentedWithoutStops": ["lturcsanyi", "could", "quote", "exactly", "section", "states"], "sentSegmentedWithoutStopsStemmed": ["lturcsanyi", "could", "quot", "exactli", "section", "state"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc2MDE1NDE2OQ==", "author": {"login": "lturcsanyi"}, "body": "Sorry, I linked a wrong section, in the \"Application lifecycle and Probes states\" section, the second table: \"When a Spring Boot application shuts down:\"\r\nI would assume this means that the liveness probe still returns live state.", "bodyText": "Sorry, I linked a wrong section, in the \"Application lifecycle and Probes states\" section, the second table: \"When a Spring Boot application shuts down:\"\nI would assume this means that the liveness probe still returns live state.", "bodyHTML": "<p>Sorry, I linked a wrong section, in the \"Application lifecycle and Probes states\" section, the second table: \"When a Spring Boot application shuts down:\"<br>\nI would assume this means that the liveness probe still returns live state.</p>", "createdAt": "2021-01-14T12:03:47Z", "publishedAt": "2021-01-14T12:03:47Z", "lastEditedAt": null, "updatedAt": "2021-01-14T12:03:47Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 32880, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sorry, I linked a wrong section, in the \"Application lifecycle and Probes states\" section, the second table: \"When a Spring Boot application shuts down:\"", "sentSegmented": ["sorry", "i", "linked", "a", "wrong", "section", "in", "the", "application", "lifecycle", "and", "probes", "states", "section", "the", "second", "table", "when", "a", "spring", "boot", "application", "shuts", "down"], "sentSegmentedWithoutStops": ["sorry", "linked", "wrong", "section", "application", "lifecycle", "probes", "states", "section", "second", "table", "spring", "boot", "application", "shuts"], "sentSegmentedWithoutStopsStemmed": ["sorri", "link", "wrong", "section", "applic", "lifecycl", "probe", "state", "section", "second", "tabl", "spring", "boot", "applic", "shut"]}, {"number": 32881, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I would assume this means that the liveness probe still returns live state.", "sentSegmented": ["i", "would", "assume", "this", "means", "that", "the", "liveness", "probe", "still", "returns", "live", "state"], "sentSegmentedWithoutStops": ["would", "assume", "means", "liveness", "probe", "still", "returns", "live", "state"], "sentSegmentedWithoutStopsStemmed": ["would", "assum", "mean", "live", "probe", "still", "return", "live", "state"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc2MDM0NTI5OQ==", "author": {"login": "bclozel"}, "body": "Thanks for the feedback @lturcsanyi , I've created #24843", "bodyText": "Thanks for the feedback @lturcsanyi , I've created #24843", "bodyHTML": "<p>Thanks for the feedback <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lturcsanyi/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lturcsanyi\">@lturcsanyi</a> , I've created <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"786176407\" data-permission-text=\"Title is private\" data-url=\"https://github.com/spring-projects/spring-boot/issues/24843\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-boot/issues/24843/hovercard\" href=\"https://github.com/spring-projects/spring-boot/issues/24843\">#24843</a></p>", "createdAt": "2021-01-14T17:29:14Z", "publishedAt": "2021-01-14T17:29:14Z", "lastEditedAt": null, "updatedAt": "2021-01-14T17:29:14Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2021-01-15T08:23:01Z"}}]}, "bodyParsed": [{"number": 32882, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks for the feedback @lturcsanyi , I've created #24843", "sentSegmented": ["thanks", "for", "the", "feedback", "lturcsanyi", "i", "'ve", "created", "24843"], "sentSegmentedWithoutStops": ["thanks", "feedback", "lturcsanyi", "'ve", "created", "24843"], "sentSegmentedWithoutStopsStemmed": ["thank", "feedback", "lturcsanyi", "'ve", "creat", "24843"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOLVHy0w==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2012-10-19T15:02:58Z", "name": "status: duplicate"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["liveness/readiness", "probes", "failure", "while", "using", "graceful", "shutdown"], "titleSegmentedWithoutStops": ["liveness/readiness", "probes", "failure", "using", "graceful", "shutdown"], "titleSegmentedWithoutStopsStemmed": ["liveness/readi", "probe", "failur", "use", "grace", "shutdown"], "bodyParsed": [{"number": 32837, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi!", "sentSegmented": ["hi"], "sentSegmentedWithoutStops": ["hi"], "sentSegmentedWithoutStopsStemmed": ["hi"]}, {"number": 32838, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "While I was investigating on Spring Boot graceful shutdown feature as well as liveness/readiness endpoints (to be called at a later stage from Kubernetes probes) I discovered that the mentioned endpoints become unreacheble as soon as shutdown is initiated by a SIGTERM.", "sentSegmented": ["while", "i", "was", "investigating", "on", "spring", "boot", "graceful", "shutdown", "feature", "as", "well", "as", "liveness/readiness", "endpoints", "to", "be", "called", "at", "a", "later", "stage", "from", "kubernetes", "probes", "i", "discovered", "that", "the", "mentioned", "endpoints", "become", "unreacheble", "as", "soon", "as", "shutdown", "is", "initiated", "by", "a", "sigterm"], "sentSegmentedWithoutStops": ["investigating", "spring", "boot", "graceful", "shutdown", "feature", "well", "liveness/readiness", "endpoints", "called", "later", "stage", "kubernetes", "probes", "discovered", "mentioned", "endpoints", "become", "unreacheble", "soon", "shutdown", "initiated", "sigterm"], "sentSegmentedWithoutStopsStemmed": ["investig", "spring", "boot", "grace", "shutdown", "featur", "well", "liveness/readi", "endpoint", "call", "later", "stage", "kubernet", "probe", "discov", "mention", "endpoint", "becom", "unreachebl", "soon", "shutdown", "initi", "sigterm"]}, {"number": 32839, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This would cause Kubernetes liveness probe fail and may lead to unclean shutdown.", "sentSegmented": ["this", "would", "cause", "kubernetes", "liveness", "probe", "fail", "and", "may", "lead", "to", "unclean", "shutdown"], "sentSegmentedWithoutStops": ["would", "cause", "kubernetes", "liveness", "probe", "fail", "may", "lead", "unclean", "shutdown"], "sentSegmentedWithoutStopsStemmed": ["would", "caus", "kubernet", "live", "probe", "fail", "may", "lead", "unclean", "shutdown"]}, {"number": 32840, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As the purpose of graceful shutdown is the opposite I filled this report.", "sentSegmented": ["as", "the", "purpose", "of", "graceful", "shutdown", "is", "the", "opposite", "i", "filled", "this", "report"], "sentSegmentedWithoutStops": ["purpose", "graceful", "shutdown", "opposite", "filled", "report"], "sentSegmentedWithoutStopsStemmed": ["purpos", "grace", "shutdown", "opposit", "fill", "report"]}, {"number": 32841, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I created a sample Spring Boot project on GitHub to simplify issue testing.", "sentSegmented": ["i", "created", "a", "sample", "spring", "boot", "project", "on", "github", "to", "simplify", "issue", "testing"], "sentSegmentedWithoutStops": ["created", "sample", "spring", "boot", "project", "github", "simplify", "issue", "testing"], "sentSegmentedWithoutStopsStemmed": ["creat", "sampl", "spring", "boot", "project", "github", "simplifi", "issu", "test"]}, {"number": 32842, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The service exposes a controller that, when invoked, will sleep for the desired amount of time.", "sentSegmented": ["the", "service", "exposes", "a", "controller", "that", "when", "invoked", "will", "sleep", "for", "the", "desired", "amount", "of", "time"], "sentSegmentedWithoutStops": ["service", "exposes", "controller", "invoked", "sleep", "desired", "amount", "time"], "sentSegmentedWithoutStopsStemmed": ["servic", "expos", "control", "invok", "sleep", "desir", "amount", "time"]}, {"number": 32843, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please see instructions to reproduce the issue below.", "sentSegmented": ["please", "see", "instructions", "to", "reproduce", "the", "issue", "below"], "sentSegmentedWithoutStops": ["please", "see", "instructions", "reproduce", "issue"], "sentSegmentedWithoutStopsStemmed": ["pleas", "see", "instruct", "reproduc", "issu"]}, {"number": 32844, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Many thanks for your support, best regards", "sentSegmented": ["many", "thanks", "for", "your", "support", "best", "regards"], "sentSegmentedWithoutStops": ["many", "thanks", "support", "best", "regards"], "sentSegmentedWithoutStopsStemmed": ["mani", "thank", "support", "best", "regard"]}, {"number": 32845, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Paolo", "sentSegmented": ["paolo"], "sentSegmentedWithoutStops": ["paolo"], "sentSegmentedWithoutStopsStemmed": ["paolo"]}, {"number": 32846, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Environment:", "sentSegmented": ["environment"], "sentSegmentedWithoutStops": ["environment"], "sentSegmentedWithoutStopsStemmed": ["environ"]}, {"number": 32847, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "OS: Windows 10 Pro", "sentSegmented": ["os", "windows", "10", "pro"], "sentSegmentedWithoutStops": ["os", "windows", "10", "pro"], "sentSegmentedWithoutStopsStemmed": ["os", "window", "10", "pro"]}, {"number": 32848, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "JDK: openjdk 11.0.7 2020-04-14 LTS", "sentSegmented": ["jdk", "openjdk", "11.0.7", "2020-04-14", "lts"], "sentSegmentedWithoutStops": ["jdk", "openjdk", "11.0.7", "2020-04-14", "lts"], "sentSegmentedWithoutStopsStemmed": ["jdk", "openjdk", "11.0.7", "2020-04-14", "lt"]}, {"number": 32849, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Spring boot starter parent : 2.4.1", "sentSegmented": ["spring", "boot", "starter", "parent", "2.4.1"], "sentSegmentedWithoutStops": ["spring", "boot", "starter", "parent", "2.4.1"], "sentSegmentedWithoutStopsStemmed": ["spring", "boot", "starter", "parent", "2.4.1"]}, {"number": 32850, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Servlet Engine: Apache Tomcat/9.0.41", "sentSegmented": ["servlet", "engine", "apache", "tomcat/9.0.41"], "sentSegmentedWithoutStops": ["servlet", "engine", "apache", "tomcat/9.0.41"], "sentSegmentedWithoutStopsStemmed": ["servlet", "engin", "apach", "tomcat/9.0.41"]}, {"number": 32851, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "How to reproduce:", "sentSegmented": ["how", "to", "reproduce"], "sentSegmentedWithoutStops": ["reproduce"], "sentSegmentedWithoutStopsStemmed": ["reproduc"]}, {"number": 32852, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please checkout sample project https://github.com/paoven/graceful-shutdown", "sentSegmented": ["please", "checkout", "sample", "project", "https", "//github.com/paoven/graceful-shutdown"], "sentSegmentedWithoutStops": ["please", "checkout", "sample", "project", "https", "//github.com/paoven/graceful-shutdown"], "sentSegmentedWithoutStopsStemmed": ["pleas", "checkout", "sampl", "project", "http", "//github.com/paoven/graceful-shutdown"]}, {"number": 32853, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Run the project and call the endpoint (E.g.", "sentSegmented": ["run", "the", "project", "and", "call", "the", "endpoint", "e.g"], "sentSegmentedWithoutStops": ["run", "project", "call", "endpoint", "e.g"], "sentSegmentedWithoutStopsStemmed": ["run", "project", "call", "endpoint", "e.g"]}, {"number": 32854, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "curl -H \"Content-Type:application/json\" -H \"Accept:application/json\" -XPOST -d \"1\" http://localhost:8080/wait?waitMs=20000)", "sentSegmented": ["curl", "-h", "content-type", "application/json", "-h", "accept", "application/json", "-xpost", "-d", "1", "http", "//localhost:8080/wait", "waitms=20000"], "sentSegmentedWithoutStops": ["curl", "-h", "content-type", "application/json", "-h", "accept", "application/json", "-xpost", "-d", "1", "http", "//localhost:8080/wait", "waitms=20000"], "sentSegmentedWithoutStopsStemmed": ["curl", "-h", "content-typ", "application/json", "-h", "accept", "application/json", "-xpost", "-d", "1", "http", "//localhost:8080/wait", "waitms=20000"]}, {"number": 32855, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Take note of process PID and initiate a graceful shutdown by issuing a SIGTERM signal within 20seconds.", "sentSegmented": ["take", "note", "of", "process", "pid", "and", "initiate", "a", "graceful", "shutdown", "by", "issuing", "a", "sigterm", "signal", "within", "20seconds"], "sentSegmentedWithoutStops": ["take", "note", "process", "pid", "initiate", "graceful", "shutdown", "issuing", "sigterm", "signal", "within", "20seconds"], "sentSegmentedWithoutStopsStemmed": ["take", "note", "process", "pid", "initi", "grace", "shutdown", "issu", "sigterm", "signal", "within", "20second"]}, {"number": 32856, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(E.g.", "sentSegmented": ["e.g"], "sentSegmentedWithoutStops": ["e.g"], "sentSegmentedWithoutStopsStemmed": ["e.g"]}, {"number": 32857, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "kill -SIGTERM [PID])", "sentSegmented": ["kill", "-sigterm", "pid"], "sentSegmentedWithoutStops": ["kill", "-sigterm", "pid"], "sentSegmentedWithoutStopsStemmed": ["kill", "-sigterm", "pid"]}, {"number": 32858, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The Spring Boot service logs the graceful shutdown and the request is fulfilled as it takes less than the configured graceful shutdown timeout (30s).", "sentSegmented": ["the", "spring", "boot", "service", "logs", "the", "graceful", "shutdown", "and", "the", "request", "is", "fulfilled", "as", "it", "takes", "less", "than", "the", "configured", "graceful", "shutdown", "timeout", "30s"], "sentSegmentedWithoutStops": ["spring", "boot", "service", "logs", "graceful", "shutdown", "request", "fulfilled", "takes", "less", "configured", "graceful", "shutdown", "timeout", "30s"], "sentSegmentedWithoutStopsStemmed": ["spring", "boot", "servic", "log", "grace", "shutdown", "request", "fulfil", "take", "less", "configur", "grace", "shutdown", "timeout", "30"]}, {"number": 32859, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The problem is that, as soon as you issue the SIGTERM, the Spring Boot actuator health endpoints become unreachable (both liveness and rediness groups).", "sentSegmented": ["the", "problem", "is", "that", "as", "soon", "as", "you", "issue", "the", "sigterm", "the", "spring", "boot", "actuator", "health", "endpoints", "become", "unreachable", "both", "liveness", "and", "rediness", "groups"], "sentSegmentedWithoutStops": ["problem", "soon", "issue", "sigterm", "spring", "boot", "actuator", "health", "endpoints", "become", "unreachable", "liveness", "rediness", "groups"], "sentSegmentedWithoutStopsStemmed": ["problem", "soon", "issu", "sigterm", "spring", "boot", "actuat", "health", "endpoint", "becom", "unreach", "live", "redi", "group"]}, {"number": 32860, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "External Systems relying on that endpoints for availability/healthy checks (such as Kubernetes) would think that the service is not available anymore too soon.", "sentSegmented": ["external", "systems", "relying", "on", "that", "endpoints", "for", "availability/healthy", "checks", "such", "as", "kubernetes", "would", "think", "that", "the", "service", "is", "not", "available", "anymore", "too", "soon"], "sentSegmentedWithoutStops": ["external", "systems", "relying", "endpoints", "availability/healthy", "checks", "kubernetes", "would", "think", "service", "available", "anymore", "soon"], "sentSegmentedWithoutStopsStemmed": ["extern", "system", "reli", "endpoint", "availability/healthi", "check", "kubernet", "would", "think", "servic", "avail", "anymor", "soon"]}]}