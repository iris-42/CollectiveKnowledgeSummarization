{"repository": {"owner": {"login": "golang"}, "name": "go", "forkCount": 12071, "stargazerCount": 83138, "createdAt": "2014-08-19T04:33:40Z", "updatedAt": "2021-03-10T14:06:18Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "programming-language"}}}, {"node": {"topic": {"name": "language"}}}, {"node": {"topic": {"name": "go"}}}, {"node": {"topic": {"name": "golang"}}}]}, "languages": {"edges": [{"node": {"name": "Shell"}}, {"node": {"name": "Go"}}, {"node": {"name": "C"}}, {"node": {"name": "C++"}}, {"node": {"name": "HTML"}}, {"node": {"name": "JavaScript"}}, {"node": {"name": "Assembly"}}, {"node": {"name": "Makefile"}}, {"node": {"name": "Awk"}}, {"node": {"name": "Perl"}}, {"node": {"name": "Python"}}, {"node": {"name": "Batchfile"}}, {"node": {"name": "Fortran"}}]}, "primaryLanguage": {"name": "Go"}}, "id": "MDU6SXNzdWUyOTgwNzI3Nzk=", "number": 23906, "author": {"login": "go101"}, "title": "proposal: the make function needs to be optimized for large slices", "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.10 linux/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t\"testing\"\r\n)\r\n\r\nconst N = 10000\r\ntype Element int64\r\nvar x = make([]Element, N)\r\nvar yForCopy = make([]Element, N)\r\nvar yForMake []Element\r\nvar yForMakeCopy []Element\r\nvar yForAppend []Element\r\n\r\nfunc Benchmark_PureCopy(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tcopy(yForCopy, x)\r\n\t}\r\n}\r\n\r\nfunc Benchmark_PureMake(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tyForMake = make([]Element, N)\r\n\t}\r\n}\r\n\r\nfunc Benchmark_MakeAndCopy(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tyForMakeCopy = make([]Element, N)\r\n\t\tcopy(yForMakeCopy, x)\r\n\t}\r\n}\r\n\r\nfunc Benchmark_Append(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tyForAppend = append([]Element(nil), x...)\r\n\t}\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe append call should spend more time than the pure make call and spend almost same time as the make+copy calls.\r\n\r\nHowever, these are only true if N is small (<= 1000).\r\n\r\n### What did you see instead?\r\n\r\nWhen `N == 10`\r\n```\r\ngoos: linux\r\ngoarch: amd64\r\nBenchmark_PureCopy-4      \t50000000\t        30.7 ns/op\r\nBenchmark_PureMake-4      \t 5000000\t       387 ns/op\r\nBenchmark_MakeAndCopy-4   \t 3000000\t       446 ns/op\r\nBenchmark_Append-4        \t 3000000\t       489 ns/op\r\n```\r\n\r\nWhen `N == 1000`\r\n```\r\ngoos: linux\r\ngoarch: amd64\r\nBenchmark_PureCopy-4      \t 5000000\t       259 ns/op\r\nBenchmark_PureMake-4      \t  500000\t      2892 ns/op\r\nBenchmark_MakeAndCopy-4   \t  500000\t      3582 ns/op\r\nBenchmark_Append-4        \t  500000\t      3287 ns/op\r\n```\r\n\r\nWhen `N == 10000`\r\n```\r\ngoos: linux\r\ngoarch: amd64\r\nBenchmark_PureCopy-4      \t  500000\t      3537 ns/op\r\nBenchmark_PureMake-4      \t  100000\t     21456 ns/op\r\nBenchmark_MakeAndCopy-4   \t   50000\t     29679 ns/op\r\nBenchmark_Append-4        \t  100000\t     17697 ns/op\r\n```\r\n", "bodyHTML": "<p>Please answer these questions before submitting your issue. Thanks!</p>\n<h3>What version of Go are you using (<code>go version</code>)?</h3>\n<p>go version go1.10 linux/amd64</p>\n<h3>Does this issue reproduce with the latest release?</h3>\n<p>yes</p>\n<h3>What did you do?</h3>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">package</span> main\n\n<span class=\"pl-k\">import</span> (\n\t<span class=\"pl-s\">\"testing\"</span>\n)\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">N</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10000</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Element</span> <span class=\"pl-smi\">int64</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">Element</span>, <span class=\"pl-s1\">N</span>)\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">yForCopy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">Element</span>, <span class=\"pl-s1\">N</span>)\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">yForMake</span> []<span class=\"pl-smi\">Element</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">yForMakeCopy</span> []<span class=\"pl-smi\">Element</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">yForAppend</span> []<span class=\"pl-smi\">Element</span>\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">Benchmark_PureCopy</span>(<span class=\"pl-s1\">b</span> <span class=\"pl-c1\">*</span>testing.<span class=\"pl-smi\">B</span>) {\n\t<span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">b</span>.<span class=\"pl-c1\">N</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n\t\t<span class=\"pl-en\">copy</span>(<span class=\"pl-s1\">yForCopy</span>, <span class=\"pl-s1\">x</span>)\n\t}\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">Benchmark_PureMake</span>(<span class=\"pl-s1\">b</span> <span class=\"pl-c1\">*</span>testing.<span class=\"pl-smi\">B</span>) {\n\t<span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">b</span>.<span class=\"pl-c1\">N</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n\t\t<span class=\"pl-s1\">yForMake</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">Element</span>, <span class=\"pl-s1\">N</span>)\n\t}\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">Benchmark_MakeAndCopy</span>(<span class=\"pl-s1\">b</span> <span class=\"pl-c1\">*</span>testing.<span class=\"pl-smi\">B</span>) {\n\t<span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">b</span>.<span class=\"pl-c1\">N</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n\t\t<span class=\"pl-s1\">yForMakeCopy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">Element</span>, <span class=\"pl-s1\">N</span>)\n\t\t<span class=\"pl-en\">copy</span>(<span class=\"pl-s1\">yForMakeCopy</span>, <span class=\"pl-s1\">x</span>)\n\t}\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">Benchmark_Append</span>(<span class=\"pl-s1\">b</span> <span class=\"pl-c1\">*</span>testing.<span class=\"pl-smi\">B</span>) {\n\t<span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">b</span>.<span class=\"pl-c1\">N</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n\t\t<span class=\"pl-s1\">yForAppend</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">append</span>([]<span class=\"pl-smi\">Element</span>(<span class=\"pl-c1\">nil</span>), <span class=\"pl-s1\">x</span><span class=\"pl-c1\">...</span>)\n\t}\n}</pre></div>\n<h3>What did you expect to see?</h3>\n<p>The append call should spend more time than the pure make call and spend almost same time as the make+copy calls.</p>\n<p>However, these are only true if N is small (&lt;= 1000).</p>\n<h3>What did you see instead?</h3>\n<p>When <code>N == 10</code></p>\n<pre><code>goos: linux\ngoarch: amd64\nBenchmark_PureCopy-4      \t50000000\t        30.7 ns/op\nBenchmark_PureMake-4      \t 5000000\t       387 ns/op\nBenchmark_MakeAndCopy-4   \t 3000000\t       446 ns/op\nBenchmark_Append-4        \t 3000000\t       489 ns/op\n</code></pre>\n<p>When <code>N == 1000</code></p>\n<pre><code>goos: linux\ngoarch: amd64\nBenchmark_PureCopy-4      \t 5000000\t       259 ns/op\nBenchmark_PureMake-4      \t  500000\t      2892 ns/op\nBenchmark_MakeAndCopy-4   \t  500000\t      3582 ns/op\nBenchmark_Append-4        \t  500000\t      3287 ns/op\n</code></pre>\n<p>When <code>N == 10000</code></p>\n<pre><code>goos: linux\ngoarch: amd64\nBenchmark_PureCopy-4      \t  500000\t      3537 ns/op\nBenchmark_PureMake-4      \t  100000\t     21456 ns/op\nBenchmark_MakeAndCopy-4   \t   50000\t     29679 ns/op\nBenchmark_Append-4        \t  100000\t     17697 ns/op\n</code></pre>", "bodyText": "Please answer these questions before submitting your issue. Thanks!\nWhat version of Go are you using (go version)?\ngo version go1.10 linux/amd64\nDoes this issue reproduce with the latest release?\nyes\nWhat did you do?\npackage main\n\nimport (\n\t\"testing\"\n)\n\nconst N = 10000\ntype Element int64\nvar x = make([]Element, N)\nvar yForCopy = make([]Element, N)\nvar yForMake []Element\nvar yForMakeCopy []Element\nvar yForAppend []Element\n\nfunc Benchmark_PureCopy(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tcopy(yForCopy, x)\n\t}\n}\n\nfunc Benchmark_PureMake(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tyForMake = make([]Element, N)\n\t}\n}\n\nfunc Benchmark_MakeAndCopy(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tyForMakeCopy = make([]Element, N)\n\t\tcopy(yForMakeCopy, x)\n\t}\n}\n\nfunc Benchmark_Append(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tyForAppend = append([]Element(nil), x...)\n\t}\n}\nWhat did you expect to see?\nThe append call should spend more time than the pure make call and spend almost same time as the make+copy calls.\nHowever, these are only true if N is small (<= 1000).\nWhat did you see instead?\nWhen N == 10\ngoos: linux\ngoarch: amd64\nBenchmark_PureCopy-4      \t50000000\t        30.7 ns/op\nBenchmark_PureMake-4      \t 5000000\t       387 ns/op\nBenchmark_MakeAndCopy-4   \t 3000000\t       446 ns/op\nBenchmark_Append-4        \t 3000000\t       489 ns/op\n\nWhen N == 1000\ngoos: linux\ngoarch: amd64\nBenchmark_PureCopy-4      \t 5000000\t       259 ns/op\nBenchmark_PureMake-4      \t  500000\t      2892 ns/op\nBenchmark_MakeAndCopy-4   \t  500000\t      3582 ns/op\nBenchmark_Append-4        \t  500000\t      3287 ns/op\n\nWhen N == 10000\ngoos: linux\ngoarch: amd64\nBenchmark_PureCopy-4      \t  500000\t      3537 ns/op\nBenchmark_PureMake-4      \t  100000\t     21456 ns/op\nBenchmark_MakeAndCopy-4   \t   50000\t     29679 ns/op\nBenchmark_Append-4        \t  100000\t     17697 ns/op", "assignees": {"edges": []}, "createdAt": "2018-02-18T09:59:23Z", "closed": true, "closedAt": "2018-02-19T16:54:26Z", "lastEditedAt": "2018-02-18T11:04:25Z", "publishedAt": "2018-02-18T09:59:23Z", "comments": {"totalCount": 8, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NjUwNzI0NA==", "author": {"login": "odeke-em"}, "body": "/cc @josharian ", "bodyText": "/cc @josharian", "bodyHTML": "<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/josharian/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/josharian\">@josharian</a></p>", "createdAt": "2018-02-18T10:47:05Z", "publishedAt": "2018-02-18T10:47:05Z", "lastEditedAt": null, "updatedAt": "2018-02-18T10:47:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42298, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "/cc @josharian", "sentSegmented": ["/cc", "josharian"], "sentSegmentedWithoutStops": ["/cc", "josharian"], "sentSegmentedWithoutStopsStemmed": ["/cc", "josharian"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NjUxMjk1NQ==", "author": {"login": "sywesk"}, "body": "Isn't that due to this PR ? https://github.com/golang/go/commit/2b415549b813ba36caafa34fc34d72e47ee8335c\r\n\r\nIt states that:\r\n\r\n> This change also makes it possible to allocate individual objects\r\nlarger than 512GB. As a result, a few tests that expected huge\r\nallocations to fail needed to be changed to make even larger\r\nallocations. However, at the moment **attempting to allocate a humongous\r\nobject may cause the program to freeze for several minutes on Linux** as\r\nwe fall back to probing every page with addrspace_free. That logic\r\n(and this failure mode) will be removed in the next CL.", "bodyText": "Isn't that due to this PR ? 2b41554\nIt states that:\n\nThis change also makes it possible to allocate individual objects\nlarger than 512GB. As a result, a few tests that expected huge\nallocations to fail needed to be changed to make even larger\nallocations. However, at the moment attempting to allocate a humongous\nobject may cause the program to freeze for several minutes on Linux as\nwe fall back to probing every page with addrspace_free. That logic\n(and this failure mode) will be removed in the next CL.", "bodyHTML": "<p>Isn't that due to this PR ? <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/golang/go/commit/2b415549b813ba36caafa34fc34d72e47ee8335c/hovercard\" href=\"https://github.com/golang/go/commit/2b415549b813ba36caafa34fc34d72e47ee8335c\"><tt>2b41554</tt></a></p>\n<p>It states that:</p>\n<blockquote>\n<p>This change also makes it possible to allocate individual objects<br>\nlarger than 512GB. As a result, a few tests that expected huge<br>\nallocations to fail needed to be changed to make even larger<br>\nallocations. However, at the moment <strong>attempting to allocate a humongous<br>\nobject may cause the program to freeze for several minutes on Linux</strong> as<br>\nwe fall back to probing every page with addrspace_free. That logic<br>\n(and this failure mode) will be removed in the next CL.</p>\n</blockquote>", "createdAt": "2018-02-18T12:35:18Z", "publishedAt": "2018-02-18T12:35:18Z", "lastEditedAt": null, "updatedAt": "2018-02-18T12:35:18Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42299, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Isn't that due to this PR ?", "sentSegmented": ["is", "n't", "that", "due", "to", "this", "pr"], "sentSegmentedWithoutStops": ["n't", "due", "pr"], "sentSegmentedWithoutStopsStemmed": ["n't", "due", "pr"]}, {"number": 42300, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "2b41554", "sentSegmented": ["2b41554"], "sentSegmentedWithoutStops": ["2b41554"], "sentSegmentedWithoutStopsStemmed": ["2b41554"]}, {"number": 42301, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It states that:", "sentSegmented": ["it", "states", "that"], "sentSegmentedWithoutStops": ["states"], "sentSegmentedWithoutStopsStemmed": ["state"]}, {"number": 42302, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "This change also makes it possible to allocate individual objects", "sentSegmented": ["this", "change", "also", "makes", "it", "possible", "to", "allocate", "individual", "objects"], "sentSegmentedWithoutStops": ["change", "also", "makes", "possible", "allocate", "individual", "objects"], "sentSegmentedWithoutStopsStemmed": ["chang", "also", "make", "possibl", "alloc", "individu", "object"]}, {"number": 42303, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "larger than 512GB.", "sentSegmented": ["larger", "than", "512gb"], "sentSegmentedWithoutStops": ["larger", "512gb"], "sentSegmentedWithoutStopsStemmed": ["larger", "512gb"]}, {"number": 42304, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "As a result, a few tests that expected huge", "sentSegmented": ["as", "a", "result", "a", "few", "tests", "that", "expected", "huge"], "sentSegmentedWithoutStops": ["result", "tests", "expected", "huge"], "sentSegmentedWithoutStopsStemmed": ["result", "test", "expect", "huge"]}, {"number": 42305, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "allocations to fail needed to be changed to make even larger", "sentSegmented": ["allocations", "to", "fail", "needed", "to", "be", "changed", "to", "make", "even", "larger"], "sentSegmentedWithoutStops": ["allocations", "fail", "needed", "changed", "make", "even", "larger"], "sentSegmentedWithoutStopsStemmed": ["alloc", "fail", "need", "chang", "make", "even", "larger"]}, {"number": 42306, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "allocations.", "sentSegmented": ["allocations"], "sentSegmentedWithoutStops": ["allocations"], "sentSegmentedWithoutStopsStemmed": ["alloc"]}, {"number": 42307, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "However, at the moment attempting to allocate a humongous", "sentSegmented": ["however", "at", "the", "moment", "attempting", "to", "allocate", "a", "humongous"], "sentSegmentedWithoutStops": ["however", "moment", "attempting", "allocate", "humongous"], "sentSegmentedWithoutStopsStemmed": ["howev", "moment", "attempt", "alloc", "humong"]}, {"number": 42308, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "object may cause the program to freeze for several minutes on Linux as", "sentSegmented": ["object", "may", "cause", "the", "program", "to", "freeze", "for", "several", "minutes", "on", "linux", "as"], "sentSegmentedWithoutStops": ["object", "may", "cause", "program", "freeze", "several", "minutes", "linux"], "sentSegmentedWithoutStopsStemmed": ["object", "may", "caus", "program", "freez", "sever", "minut", "linux"]}, {"number": 42309, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "we fall back to probing every page with addrspace_free.", "sentSegmented": ["we", "fall", "back", "to", "probing", "every", "page", "with", "addrspace_free"], "sentSegmentedWithoutStops": ["fall", "back", "probing", "every", "page", "addrspace_free"], "sentSegmentedWithoutStopsStemmed": ["fall", "back", "probe", "everi", "page", "addrspace_fre"]}, {"number": 42310, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "That logic", "sentSegmented": ["that", "logic"], "sentSegmentedWithoutStops": ["logic"], "sentSegmentedWithoutStopsStemmed": ["logic"]}, {"number": 42311, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "(and this failure mode) will be removed in the next CL.", "sentSegmented": ["and", "this", "failure", "mode", "will", "be", "removed", "in", "the", "next", "cl"], "sentSegmentedWithoutStops": ["failure", "mode", "removed", "next", "cl"], "sentSegmentedWithoutStopsStemmed": ["failur", "mode", "remov", "next", "cl"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NjUxNDA1MQ==", "author": {"login": "go101"}, "body": "This should be unrelated. The issue is also for Go 1.9.", "bodyText": "This should be unrelated. The issue is also for Go 1.9.", "bodyHTML": "<p>This should be unrelated. The issue is also for Go 1.9.</p>", "createdAt": "2018-02-18T12:53:06Z", "publishedAt": "2018-02-18T12:53:06Z", "lastEditedAt": null, "updatedAt": "2018-02-18T12:53:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42312, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This should be unrelated.", "sentSegmented": ["this", "should", "be", "unrelated"], "sentSegmentedWithoutStops": ["unrelated"], "sentSegmentedWithoutStopsStemmed": ["unrel"]}, {"number": 42313, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The issue is also for Go 1.9.", "sentSegmented": ["the", "issue", "is", "also", "for", "go", "1.9"], "sentSegmentedWithoutStops": ["issue", "also", "go", "1.9"], "sentSegmentedWithoutStopsStemmed": ["issu", "also", "go", "1.9"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NjUxNjQ0OA==", "author": {"login": "josharian"}, "body": "Duplicate of https://github.com/golang/go/issues/21266?", "bodyText": "Duplicate of #21266?", "bodyHTML": "<p>Duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"247217839\" data-permission-text=\"Title is private\" data-url=\"https://github.com/golang/go/issues/21266\" data-hovercard-type=\"issue\" data-hovercard-url=\"/golang/go/issues/21266/hovercard\" href=\"https://github.com/golang/go/issues/21266\">#21266</a>?</p>", "createdAt": "2018-02-18T13:33:13Z", "publishedAt": "2018-02-18T13:33:13Z", "lastEditedAt": null, "updatedAt": "2018-02-18T13:33:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42314, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Duplicate of #21266?", "sentSegmented": ["duplicate", "of", "21266"], "sentSegmentedWithoutStops": ["duplicate", "21266"], "sentSegmentedWithoutStopsStemmed": ["duplic", "21266"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NjUxNzc4OA==", "author": {"login": "martisch"}, "body": "I think we can break this into multiple performance issues instead of a proposal:\r\n1) memclr (make) can be faster or slower than memmove (append) depending on size see #23306.\r\n2) the compiler could be made to optimize make + copy of same length to use uninitialized allocation where possible (like append) instead of first clearing the memory then overwriting it. (to be discussed)\r\n", "bodyText": "I think we can break this into multiple performance issues instead of a proposal:\n\nmemclr (make) can be faster or slower than memmove (append) depending on size see #23306.\nthe compiler could be made to optimize make + copy of same length to use uninitialized allocation where possible (like append) instead of first clearing the memory then overwriting it. (to be discussed)", "bodyHTML": "<p>I think we can break this into multiple performance issues instead of a proposal:</p>\n<ol>\n<li>memclr (make) can be faster or slower than memmove (append) depending on size see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"285463984\" data-permission-text=\"Title is private\" data-url=\"https://github.com/golang/go/issues/23306\" data-hovercard-type=\"issue\" data-hovercard-url=\"/golang/go/issues/23306/hovercard\" href=\"https://github.com/golang/go/issues/23306\">#23306</a>.</li>\n<li>the compiler could be made to optimize make + copy of same length to use uninitialized allocation where possible (like append) instead of first clearing the memory then overwriting it. (to be discussed)</li>\n</ol>", "createdAt": "2018-02-18T13:54:29Z", "publishedAt": "2018-02-18T13:54:29Z", "lastEditedAt": null, "updatedAt": "2018-02-18T13:54:29Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42315, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think we can break this into multiple performance issues instead of a proposal:", "sentSegmented": ["i", "think", "we", "can", "break", "this", "into", "multiple", "performance", "issues", "instead", "of", "a", "proposal"], "sentSegmentedWithoutStops": ["think", "break", "multiple", "performance", "issues", "instead", "proposal"], "sentSegmentedWithoutStopsStemmed": ["think", "break", "multipl", "perform", "issu", "instead", "propos"]}, {"number": 42316, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "memclr (make) can be faster or slower than memmove (append) depending on size see #23306.", "sentSegmented": ["memclr", "make", "can", "be", "faster", "or", "slower", "than", "memmove", "append", "depending", "on", "size", "see", "23306"], "sentSegmentedWithoutStops": ["memclr", "make", "faster", "slower", "memmove", "append", "depending", "size", "see", "23306"], "sentSegmentedWithoutStopsStemmed": ["memclr", "make", "faster", "slower", "memmov", "append", "depend", "size", "see", "23306"]}, {"number": 42317, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "the compiler could be made to optimize make + copy of same length to use uninitialized allocation where possible (like append) instead of first clearing the memory then overwriting it.", "sentSegmented": ["the", "compiler", "could", "be", "made", "to", "optimize", "make", "copy", "of", "same", "length", "to", "use", "uninitialized", "allocation", "where", "possible", "like", "append", "instead", "of", "first", "clearing", "the", "memory", "then", "overwriting", "it"], "sentSegmentedWithoutStops": ["compiler", "could", "made", "optimize", "make", "copy", "length", "use", "uninitialized", "allocation", "possible", "like", "append", "instead", "first", "clearing", "memory", "overwriting"], "sentSegmentedWithoutStopsStemmed": ["compil", "could", "made", "optim", "make", "copi", "length", "use", "uniniti", "alloc", "possibl", "like", "append", "instead", "first", "clear", "memori", "overwrit"]}, {"number": 42318, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(to be discussed)", "sentSegmented": ["to", "be", "discussed"], "sentSegmentedWithoutStops": ["discussed"], "sentSegmentedWithoutStopsStemmed": ["discuss"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NjYwNTE4Mw==", "author": {"login": "go101"}, "body": "@josharian yes, it is a duplicate of https://github.com/golang/go/issues/21266\r\nBut this is one has more details.", "bodyText": "@josharian yes, it is a duplicate of #21266\nBut this is one has more details.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/josharian/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/josharian\">@josharian</a> yes, it is a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"247217839\" data-permission-text=\"Title is private\" data-url=\"https://github.com/golang/go/issues/21266\" data-hovercard-type=\"issue\" data-hovercard-url=\"/golang/go/issues/21266/hovercard\" href=\"https://github.com/golang/go/issues/21266\">#21266</a><br>\nBut this is one has more details.</p>", "createdAt": "2018-02-19T07:10:59Z", "publishedAt": "2018-02-19T07:10:59Z", "lastEditedAt": null, "updatedAt": "2018-02-19T07:10:59Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42319, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@josharian yes, it is a duplicate of #21266", "sentSegmented": ["josharian", "yes", "it", "is", "a", "duplicate", "of", "21266"], "sentSegmentedWithoutStops": ["josharian", "yes", "duplicate", "21266"], "sentSegmentedWithoutStopsStemmed": ["josharian", "ye", "duplic", "21266"]}, {"number": 42320, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But this is one has more details.", "sentSegmented": ["but", "this", "is", "one", "has", "more", "details"], "sentSegmentedWithoutStops": ["one", "details"], "sentSegmentedWithoutStopsStemmed": ["one", "detail"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2Njc0OTYyMQ==", "author": {"login": "bradfitz"}, "body": "Closing as duplicate of #21266. I'll drop a link to this bug from that one. Or you can comment there.\r\n\r\nOptimizations don't need to be proposals, either.\r\n", "bodyText": "Closing as duplicate of #21266. I'll drop a link to this bug from that one. Or you can comment there.\nOptimizations don't need to be proposals, either.", "bodyHTML": "<p>Closing as duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"247217839\" data-permission-text=\"Title is private\" data-url=\"https://github.com/golang/go/issues/21266\" data-hovercard-type=\"issue\" data-hovercard-url=\"/golang/go/issues/21266/hovercard\" href=\"https://github.com/golang/go/issues/21266\">#21266</a>. I'll drop a link to this bug from that one. Or you can comment there.</p>\n<p>Optimizations don't need to be proposals, either.</p>", "createdAt": "2018-02-19T16:54:26Z", "publishedAt": "2018-02-19T16:54:26Z", "lastEditedAt": null, "updatedAt": "2018-02-19T16:54:26Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42321, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Closing as duplicate of #21266.", "sentSegmented": ["closing", "as", "duplicate", "of", "21266"], "sentSegmentedWithoutStops": ["closing", "duplicate", "21266"], "sentSegmentedWithoutStopsStemmed": ["close", "duplic", "21266"]}, {"number": 42322, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'll drop a link to this bug from that one.", "sentSegmented": ["i", "'ll", "drop", "a", "link", "to", "this", "bug", "from", "that", "one"], "sentSegmentedWithoutStops": ["'ll", "drop", "link", "bug", "one"], "sentSegmentedWithoutStopsStemmed": ["'ll", "drop", "link", "bug", "one"]}, {"number": 42323, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Or you can comment there.", "sentSegmented": ["or", "you", "can", "comment", "there"], "sentSegmentedWithoutStops": ["comment"], "sentSegmentedWithoutStopsStemmed": ["comment"]}, {"number": 42324, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Optimizations don't need to be proposals, either.", "sentSegmented": ["optimizations", "do", "n't", "need", "to", "be", "proposals", "either"], "sentSegmentedWithoutStops": ["optimizations", "n't", "need", "proposals", "either"], "sentSegmentedWithoutStopsStemmed": ["optim", "n't", "need", "propos", "either"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2Njg4MTcxNQ==", "author": {"login": "go101"}, "body": "I'm sorry, I mean this is a duplicated of https://github.com/golang/go/issues/23306", "bodyText": "I'm sorry, I mean this is a duplicated of #23306", "bodyHTML": "<p>I'm sorry, I mean this is a duplicated of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"285463984\" data-permission-text=\"Title is private\" data-url=\"https://github.com/golang/go/issues/23306\" data-hovercard-type=\"issue\" data-hovercard-url=\"/golang/go/issues/23306/hovercard\" href=\"https://github.com/golang/go/issues/23306\">#23306</a></p>", "createdAt": "2018-02-20T06:41:19Z", "publishedAt": "2018-02-20T06:41:19Z", "lastEditedAt": null, "updatedAt": "2018-02-20T06:41:19Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42325, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm sorry, I mean this is a duplicated of #23306", "sentSegmented": ["i", "'m", "sorry", "i", "mean", "this", "is", "a", "duplicated", "of", "23306"], "sentSegmentedWithoutStops": ["'m", "sorry", "mean", "duplicated", "23306"], "sentSegmentedWithoutStopsStemmed": ["'m", "sorri", "mean", "duplic", "23306"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOFd4rsw==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2016-06-24T18:31:15Z", "name": "FrozenDueToAge"}}, {"node": {"createdAt": "2015-07-15T03:53:41Z", "name": "Proposal"}}]}, "milestone": {"title": "Proposal", "dueOn": null}, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["proposal", "the", "make", "function", "needs", "to", "be", "optimized", "for", "large", "slices"], "titleSegmentedWithoutStops": ["proposal", "make", "function", "needs", "optimized", "large", "slices"], "titleSegmentedWithoutStopsStemmed": ["propos", "make", "function", "need", "optim", "larg", "slice"], "bodyParsed": [{"number": 42234, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please answer these questions before submitting your issue.", "sentSegmented": ["please", "answer", "these", "questions", "before", "submitting", "your", "issue"], "sentSegmentedWithoutStops": ["please", "answer", "questions", "submitting", "issue"], "sentSegmentedWithoutStopsStemmed": ["pleas", "answer", "question", "submit", "issu"]}, {"number": 42235, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks!", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 42236, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What version of Go are you using (go version)?", "sentSegmented": ["what", "version", "of", "go", "are", "you", "using", "go", "version"], "sentSegmentedWithoutStops": ["version", "go", "using", "go", "version"], "sentSegmentedWithoutStopsStemmed": ["version", "go", "use", "go", "version"]}, {"number": 42237, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "go version go1.10 linux/amd64", "sentSegmented": ["go", "version", "go1.10", "linux/amd64"], "sentSegmentedWithoutStops": ["go", "version", "go1.10", "linux/amd64"], "sentSegmentedWithoutStopsStemmed": ["go", "version", "go1.10", "linux/amd64"]}, {"number": 42238, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Does this issue reproduce with the latest release?", "sentSegmented": ["does", "this", "issue", "reproduce", "with", "the", "latest", "release"], "sentSegmentedWithoutStops": ["issue", "reproduce", "latest", "release"], "sentSegmentedWithoutStopsStemmed": ["issu", "reproduc", "latest", "releas"]}, {"number": 42239, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "yes", "sentSegmented": ["yes"], "sentSegmentedWithoutStops": ["yes"], "sentSegmentedWithoutStopsStemmed": ["ye"]}, {"number": 42240, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What did you do?", "sentSegmented": ["what", "did", "you", "do"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42241, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "package main", "sentSegmented": ["package", "main"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42242, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "import (", "sentSegmented": ["import"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42243, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\"testing\"", "sentSegmented": ["testing"], "sentSegmentedWithoutStops": ["testing"], "sentSegmentedWithoutStopsStemmed": ["test"]}, {"number": 42244, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ")", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42245, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const N = 10000", "sentSegmented": ["const", "n", "10000"], "sentSegmentedWithoutStops": ["n", "10000"], "sentSegmentedWithoutStopsStemmed": ["n", "10000"]}, {"number": 42246, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "type Element int64", "sentSegmented": ["type", "element", "int64"], "sentSegmentedWithoutStops": ["element", "int64"], "sentSegmentedWithoutStopsStemmed": ["element", "int64"]}, {"number": 42247, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "var x = make([]Element, N)", "sentSegmented": ["var", "x", "make", "element", "n"], "sentSegmentedWithoutStops": ["x", "make", "element", "n"], "sentSegmentedWithoutStopsStemmed": ["x", "make", "element", "n"]}, {"number": 42248, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "var yForCopy = make([]Element, N)", "sentSegmented": ["var", "yforcopy", "make", "element", "n"], "sentSegmentedWithoutStops": ["yforcopy", "make", "element", "n"], "sentSegmentedWithoutStopsStemmed": ["yforcopi", "make", "element", "n"]}, {"number": 42249, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "var yForMake []Element", "sentSegmented": ["var", "yformake", "element"], "sentSegmentedWithoutStops": ["yformake", "element"], "sentSegmentedWithoutStopsStemmed": ["yformak", "element"]}, {"number": 42250, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "var yForMakeCopy []Element", "sentSegmented": ["var", "yformakecopy", "element"], "sentSegmentedWithoutStops": ["yformakecopy", "element"], "sentSegmentedWithoutStopsStemmed": ["yformakecopi", "element"]}, {"number": 42251, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "var yForAppend []Element", "sentSegmented": ["var", "yforappend", "element"], "sentSegmentedWithoutStops": ["yforappend", "element"], "sentSegmentedWithoutStopsStemmed": ["yforappend", "element"]}, {"number": 42252, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func Benchmark_PureCopy(b *testing.B) {", "sentSegmented": ["func", "benchmark_purecopy", "b", "testing.b"], "sentSegmentedWithoutStops": ["benchmark_purecopy", "testing.b"], "sentSegmentedWithoutStopsStemmed": ["benchmark_purecopi", "testing.b"]}, {"number": 42253, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\tfor i := 0; i < b.N; i++ {", "sentSegmented": ["for", "i", "0", "i", "b.n", "i++"], "sentSegmentedWithoutStops": ["0", "b.n", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "b.n", "i++"]}, {"number": 42254, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\tcopy(yForCopy, x)", "sentSegmented": ["copy", "yforcopy", "x"], "sentSegmentedWithoutStops": ["yforcopy", "x"], "sentSegmentedWithoutStopsStemmed": ["yforcopi", "x"]}, {"number": 42255, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42256, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42257, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func Benchmark_PureMake(b *testing.B) {", "sentSegmented": ["func", "benchmark_puremake", "b", "testing.b"], "sentSegmentedWithoutStops": ["benchmark_puremake", "testing.b"], "sentSegmentedWithoutStopsStemmed": ["benchmark_puremak", "testing.b"]}, {"number": 42258, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\tfor i := 0; i < b.N; i++ {", "sentSegmented": ["for", "i", "0", "i", "b.n", "i++"], "sentSegmentedWithoutStops": ["0", "b.n", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "b.n", "i++"]}, {"number": 42259, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\tyForMake = make([]Element, N)", "sentSegmented": ["yformake", "make", "element", "n"], "sentSegmentedWithoutStops": ["yformake", "make", "element", "n"], "sentSegmentedWithoutStopsStemmed": ["yformak", "make", "element", "n"]}, {"number": 42260, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42261, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42262, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func Benchmark_MakeAndCopy(b *testing.B) {", "sentSegmented": ["func", "benchmark_makeandcopy", "b", "testing.b"], "sentSegmentedWithoutStops": ["benchmark_makeandcopy", "testing.b"], "sentSegmentedWithoutStopsStemmed": ["benchmark_makeandcopi", "testing.b"]}, {"number": 42263, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\tfor i := 0; i < b.N; i++ {", "sentSegmented": ["for", "i", "0", "i", "b.n", "i++"], "sentSegmentedWithoutStops": ["0", "b.n", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "b.n", "i++"]}, {"number": 42264, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\tyForMakeCopy = make([]Element, N)", "sentSegmented": ["yformakecopy", "make", "element", "n"], "sentSegmentedWithoutStops": ["yformakecopy", "make", "element", "n"], "sentSegmentedWithoutStopsStemmed": ["yformakecopi", "make", "element", "n"]}, {"number": 42265, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\tcopy(yForMakeCopy, x)", "sentSegmented": ["copy", "yformakecopy", "x"], "sentSegmentedWithoutStops": ["yformakecopy", "x"], "sentSegmentedWithoutStopsStemmed": ["yformakecopi", "x"]}, {"number": 42266, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42267, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42268, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func Benchmark_Append(b *testing.B) {", "sentSegmented": ["func", "benchmark_append", "b", "testing.b"], "sentSegmentedWithoutStops": ["benchmark_append", "testing.b"], "sentSegmentedWithoutStopsStemmed": ["benchmark_append", "testing.b"]}, {"number": 42269, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\tfor i := 0; i < b.N; i++ {", "sentSegmented": ["for", "i", "0", "i", "b.n", "i++"], "sentSegmentedWithoutStops": ["0", "b.n", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "b.n", "i++"]}, {"number": 42270, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\tyForAppend = append([]Element(nil), x...)", "sentSegmented": ["yforappend", "append", "element", "nil", "x"], "sentSegmentedWithoutStops": ["yforappend", "append", "element", "nil", "x"], "sentSegmentedWithoutStopsStemmed": ["yforappend", "append", "element", "nil", "x"]}, {"number": 42271, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42272, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42273, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What did you expect to see?", "sentSegmented": ["what", "did", "you", "expect", "to", "see"], "sentSegmentedWithoutStops": ["expect", "see"], "sentSegmentedWithoutStopsStemmed": ["expect", "see"]}, {"number": 42274, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The append call should spend more time than the pure make call and spend almost same time as the make+copy calls.", "sentSegmented": ["the", "append", "call", "should", "spend", "more", "time", "than", "the", "pure", "make", "call", "and", "spend", "almost", "same", "time", "as", "the", "make+copy", "calls"], "sentSegmentedWithoutStops": ["append", "call", "spend", "time", "pure", "make", "call", "spend", "almost", "time", "make+copy", "calls"], "sentSegmentedWithoutStopsStemmed": ["append", "call", "spend", "time", "pure", "make", "call", "spend", "almost", "time", "make+copi", "call"]}, {"number": 42275, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, these are only true if N is small (<= 1000).", "sentSegmented": ["however", "these", "are", "only", "true", "if", "n", "is", "small", "1000"], "sentSegmentedWithoutStops": ["however", "true", "n", "small", "1000"], "sentSegmentedWithoutStopsStemmed": ["howev", "true", "n", "small", "1000"]}, {"number": 42276, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What did you see instead?", "sentSegmented": ["what", "did", "you", "see", "instead"], "sentSegmentedWithoutStops": ["see", "instead"], "sentSegmentedWithoutStopsStemmed": ["see", "instead"]}, {"number": 42277, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When N == 10", "sentSegmented": ["when", "n", "10"], "sentSegmentedWithoutStops": ["n", "10"], "sentSegmentedWithoutStopsStemmed": ["n", "10"]}, {"number": 42278, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "goos: linux", "sentSegmented": ["goos", "linux"], "sentSegmentedWithoutStops": ["goos", "linux"], "sentSegmentedWithoutStopsStemmed": ["goo", "linux"]}, {"number": 42279, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "goarch: amd64", "sentSegmented": ["goarch", "amd64"], "sentSegmentedWithoutStops": ["goarch", "amd64"], "sentSegmentedWithoutStopsStemmed": ["goarch", "amd64"]}, {"number": 42280, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_PureCopy-4      \t50000000\t        30.7 ns/op", "sentSegmented": ["benchmark_purecopy-4", "50000000", "30.7", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_purecopy-4", "50000000", "30.7", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_purecopy-4", "50000000", "30.7", "ns/op"]}, {"number": 42281, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_PureMake-4      \t 5000000\t       387 ns/op", "sentSegmented": ["benchmark_puremake-4", "5000000", "387", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_puremake-4", "5000000", "387", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_puremake-4", "5000000", "387", "ns/op"]}, {"number": 42282, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_MakeAndCopy-4   \t 3000000\t       446 ns/op", "sentSegmented": ["benchmark_makeandcopy-4", "3000000", "446", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_makeandcopy-4", "3000000", "446", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_makeandcopy-4", "3000000", "446", "ns/op"]}, {"number": 42283, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_Append-4        \t 3000000\t       489 ns/op", "sentSegmented": ["benchmark_append-4", "3000000", "489", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_append-4", "3000000", "489", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_append-4", "3000000", "489", "ns/op"]}, {"number": 42284, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When N == 1000", "sentSegmented": ["when", "n", "1000"], "sentSegmentedWithoutStops": ["n", "1000"], "sentSegmentedWithoutStopsStemmed": ["n", "1000"]}, {"number": 42285, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "goos: linux", "sentSegmented": ["goos", "linux"], "sentSegmentedWithoutStops": ["goos", "linux"], "sentSegmentedWithoutStopsStemmed": ["goo", "linux"]}, {"number": 42286, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "goarch: amd64", "sentSegmented": ["goarch", "amd64"], "sentSegmentedWithoutStops": ["goarch", "amd64"], "sentSegmentedWithoutStopsStemmed": ["goarch", "amd64"]}, {"number": 42287, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_PureCopy-4      \t 5000000\t       259 ns/op", "sentSegmented": ["benchmark_purecopy-4", "5000000", "259", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_purecopy-4", "5000000", "259", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_purecopy-4", "5000000", "259", "ns/op"]}, {"number": 42288, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_PureMake-4      \t  500000\t      2892 ns/op", "sentSegmented": ["benchmark_puremake-4", "500000", "2892", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_puremake-4", "500000", "2892", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_puremake-4", "500000", "2892", "ns/op"]}, {"number": 42289, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_MakeAndCopy-4   \t  500000\t      3582 ns/op", "sentSegmented": ["benchmark_makeandcopy-4", "500000", "3582", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_makeandcopy-4", "500000", "3582", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_makeandcopy-4", "500000", "3582", "ns/op"]}, {"number": 42290, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_Append-4        \t  500000\t      3287 ns/op", "sentSegmented": ["benchmark_append-4", "500000", "3287", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_append-4", "500000", "3287", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_append-4", "500000", "3287", "ns/op"]}, {"number": 42291, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When N == 10000", "sentSegmented": ["when", "n", "10000"], "sentSegmentedWithoutStops": ["n", "10000"], "sentSegmentedWithoutStopsStemmed": ["n", "10000"]}, {"number": 42292, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "goos: linux", "sentSegmented": ["goos", "linux"], "sentSegmentedWithoutStops": ["goos", "linux"], "sentSegmentedWithoutStopsStemmed": ["goo", "linux"]}, {"number": 42293, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "goarch: amd64", "sentSegmented": ["goarch", "amd64"], "sentSegmentedWithoutStops": ["goarch", "amd64"], "sentSegmentedWithoutStopsStemmed": ["goarch", "amd64"]}, {"number": 42294, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_PureCopy-4      \t  500000\t      3537 ns/op", "sentSegmented": ["benchmark_purecopy-4", "500000", "3537", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_purecopy-4", "500000", "3537", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_purecopy-4", "500000", "3537", "ns/op"]}, {"number": 42295, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_PureMake-4      \t  100000\t     21456 ns/op", "sentSegmented": ["benchmark_puremake-4", "100000", "21456", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_puremake-4", "100000", "21456", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_puremake-4", "100000", "21456", "ns/op"]}, {"number": 42296, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_MakeAndCopy-4   \t   50000\t     29679 ns/op", "sentSegmented": ["benchmark_makeandcopy-4", "50000", "29679", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_makeandcopy-4", "50000", "29679", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_makeandcopy-4", "50000", "29679", "ns/op"]}, {"number": 42297, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark_Append-4        \t  100000\t     17697 ns/op", "sentSegmented": ["benchmark_append-4", "100000", "17697", "ns/op"], "sentSegmentedWithoutStops": ["benchmark_append-4", "100000", "17697", "ns/op"], "sentSegmentedWithoutStopsStemmed": ["benchmark_append-4", "100000", "17697", "ns/op"]}]}