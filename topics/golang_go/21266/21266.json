{"repository": {"owner": {"login": "golang"}, "name": "go", "forkCount": 12118, "stargazerCount": 83399, "createdAt": "2014-08-19T04:33:40Z", "updatedAt": "2021-03-17T02:27:51Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "programming-language"}}}, {"node": {"topic": {"name": "language"}}}, {"node": {"topic": {"name": "go"}}}, {"node": {"topic": {"name": "golang"}}}]}, "languages": {"edges": [{"node": {"name": "Shell"}}, {"node": {"name": "Go"}}, {"node": {"name": "C"}}, {"node": {"name": "C++"}}, {"node": {"name": "HTML"}}, {"node": {"name": "JavaScript"}}, {"node": {"name": "Assembly"}}, {"node": {"name": "Makefile"}}, {"node": {"name": "Awk"}}, {"node": {"name": "Perl"}}, {"node": {"name": "Python"}}, {"node": {"name": "Batchfile"}}, {"node": {"name": "Fortran"}}]}, "primaryLanguage": {"name": "Go"}}, "id": "MDU6SXNzdWUyNDcyMTc4Mzk=", "number": 21266, "author": {"login": "faiface"}, "title": "cmd/compile: detect and optimize slice-extending idiom append(a, make([]T, n)...)", "body": "Hi!\r\n\r\nIn [Slice tricks](https://github.com/golang/go/wiki/SliceTricks) we read that in order to extend a slice by `j` new elements, we should do this:\r\n\r\n```go\r\na = append(a, make([]T, j)...)\r\n```\r\n\r\nAs far as I know, this is the only one-liner way to do it anyway. However, this code most likely does more than required, because this is usually faster:\r\n\r\n```go\r\nfor i := 0; i < j; i++ {\r\n    a = append(a, 0)\r\n}\r\n```\r\n\r\nIt's obvious that in the former code, allocating the `make([]T, j)` slice is not required. As this is an often and useful pattern, I suggest this construct should be specially optimized by the compiler, so that no extra allocations are required.\r\n\r\nThanks,\r\n\r\nMichal \u0160trba", "bodyHTML": "<p>Hi!</p>\n<p>In <a href=\"https://github.com/golang/go/wiki/SliceTricks\">Slice tricks</a> we read that in order to extend a slice by <code>j</code> new elements, we should do this:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">append</span>(<span class=\"pl-s1\">a</span>, <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">T</span>, <span class=\"pl-s1\">j</span>)<span class=\"pl-c1\">...</span>)</pre></div>\n<p>As far as I know, this is the only one-liner way to do it anyway. However, this code most likely does more than required, because this is usually faster:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">j</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n    <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">append</span>(<span class=\"pl-s1\">a</span>, <span class=\"pl-c1\">0</span>)\n}</pre></div>\n<p>It's obvious that in the former code, allocating the <code>make([]T, j)</code> slice is not required. As this is an often and useful pattern, I suggest this construct should be specially optimized by the compiler, so that no extra allocations are required.</p>\n<p>Thanks,</p>\n<p>Michal \u0160trba</p>", "bodyText": "Hi!\nIn Slice tricks we read that in order to extend a slice by j new elements, we should do this:\na = append(a, make([]T, j)...)\nAs far as I know, this is the only one-liner way to do it anyway. However, this code most likely does more than required, because this is usually faster:\nfor i := 0; i < j; i++ {\n    a = append(a, 0)\n}\nIt's obvious that in the former code, allocating the make([]T, j) slice is not required. As this is an often and useful pattern, I suggest this construct should be specially optimized by the compiler, so that no extra allocations are required.\nThanks,\nMichal \u0160trba", "assignees": {"edges": [{"node": {"login": "martisch"}}]}, "createdAt": "2017-08-01T22:13:49Z", "closed": true, "closedAt": "2018-05-06T04:29:56Z", "lastEditedAt": null, "publishedAt": "2017-08-01T22:13:49Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxOTUxMzE4Nw==", "author": {"login": "randall77"}, "body": "Seems reasonable if we can detect it easily.\r\n", "bodyText": "Seems reasonable if we can detect it easily.", "bodyHTML": "<p>Seems reasonable if we can detect it easily.</p>", "createdAt": "2017-08-01T22:17:51Z", "publishedAt": "2017-08-01T22:17:51Z", "lastEditedAt": null, "updatedAt": "2017-08-01T22:17:51Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42192, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Seems reasonable if we can detect it easily.", "sentSegmented": ["seems", "reasonable", "if", "we", "can", "detect", "it", "easily"], "sentSegmentedWithoutStops": ["seems", "reasonable", "detect", "easily"], "sentSegmentedWithoutStopsStemmed": ["seem", "reason", "detect", "easili"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxOTUxNDgyOA==", "author": {"login": "faiface"}, "body": "Detection can be very easy, just look for anything that matches `append(a, make([]T, n)...)` for any `a` and any `n` and that's it.", "bodyText": "Detection can be very easy, just look for anything that matches append(a, make([]T, n)...) for any a and any n and that's it.", "bodyHTML": "<p>Detection can be very easy, just look for anything that matches <code>append(a, make([]T, n)...)</code> for any <code>a</code> and any <code>n</code> and that's it.</p>", "createdAt": "2017-08-01T22:26:44Z", "publishedAt": "2017-08-01T22:26:44Z", "lastEditedAt": null, "updatedAt": "2017-08-01T22:26:44Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42193, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Detection can be very easy, just look for anything that matches append(a, make([]T, n)...) for any a and any n and that's it.", "sentSegmented": ["detection", "can", "be", "very", "easy", "just", "look", "for", "anything", "that", "matches", "append", "a", "make", "t", "n", "for", "any", "a", "and", "any", "n", "and", "that", "'s", "it"], "sentSegmentedWithoutStops": ["detection", "easy", "look", "anything", "matches", "append", "make", "n", "n", "'s"], "sentSegmentedWithoutStopsStemmed": ["detect", "easi", "look", "anyth", "match", "append", "make", "n", "n", "'s"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxOTUyNzQxNQ==", "author": {"login": "dsnet"}, "body": "@faiface, if you believe it's a very easy fix, perhaps you'd like to make the change and contribute a fix?", "bodyText": "@faiface, if you believe it's a very easy fix, perhaps you'd like to make the change and contribute a fix?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/faiface/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/faiface\">@faiface</a>, if you believe it's a very easy fix, perhaps you'd like to make the change and contribute a fix?</p>", "createdAt": "2017-08-01T23:43:59Z", "publishedAt": "2017-08-01T23:43:59Z", "lastEditedAt": "2017-08-01T23:44:31Z", "updatedAt": "2017-08-01T23:44:31Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42194, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@faiface, if you believe it's a very easy fix, perhaps you'd like to make the change and contribute a fix?", "sentSegmented": ["faiface", "if", "you", "believe", "it", "'s", "a", "very", "easy", "fix", "perhaps", "you", "'d", "like", "to", "make", "the", "change", "and", "contribute", "a", "fix"], "sentSegmentedWithoutStops": ["faiface", "believe", "'s", "easy", "fix", "perhaps", "'d", "like", "make", "change", "contribute", "fix"], "sentSegmentedWithoutStopsStemmed": ["faifac", "believ", "'s", "easi", "fix", "perhap", "'d", "like", "make", "chang", "contribut", "fix"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxOTU2ODc3Mg==", "author": {"login": "josharian"}, "body": "cc @martisch ", "bodyText": "cc @martisch", "bodyHTML": "<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/martisch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martisch\">@martisch</a></p>", "createdAt": "2017-08-02T05:08:14Z", "publishedAt": "2017-08-02T05:08:14Z", "lastEditedAt": null, "updatedAt": "2017-08-02T05:08:14Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42195, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "cc @martisch", "sentSegmented": ["cc", "martisch"], "sentSegmentedWithoutStops": ["cc", "martisch"], "sentSegmentedWithoutStopsStemmed": ["cc", "martisch"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxOTY0ODIzMg==", "author": {"login": "martisch"}, "body": "I was already looking at some other growslice performance optimizations for go1.10 and have worked on that code in the past. While at it i would be happy to have a go at this if @faiface does not have preference to contribute a CL for it himself?\r\n\r\nIt might turn out not be as very easy as it first looks - we first need to investigate if the information that appends second argument is a make(...) is still directly present once the frontend/ssa backend gets to the part where it inserts the growslice runtime call. If that info has already been obstructed by ordering and evaluating arguments we might need to insert some detection code for it earlier. ", "bodyText": "I was already looking at some other growslice performance optimizations for go1.10 and have worked on that code in the past. While at it i would be happy to have a go at this if @faiface does not have preference to contribute a CL for it himself?\nIt might turn out not be as very easy as it first looks - we first need to investigate if the information that appends second argument is a make(...) is still directly present once the frontend/ssa backend gets to the part where it inserts the growslice runtime call. If that info has already been obstructed by ordering and evaluating arguments we might need to insert some detection code for it earlier.", "bodyHTML": "<p>I was already looking at some other growslice performance optimizations for go1.10 and have worked on that code in the past. While at it i would be happy to have a go at this if <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/faiface/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/faiface\">@faiface</a> does not have preference to contribute a CL for it himself?</p>\n<p>It might turn out not be as very easy as it first looks - we first need to investigate if the information that appends second argument is a make(...) is still directly present once the frontend/ssa backend gets to the part where it inserts the growslice runtime call. If that info has already been obstructed by ordering and evaluating arguments we might need to insert some detection code for it earlier.</p>", "createdAt": "2017-08-02T11:42:38Z", "publishedAt": "2017-08-02T11:42:38Z", "lastEditedAt": "2017-08-02T11:42:59Z", "updatedAt": "2017-08-02T11:42:59Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-08-02T12:01:59Z"}}]}, "bodyParsed": [{"number": 42196, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I was already looking at some other growslice performance optimizations for go1.10 and have worked on that code in the past.", "sentSegmented": ["i", "was", "already", "looking", "at", "some", "other", "growslice", "performance", "optimizations", "for", "go1.10", "and", "have", "worked", "on", "that", "code", "in", "the", "past"], "sentSegmentedWithoutStops": ["already", "looking", "growslice", "performance", "optimizations", "go1.10", "worked", "code", "past"], "sentSegmentedWithoutStopsStemmed": ["alreadi", "look", "growslic", "perform", "optim", "go1.10", "work", "code", "past"]}, {"number": 42197, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "While at it i would be happy to have a go at this if @faiface does not have preference to contribute a CL for it himself?", "sentSegmented": ["while", "at", "it", "i", "would", "be", "happy", "to", "have", "a", "go", "at", "this", "if", "faiface", "does", "not", "have", "preference", "to", "contribute", "a", "cl", "for", "it", "himself"], "sentSegmentedWithoutStops": ["would", "happy", "go", "faiface", "preference", "contribute", "cl"], "sentSegmentedWithoutStopsStemmed": ["would", "happi", "go", "faifac", "prefer", "contribut", "cl"]}, {"number": 42198, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It might turn out not be as very easy as it first looks - we first need to investigate if the information that appends second argument is a make(...) is still directly present once the frontend/ssa backend gets to the part where it inserts the growslice runtime call.", "sentSegmented": ["it", "might", "turn", "out", "not", "be", "as", "very", "easy", "as", "it", "first", "looks", "we", "first", "need", "to", "investigate", "if", "the", "information", "that", "appends", "second", "argument", "is", "a", "make", "is", "still", "directly", "present", "once", "the", "frontend/ssa", "backend", "gets", "to", "the", "part", "where", "it", "inserts", "the", "growslice", "runtime", "call"], "sentSegmentedWithoutStops": ["might", "turn", "easy", "first", "looks", "first", "need", "investigate", "information", "appends", "second", "argument", "make", "still", "directly", "present", "frontend/ssa", "backend", "gets", "part", "inserts", "growslice", "runtime", "call"], "sentSegmentedWithoutStopsStemmed": ["might", "turn", "easi", "first", "look", "first", "need", "investig", "inform", "append", "second", "argument", "make", "still", "directli", "present", "frontend/ssa", "backend", "get", "part", "insert", "growslic", "runtim", "call"]}, {"number": 42199, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If that info has already been obstructed by ordering and evaluating arguments we might need to insert some detection code for it earlier.", "sentSegmented": ["if", "that", "info", "has", "already", "been", "obstructed", "by", "ordering", "and", "evaluating", "arguments", "we", "might", "need", "to", "insert", "some", "detection", "code", "for", "it", "earlier"], "sentSegmentedWithoutStops": ["info", "already", "obstructed", "ordering", "evaluating", "arguments", "might", "need", "insert", "detection", "code", "earlier"], "sentSegmentedWithoutStopsStemmed": ["info", "alreadi", "obstruct", "order", "evalu", "argument", "might", "need", "insert", "detect", "code", "earlier"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxOTY0OTc1NA==", "author": {"login": "faiface"}, "body": "@dsnet @martisch I'll be happy to leave this to someone more experienced in the Go compiler. If needed, I can try and implement it, but it will probably take unreasonably long, since I've never worked with the Go compiler source before and there might be unexpected troubles as mentioned by @martisch. So, if anyone wants to have a go, my preference is to leave it to them ;)", "bodyText": "@dsnet @martisch I'll be happy to leave this to someone more experienced in the Go compiler. If needed, I can try and implement it, but it will probably take unreasonably long, since I've never worked with the Go compiler source before and there might be unexpected troubles as mentioned by @martisch. So, if anyone wants to have a go, my preference is to leave it to them ;)", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dsnet/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dsnet\">@dsnet</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/martisch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martisch\">@martisch</a> I'll be happy to leave this to someone more experienced in the Go compiler. If needed, I can try and implement it, but it will probably take unreasonably long, since I've never worked with the Go compiler source before and there might be unexpected troubles as mentioned by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/martisch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martisch\">@martisch</a>. So, if anyone wants to have a go, my preference is to leave it to them ;)</p>", "createdAt": "2017-08-02T11:50:21Z", "publishedAt": "2017-08-02T11:50:21Z", "lastEditedAt": null, "updatedAt": "2017-08-02T11:50:21Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42200, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@dsnet @martisch I'll be happy to leave this to someone more experienced in the Go compiler.", "sentSegmented": ["dsnet", "martisch", "i", "'ll", "be", "happy", "to", "leave", "this", "to", "someone", "more", "experienced", "in", "the", "go", "compiler"], "sentSegmentedWithoutStops": ["dsnet", "martisch", "'ll", "happy", "leave", "someone", "experienced", "go", "compiler"], "sentSegmentedWithoutStopsStemmed": ["dsnet", "martisch", "'ll", "happi", "leav", "someon", "experienc", "go", "compil"]}, {"number": 42201, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If needed, I can try and implement it, but it will probably take unreasonably long, since I've never worked with the Go compiler source before and there might be unexpected troubles as mentioned by @martisch.", "sentSegmented": ["if", "needed", "i", "can", "try", "and", "implement", "it", "but", "it", "will", "probably", "take", "unreasonably", "long", "since", "i", "'ve", "never", "worked", "with", "the", "go", "compiler", "source", "before", "and", "there", "might", "be", "unexpected", "troubles", "as", "mentioned", "by", "martisch"], "sentSegmentedWithoutStops": ["needed", "try", "implement", "probably", "take", "unreasonably", "long", "since", "'ve", "never", "worked", "go", "compiler", "source", "might", "unexpected", "troubles", "mentioned", "martisch"], "sentSegmentedWithoutStopsStemmed": ["need", "tri", "implement", "probabl", "take", "unreason", "long", "sinc", "'ve", "never", "work", "go", "compil", "sourc", "might", "unexpect", "troubl", "mention", "martisch"]}, {"number": 42202, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So, if anyone wants to have a go, my preference is to leave it to them ;)", "sentSegmented": ["so", "if", "anyone", "wants", "to", "have", "a", "go", "my", "preference", "is", "to", "leave", "it", "to", "them"], "sentSegmentedWithoutStops": ["anyone", "wants", "go", "preference", "leave"], "sentSegmentedWithoutStopsStemmed": ["anyon", "want", "go", "prefer", "leav"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2NTMwODMwNw==", "author": {"login": "josharian"}, "body": "@martisch the easiest place to implement this is probably walk. I\u2019ll volunteer to review. And please let me know if this falls off your list and I\u2019ll pick it up.", "bodyText": "@martisch the easiest place to implement this is probably walk. I\u2019ll volunteer to review. And please let me know if this falls off your list and I\u2019ll pick it up.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/martisch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martisch\">@martisch</a> the easiest place to implement this is probably walk. I\u2019ll volunteer to review. And please let me know if this falls off your list and I\u2019ll pick it up.</p>", "createdAt": "2018-02-13T15:50:30Z", "publishedAt": "2018-02-13T15:50:30Z", "lastEditedAt": null, "updatedAt": "2018-02-13T15:50:30Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42203, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@martisch the easiest place to implement this is probably walk.", "sentSegmented": ["martisch", "the", "easiest", "place", "to", "implement", "this", "is", "probably", "walk"], "sentSegmentedWithoutStops": ["martisch", "easiest", "place", "implement", "probably", "walk"], "sentSegmentedWithoutStopsStemmed": ["martisch", "easiest", "place", "implement", "probabl", "walk"]}, {"number": 42204, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I\u2019ll volunteer to review.", "sentSegmented": ["i", "ll", "volunteer", "to", "review"], "sentSegmentedWithoutStops": ["volunteer", "review"], "sentSegmentedWithoutStopsStemmed": ["volunt", "review"]}, {"number": 42205, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And please let me know if this falls off your list and I\u2019ll pick it up.", "sentSegmented": ["and", "please", "let", "me", "know", "if", "this", "falls", "off", "your", "list", "and", "i", "ll", "pick", "it", "up"], "sentSegmentedWithoutStops": ["please", "let", "know", "falls", "list", "pick"], "sentSegmentedWithoutStopsStemmed": ["pleas", "let", "know", "fall", "list", "pick"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2Njc0OTcwNg==", "author": {"login": "bradfitz"}, "body": "More discussion and example benchmarks in #23906", "bodyText": "More discussion and example benchmarks in #23906", "bodyHTML": "<p>More discussion and example benchmarks in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"298072779\" data-permission-text=\"Title is private\" data-url=\"https://github.com/golang/go/issues/23906\" data-hovercard-type=\"issue\" data-hovercard-url=\"/golang/go/issues/23906/hovercard\" href=\"https://github.com/golang/go/issues/23906\">#23906</a></p>", "createdAt": "2018-02-19T16:54:45Z", "publishedAt": "2018-02-19T16:54:45Z", "lastEditedAt": null, "updatedAt": "2018-02-19T16:54:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42206, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "More discussion and example benchmarks in #23906", "sentSegmented": ["more", "discussion", "and", "example", "benchmarks", "in", "23906"], "sentSegmentedWithoutStops": ["discussion", "example", "benchmarks", "23906"], "sentSegmentedWithoutStopsStemmed": ["discuss", "exampl", "benchmark", "23906"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM4Mjc3NzI2MA==", "author": {"login": "josharian"}, "body": "@martisch do you still plan to do this this cycle?", "bodyText": "@martisch do you still plan to do this this cycle?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/martisch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martisch\">@martisch</a> do you still plan to do this this cycle?</p>", "createdAt": "2018-04-19T15:23:46Z", "publishedAt": "2018-04-19T15:23:46Z", "lastEditedAt": null, "updatedAt": "2018-04-19T15:23:46Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42207, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@martisch do you still plan to do this this cycle?", "sentSegmented": ["martisch", "do", "you", "still", "plan", "to", "do", "this", "this", "cycle"], "sentSegmentedWithoutStops": ["martisch", "still", "plan", "cycle"], "sentSegmentedWithoutStopsStemmed": ["martisch", "still", "plan", "cycl"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM4MjgzNTQ3Mg==", "author": {"login": "martisch"}, "body": "yes, was just today looking at teaching the order pass not to mess with node structure when its needed to detect the pattern in walk later for this and another cl. Should have a cl sometime next week for you to review.", "bodyText": "yes, was just today looking at teaching the order pass not to mess with node structure when its needed to detect the pattern in walk later for this and another cl. Should have a cl sometime next week for you to review.", "bodyHTML": "<p>yes, was just today looking at teaching the order pass not to mess with node structure when its needed to detect the pattern in walk later for this and another cl. Should have a cl sometime next week for you to review.</p>", "createdAt": "2018-04-19T18:27:25Z", "publishedAt": "2018-04-19T18:27:25Z", "lastEditedAt": null, "updatedAt": "2018-04-19T18:27:25Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42208, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "yes, was just today looking at teaching the order pass not to mess with node structure when its needed to detect the pattern in walk later for this and another cl.", "sentSegmented": ["yes", "was", "just", "today", "looking", "at", "teaching", "the", "order", "pass", "not", "to", "mess", "with", "node", "structure", "when", "its", "needed", "to", "detect", "the", "pattern", "in", "walk", "later", "for", "this", "and", "another", "cl"], "sentSegmentedWithoutStops": ["yes", "today", "looking", "teaching", "order", "pass", "mess", "node", "structure", "needed", "detect", "pattern", "walk", "later", "another", "cl"], "sentSegmentedWithoutStopsStemmed": ["ye", "today", "look", "teach", "order", "pass", "mess", "node", "structur", "need", "detect", "pattern", "walk", "later", "anoth", "cl"]}, {"number": 42209, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Should have a cl sometime next week for you to review.", "sentSegmented": ["should", "have", "a", "cl", "sometime", "next", "week", "for", "you", "to", "review"], "sentSegmentedWithoutStops": ["cl", "sometime", "next", "week", "review"], "sentSegmentedWithoutStopsStemmed": ["cl", "sometim", "next", "week", "review"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM4NDcwNjg2OA==", "author": {"login": "gopherbot"}, "body": "Change https://golang.org/cl/109517 mentions this issue: `cmd/compile: optimize append(x, make(T[], y)...) slice extending idiom`", "bodyText": "Change https://golang.org/cl/109517 mentions this issue: cmd/compile: optimize append(x, make(T[], y)...) slice extending idiom", "bodyHTML": "<p>Change <a rel=\"nofollow\" href=\"https://golang.org/cl/109517\">https://golang.org/cl/109517</a> mentions this issue: <code>cmd/compile: optimize append(x, make(T[], y)...) slice extending idiom</code></p>", "createdAt": "2018-04-26T16:33:59Z", "publishedAt": "2018-04-26T16:33:59Z", "lastEditedAt": null, "updatedAt": "2018-04-26T16:33:59Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42210, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Change https://golang.org/cl/109517 mentions this issue: cmd/compile: optimize append(x, make(T[], y)...) slice extending idiom", "sentSegmented": ["change", "https", "//golang.org/cl/109517", "mentions", "this", "issue", "cmd/compile", "optimize", "append", "x", "make", "t", "y", "slice", "extending", "idiom"], "sentSegmentedWithoutStops": ["change", "https", "//golang.org/cl/109517", "mentions", "issue", "cmd/compile", "optimize", "append", "x", "make", "slice", "extending", "idiom"], "sentSegmentedWithoutStopsStemmed": ["chang", "http", "//golang.org/cl/109517", "mention", "issu", "cmd/compil", "optim", "append", "x", "make", "slice", "extend", "idiom"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM4NDg2Mzk2Mg==", "author": {"login": "gopherbot"}, "body": "Change https://golang.org/cl/109816 mentions this issue: `cmd/compile: use slice extension idiom to grow slices`", "bodyText": "Change https://golang.org/cl/109816 mentions this issue: cmd/compile: use slice extension idiom to grow slices", "bodyHTML": "<p>Change <a rel=\"nofollow\" href=\"https://golang.org/cl/109816\">https://golang.org/cl/109816</a> mentions this issue: <code>cmd/compile: use slice extension idiom to grow slices</code></p>", "createdAt": "2018-04-27T04:56:09Z", "publishedAt": "2018-04-27T04:56:09Z", "lastEditedAt": null, "updatedAt": "2018-04-27T04:56:09Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42211, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Change https://golang.org/cl/109816 mentions this issue: cmd/compile: use slice extension idiom to grow slices", "sentSegmented": ["change", "https", "//golang.org/cl/109816", "mentions", "this", "issue", "cmd/compile", "use", "slice", "extension", "idiom", "to", "grow", "slices"], "sentSegmentedWithoutStops": ["change", "https", "//golang.org/cl/109816", "mentions", "issue", "cmd/compile", "use", "slice", "extension", "idiom", "grow", "slices"], "sentSegmentedWithoutStopsStemmed": ["chang", "http", "//golang.org/cl/109816", "mention", "issu", "cmd/compil", "use", "slice", "extens", "idiom", "grow", "slice"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM4Nzk5MzE2Mw==", "author": {"login": "gopherbot"}, "body": "Change https://golang.org/cl/112595 mentions this issue: `cmd/compile: ensure init of memclr happens after growslice in extendslice`", "bodyText": "Change https://golang.org/cl/112595 mentions this issue: cmd/compile: ensure init of memclr happens after growslice in extendslice", "bodyHTML": "<p>Change <a rel=\"nofollow\" href=\"https://golang.org/cl/112595\">https://golang.org/cl/112595</a> mentions this issue: <code>cmd/compile: ensure init of memclr happens after growslice in extendslice</code></p>", "createdAt": "2018-05-10T08:46:04Z", "publishedAt": "2018-05-10T08:46:04Z", "lastEditedAt": null, "updatedAt": "2018-05-10T08:46:04Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 42212, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Change https://golang.org/cl/112595 mentions this issue: cmd/compile: ensure init of memclr happens after growslice in extendslice", "sentSegmented": ["change", "https", "//golang.org/cl/112595", "mentions", "this", "issue", "cmd/compile", "ensure", "init", "of", "memclr", "happens", "after", "growslice", "in", "extendslice"], "sentSegmentedWithoutStops": ["change", "https", "//golang.org/cl/112595", "mentions", "issue", "cmd/compile", "ensure", "init", "memclr", "happens", "growslice", "extendslice"], "sentSegmentedWithoutStopsStemmed": ["chang", "http", "//golang.org/cl/112595", "mention", "issu", "cmd/compil", "ensur", "init", "memclr", "happen", "growslic", "extendslic"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ1NTE3MTc1OQ==", "author": {"login": "valyala"}, "body": "FYI, the slice extension idiom doesn't work in go tip for non-int `n` in `append(a, make([]T, n)...)`:\r\n\r\n```go\r\nfunc BenchmarkExtendInt(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := int(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n\r\nfunc BenchmarkExtendUint64(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := uint64(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n```\r\n\r\nBenchmark results:\r\n```\r\nBenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\r\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\r\n```\r\n\r\nAs you can see, if `n` has a type other than `int`, go doesn't remove the allocation.", "bodyText": "FYI, the slice extension idiom doesn't work in go tip for non-int n in append(a, make([]T, n)...):\nfunc BenchmarkExtendInt(b *testing.B) {\n        var buf []byte\n        b.ReportAllocs()\n        n := int(12345)\n        for i := 0; i < b.N; i++ {\n                buf = append(buf[:0], make([]byte, n)...)\n        }\n}\n\nfunc BenchmarkExtendUint64(b *testing.B) {\n        var buf []byte\n        b.ReportAllocs()\n        n := uint64(12345)\n        for i := 0; i < b.N; i++ {\n                buf = append(buf[:0], make([]byte, n)...)\n        }\n}\nBenchmark results:\nBenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\n\nAs you can see, if n has a type other than int, go doesn't remove the allocation.", "bodyHTML": "<p>FYI, the slice extension idiom doesn't work in go tip for non-int <code>n</code> in <code>append(a, make([]T, n)...)</code>:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">func</span> <span class=\"pl-en\">BenchmarkExtendInt</span>(<span class=\"pl-s1\">b</span> <span class=\"pl-c1\">*</span>testing.<span class=\"pl-smi\">B</span>) {\n        <span class=\"pl-k\">var</span> <span class=\"pl-s1\">buf</span> []<span class=\"pl-smi\">byte</span>\n        <span class=\"pl-s1\">b</span>.<span class=\"pl-en\">ReportAllocs</span>()\n        <span class=\"pl-s1\">n</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-en\">int</span>(<span class=\"pl-c1\">12345</span>)\n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">b</span>.<span class=\"pl-c1\">N</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n                <span class=\"pl-s1\">buf</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">append</span>(<span class=\"pl-s1\">buf</span>[:<span class=\"pl-c1\">0</span>], <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">byte</span>, <span class=\"pl-s1\">n</span>)<span class=\"pl-c1\">...</span>)\n        }\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">BenchmarkExtendUint64</span>(<span class=\"pl-s1\">b</span> <span class=\"pl-c1\">*</span>testing.<span class=\"pl-smi\">B</span>) {\n        <span class=\"pl-k\">var</span> <span class=\"pl-s1\">buf</span> []<span class=\"pl-smi\">byte</span>\n        <span class=\"pl-s1\">b</span>.<span class=\"pl-en\">ReportAllocs</span>()\n        <span class=\"pl-s1\">n</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-en\">uint64</span>(<span class=\"pl-c1\">12345</span>)\n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">b</span>.<span class=\"pl-c1\">N</span>; <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span> {\n                <span class=\"pl-s1\">buf</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">append</span>(<span class=\"pl-s1\">buf</span>[:<span class=\"pl-c1\">0</span>], <span class=\"pl-en\">make</span>([]<span class=\"pl-smi\">byte</span>, <span class=\"pl-s1\">n</span>)<span class=\"pl-c1\">...</span>)\n        }\n}</pre></div>\n<p>Benchmark results:</p>\n<pre><code>BenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\n</code></pre>\n<p>As you can see, if <code>n</code> has a type other than <code>int</code>, go doesn't remove the allocation.</p>", "createdAt": "2019-01-17T13:28:24Z", "publishedAt": "2019-01-17T13:28:24Z", "lastEditedAt": null, "updatedAt": "2019-01-17T13:28:24Z", "reactions": {"edges": [{"node": {"content": "LAUGH", "createdAt": "2019-01-17T17:12:10Z"}}]}, "bodyParsed": [{"number": 42213, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "FYI, the slice extension idiom doesn't work in go tip for non-int n in append(a, make([]T, n)...):", "sentSegmented": ["fyi", "the", "slice", "extension", "idiom", "does", "n't", "work", "in", "go", "tip", "for", "non-int", "n", "in", "append", "a", "make", "t", "n"], "sentSegmentedWithoutStops": ["fyi", "slice", "extension", "idiom", "n't", "work", "go", "tip", "non-int", "n", "append", "make", "n"], "sentSegmentedWithoutStopsStemmed": ["fyi", "slice", "extens", "idiom", "n't", "work", "go", "tip", "non-int", "n", "append", "make", "n"]}, {"number": 42214, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func BenchmarkExtendInt(b *testing.B) {", "sentSegmented": ["func", "benchmarkextendint", "b", "testing.b"], "sentSegmentedWithoutStops": ["benchmarkextendint", "testing.b"], "sentSegmentedWithoutStopsStemmed": ["benchmarkextendint", "testing.b"]}, {"number": 42215, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        var buf []byte", "sentSegmented": ["var", "buf", "byte"], "sentSegmentedWithoutStops": ["buf"], "sentSegmentedWithoutStopsStemmed": ["buf"]}, {"number": 42216, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        b.ReportAllocs()", "sentSegmented": ["b.reportallocs"], "sentSegmentedWithoutStops": ["b.reportallocs"], "sentSegmentedWithoutStopsStemmed": ["b.reportalloc"]}, {"number": 42217, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        n := int(12345)", "sentSegmented": ["n", "int", "12345"], "sentSegmentedWithoutStops": ["n", "12345"], "sentSegmentedWithoutStopsStemmed": ["n", "12345"]}, {"number": 42218, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        for i := 0; i < b.N; i++ {", "sentSegmented": ["for", "i", "0", "i", "b.n", "i++"], "sentSegmentedWithoutStops": ["0", "b.n", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "b.n", "i++"]}, {"number": 42219, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                buf = append(buf[:0], make([]byte, n)...)", "sentSegmented": ["buf", "append", "buf", ":0", "make", "byte", "n"], "sentSegmentedWithoutStops": ["buf", "append", "buf", ":0", "make", "n"], "sentSegmentedWithoutStopsStemmed": ["buf", "append", "buf", ":0", "make", "n"]}, {"number": 42220, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42221, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42222, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func BenchmarkExtendUint64(b *testing.B) {", "sentSegmented": ["func", "benchmarkextenduint64", "b", "testing.b"], "sentSegmentedWithoutStops": ["benchmarkextenduint64", "testing.b"], "sentSegmentedWithoutStopsStemmed": ["benchmarkextenduint64", "testing.b"]}, {"number": 42223, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        var buf []byte", "sentSegmented": ["var", "buf", "byte"], "sentSegmentedWithoutStops": ["buf"], "sentSegmentedWithoutStopsStemmed": ["buf"]}, {"number": 42224, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        b.ReportAllocs()", "sentSegmented": ["b.reportallocs"], "sentSegmentedWithoutStops": ["b.reportallocs"], "sentSegmentedWithoutStopsStemmed": ["b.reportalloc"]}, {"number": 42225, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        n := uint64(12345)", "sentSegmented": ["n", "uint64", "12345"], "sentSegmentedWithoutStops": ["n", "uint64", "12345"], "sentSegmentedWithoutStopsStemmed": ["n", "uint64", "12345"]}, {"number": 42226, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        for i := 0; i < b.N; i++ {", "sentSegmented": ["for", "i", "0", "i", "b.n", "i++"], "sentSegmentedWithoutStops": ["0", "b.n", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "b.n", "i++"]}, {"number": 42227, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                buf = append(buf[:0], make([]byte, n)...)", "sentSegmented": ["buf", "append", "buf", ":0", "make", "byte", "n"], "sentSegmentedWithoutStops": ["buf", "append", "buf", ":0", "make", "n"], "sentSegmentedWithoutStopsStemmed": ["buf", "append", "buf", ":0", "make", "n"]}, {"number": 42228, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42229, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42230, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Benchmark results:", "sentSegmented": ["benchmark", "results"], "sentSegmentedWithoutStops": ["benchmark", "results"], "sentSegmentedWithoutStopsStemmed": ["benchmark", "result"]}, {"number": 42231, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "BenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op", "sentSegmented": ["benchmarkextendint-4", "10000000", "145", "ns/op", "0", "b/op", "0", "allocs/op"], "sentSegmentedWithoutStops": ["benchmarkextendint-4", "10000000", "145", "ns/op", "0", "b/op", "0", "allocs/op"], "sentSegmentedWithoutStopsStemmed": ["benchmarkextendint-4", "10000000", "145", "ns/op", "0", "b/op", "0", "allocs/op"]}, {"number": 42232, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "BenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op", "sentSegmented": ["benchmarkextenduint64-4", "1000000", "1576", "ns/op", "13568", "b/op", "1", "allocs/op"], "sentSegmentedWithoutStops": ["benchmarkextenduint64-4", "1000000", "1576", "ns/op", "13568", "b/op", "1", "allocs/op"], "sentSegmentedWithoutStopsStemmed": ["benchmarkextenduint64-4", "1000000", "1576", "ns/op", "13568", "b/op", "1", "allocs/op"]}, {"number": 42233, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As you can see, if n has a type other than int, go doesn't remove the allocation.", "sentSegmented": ["as", "you", "can", "see", "if", "n", "has", "a", "type", "other", "than", "int", "go", "does", "n't", "remove", "the", "allocation"], "sentSegmentedWithoutStops": ["see", "n", "type", "int", "go", "n't", "remove", "allocation"], "sentSegmentedWithoutStopsStemmed": ["see", "n", "type", "int", "go", "n't", "remov", "alloc"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOGyFerw==", "hasNextPage": false}, "totalCount": 14}, "labels": {"edges": [{"node": {"createdAt": "2016-06-24T18:31:15Z", "name": "FrozenDueToAge"}}, {"node": {"createdAt": "2014-11-24T11:45:12Z", "name": "Performance"}}]}, "milestone": {"title": "Go1.11", "dueOn": "2018-08-24T00:00:00Z"}, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-08-02T05:20:52Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-02-13T11:07:59Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-02-19T22:00:23Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-03-29T17:38:33Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-11-28T13:21:01Z"}}]}, "state": "CLOSED", "titleSegmented": ["cmd/compile", "detect", "and", "optimize", "slice-extending", "idiom", "append", "a", "make", "t", "n"], "titleSegmentedWithoutStops": ["cmd/compile", "detect", "optimize", "slice-extending", "idiom", "append", "make", "n"], "titleSegmentedWithoutStopsStemmed": ["cmd/compil", "detect", "optim", "slice-extend", "idiom", "append", "make", "n"], "bodyParsed": [{"number": 42180, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi!", "sentSegmented": ["hi"], "sentSegmentedWithoutStops": ["hi"], "sentSegmentedWithoutStopsStemmed": ["hi"]}, {"number": 42181, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Slice tricks we read that in order to extend a slice by j new elements, we should do this:", "sentSegmented": ["in", "slice", "tricks", "we", "read", "that", "in", "order", "to", "extend", "a", "slice", "by", "j", "new", "elements", "we", "should", "do", "this"], "sentSegmentedWithoutStops": ["slice", "tricks", "read", "order", "extend", "slice", "j", "new", "elements"], "sentSegmentedWithoutStopsStemmed": ["slice", "trick", "read", "order", "extend", "slice", "j", "new", "element"]}, {"number": 42182, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "a = append(a, make([]T, j)...)", "sentSegmented": ["a", "append", "a", "make", "t", "j"], "sentSegmentedWithoutStops": ["append", "make", "j"], "sentSegmentedWithoutStopsStemmed": ["append", "make", "j"]}, {"number": 42183, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As far as I know, this is the only one-liner way to do it anyway.", "sentSegmented": ["as", "far", "as", "i", "know", "this", "is", "the", "only", "one-liner", "way", "to", "do", "it", "anyway"], "sentSegmentedWithoutStops": ["far", "know", "one-liner", "way", "anyway"], "sentSegmentedWithoutStopsStemmed": ["far", "know", "one-lin", "way", "anyway"]}, {"number": 42184, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, this code most likely does more than required, because this is usually faster:", "sentSegmented": ["however", "this", "code", "most", "likely", "does", "more", "than", "required", "because", "this", "is", "usually", "faster"], "sentSegmentedWithoutStops": ["however", "code", "likely", "required", "usually", "faster"], "sentSegmentedWithoutStopsStemmed": ["howev", "code", "like", "requir", "usual", "faster"]}, {"number": 42185, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for i := 0; i < j; i++ {", "sentSegmented": ["for", "i", "0", "i", "j", "i++"], "sentSegmentedWithoutStops": ["0", "j", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "j", "i++"]}, {"number": 42186, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    a = append(a, 0)", "sentSegmented": ["a", "append", "a", "0"], "sentSegmentedWithoutStops": ["append", "0"], "sentSegmentedWithoutStopsStemmed": ["append", "0"]}, {"number": 42187, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 42188, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's obvious that in the former code, allocating the make([]T, j) slice is not required.", "sentSegmented": ["it", "'s", "obvious", "that", "in", "the", "former", "code", "allocating", "the", "make", "t", "j", "slice", "is", "not", "required"], "sentSegmentedWithoutStops": ["'s", "obvious", "former", "code", "allocating", "make", "j", "slice", "required"], "sentSegmentedWithoutStopsStemmed": ["'s", "obviou", "former", "code", "alloc", "make", "j", "slice", "requir"]}, {"number": 42189, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As this is an often and useful pattern, I suggest this construct should be specially optimized by the compiler, so that no extra allocations are required.", "sentSegmented": ["as", "this", "is", "an", "often", "and", "useful", "pattern", "i", "suggest", "this", "construct", "should", "be", "specially", "optimized", "by", "the", "compiler", "so", "that", "no", "extra", "allocations", "are", "required"], "sentSegmentedWithoutStops": ["often", "useful", "pattern", "suggest", "construct", "specially", "optimized", "compiler", "extra", "allocations", "required"], "sentSegmentedWithoutStopsStemmed": ["often", "use", "pattern", "suggest", "construct", "special", "optim", "compil", "extra", "alloc", "requir"]}, {"number": 42190, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks,", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 42191, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Michal \u0160trba", "sentSegmented": ["michal", "\u0161trba"], "sentSegmentedWithoutStops": ["michal", "\u0161trba"], "sentSegmentedWithoutStopsStemmed": ["michal", "\u0161trba"]}]}