{"repository": {"owner": {"login": "flutter"}, "name": "flutter", "forkCount": 16451, "stargazerCount": 116064, "createdAt": "2015-03-06T22:54:58Z", "updatedAt": "2021-03-10T08:27:29Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "mobile"}}}, {"node": {"topic": {"name": "android"}}}, {"node": {"topic": {"name": "ios"}}}, {"node": {"topic": {"name": "material-design"}}}, {"node": {"topic": {"name": "dart"}}}, {"node": {"topic": {"name": "skia"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "web-framework"}}}, {"node": {"topic": {"name": "windows"}}}, {"node": {"topic": {"name": "macos"}}}, {"node": {"topic": {"name": "fuchsia"}}}, {"node": {"topic": {"name": "dart-platform"}}}, {"node": {"topic": {"name": "linux-desktop"}}}, {"node": {"topic": {"name": "app-framework"}}}, {"node": {"topic": {"name": "desktop"}}}]}, "languages": {"edges": [{"node": {"name": "Dart"}}, {"node": {"name": "Shell"}}, {"node": {"name": "HTML"}}, {"node": {"name": "Objective-C"}}, {"node": {"name": "PowerShell"}}, {"node": {"name": "Batchfile"}}, {"node": {"name": "Java"}}, {"node": {"name": "Swift"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "Ruby"}}, {"node": {"name": "CSS"}}, {"node": {"name": "JavaScript"}}, {"node": {"name": "Kotlin"}}, {"node": {"name": "C++"}}, {"node": {"name": "C"}}, {"node": {"name": "CMake"}}]}, "primaryLanguage": {"name": "Dart"}}, "id": "MDU6SXNzdWU0Mjc4OTM5Mzc=", "number": 30332, "author": {"login": "softkot"}, "title": "EventChannel does not work inside an isolate", "body": "For some reason EventChannel does not listen for an events emitted from platform side if it runs within FlutterNativeView.runFromBundle isolate started as a part of android background service.\r\n\r\n## Keypoints\r\n\r\n### Plugin-like class implements simple  MethodChannel and EventChannel.\r\nCalling MethodChannel.invokeMethod emits counter on EventChannel.\r\n\r\n```\r\nclass Plugin(registry: PluginRegistry, val label: String) {\r\n    @Volatile\r\n    private var sink: EventChannel.EventSink? = null\r\n    private val counter = AtomicInteger()\r\n\r\n    init {\r\n        registry.registrarFor(\"isolate\").apply {\r\n            MethodChannel(messenger(), \"methods\").setMethodCallHandler { methodCall, result ->\r\n                sink?.success(hashMapOf(\r\n                        \"label\" to label,\r\n                        \"counter\" to counter.incrementAndGet()\r\n                ))\r\n                Log.d(\"PLUGIN\", \"Call ${methodCall.method} from $label\")\r\n                result.success(null)\r\n            }\r\n            EventChannel(messenger(), \"events\").setStreamHandler(object : EventChannel.StreamHandler {\r\n                override fun onListen(p0: Any?, s: EventChannel.EventSink?) {\r\n                    sink?.endOfStream()\r\n                    sink = s\r\n                }\r\n\r\n                override fun onCancel(p0: Any?) {\r\n                    sink?.endOfStream()\r\n                    sink = null\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n### Dart handler use MethodChannel and EventChannel to periodicaly call method and waiting any data on event channel to arrive.\r\n\r\n```\r\nvoid platformChannels() {\r\n  print(\"Start platform channels test\");\r\n  MethodChannel pluginMethods = const MethodChannel('methods');\r\n  EventChannel pluginEvents = const EventChannel('events');\r\n  pluginEvents.receiveBroadcastStream().listen((data) {\r\n    print(data);\r\n  });\r\n  Timer.periodic(Duration(seconds: 1), (timer) {\r\n    pluginMethods.invokeMethod(\"tick\", {});\r\n  });\r\n}\r\n\r\n```\r\n### Main activity startup code register the Plugin-like class and start android service\r\n```\r\nPlugin(this,\"Activity\")\r\nstartService(Intent(this,PluginService::class.java))\r\n```\r\n\r\n### Service startup code create new dart isolate with backgound FlutterNativeView with dart entrypoint set to platformChannels on main.dart\r\n```\r\noverride fun onCreate() {\r\n        super.onCreate()\r\n        FlutterMain.startInitialization(this)\r\n        FlutterMain.ensureInitializationComplete(this, null)\r\n        bgView = FlutterNativeView(this, true)\r\n        Plugin(bgView.pluginRegistry, \"Service\")\r\n        bgView.runFromBundle(FlutterRunArguments().apply {\r\n            bundlePath = FlutterMain.findAppBundlePath(this@PluginService)\r\n            entrypoint = \"platformChannels\"\r\n        })\r\n    }\r\n```\r\nFinnaly when app is runnung only Activity bound dart code works as expected. Service bound dart code never prints data on listen closure.\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\ngit clone https://github.com/softkot/flutter_isolate\r\ncd flutter_isolate\r\n```\r\nConnect android device or an emulator and run \r\n```\r\nflutter run\r\n```\r\n\r\n## Application  logs\r\n### produced\r\n```\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 2}\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 3}\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 4}\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 5}\r\n```\r\n\r\n### expected\r\n```\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 2}\r\nI/flutter (25664): {label: Service, counter: 2}\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 3}\r\nI/flutter (25664): {label: Service, counter: 3}\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 4}\r\nI/flutter (25664): {label: Service, counter: 4}\r\nD/PLUGIN  (25664): Call tick from Service\r\nD/PLUGIN  (25664): Call tick from Activity\r\nI/flutter (25664): {label: Activity, counter: 5}\r\nI/flutter (25664): {label: Service, counter: 5}\r\n```\r\n\r\n<!--\r\n     Run `flutter analyze` and attach any output of that command below.\r\n     If there are any analysis errors, try resolving them before filing this issue.\r\n-->\r\n\r\n```\r\n```\r\n\r\n## Flutter doctor\r\n\r\n```\r\nDoctor summary (to see all details, run flutter doctor -v):\r\n[\u2713] Flutter (Channel stable, v1.2.1, on Linux, locale ru_RU.UTF-8)\r\n[\u2713] Android toolchain - develop for Android devices (Android SDK version 28.0.3)\r\n[\u2713] Android Studio (version 3.3)\r\n[\u2713] IntelliJ IDEA Ultimate Edition (version 2019.1)\r\n[\u2713] Connected device (1 available)\r\n\r\n\u2022 No issues found!\r\n```\r\n", "bodyHTML": "<p>For some reason EventChannel does not listen for an events emitted from platform side if it runs within FlutterNativeView.runFromBundle isolate started as a part of android background service.</p>\n<h2>Keypoints</h2>\n<h3>Plugin-like class implements simple  MethodChannel and EventChannel.</h3>\n<p>Calling MethodChannel.invokeMethod emits counter on EventChannel.</p>\n<pre><code>class Plugin(registry: PluginRegistry, val label: String) {\n    @Volatile\n    private var sink: EventChannel.EventSink? = null\n    private val counter = AtomicInteger()\n\n    init {\n        registry.registrarFor(\"isolate\").apply {\n            MethodChannel(messenger(), \"methods\").setMethodCallHandler { methodCall, result -&gt;\n                sink?.success(hashMapOf(\n                        \"label\" to label,\n                        \"counter\" to counter.incrementAndGet()\n                ))\n                Log.d(\"PLUGIN\", \"Call ${methodCall.method} from $label\")\n                result.success(null)\n            }\n            EventChannel(messenger(), \"events\").setStreamHandler(object : EventChannel.StreamHandler {\n                override fun onListen(p0: Any?, s: EventChannel.EventSink?) {\n                    sink?.endOfStream()\n                    sink = s\n                }\n\n                override fun onCancel(p0: Any?) {\n                    sink?.endOfStream()\n                    sink = null\n                }\n            })\n        }\n\n    }\n}\n</code></pre>\n<h3>Dart handler use MethodChannel and EventChannel to periodicaly call method and waiting any data on event channel to arrive.</h3>\n<pre><code>void platformChannels() {\n  print(\"Start platform channels test\");\n  MethodChannel pluginMethods = const MethodChannel('methods');\n  EventChannel pluginEvents = const EventChannel('events');\n  pluginEvents.receiveBroadcastStream().listen((data) {\n    print(data);\n  });\n  Timer.periodic(Duration(seconds: 1), (timer) {\n    pluginMethods.invokeMethod(\"tick\", {});\n  });\n}\n\n</code></pre>\n<h3>Main activity startup code register the Plugin-like class and start android service</h3>\n<pre><code>Plugin(this,\"Activity\")\nstartService(Intent(this,PluginService::class.java))\n</code></pre>\n<h3>Service startup code create new dart isolate with backgound FlutterNativeView with dart entrypoint set to platformChannels on main.dart</h3>\n<pre><code>override fun onCreate() {\n        super.onCreate()\n        FlutterMain.startInitialization(this)\n        FlutterMain.ensureInitializationComplete(this, null)\n        bgView = FlutterNativeView(this, true)\n        Plugin(bgView.pluginRegistry, \"Service\")\n        bgView.runFromBundle(FlutterRunArguments().apply {\n            bundlePath = FlutterMain.findAppBundlePath(this@PluginService)\n            entrypoint = \"platformChannels\"\n        })\n    }\n</code></pre>\n<p>Finnaly when app is runnung only Activity bound dart code works as expected. Service bound dart code never prints data on listen closure.</p>\n<h2>Steps to Reproduce</h2>\n<pre><code>git clone https://github.com/softkot/flutter_isolate\ncd flutter_isolate\n</code></pre>\n<p>Connect android device or an emulator and run</p>\n<pre><code>flutter run\n</code></pre>\n<h2>Application  logs</h2>\n<h3>produced</h3>\n<pre><code>D/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 2}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 3}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 4}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 5}\n</code></pre>\n<h3>expected</h3>\n<pre><code>D/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 2}\nI/flutter (25664): {label: Service, counter: 2}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 3}\nI/flutter (25664): {label: Service, counter: 3}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 4}\nI/flutter (25664): {label: Service, counter: 4}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 5}\nI/flutter (25664): {label: Service, counter: 5}\n</code></pre>\n\n<pre><code></code></pre>\n<h2>Flutter doctor</h2>\n<pre><code>Doctor summary (to see all details, run flutter doctor -v):\n[\u2713] Flutter (Channel stable, v1.2.1, on Linux, locale ru_RU.UTF-8)\n[\u2713] Android toolchain - develop for Android devices (Android SDK version 28.0.3)\n[\u2713] Android Studio (version 3.3)\n[\u2713] IntelliJ IDEA Ultimate Edition (version 2019.1)\n[\u2713] Connected device (1 available)\n\n\u2022 No issues found!\n</code></pre>", "bodyText": "For some reason EventChannel does not listen for an events emitted from platform side if it runs within FlutterNativeView.runFromBundle isolate started as a part of android background service.\nKeypoints\nPlugin-like class implements simple  MethodChannel and EventChannel.\nCalling MethodChannel.invokeMethod emits counter on EventChannel.\nclass Plugin(registry: PluginRegistry, val label: String) {\n    @Volatile\n    private var sink: EventChannel.EventSink? = null\n    private val counter = AtomicInteger()\n\n    init {\n        registry.registrarFor(\"isolate\").apply {\n            MethodChannel(messenger(), \"methods\").setMethodCallHandler { methodCall, result ->\n                sink?.success(hashMapOf(\n                        \"label\" to label,\n                        \"counter\" to counter.incrementAndGet()\n                ))\n                Log.d(\"PLUGIN\", \"Call ${methodCall.method} from $label\")\n                result.success(null)\n            }\n            EventChannel(messenger(), \"events\").setStreamHandler(object : EventChannel.StreamHandler {\n                override fun onListen(p0: Any?, s: EventChannel.EventSink?) {\n                    sink?.endOfStream()\n                    sink = s\n                }\n\n                override fun onCancel(p0: Any?) {\n                    sink?.endOfStream()\n                    sink = null\n                }\n            })\n        }\n\n    }\n}\n\nDart handler use MethodChannel and EventChannel to periodicaly call method and waiting any data on event channel to arrive.\nvoid platformChannels() {\n  print(\"Start platform channels test\");\n  MethodChannel pluginMethods = const MethodChannel('methods');\n  EventChannel pluginEvents = const EventChannel('events');\n  pluginEvents.receiveBroadcastStream().listen((data) {\n    print(data);\n  });\n  Timer.periodic(Duration(seconds: 1), (timer) {\n    pluginMethods.invokeMethod(\"tick\", {});\n  });\n}\n\n\nMain activity startup code register the Plugin-like class and start android service\nPlugin(this,\"Activity\")\nstartService(Intent(this,PluginService::class.java))\n\nService startup code create new dart isolate with backgound FlutterNativeView with dart entrypoint set to platformChannels on main.dart\noverride fun onCreate() {\n        super.onCreate()\n        FlutterMain.startInitialization(this)\n        FlutterMain.ensureInitializationComplete(this, null)\n        bgView = FlutterNativeView(this, true)\n        Plugin(bgView.pluginRegistry, \"Service\")\n        bgView.runFromBundle(FlutterRunArguments().apply {\n            bundlePath = FlutterMain.findAppBundlePath(this@PluginService)\n            entrypoint = \"platformChannels\"\n        })\n    }\n\nFinnaly when app is runnung only Activity bound dart code works as expected. Service bound dart code never prints data on listen closure.\nSteps to Reproduce\ngit clone https://github.com/softkot/flutter_isolate\ncd flutter_isolate\n\nConnect android device or an emulator and run\nflutter run\n\nApplication  logs\nproduced\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 2}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 3}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 4}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 5}\n\nexpected\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 2}\nI/flutter (25664): {label: Service, counter: 2}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 3}\nI/flutter (25664): {label: Service, counter: 3}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 4}\nI/flutter (25664): {label: Service, counter: 4}\nD/PLUGIN  (25664): Call tick from Service\nD/PLUGIN  (25664): Call tick from Activity\nI/flutter (25664): {label: Activity, counter: 5}\nI/flutter (25664): {label: Service, counter: 5}\n\n\n\nFlutter doctor\nDoctor summary (to see all details, run flutter doctor -v):\n[\u2713] Flutter (Channel stable, v1.2.1, on Linux, locale ru_RU.UTF-8)\n[\u2713] Android toolchain - develop for Android devices (Android SDK version 28.0.3)\n[\u2713] Android Studio (version 3.3)\n[\u2713] IntelliJ IDEA Ultimate Edition (version 2019.1)\n[\u2713] Connected device (1 available)\n\n\u2022 No issues found!", "assignees": {"edges": []}, "createdAt": "2019-04-01T20:20:03Z", "closed": true, "closedAt": "2020-01-14T13:19:01Z", "lastEditedAt": null, "publishedAt": "2019-04-01T20:20:03Z", "comments": {"totalCount": 10, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ3ODc3NzI3Ng==", "author": {"login": "dnfield"}, "body": "Duplicate of https://github.com/flutter/flutter/issues/13937", "bodyText": "Duplicate of #13937", "bodyHTML": "<p><span aria-label=\"This issue is a duplicate of #13937\" class=\"issue-keyword tooltipped tooltipped-se\">Duplicate of</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"286371581\" data-permission-text=\"Title is private\" data-url=\"https://github.com/flutter/flutter/issues/13937\" data-hovercard-type=\"issue\" data-hovercard-url=\"/flutter/flutter/issues/13937/hovercard\" href=\"https://github.com/flutter/flutter/issues/13937\">#13937</a></p>", "createdAt": "2019-04-01T22:59:45Z", "publishedAt": "2019-04-01T22:59:45Z", "lastEditedAt": null, "updatedAt": "2019-04-01T22:59:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7140, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Duplicate of #13937", "sentSegmented": ["duplicate", "of", "13937"], "sentSegmentedWithoutStops": ["duplicate", "13937"], "sentSegmentedWithoutStopsStemmed": ["duplic", "13937"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ3ODk1MjYzMw==", "author": {"login": "softkot"}, "body": "> Duplicate of #13937\r\n@dnfield here is some confusion you are mention  #13937 that states about method channels, my issue is related to EventChannels. MethodChannel works fine inside an isolate but EventChannel does not.", "bodyText": "Duplicate of #13937\n@dnfield here is some confusion you are mention  #13937 that states about method channels, my issue is related to EventChannels. MethodChannel works fine inside an isolate but EventChannel does not.", "bodyHTML": "<blockquote>\n<p>Duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"286371581\" data-permission-text=\"Title is private\" data-url=\"https://github.com/flutter/flutter/issues/13937\" data-hovercard-type=\"issue\" data-hovercard-url=\"/flutter/flutter/issues/13937/hovercard\" href=\"https://github.com/flutter/flutter/issues/13937\">#13937</a><br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dnfield/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dnfield\">@dnfield</a> here is some confusion you are mention  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"286371581\" data-permission-text=\"Title is private\" data-url=\"https://github.com/flutter/flutter/issues/13937\" data-hovercard-type=\"issue\" data-hovercard-url=\"/flutter/flutter/issues/13937/hovercard\" href=\"https://github.com/flutter/flutter/issues/13937\">#13937</a> that states about method channels, my issue is related to EventChannels. MethodChannel works fine inside an isolate but EventChannel does not.</p>\n</blockquote>", "createdAt": "2019-04-02T11:20:15Z", "publishedAt": "2019-04-02T11:20:15Z", "lastEditedAt": null, "updatedAt": "2019-04-02T11:20:15Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7141, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Duplicate of #13937", "sentSegmented": ["duplicate", "of", "13937"], "sentSegmentedWithoutStops": ["duplicate", "13937"], "sentSegmentedWithoutStopsStemmed": ["duplic", "13937"]}, {"number": 7142, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "@dnfield here is some confusion you are mention  #13937 that states about method channels, my issue is related to EventChannels.", "sentSegmented": ["dnfield", "here", "is", "some", "confusion", "you", "are", "mention", "13937", "that", "states", "about", "method", "channels", "my", "issue", "is", "related", "to", "eventchannels"], "sentSegmentedWithoutStops": ["dnfield", "confusion", "mention", "13937", "states", "method", "channels", "issue", "related", "eventchannels"], "sentSegmentedWithoutStopsStemmed": ["dnfield", "confus", "mention", "13937", "state", "method", "channel", "issu", "relat", "eventchannel"]}, {"number": 7143, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "MethodChannel works fine inside an isolate but EventChannel does not.", "sentSegmented": ["methodchannel", "works", "fine", "inside", "an", "isolate", "but", "eventchannel", "does", "not"], "sentSegmentedWithoutStops": ["methodchannel", "works", "fine", "inside", "isolate", "eventchannel"], "sentSegmentedWithoutStopsStemmed": ["methodchannel", "work", "fine", "insid", "isol", "eventchannel"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ4MDYwMjI3MQ==", "author": {"login": "1AlexFix1"}, "body": "\r\nThis is really a very necessary thing, because it will be much easier to work with the background on the platform, because at the moment it is impossible to make a webrtc on a dart in the background, without it we can make a webrtc on a dart in the background", "bodyText": "This is really a very necessary thing, because it will be much easier to work with the background on the platform, because at the moment it is impossible to make a webrtc on a dart in the background, without it we can make a webrtc on a dart in the background", "bodyHTML": "<p>This is really a very necessary thing, because it will be much easier to work with the background on the platform, because at the moment it is impossible to make a webrtc on a dart in the background, without it we can make a webrtc on a dart in the background</p>", "createdAt": "2019-04-07T15:49:05Z", "publishedAt": "2019-04-07T15:49:05Z", "lastEditedAt": null, "updatedAt": "2019-04-07T15:49:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7144, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is really a very necessary thing, because it will be much easier to work with the background on the platform, because at the moment it is impossible to make a webrtc on a dart in the background, without it we can make a webrtc on a dart in the background", "sentSegmented": ["this", "is", "really", "a", "very", "necessary", "thing", "because", "it", "will", "be", "much", "easier", "to", "work", "with", "the", "background", "on", "the", "platform", "because", "at", "the", "moment", "it", "is", "impossible", "to", "make", "a", "webrtc", "on", "a", "dart", "in", "the", "background", "without", "it", "we", "can", "make", "a", "webrtc", "on", "a", "dart", "in", "the", "background"], "sentSegmentedWithoutStops": ["really", "necessary", "thing", "much", "easier", "work", "background", "platform", "moment", "impossible", "make", "webrtc", "dart", "background", "without", "make", "webrtc", "dart", "background"], "sentSegmentedWithoutStopsStemmed": ["realli", "necessari", "thing", "much", "easier", "work", "background", "platform", "moment", "imposs", "make", "webrtc", "dart", "background", "without", "make", "webrtc", "dart", "background"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUxNzYxMDU3Mw==", "author": {"login": "dmccartney"}, "body": "The fix for me was adding the missing `WidgetsFlutterBinding.ensureInitialized()` to the background isolate init. Without it, all background native -> dart messages are quietly dropped. (The foreground isolate does this implicitly when you `runApp()`.)", "bodyText": "The fix for me was adding the missing WidgetsFlutterBinding.ensureInitialized() to the background isolate init. Without it, all background native -> dart messages are quietly dropped. (The foreground isolate does this implicitly when you runApp().)", "bodyHTML": "<p>The fix for me was adding the missing <code>WidgetsFlutterBinding.ensureInitialized()</code> to the background isolate init. Without it, all background native -&gt; dart messages are quietly dropped. (The foreground isolate does this implicitly when you <code>runApp()</code>.)</p>", "createdAt": "2019-08-02T08:29:05Z", "publishedAt": "2019-08-02T08:29:05Z", "lastEditedAt": null, "updatedAt": "2019-08-02T08:29:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7145, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The fix for me was adding the missing WidgetsFlutterBinding.ensureInitialized() to the background isolate init.", "sentSegmented": ["the", "fix", "for", "me", "was", "adding", "the", "missing", "widgetsflutterbinding.ensureinitialized", "to", "the", "background", "isolate", "init"], "sentSegmentedWithoutStops": ["fix", "adding", "missing", "widgetsflutterbinding.ensureinitialized", "background", "isolate", "init"], "sentSegmentedWithoutStopsStemmed": ["fix", "ad", "miss", "widgetsflutterbinding.ensureiniti", "background", "isol", "init"]}, {"number": 7146, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Without it, all background native -> dart messages are quietly dropped.", "sentSegmented": ["without", "it", "all", "background", "native", "dart", "messages", "are", "quietly", "dropped"], "sentSegmentedWithoutStops": ["without", "background", "native", "dart", "messages", "quietly", "dropped"], "sentSegmentedWithoutStopsStemmed": ["without", "background", "nativ", "dart", "messag", "quietli", "drop"]}, {"number": 7147, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(The foreground isolate does this implicitly when you runApp().)", "sentSegmented": ["the", "foreground", "isolate", "does", "this", "implicitly", "when", "you", "runapp"], "sentSegmentedWithoutStops": ["foreground", "isolate", "implicitly", "runapp"], "sentSegmentedWithoutStopsStemmed": ["foreground", "isol", "implicitli", "runapp"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUzNDk0OTYyOQ==", "author": {"login": "escamoteur"}, "body": "This should be fixed in the upcoming PR. you can monitor the PR if you want to follow it. If you still have problems please reopen this issue", "bodyText": "This should be fixed in the upcoming PR. you can monitor the PR if you want to follow it. If you still have problems please reopen this issue", "bodyHTML": "<p>This should be fixed in the upcoming PR. you can monitor the PR if you want to follow it. If you still have problems please reopen this issue</p>", "createdAt": "2019-09-25T10:02:42Z", "publishedAt": "2019-09-25T10:02:42Z", "lastEditedAt": null, "updatedAt": "2019-09-25T10:02:42Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7148, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This should be fixed in the upcoming PR.", "sentSegmented": ["this", "should", "be", "fixed", "in", "the", "upcoming", "pr"], "sentSegmentedWithoutStops": ["fixed", "upcoming", "pr"], "sentSegmentedWithoutStopsStemmed": ["fix", "upcom", "pr"]}, {"number": 7149, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "you can monitor the PR if you want to follow it.", "sentSegmented": ["you", "can", "monitor", "the", "pr", "if", "you", "want", "to", "follow", "it"], "sentSegmentedWithoutStops": ["monitor", "pr", "want", "follow"], "sentSegmentedWithoutStopsStemmed": ["monitor", "pr", "want", "follow"]}, {"number": 7150, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you still have problems please reopen this issue", "sentSegmented": ["if", "you", "still", "have", "problems", "please", "reopen", "this", "issue"], "sentSegmentedWithoutStops": ["still", "problems", "please", "reopen", "issue"], "sentSegmentedWithoutStopsStemmed": ["still", "problem", "pleas", "reopen", "issu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU3NDE0NTQ4Mw==", "author": {"login": "iapicca"}, "body": "Hi @softkot \r\nAre you still experiencing the issue with the latest stable version of Flutter?\r\nIf so, can you please provide your `flutter doctor -v` \r\nand a reproducible minimal code sample?\r\nThank you", "bodyText": "Hi @softkot\nAre you still experiencing the issue with the latest stable version of Flutter?\nIf so, can you please provide your flutter doctor -v\nand a reproducible minimal code sample?\nThank you", "bodyHTML": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/softkot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/softkot\">@softkot</a><br>\nAre you still experiencing the issue with the latest stable version of Flutter?<br>\nIf so, can you please provide your <code>flutter doctor -v</code><br>\nand a reproducible minimal code sample?<br>\nThank you</p>", "createdAt": "2020-01-14T12:12:06Z", "publishedAt": "2020-01-14T12:12:06Z", "lastEditedAt": null, "updatedAt": "2020-01-14T12:12:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7151, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi @softkot", "sentSegmented": ["hi", "softkot"], "sentSegmentedWithoutStops": ["hi", "softkot"], "sentSegmentedWithoutStopsStemmed": ["hi", "softkot"]}, {"number": 7152, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Are you still experiencing the issue with the latest stable version of Flutter?", "sentSegmented": ["are", "you", "still", "experiencing", "the", "issue", "with", "the", "latest", "stable", "version", "of", "flutter"], "sentSegmentedWithoutStops": ["still", "experiencing", "issue", "latest", "stable", "version", "flutter"], "sentSegmentedWithoutStopsStemmed": ["still", "experienc", "issu", "latest", "stabl", "version", "flutter"]}, {"number": 7153, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If so, can you please provide your flutter doctor -v", "sentSegmented": ["if", "so", "can", "you", "please", "provide", "your", "flutter", "doctor", "-v"], "sentSegmentedWithoutStops": ["please", "provide", "flutter", "doctor", "-v"], "sentSegmentedWithoutStopsStemmed": ["pleas", "provid", "flutter", "doctor", "-v"]}, {"number": 7154, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and a reproducible minimal code sample?", "sentSegmented": ["and", "a", "reproducible", "minimal", "code", "sample"], "sentSegmentedWithoutStops": ["reproducible", "minimal", "code", "sample"], "sentSegmentedWithoutStopsStemmed": ["reproduc", "minim", "code", "sampl"]}, {"number": 7155, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thank you", "sentSegmented": ["thank", "you"], "sentSegmentedWithoutStops": ["thank"], "sentSegmentedWithoutStopsStemmed": ["thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU3NDE2OTI4Mw==", "author": {"login": "softkot"}, "body": "Hi @iapicca. Now it works just expected, if include suggested fix with WidgetsFlutterBinding.ensureInitialized() thanks!\r\n", "bodyText": "Hi @iapicca. Now it works just expected, if include suggested fix with WidgetsFlutterBinding.ensureInitialized() thanks!", "bodyHTML": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/iapicca/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/iapicca\">@iapicca</a>. Now it works just expected, if include suggested fix with WidgetsFlutterBinding.ensureInitialized() thanks!</p>", "createdAt": "2020-01-14T13:19:01Z", "publishedAt": "2020-01-14T13:19:01Z", "lastEditedAt": null, "updatedAt": "2020-01-14T13:19:01Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7156, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi @iapicca.", "sentSegmented": ["hi", "iapicca"], "sentSegmentedWithoutStops": ["hi", "iapicca"], "sentSegmentedWithoutStopsStemmed": ["hi", "iapicca"]}, {"number": 7157, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Now it works just expected, if include suggested fix with WidgetsFlutterBinding.ensureInitialized() thanks!", "sentSegmented": ["now", "it", "works", "just", "expected", "if", "include", "suggested", "fix", "with", "widgetsflutterbinding.ensureinitialized", "thanks"], "sentSegmentedWithoutStops": ["works", "expected", "include", "suggested", "fix", "widgetsflutterbinding.ensureinitialized", "thanks"], "sentSegmentedWithoutStopsStemmed": ["work", "expect", "includ", "suggest", "fix", "widgetsflutterbinding.ensureiniti", "thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc4ODAxNjk2NQ==", "author": {"login": "tirth-stasis"}, "body": "I'm working on a Flutter plugin. Is it possible to use EventChannel in the background? Despite calling success on EventSink instance, on dart-side StreamBuilder is not able to receive the data. I'm not using an isolate in dart-side but I've created a Foreground Service in my plugin in kotlin side.", "bodyText": "I'm working on a Flutter plugin. Is it possible to use EventChannel in the background? Despite calling success on EventSink instance, on dart-side StreamBuilder is not able to receive the data. I'm not using an isolate in dart-side but I've created a Foreground Service in my plugin in kotlin side.", "bodyHTML": "<p>I'm working on a Flutter plugin. Is it possible to use EventChannel in the background? Despite calling success on EventSink instance, on dart-side StreamBuilder is not able to receive the data. I'm not using an isolate in dart-side but I've created a Foreground Service in my plugin in kotlin side.</p>", "createdAt": "2021-03-01T15:03:13Z", "publishedAt": "2021-03-01T15:03:13Z", "lastEditedAt": "2021-03-01T15:03:29Z", "updatedAt": "2021-03-01T15:03:30Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 7158, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm working on a Flutter plugin.", "sentSegmented": ["i", "'m", "working", "on", "a", "flutter", "plugin"], "sentSegmentedWithoutStops": ["'m", "working", "flutter", "plugin"], "sentSegmentedWithoutStopsStemmed": ["'m", "work", "flutter", "plugin"]}, {"number": 7159, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is it possible to use EventChannel in the background?", "sentSegmented": ["is", "it", "possible", "to", "use", "eventchannel", "in", "the", "background"], "sentSegmentedWithoutStops": ["possible", "use", "eventchannel", "background"], "sentSegmentedWithoutStopsStemmed": ["possibl", "use", "eventchannel", "background"]}, {"number": 7160, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Despite calling success on EventSink instance, on dart-side StreamBuilder is not able to receive the data.", "sentSegmented": ["despite", "calling", "success", "on", "eventsink", "instance", "on", "dart-side", "streambuilder", "is", "not", "able", "to", "receive", "the", "data"], "sentSegmentedWithoutStops": ["despite", "calling", "success", "eventsink", "instance", "dart-side", "streambuilder", "able", "receive", "data"], "sentSegmentedWithoutStopsStemmed": ["despit", "call", "success", "eventsink", "instanc", "dart-sid", "streambuild", "abl", "receiv", "data"]}, {"number": 7161, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm not using an isolate in dart-side but I've created a Foreground Service in my plugin in kotlin side.", "sentSegmented": ["i", "'m", "not", "using", "an", "isolate", "in", "dart-side", "but", "i", "'ve", "created", "a", "foreground", "service", "in", "my", "plugin", "in", "kotlin", "side"], "sentSegmentedWithoutStops": ["'m", "using", "isolate", "dart-side", "'ve", "created", "foreground", "service", "plugin", "kotlin", "side"], "sentSegmentedWithoutStopsStemmed": ["'m", "use", "isol", "dart-sid", "'ve", "creat", "foreground", "servic", "plugin", "kotlin", "side"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc4ODAxODk0Mg==", "author": {"login": "iapicca"}, "body": "@tirth-stasis \r\nif you need assistance with your code please follow the link `I want help writing my application` in the [new issue menu](https://github.com/flutter/flutter/issues/new/choose)", "bodyText": "@tirth-stasis\nif you need assistance with your code please follow the link I want help writing my application in the new issue menu", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/tirth-stasis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tirth-stasis\">@tirth-stasis</a><br>\nif you need assistance with your code please follow the link <code>I want help writing my application</code> in the <a href=\"https://github.com/flutter/flutter/issues/new/choose\">new issue menu</a></p>", "createdAt": "2021-03-01T15:05:48Z", "publishedAt": "2021-03-01T15:05:48Z", "lastEditedAt": null, "updatedAt": "2021-03-01T15:05:48Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2021-03-01T15:08:51Z"}}]}, "bodyParsed": [{"number": 7162, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@tirth-stasis", "sentSegmented": ["tirth-stasis"], "sentSegmentedWithoutStops": ["tirth-stasis"], "sentSegmentedWithoutStopsStemmed": ["tirth-stasi"]}, {"number": 7163, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "if you need assistance with your code please follow the link I want help writing my application in the new issue menu", "sentSegmented": ["if", "you", "need", "assistance", "with", "your", "code", "please", "follow", "the", "link", "i", "want", "help", "writing", "my", "application", "in", "the", "new", "issue", "menu"], "sentSegmentedWithoutStops": ["need", "assistance", "code", "please", "follow", "link", "want", "help", "writing", "application", "new", "issue", "menu"], "sentSegmentedWithoutStopsStemmed": ["need", "assist", "code", "pleas", "follow", "link", "want", "help", "write", "applic", "new", "issu", "menu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc4ODAyMTI4Mg==", "author": {"login": "tirth-stasis"}, "body": "Sure! :+1:", "bodyText": "Sure! \ud83d\udc4d", "bodyHTML": "<p>Sure! <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "createdAt": "2021-03-01T15:08:58Z", "publishedAt": "2021-03-01T15:08:58Z", "lastEditedAt": null, "updatedAt": "2021-03-01T15:08:58Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2021-03-01T15:12:25Z"}}]}, "bodyParsed": [{"number": 7164, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sure!", "sentSegmented": ["sure"], "sentSegmentedWithoutStops": ["sure"], "sentSegmentedWithoutStopsStemmed": ["sure"]}, {"number": 7165, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\ud83d\udc4d", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOLvhAIg==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2015-11-09T20:19:58Z", "name": "engine"}}, {"node": {"createdAt": "2015-11-09T20:16:52Z", "name": "framework"}}]}, "milestone": null, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-04-01T20:21:09Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-07T15:46:56Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-07T20:44:49Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-10T17:14:25Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-13T10:25:13Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-27T12:08:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-06-11T13:53:07Z"}}]}, "state": "CLOSED", "titleSegmented": ["eventchannel", "does", "not", "work", "inside", "an", "isolate"], "titleSegmentedWithoutStops": ["eventchannel", "work", "inside", "isolate"], "titleSegmentedWithoutStopsStemmed": ["eventchannel", "work", "insid", "isol"], "bodyParsed": [{"number": 7036, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For some reason EventChannel does not listen for an events emitted from platform side if it runs within FlutterNativeView.runFromBundle isolate started as a part of android background service.", "sentSegmented": ["for", "some", "reason", "eventchannel", "does", "not", "listen", "for", "an", "events", "emitted", "from", "platform", "side", "if", "it", "runs", "within", "flutternativeview.runfrombundle", "isolate", "started", "as", "a", "part", "of", "android", "background", "service"], "sentSegmentedWithoutStops": ["reason", "eventchannel", "listen", "events", "emitted", "platform", "side", "runs", "within", "flutternativeview.runfrombundle", "isolate", "started", "part", "android", "background", "service"], "sentSegmentedWithoutStopsStemmed": ["reason", "eventchannel", "listen", "event", "emit", "platform", "side", "run", "within", "flutternativeview.runfrombundl", "isol", "start", "part", "android", "background", "servic"]}, {"number": 7037, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Keypoints", "sentSegmented": ["keypoints"], "sentSegmentedWithoutStops": ["keypoints"], "sentSegmentedWithoutStopsStemmed": ["keypoint"]}, {"number": 7038, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Plugin-like class implements simple  MethodChannel and EventChannel.", "sentSegmented": ["plugin-like", "class", "implements", "simple", "methodchannel", "and", "eventchannel"], "sentSegmentedWithoutStops": ["plugin-like", "class", "implements", "simple", "methodchannel", "eventchannel"], "sentSegmentedWithoutStopsStemmed": ["plugin-lik", "class", "implement", "simpl", "methodchannel", "eventchannel"]}, {"number": 7039, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Calling MethodChannel.invokeMethod emits counter on EventChannel.", "sentSegmented": ["calling", "methodchannel.invokemethod", "emits", "counter", "on", "eventchannel"], "sentSegmentedWithoutStops": ["calling", "methodchannel.invokemethod", "emits", "counter", "eventchannel"], "sentSegmentedWithoutStopsStemmed": ["call", "methodchannel.invokemethod", "emit", "counter", "eventchannel"]}, {"number": 7040, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "class Plugin(registry: PluginRegistry, val label: String) {", "sentSegmented": ["class", "plugin", "registry", "pluginregistry", "val", "label", "string"], "sentSegmentedWithoutStops": ["plugin", "registry", "pluginregistry"], "sentSegmentedWithoutStopsStemmed": ["plugin", "registri", "pluginregistri"]}, {"number": 7041, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Volatile", "sentSegmented": ["volatile"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7042, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private var sink: EventChannel.EventSink? = null", "sentSegmented": ["private", "var", "sink", "eventchannel.eventsink", "null"], "sentSegmentedWithoutStops": ["sink", "eventchannel.eventsink"], "sentSegmentedWithoutStopsStemmed": ["sink", "eventchannel.eventsink"]}, {"number": 7043, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private val counter = AtomicInteger()", "sentSegmented": ["private", "val", "counter", "atomicinteger"], "sentSegmentedWithoutStops": ["counter", "atomicinteger"], "sentSegmentedWithoutStopsStemmed": ["counter", "atomicinteg"]}, {"number": 7044, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    init {", "sentSegmented": ["init"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7045, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        registry.registrarFor(\"isolate\").apply {", "sentSegmented": ["registry.registrarfor", "isolate", ".apply"], "sentSegmentedWithoutStops": ["registry.registrarfor", "isolate", ".apply"], "sentSegmentedWithoutStopsStemmed": ["registry.registrarfor", "isol", ".appli"]}, {"number": 7046, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            MethodChannel(messenger(), \"methods\").setMethodCallHandler { methodCall, result ->", "sentSegmented": ["methodchannel", "messenger", "methods", ".setmethodcallhandler", "methodcall", "result"], "sentSegmentedWithoutStops": ["methodchannel", "messenger", "methods", ".setmethodcallhandler", "methodcall", "result"], "sentSegmentedWithoutStopsStemmed": ["methodchannel", "messeng", "method", ".setmethodcallhandl", "methodcal", "result"]}, {"number": 7047, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                sink?.success(hashMapOf(", "sentSegmented": ["sink", ".success", "hashmapof"], "sentSegmentedWithoutStops": ["sink", ".success", "hashmapof"], "sentSegmentedWithoutStopsStemmed": ["sink", ".success", "hashmapof"]}, {"number": 7048, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"label\" to label,", "sentSegmented": ["label", "to", "label"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7049, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"counter\" to counter.incrementAndGet()", "sentSegmented": ["counter", "to", "counter.incrementandget"], "sentSegmentedWithoutStops": ["counter", "counter.incrementandget"], "sentSegmentedWithoutStopsStemmed": ["counter", "counter.incrementandget"]}, {"number": 7050, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                ))", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7051, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                Log.d(\"PLUGIN\", \"Call ${methodCall.method} from $label\")", "sentSegmented": ["log.d", "plugin", "call", "methodcall.method", "from", "label"], "sentSegmentedWithoutStops": ["log.d", "plugin", "call", "methodcall.method"], "sentSegmentedWithoutStopsStemmed": ["log.d", "plugin", "call", "methodcall.method"]}, {"number": 7052, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                result.success(null)", "sentSegmented": ["result.success", "null"], "sentSegmentedWithoutStops": ["result.success"], "sentSegmentedWithoutStopsStemmed": ["result.success"]}, {"number": 7053, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7054, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            EventChannel(messenger(), \"events\").setStreamHandler(object : EventChannel.StreamHandler {", "sentSegmented": ["eventchannel", "messenger", "events", ".setstreamhandler", "object", "eventchannel.streamhandler"], "sentSegmentedWithoutStops": ["eventchannel", "messenger", "events", ".setstreamhandler", "eventchannel.streamhandler"], "sentSegmentedWithoutStopsStemmed": ["eventchannel", "messeng", "event", ".setstreamhandl", "eventchannel.streamhandl"]}, {"number": 7055, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                override fun onListen(p0: Any?, s: EventChannel.EventSink?) {", "sentSegmented": ["override", "fun", "onlisten", "p0", "any", "s", "eventchannel.eventsink"], "sentSegmentedWithoutStops": ["onlisten", "p0", "eventchannel.eventsink"], "sentSegmentedWithoutStopsStemmed": ["onlisten", "p0", "eventchannel.eventsink"]}, {"number": 7056, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    sink?.endOfStream()", "sentSegmented": ["sink", ".endofstream"], "sentSegmentedWithoutStops": ["sink", ".endofstream"], "sentSegmentedWithoutStopsStemmed": ["sink", ".endofstream"]}, {"number": 7057, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    sink = s", "sentSegmented": ["sink", "s"], "sentSegmentedWithoutStops": ["sink"], "sentSegmentedWithoutStopsStemmed": ["sink"]}, {"number": 7058, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7059, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                override fun onCancel(p0: Any?) {", "sentSegmented": ["override", "fun", "oncancel", "p0", "any"], "sentSegmentedWithoutStops": ["oncancel", "p0"], "sentSegmentedWithoutStopsStemmed": ["oncancel", "p0"]}, {"number": 7060, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    sink?.endOfStream()", "sentSegmented": ["sink", ".endofstream"], "sentSegmentedWithoutStops": ["sink", ".endofstream"], "sentSegmentedWithoutStopsStemmed": ["sink", ".endofstream"]}, {"number": 7061, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    sink = null", "sentSegmented": ["sink", "null"], "sentSegmentedWithoutStops": ["sink"], "sentSegmentedWithoutStopsStemmed": ["sink"]}, {"number": 7062, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7063, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            })", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7064, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7065, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7066, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7067, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Dart handler use MethodChannel and EventChannel to periodicaly call method and waiting any data on event channel to arrive.", "sentSegmented": ["dart", "handler", "use", "methodchannel", "and", "eventchannel", "to", "periodicaly", "call", "method", "and", "waiting", "any", "data", "on", "event", "channel", "to", "arrive"], "sentSegmentedWithoutStops": ["dart", "handler", "use", "methodchannel", "eventchannel", "periodicaly", "call", "method", "waiting", "data", "event", "channel", "arrive"], "sentSegmentedWithoutStopsStemmed": ["dart", "handler", "use", "methodchannel", "eventchannel", "periodicali", "call", "method", "wait", "data", "event", "channel", "arriv"]}, {"number": 7068, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "void platformChannels() {", "sentSegmented": ["void", "platformchannels"], "sentSegmentedWithoutStops": ["platformchannels"], "sentSegmentedWithoutStopsStemmed": ["platformchannel"]}, {"number": 7069, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  print(\"Start platform channels test\");", "sentSegmented": ["print", "start", "platform", "channels", "test"], "sentSegmentedWithoutStops": ["print", "platform", "channels", "test"], "sentSegmentedWithoutStopsStemmed": ["print", "platform", "channel", "test"]}, {"number": 7070, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  MethodChannel pluginMethods = const MethodChannel('methods');", "sentSegmented": ["methodchannel", "pluginmethods", "const", "methodchannel", "'methods"], "sentSegmentedWithoutStops": ["methodchannel", "pluginmethods", "methodchannel", "'methods"], "sentSegmentedWithoutStopsStemmed": ["methodchannel", "pluginmethod", "methodchannel", "'method"]}, {"number": 7071, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  EventChannel pluginEvents = const EventChannel('events');", "sentSegmented": ["eventchannel", "pluginevents", "const", "eventchannel", "'events"], "sentSegmentedWithoutStops": ["eventchannel", "pluginevents", "eventchannel", "'events"], "sentSegmentedWithoutStopsStemmed": ["eventchannel", "pluginev", "eventchannel", "'event"]}, {"number": 7072, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  pluginEvents.receiveBroadcastStream().listen((data) {", "sentSegmented": ["pluginevents.receivebroadcaststream", ".listen", "data"], "sentSegmentedWithoutStops": ["pluginevents.receivebroadcaststream", ".listen"], "sentSegmentedWithoutStopsStemmed": ["pluginevents.receivebroadcaststream", ".listen"]}, {"number": 7073, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    print(data);", "sentSegmented": ["print", "data"], "sentSegmentedWithoutStops": ["print"], "sentSegmentedWithoutStopsStemmed": ["print"]}, {"number": 7074, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  });", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7075, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  Timer.periodic(Duration(seconds: 1), (timer) {", "sentSegmented": ["timer.periodic", "duration", "seconds", "1", "timer"], "sentSegmentedWithoutStops": ["timer.periodic", "duration", "seconds", "1", "timer"], "sentSegmentedWithoutStopsStemmed": ["timer.period", "durat", "second", "1", "timer"]}, {"number": 7076, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    pluginMethods.invokeMethod(\"tick\", {});", "sentSegmented": ["pluginmethods.invokemethod", "tick"], "sentSegmentedWithoutStops": ["pluginmethods.invokemethod", "tick"], "sentSegmentedWithoutStopsStemmed": ["pluginmethods.invokemethod", "tick"]}, {"number": 7077, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  });", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7078, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7079, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Main activity startup code register the Plugin-like class and start android service", "sentSegmented": ["main", "activity", "startup", "code", "register", "the", "plugin-like", "class", "and", "start", "android", "service"], "sentSegmentedWithoutStops": ["main", "activity", "startup", "code", "register", "plugin-like", "class", "start", "android", "service"], "sentSegmentedWithoutStopsStemmed": ["main", "activ", "startup", "code", "regist", "plugin-lik", "class", "start", "android", "servic"]}, {"number": 7080, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Plugin(this,\"Activity\")", "sentSegmented": ["plugin", "this", "activity"], "sentSegmentedWithoutStops": ["plugin", "activity"], "sentSegmentedWithoutStopsStemmed": ["plugin", "activ"]}, {"number": 7081, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "startService(Intent(this,PluginService::class.java))", "sentSegmented": ["startservice", "intent", "this", "pluginservice", ":class.java"], "sentSegmentedWithoutStops": ["startservice", "intent", "pluginservice", ":class.java"], "sentSegmentedWithoutStopsStemmed": ["startservic", "intent", "pluginservic", ":class.java"]}, {"number": 7082, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Service startup code create new dart isolate with backgound FlutterNativeView with dart entrypoint set to platformChannels on main.dart", "sentSegmented": ["service", "startup", "code", "create", "new", "dart", "isolate", "with", "backgound", "flutternativeview", "with", "dart", "entrypoint", "set", "to", "platformchannels", "on", "main.dart"], "sentSegmentedWithoutStops": ["service", "startup", "code", "create", "new", "dart", "isolate", "backgound", "flutternativeview", "dart", "entrypoint", "set", "platformchannels", "main.dart"], "sentSegmentedWithoutStopsStemmed": ["servic", "startup", "code", "creat", "new", "dart", "isol", "backgound", "flutternativeview", "dart", "entrypoint", "set", "platformchannel", "main.dart"]}, {"number": 7083, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "override fun onCreate() {", "sentSegmented": ["override", "fun", "oncreate"], "sentSegmentedWithoutStops": ["oncreate"], "sentSegmentedWithoutStopsStemmed": ["oncreat"]}, {"number": 7084, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        super.onCreate()", "sentSegmented": ["super.oncreate"], "sentSegmentedWithoutStops": ["super.oncreate"], "sentSegmentedWithoutStopsStemmed": ["super.oncr"]}, {"number": 7085, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        FlutterMain.startInitialization(this)", "sentSegmented": ["fluttermain.startinitialization", "this"], "sentSegmentedWithoutStops": ["fluttermain.startinitialization"], "sentSegmentedWithoutStopsStemmed": ["fluttermain.startiniti"]}, {"number": 7086, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        FlutterMain.ensureInitializationComplete(this, null)", "sentSegmented": ["fluttermain.ensureinitializationcomplete", "this", "null"], "sentSegmentedWithoutStops": ["fluttermain.ensureinitializationcomplete"], "sentSegmentedWithoutStopsStemmed": ["fluttermain.ensureinitializationcomplet"]}, {"number": 7087, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        bgView = FlutterNativeView(this, true)", "sentSegmented": ["bgview", "flutternativeview", "this", "true"], "sentSegmentedWithoutStops": ["bgview", "flutternativeview"], "sentSegmentedWithoutStopsStemmed": ["bgview", "flutternativeview"]}, {"number": 7088, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        Plugin(bgView.pluginRegistry, \"Service\")", "sentSegmented": ["plugin", "bgview.pluginregistry", "service"], "sentSegmentedWithoutStops": ["plugin", "bgview.pluginregistry", "service"], "sentSegmentedWithoutStopsStemmed": ["plugin", "bgview.pluginregistri", "servic"]}, {"number": 7089, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        bgView.runFromBundle(FlutterRunArguments().apply {", "sentSegmented": ["bgview.runfrombundle", "flutterrunarguments", ".apply"], "sentSegmentedWithoutStops": ["bgview.runfrombundle", "flutterrunarguments", ".apply"], "sentSegmentedWithoutStopsStemmed": ["bgview.runfrombundl", "flutterrunargu", ".appli"]}, {"number": 7090, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            bundlePath = FlutterMain.findAppBundlePath(this@PluginService)", "sentSegmented": ["bundlepath", "fluttermain.findappbundlepath", "this", "pluginservice"], "sentSegmentedWithoutStops": ["bundlepath", "fluttermain.findappbundlepath", "pluginservice"], "sentSegmentedWithoutStopsStemmed": ["bundlepath", "fluttermain.findappbundlepath", "pluginservic"]}, {"number": 7091, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            entrypoint = \"platformChannels\"", "sentSegmented": ["entrypoint", "platformchannels"], "sentSegmentedWithoutStops": ["platformchannels"], "sentSegmentedWithoutStopsStemmed": ["platformchannel"]}, {"number": 7092, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        })", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7093, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 7094, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Finnaly when app is runnung only Activity bound dart code works as expected.", "sentSegmented": ["finnaly", "when", "app", "is", "runnung", "only", "activity", "bound", "dart", "code", "works", "as", "expected"], "sentSegmentedWithoutStops": ["finnaly", "app", "runnung", "activity", "bound", "dart", "code", "works", "expected"], "sentSegmentedWithoutStopsStemmed": ["finnali", "app", "runnung", "activ", "bound", "dart", "code", "work", "expect"]}, {"number": 7095, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Service bound dart code never prints data on listen closure.", "sentSegmented": ["service", "bound", "dart", "code", "never", "prints", "data", "on", "listen", "closure"], "sentSegmentedWithoutStops": ["service", "bound", "dart", "code", "never", "prints", "data", "listen", "closure"], "sentSegmentedWithoutStopsStemmed": ["servic", "bound", "dart", "code", "never", "print", "data", "listen", "closur"]}, {"number": 7096, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Steps to Reproduce", "sentSegmented": ["steps", "to", "reproduce"], "sentSegmentedWithoutStops": ["steps", "reproduce"], "sentSegmentedWithoutStopsStemmed": ["step", "reproduc"]}, {"number": 7097, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "git clone https://github.com/softkot/flutter_isolate", "sentSegmented": ["git", "clone", "https", "//github.com/softkot/flutter_isolate"], "sentSegmentedWithoutStops": ["git", "clone", "https", "//github.com/softkot/flutter_isolate"], "sentSegmentedWithoutStopsStemmed": ["git", "clone", "http", "//github.com/softkot/flutter_isol"]}, {"number": 7098, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "cd flutter_isolate", "sentSegmented": ["cd", "flutter_isolate"], "sentSegmentedWithoutStops": ["flutter_isolate"], "sentSegmentedWithoutStopsStemmed": ["flutter_isol"]}, {"number": 7099, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Connect android device or an emulator and run", "sentSegmented": ["connect", "android", "device", "or", "an", "emulator", "and", "run"], "sentSegmentedWithoutStops": ["connect", "android", "device", "emulator", "run"], "sentSegmentedWithoutStopsStemmed": ["connect", "android", "devic", "emul", "run"]}, {"number": 7100, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "flutter run", "sentSegmented": ["flutter", "run"], "sentSegmentedWithoutStops": ["flutter"], "sentSegmentedWithoutStopsStemmed": ["flutter"]}, {"number": 7101, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Application  logs", "sentSegmented": ["application", "logs"], "sentSegmentedWithoutStops": ["application", "logs"], "sentSegmentedWithoutStopsStemmed": ["applic", "log"]}, {"number": 7102, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "produced", "sentSegmented": ["produced"], "sentSegmentedWithoutStops": ["produced"], "sentSegmentedWithoutStopsStemmed": ["produc"]}, {"number": 7103, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7104, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7105, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 2}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "2"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "2"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "2"]}, {"number": 7106, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7107, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7108, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 3}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "3"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "3"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "3"]}, {"number": 7109, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7110, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7111, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 4}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "4"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "4"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "4"]}, {"number": 7112, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7113, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7114, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 5}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "5"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "5"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "5"]}, {"number": 7115, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "expected", "sentSegmented": ["expected"], "sentSegmentedWithoutStops": ["expected"], "sentSegmentedWithoutStopsStemmed": ["expect"]}, {"number": 7116, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7117, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7118, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 2}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "2"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "2"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "2"]}, {"number": 7119, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Service, counter: 2}", "sentSegmented": ["i/flutter", "25664", "label", "service", "counter", "2"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "service", "counter", "2"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "servic", "counter", "2"]}, {"number": 7120, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7121, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7122, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 3}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "3"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "3"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "3"]}, {"number": 7123, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Service, counter: 3}", "sentSegmented": ["i/flutter", "25664", "label", "service", "counter", "3"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "service", "counter", "3"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "servic", "counter", "3"]}, {"number": 7124, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7125, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7126, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 4}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "4"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "4"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "4"]}, {"number": 7127, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Service, counter: 4}", "sentSegmented": ["i/flutter", "25664", "label", "service", "counter", "4"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "service", "counter", "4"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "servic", "counter", "4"]}, {"number": 7128, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Service", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "service"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "service"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "servic"]}, {"number": 7129, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "D/PLUGIN  (25664): Call tick from Activity", "sentSegmented": ["d/plugin", "25664", "call", "tick", "from", "activity"], "sentSegmentedWithoutStops": ["d/plugin", "25664", "call", "tick", "activity"], "sentSegmentedWithoutStopsStemmed": ["d/plugin", "25664", "call", "tick", "activ"]}, {"number": 7130, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Activity, counter: 5}", "sentSegmented": ["i/flutter", "25664", "label", "activity", "counter", "5"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "activity", "counter", "5"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "activ", "counter", "5"]}, {"number": 7131, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I/flutter (25664): {label: Service, counter: 5}", "sentSegmented": ["i/flutter", "25664", "label", "service", "counter", "5"], "sentSegmentedWithoutStops": ["i/flutter", "25664", "service", "counter", "5"], "sentSegmentedWithoutStopsStemmed": ["i/flutt", "25664", "servic", "counter", "5"]}, {"number": 7132, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Flutter doctor", "sentSegmented": ["flutter", "doctor"], "sentSegmentedWithoutStops": ["flutter", "doctor"], "sentSegmentedWithoutStopsStemmed": ["flutter", "doctor"]}, {"number": 7133, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Doctor summary (to see all details, run flutter doctor -v):", "sentSegmented": ["doctor", "summary", "to", "see", "all", "details", "run", "flutter", "doctor", "-v"], "sentSegmentedWithoutStops": ["doctor", "see", "flutter", "doctor", "-v"], "sentSegmentedWithoutStopsStemmed": ["doctor", "see", "flutter", "doctor", "-v"]}, {"number": 7134, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[\u2713] Flutter (Channel stable, v1.2.1, on Linux, locale ru_RU.UTF-8)", "sentSegmented": ["flutter", "channel", "stable", "v1.2.1", "on", "linux", "locale", "ru_ru.utf-8"], "sentSegmentedWithoutStops": ["flutter", "channel", "stable", "v1.2.1", "linux", "locale", "ru_ru.utf-8"], "sentSegmentedWithoutStopsStemmed": ["flutter", "channel", "stabl", "v1.2.1", "linux", "local", "ru_ru.utf-8"]}, {"number": 7135, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[\u2713] Android toolchain - develop for Android devices (Android SDK version 28.0.3)", "sentSegmented": ["android", "toolchain", "develop", "for", "android", "devices", "android", "sdk", "version", "28.0.3"], "sentSegmentedWithoutStops": ["android", "toolchain", "develop", "android", "devices", "android", "sdk", "version", "28.0.3"], "sentSegmentedWithoutStopsStemmed": ["android", "toolchain", "develop", "android", "devic", "android", "sdk", "version", "28.0.3"]}, {"number": 7136, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[\u2713] Android Studio (version 3.3)", "sentSegmented": ["android", "studio", "version", "3.3"], "sentSegmentedWithoutStops": ["android", "studio", "version", "3.3"], "sentSegmentedWithoutStopsStemmed": ["android", "studio", "version", "3.3"]}, {"number": 7137, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[\u2713] IntelliJ IDEA Ultimate Edition (version 2019.1)", "sentSegmented": ["intellij", "idea", "ultimate", "edition", "version", "2019.1"], "sentSegmentedWithoutStops": ["intellij", "idea", "ultimate", "edition", "version", "2019.1"], "sentSegmentedWithoutStopsStemmed": ["intellij", "idea", "ultim", "edit", "version", "2019.1"]}, {"number": 7138, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[\u2713] Connected device (1 available)", "sentSegmented": ["connected", "device", "1", "available"], "sentSegmentedWithoutStops": ["connected", "device", "1", "available"], "sentSegmentedWithoutStopsStemmed": ["connect", "devic", "1", "avail"]}, {"number": 7139, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u2022 No issues found!", "sentSegmented": ["no", "issues", "found"], "sentSegmentedWithoutStops": ["issues", "found"], "sentSegmentedWithoutStopsStemmed": ["issu", "found"]}]}