{"repository": {"owner": {"login": "twbs"}, "name": "bootstrap", "forkCount": 72576, "stargazerCount": 148724, "createdAt": "2011-07-29T21:19:00Z", "updatedAt": "2021-03-12T09:22:01Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "css"}}}, {"node": {"topic": {"name": "bootstrap"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "html"}}}, {"node": {"topic": {"name": "scss"}}}, {"node": {"topic": {"name": "css-framework"}}}, {"node": {"topic": {"name": "sass"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "PowerShell"}}, {"node": {"name": "SCSS"}}]}, "primaryLanguage": {"name": "JavaScript"}}, "id": "MDU6SXNzdWUxODU4MzY0OQ==", "number": 10202, "author": {"login": "ShaunR"}, "title": "jumbotron h1 inherits color which overrides text-success, text-warning, etc", "body": "`.jumbotron h1` sets color to inherit, i'm not really sure why it would need to do this but the problem is that if you try and set `text-success`, `text-warning`, `text-info`, etc on the h1 it fails to set the color because of this.  I know i could probably simply wrap the h1 in a div with a text-\\* class but that's extra markup that i'm thinking we can avoid?!\n", "bodyHTML": "<p><code>.jumbotron h1</code> sets color to inherit, i'm not really sure why it would need to do this but the problem is that if you try and set <code>text-success</code>, <code>text-warning</code>, <code>text-info</code>, etc on the h1 it fails to set the color because of this.  I know i could probably simply wrap the h1 in a div with a text-* class but that's extra markup that i'm thinking we can avoid?!</p>", "bodyText": ".jumbotron h1 sets color to inherit, i'm not really sure why it would need to do this but the problem is that if you try and set text-success, text-warning, text-info, etc on the h1 it fails to set the color because of this.  I know i could probably simply wrap the h1 in a div with a text-* class but that's extra markup that i'm thinking we can avoid?!", "assignees": {"edges": []}, "createdAt": "2013-08-27T01:48:17Z", "closed": true, "closedAt": "2013-10-12T22:54:08Z", "lastEditedAt": null, "publishedAt": "2013-08-27T01:48:17Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMzE0MjU3", "author": {"login": "saas786"}, "body": "@ShaunR could you please provide markup you are using? So we better understand the issue.?\n\nUpdate: I understood now what you mean, yes it really inherits main text color doesn't let text-\\* class take over may be we should add \"!important\" to these classes? in type.less // Contextual emphasis???\n\n@mdo ?\n", "bodyText": "@ShaunR could you please provide markup you are using? So we better understand the issue.?\nUpdate: I understood now what you mean, yes it really inherits main text color doesn't let text-* class take over may be we should add \"!important\" to these classes? in type.less // Contextual emphasis???\n@mdo ?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ShaunR/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ShaunR\">@ShaunR</a> could you please provide markup you are using? So we better understand the issue.?</p>\n<p>Update: I understood now what you mean, yes it really inherits main text color doesn't let text-* class take over may be we should add \"!important\" to these classes? in type.less // Contextual emphasis???</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mdo/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mdo\">@mdo</a> ?</p>", "createdAt": "2013-08-27T05:44:14Z", "publishedAt": "2013-08-27T05:44:14Z", "lastEditedAt": null, "updatedAt": "2013-08-27T09:57:27Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24514, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@ShaunR could you please provide markup you are using?", "sentSegmented": ["shaunr", "could", "you", "please", "provide", "markup", "you", "are", "using"], "sentSegmentedWithoutStops": ["shaunr", "could", "please", "provide", "markup", "using"], "sentSegmentedWithoutStopsStemmed": ["shaunr", "could", "pleas", "provid", "markup", "use"]}, {"number": 24515, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So we better understand the issue.", "sentSegmented": ["so", "we", "better", "understand", "the", "issue"], "sentSegmentedWithoutStops": ["better", "understand", "issue"], "sentSegmentedWithoutStopsStemmed": ["better", "understand", "issu"]}, {"number": 24516, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "?", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 24517, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Update: I understood now what you mean, yes it really inherits main text color doesn't let text-* class take over may be we should add \"!important\" to these classes?", "sentSegmented": ["update", "i", "understood", "now", "what", "you", "mean", "yes", "it", "really", "inherits", "main", "text", "color", "does", "n't", "let", "text-", "class", "take", "over", "may", "be", "we", "should", "add", "important", "to", "these", "classes"], "sentSegmentedWithoutStops": ["update", "understood", "mean", "yes", "really", "inherits", "main", "text", "color", "n't", "let", "text-", "class", "take", "may", "add", "important", "classes"], "sentSegmentedWithoutStopsStemmed": ["updat", "understood", "mean", "ye", "realli", "inherit", "main", "text", "color", "n't", "let", "text-", "class", "take", "may", "add", "import", "class"]}, {"number": 24518, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "in type.less // Contextual emphasis??", "sentSegmented": ["in", "type.less", "contextual", "emphasis"], "sentSegmentedWithoutStops": ["type.less", "contextual", "emphasis"], "sentSegmentedWithoutStopsStemmed": ["type.less", "contextu", "emphasi"]}, {"number": 24519, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "?", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 24520, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@mdo ?", "sentSegmented": ["mdo"], "sentSegmentedWithoutStops": ["mdo"], "sentSegmentedWithoutStopsStemmed": ["mdo"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMzUyNjcw", "author": {"login": "ShaunR"}, "body": "As far as i can tell the `color: inherit` doesn't really need to be their.  Only reason i could really see it needing to be their is if we had different colored jumbotrons.  I've created a test fiddle and used firebug to remove and add the `color: inherit` style and it being present looks to change nothing but removing it does allow the text-color classes to work!\n\nhttp://fiddle.jshell.net/vpH6v/2/show/light/\n\nI would avoid using `!important` if we can.\n", "bodyText": "As far as i can tell the color: inherit doesn't really need to be their.  Only reason i could really see it needing to be their is if we had different colored jumbotrons.  I've created a test fiddle and used firebug to remove and add the color: inherit style and it being present looks to change nothing but removing it does allow the text-color classes to work!\nhttp://fiddle.jshell.net/vpH6v/2/show/light/\nI would avoid using !important if we can.", "bodyHTML": "<p>As far as i can tell the <code>color: inherit</code> doesn't really need to be their.  Only reason i could really see it needing to be their is if we had different colored jumbotrons.  I've created a test fiddle and used firebug to remove and add the <code>color: inherit</code> style and it being present looks to change nothing but removing it does allow the text-color classes to work!</p>\n<p><a rel=\"nofollow\" href=\"http://fiddle.jshell.net/vpH6v/2/show/light/\">http://fiddle.jshell.net/vpH6v/2/show/light/</a></p>\n<p>I would avoid using <code>!important</code> if we can.</p>", "createdAt": "2013-08-27T16:58:23Z", "publishedAt": "2013-08-27T16:58:23Z", "lastEditedAt": null, "updatedAt": "2013-08-27T16:59:29Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24521, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As far as i can tell the color: inherit doesn't really need to be their.", "sentSegmented": ["as", "far", "as", "i", "can", "tell", "the", "color", "inherit", "does", "n't", "really", "need", "to", "be", "their"], "sentSegmentedWithoutStops": ["far", "tell", "color", "inherit", "n't", "really", "need"], "sentSegmentedWithoutStopsStemmed": ["far", "tell", "color", "inherit", "n't", "realli", "need"]}, {"number": 24522, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Only reason i could really see it needing to be their is if we had different colored jumbotrons.", "sentSegmented": ["only", "reason", "i", "could", "really", "see", "it", "needing", "to", "be", "their", "is", "if", "we", "had", "different", "colored", "jumbotrons"], "sentSegmentedWithoutStops": ["reason", "could", "really", "see", "needing", "different", "colored", "jumbotrons"], "sentSegmentedWithoutStopsStemmed": ["reason", "could", "realli", "see", "need", "differ", "color", "jumbotron"]}, {"number": 24523, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I've created a test fiddle and used firebug to remove and add the color: inherit style and it being present looks to change nothing but removing it does allow the text-color classes to work!", "sentSegmented": ["i", "'ve", "created", "a", "test", "fiddle", "and", "used", "firebug", "to", "remove", "and", "add", "the", "color", "inherit", "style", "and", "it", "being", "present", "looks", "to", "change", "nothing", "but", "removing", "it", "does", "allow", "the", "text-color", "classes", "to", "work"], "sentSegmentedWithoutStops": ["'ve", "created", "test", "fiddle", "used", "firebug", "remove", "add", "color", "inherit", "style", "present", "looks", "change", "nothing", "removing", "allow", "text-color", "classes", "work"], "sentSegmentedWithoutStopsStemmed": ["'ve", "creat", "test", "fiddl", "use", "firebug", "remov", "add", "color", "inherit", "style", "present", "look", "chang", "noth", "remov", "allow", "text-color", "class", "work"]}, {"number": 24524, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://fiddle.jshell.net/vpH6v/2/show/light/", "sentSegmented": ["http", "//fiddle.jshell.net/vph6v/2/show/light/"], "sentSegmentedWithoutStops": ["http", "//fiddle.jshell.net/vph6v/2/show/light/"], "sentSegmentedWithoutStopsStemmed": ["http", "//fiddle.jshell.net/vph6v/2/show/light/"]}, {"number": 24525, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I would avoid using !important if we can.", "sentSegmented": ["i", "would", "avoid", "using", "important", "if", "we", "can"], "sentSegmentedWithoutStops": ["would", "avoid", "using", "important"], "sentSegmentedWithoutStopsStemmed": ["would", "avoid", "use", "import"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMzk1MzY1", "author": {"login": "saas786"}, "body": "But there is other side to removing \"inherit\" property, \n\nlets say, for example you color your headings to be\nh1,h2 etc\ncolor: red;\n\nwhat happens is because of inherit being applied to jumbotron heading, it's immune to above \"red\" color, as its inheriting its parent color which is jumbotron, which in turn gets inherit color of main body (text).\n\nSo we need to define whether we want above behaviour (keeping jumbotron heading to be immune of whatever color you have on headings or we want it to inherit the color of headings)?\n\nIn case of allowing jumbotron to use none jumbotron headings color (in this case above \"red\"), we can leave \"inherit\" property out of jumbotron heading and in turn we will get desired result (text-\\* color to be applied as desired).\n\nor we leave everything as is and try to find a way to give text-\\* class precedence over inherit (one option is applying !important).\n\nAnybody else have a say or have solution?\n", "bodyText": "But there is other side to removing \"inherit\" property,\nlets say, for example you color your headings to be\nh1,h2 etc\ncolor: red;\nwhat happens is because of inherit being applied to jumbotron heading, it's immune to above \"red\" color, as its inheriting its parent color which is jumbotron, which in turn gets inherit color of main body (text).\nSo we need to define whether we want above behaviour (keeping jumbotron heading to be immune of whatever color you have on headings or we want it to inherit the color of headings)?\nIn case of allowing jumbotron to use none jumbotron headings color (in this case above \"red\"), we can leave \"inherit\" property out of jumbotron heading and in turn we will get desired result (text-* color to be applied as desired).\nor we leave everything as is and try to find a way to give text-* class precedence over inherit (one option is applying !important).\nAnybody else have a say or have solution?", "bodyHTML": "<p>But there is other side to removing \"inherit\" property,</p>\n<p>lets say, for example you color your headings to be<br>\nh1,h2 etc<br>\ncolor: red;</p>\n<p>what happens is because of inherit being applied to jumbotron heading, it's immune to above \"red\" color, as its inheriting its parent color which is jumbotron, which in turn gets inherit color of main body (text).</p>\n<p>So we need to define whether we want above behaviour (keeping jumbotron heading to be immune of whatever color you have on headings or we want it to inherit the color of headings)?</p>\n<p>In case of allowing jumbotron to use none jumbotron headings color (in this case above \"red\"), we can leave \"inherit\" property out of jumbotron heading and in turn we will get desired result (text-* color to be applied as desired).</p>\n<p>or we leave everything as is and try to find a way to give text-* class precedence over inherit (one option is applying !important).</p>\n<p>Anybody else have a say or have solution?</p>", "createdAt": "2013-08-28T07:10:43Z", "publishedAt": "2013-08-28T07:10:43Z", "lastEditedAt": null, "updatedAt": "2013-08-28T07:10:43Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24526, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But there is other side to removing \"inherit\" property,", "sentSegmented": ["but", "there", "is", "other", "side", "to", "removing", "inherit", "property"], "sentSegmentedWithoutStops": ["side", "removing", "inherit", "property"], "sentSegmentedWithoutStopsStemmed": ["side", "remov", "inherit", "properti"]}, {"number": 24527, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "lets say, for example you color your headings to be", "sentSegmented": ["lets", "say", "for", "example", "you", "color", "your", "headings", "to", "be"], "sentSegmentedWithoutStops": ["lets", "say", "example", "color", "headings"], "sentSegmentedWithoutStopsStemmed": ["let", "say", "exampl", "color", "head"]}, {"number": 24528, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "h1,h2 etc", "sentSegmented": ["h1", "h2", "etc"], "sentSegmentedWithoutStops": ["h1", "h2", "etc"], "sentSegmentedWithoutStopsStemmed": ["h1", "h2", "etc"]}, {"number": 24529, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "color: red;", "sentSegmented": ["color", "red"], "sentSegmentedWithoutStops": ["color", "red"], "sentSegmentedWithoutStopsStemmed": ["color", "red"]}, {"number": 24530, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "what happens is because of inherit being applied to jumbotron heading, it's immune to above \"red\" color, as its inheriting its parent color which is jumbotron, which in turn gets inherit color of main body (text).", "sentSegmented": ["what", "happens", "is", "because", "of", "inherit", "being", "applied", "to", "jumbotron", "heading", "it", "'s", "immune", "to", "above", "red", "color", "as", "its", "inheriting", "its", "parent", "color", "which", "is", "jumbotron", "which", "in", "turn", "gets", "inherit", "color", "of", "main", "body", "text"], "sentSegmentedWithoutStops": ["happens", "inherit", "applied", "jumbotron", "heading", "'s", "immune", "red", "color", "inheriting", "parent", "color", "jumbotron", "turn", "gets", "inherit", "color", "main", "body", "text"], "sentSegmentedWithoutStopsStemmed": ["happen", "inherit", "appli", "jumbotron", "head", "'s", "immun", "red", "color", "inherit", "parent", "color", "jumbotron", "turn", "get", "inherit", "color", "main", "bodi", "text"]}, {"number": 24531, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So we need to define whether we want above behaviour (keeping jumbotron heading to be immune of whatever color you have on headings or we want it to inherit the color of headings)?", "sentSegmented": ["so", "we", "need", "to", "define", "whether", "we", "want", "above", "behaviour", "keeping", "jumbotron", "heading", "to", "be", "immune", "of", "whatever", "color", "you", "have", "on", "headings", "or", "we", "want", "it", "to", "inherit", "the", "color", "of", "headings"], "sentSegmentedWithoutStops": ["need", "define", "whether", "want", "behaviour", "keeping", "jumbotron", "heading", "immune", "whatever", "color", "headings", "want", "inherit", "color", "headings"], "sentSegmentedWithoutStopsStemmed": ["need", "defin", "whether", "want", "behaviour", "keep", "jumbotron", "head", "immun", "whatev", "color", "head", "want", "inherit", "color", "head"]}, {"number": 24532, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In case of allowing jumbotron to use none jumbotron headings color (in this case above \"red\"), we can leave \"inherit\" property out of jumbotron heading and in turn we will get desired result (text-* color to be applied as desired).", "sentSegmented": ["in", "case", "of", "allowing", "jumbotron", "to", "use", "none", "jumbotron", "headings", "color", "in", "this", "case", "above", "red", "we", "can", "leave", "inherit", "property", "out", "of", "jumbotron", "heading", "and", "in", "turn", "we", "will", "get", "desired", "result", "text-", "color", "to", "be", "applied", "as", "desired"], "sentSegmentedWithoutStops": ["case", "allowing", "jumbotron", "use", "none", "jumbotron", "headings", "color", "case", "red", "leave", "inherit", "property", "jumbotron", "heading", "turn", "get", "desired", "result", "text-", "color", "applied", "desired"], "sentSegmentedWithoutStopsStemmed": ["case", "allow", "jumbotron", "use", "none", "jumbotron", "head", "color", "case", "red", "leav", "inherit", "properti", "jumbotron", "head", "turn", "get", "desir", "result", "text-", "color", "appli", "desir"]}, {"number": 24533, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "or we leave everything as is and try to find a way to give text-* class precedence over inherit (one option is applying !important).", "sentSegmented": ["or", "we", "leave", "everything", "as", "is", "and", "try", "to", "find", "a", "way", "to", "give", "text-", "class", "precedence", "over", "inherit", "one", "option", "is", "applying", "important"], "sentSegmentedWithoutStops": ["leave", "everything", "try", "find", "way", "give", "text-", "class", "precedence", "inherit", "one", "option", "applying", "important"], "sentSegmentedWithoutStopsStemmed": ["leav", "everyth", "tri", "find", "way", "give", "text-", "class", "preced", "inherit", "one", "option", "appli", "import"]}, {"number": 24534, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Anybody else have a say or have solution?", "sentSegmented": ["anybody", "else", "have", "a", "say", "or", "have", "solution"], "sentSegmentedWithoutStops": ["anybody", "else", "say", "solution"], "sentSegmentedWithoutStopsStemmed": ["anybodi", "els", "say", "solut"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzNDMyMDEz", "author": {"login": "ShaunR"}, "body": "I'm not sure i understand what your saying, both jumbotron and jumbotron h1 set color inherit, this still seams like a bad thing since you can not override the color.  For both of those elements.  If i get rid of both of those styles i can then set text-color on either the jumbotron to set the color for the entire jumbotron or just the h1.\n\nedit: ok i see what your saying about setting a color on the headings and those trickling down.  If somebody is mucking with those anyway they should be more specific if they don't want the them all to change.  It's not really bootstraps job to reset what they've changed, right?\n", "bodyText": "I'm not sure i understand what your saying, both jumbotron and jumbotron h1 set color inherit, this still seams like a bad thing since you can not override the color.  For both of those elements.  If i get rid of both of those styles i can then set text-color on either the jumbotron to set the color for the entire jumbotron or just the h1.\nedit: ok i see what your saying about setting a color on the headings and those trickling down.  If somebody is mucking with those anyway they should be more specific if they don't want the them all to change.  It's not really bootstraps job to reset what they've changed, right?", "bodyHTML": "<p>I'm not sure i understand what your saying, both jumbotron and jumbotron h1 set color inherit, this still seams like a bad thing since you can not override the color.  For both of those elements.  If i get rid of both of those styles i can then set text-color on either the jumbotron to set the color for the entire jumbotron or just the h1.</p>\n<p>edit: ok i see what your saying about setting a color on the headings and those trickling down.  If somebody is mucking with those anyway they should be more specific if they don't want the them all to change.  It's not really bootstraps job to reset what they've changed, right?</p>", "createdAt": "2013-08-28T17:21:46Z", "publishedAt": "2013-08-28T17:21:46Z", "lastEditedAt": null, "updatedAt": "2013-08-28T17:23:47Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24535, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm not sure i understand what your saying, both jumbotron and jumbotron h1 set color inherit, this still seams like a bad thing since you can not override the color.", "sentSegmented": ["i", "'m", "not", "sure", "i", "understand", "what", "your", "saying", "both", "jumbotron", "and", "jumbotron", "h1", "set", "color", "inherit", "this", "still", "seams", "like", "a", "bad", "thing", "since", "you", "can", "not", "override", "the", "color"], "sentSegmentedWithoutStops": ["'m", "sure", "understand", "saying", "jumbotron", "jumbotron", "h1", "set", "color", "inherit", "still", "seams", "like", "bad", "thing", "since", "override", "color"], "sentSegmentedWithoutStopsStemmed": ["'m", "sure", "understand", "say", "jumbotron", "jumbotron", "h1", "set", "color", "inherit", "still", "seam", "like", "bad", "thing", "sinc", "overrid", "color"]}, {"number": 24536, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For both of those elements.", "sentSegmented": ["for", "both", "of", "those", "elements"], "sentSegmentedWithoutStops": ["elements"], "sentSegmentedWithoutStopsStemmed": ["element"]}, {"number": 24537, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If i get rid of both of those styles i can then set text-color on either the jumbotron to set the color for the entire jumbotron or just the h1.", "sentSegmented": ["if", "i", "get", "rid", "of", "both", "of", "those", "styles", "i", "can", "then", "set", "text-color", "on", "either", "the", "jumbotron", "to", "set", "the", "color", "for", "the", "entire", "jumbotron", "or", "just", "the", "h1"], "sentSegmentedWithoutStops": ["get", "rid", "styles", "set", "text-color", "either", "jumbotron", "set", "color", "entire", "jumbotron", "h1"], "sentSegmentedWithoutStopsStemmed": ["get", "rid", "style", "set", "text-color", "either", "jumbotron", "set", "color", "entir", "jumbotron", "h1"]}, {"number": 24538, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "edit: ok i see what your saying about setting a color on the headings and those trickling down.", "sentSegmented": ["edit", "ok", "i", "see", "what", "your", "saying", "about", "setting", "a", "color", "on", "the", "headings", "and", "those", "trickling", "down"], "sentSegmentedWithoutStops": ["edit", "ok", "see", "saying", "setting", "color", "headings", "trickling"], "sentSegmentedWithoutStopsStemmed": ["edit", "ok", "see", "say", "set", "color", "head", "trickl"]}, {"number": 24539, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If somebody is mucking with those anyway they should be more specific if they don't want the them all to change.", "sentSegmented": ["if", "somebody", "is", "mucking", "with", "those", "anyway", "they", "should", "be", "more", "specific", "if", "they", "do", "n't", "want", "the", "them", "all", "to", "change"], "sentSegmentedWithoutStops": ["somebody", "mucking", "anyway", "specific", "n't", "want", "change"], "sentSegmentedWithoutStopsStemmed": ["somebodi", "muck", "anyway", "specif", "n't", "want", "chang"]}, {"number": 24540, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's not really bootstraps job to reset what they've changed, right?", "sentSegmented": ["it", "'s", "not", "really", "bootstraps", "job", "to", "reset", "what", "they", "'ve", "changed", "right"], "sentSegmentedWithoutStops": ["'s", "really", "bootstraps", "job", "reset", "'ve", "changed", "right"], "sentSegmentedWithoutStopsStemmed": ["'s", "realli", "bootstrap", "job", "reset", "'ve", "chang", "right"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzNTUyNjY5", "author": {"login": "saas786"}, "body": "yep right, that's what I am trying to say and achieve, we can only allow one scenario to be applicable and stick with it by default code, and one important thing to keep in mind is it should be cuctomizeable that's it.\n", "bodyText": "yep right, that's what I am trying to say and achieve, we can only allow one scenario to be applicable and stick with it by default code, and one important thing to keep in mind is it should be cuctomizeable that's it.", "bodyHTML": "<p>yep right, that's what I am trying to say and achieve, we can only allow one scenario to be applicable and stick with it by default code, and one important thing to keep in mind is it should be cuctomizeable that's it.</p>", "createdAt": "2013-08-30T10:24:43Z", "publishedAt": "2013-08-30T10:24:43Z", "lastEditedAt": null, "updatedAt": "2013-08-30T10:24:43Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24541, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "yep right, that's what I am trying to say and achieve, we can only allow one scenario to be applicable and stick with it by default code, and one important thing to keep in mind is it should be cuctomizeable that's it.", "sentSegmented": ["yep", "right", "that", "'s", "what", "i", "am", "trying", "to", "say", "and", "achieve", "we", "can", "only", "allow", "one", "scenario", "to", "be", "applicable", "and", "stick", "with", "it", "by", "default", "code", "and", "one", "important", "thing", "to", "keep", "in", "mind", "is", "it", "should", "be", "cuctomizeable", "that", "'s", "it"], "sentSegmentedWithoutStops": ["yep", "right", "'s", "trying", "say", "achieve", "allow", "one", "scenario", "applicable", "stick", "default", "code", "one", "important", "thing", "keep", "mind", "cuctomizeable", "'s"], "sentSegmentedWithoutStopsStemmed": ["yep", "right", "'s", "tri", "say", "achiev", "allow", "one", "scenario", "applic", "stick", "default", "code", "one", "import", "thing", "keep", "mind", "cuctomiz", "'s"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI1ODQwNzA5", "author": {"login": "mdo"}, "body": "The value `inherit` doesn't matter here\u2014it's a specificity issue. `.jumbotron h1` is more specific than `.text-success`. Since the colors aren't being used, and are causing a bug, I'm inclined to simply remove the variables entirely, but I wonder if that presents a backward compatibility issue.\n\n@cvrebert Thoughts on that last part?\n", "bodyText": "The value inherit doesn't matter here\u2014it's a specificity issue. .jumbotron h1 is more specific than .text-success. Since the colors aren't being used, and are causing a bug, I'm inclined to simply remove the variables entirely, but I wonder if that presents a backward compatibility issue.\n@cvrebert Thoughts on that last part?", "bodyHTML": "<p>The value <code>inherit</code> doesn't matter here\u2014it's a specificity issue. <code>.jumbotron h1</code> is more specific than <code>.text-success</code>. Since the colors aren't being used, and are causing a bug, I'm inclined to simply remove the variables entirely, but I wonder if that presents a backward compatibility issue.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cvrebert/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cvrebert\">@cvrebert</a> Thoughts on that last part?</p>", "createdAt": "2013-10-07T20:08:56Z", "publishedAt": "2013-10-07T20:08:56Z", "lastEditedAt": null, "updatedAt": "2013-10-07T20:08:56Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24542, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The value inherit doesn't matter here\u2014it's a specificity issue.", "sentSegmented": ["the", "value", "inherit", "does", "n't", "matter", "here\u2014it", "'s", "a", "specificity", "issue"], "sentSegmentedWithoutStops": ["value", "inherit", "n't", "matter", "here\u2014it", "'s", "specificity", "issue"], "sentSegmentedWithoutStopsStemmed": ["valu", "inherit", "n't", "matter", "here\u2014it", "'s", "specif", "issu"]}, {"number": 24543, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".jumbotron h1 is more specific than .text-success.", "sentSegmented": [".jumbotron", "h1", "is", "more", "specific", "than", ".text-success"], "sentSegmentedWithoutStops": [".jumbotron", "h1", "specific", ".text-success"], "sentSegmentedWithoutStopsStemmed": [".jumbotron", "h1", "specif", ".text-success"]}, {"number": 24544, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Since the colors aren't being used, and are causing a bug, I'm inclined to simply remove the variables entirely, but I wonder if that presents a backward compatibility issue.", "sentSegmented": ["since", "the", "colors", "are", "n't", "being", "used", "and", "are", "causing", "a", "bug", "i", "'m", "inclined", "to", "simply", "remove", "the", "variables", "entirely", "but", "i", "wonder", "if", "that", "presents", "a", "backward", "compatibility", "issue"], "sentSegmentedWithoutStops": ["since", "colors", "n't", "used", "causing", "bug", "'m", "inclined", "simply", "remove", "variables", "entirely", "wonder", "presents", "backward", "compatibility", "issue"], "sentSegmentedWithoutStopsStemmed": ["sinc", "color", "n't", "use", "caus", "bug", "'m", "inclin", "simpli", "remov", "variabl", "entir", "wonder", "present", "backward", "compat", "issu"]}, {"number": 24545, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@cvrebert Thoughts on that last part?", "sentSegmented": ["cvrebert", "thoughts", "on", "that", "last", "part"], "sentSegmentedWithoutStops": ["cvrebert", "thoughts", "last", "part"], "sentSegmentedWithoutStopsStemmed": ["cvrebert", "thought", "last", "part"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI1ODQxMDA5", "author": {"login": "mdo"}, "body": "Gah, that said, I could see leaving this as well since if you can customize the background, you should be able to customize the text color. Setting any color there though will present problems.\n\n---\n\nAs a side note to those following along, this is why we try to use unique classes on all the things:\n\n``` css\n/* No class, with leading parent class */\n.jumbotron h1 { \u2026 }\n\n/* Class, no leading parent */\n.jumbotron-heading { \u2026 }\n```\n\nIn the first example, we cannot use classes on the `h1` because that new rule is too specific. In the latter example, we can because they're on the same specificity level (so long as those text utility classes come after the jumbotron in our CSS.\n", "bodyText": "Gah, that said, I could see leaving this as well since if you can customize the background, you should be able to customize the text color. Setting any color there though will present problems.\n\nAs a side note to those following along, this is why we try to use unique classes on all the things:\n/* No class, with leading parent class */\n.jumbotron h1 { \u2026 }\n\n/* Class, no leading parent */\n.jumbotron-heading { \u2026 }\nIn the first example, we cannot use classes on the h1 because that new rule is too specific. In the latter example, we can because they're on the same specificity level (so long as those text utility classes come after the jumbotron in our CSS.", "bodyHTML": "<p>Gah, that said, I could see leaving this as well since if you can customize the background, you should be able to customize the text color. Setting any color there though will present problems.</p>\n<hr>\n<p>As a side note to those following along, this is why we try to use unique classes on all the things:</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-c\">/* No class, with leading parent class */</span>\n.<span class=\"pl-c1\">jumbotron</span> <span class=\"pl-ent\">h1</span> { \u2026 }\n\n<span class=\"pl-c\">/* Class, no leading parent */</span>\n.<span class=\"pl-c1\">jumbotron-heading</span> { \u2026 }</pre></div>\n<p>In the first example, we cannot use classes on the <code>h1</code> because that new rule is too specific. In the latter example, we can because they're on the same specificity level (so long as those text utility classes come after the jumbotron in our CSS.</p>", "createdAt": "2013-10-07T20:12:50Z", "publishedAt": "2013-10-07T20:12:50Z", "lastEditedAt": null, "updatedAt": "2013-10-07T20:13:07Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24546, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Gah, that said, I could see leaving this as well since if you can customize the background, you should be able to customize the text color.", "sentSegmented": ["gah", "that", "said", "i", "could", "see", "leaving", "this", "as", "well", "since", "if", "you", "can", "customize", "the", "background", "you", "should", "be", "able", "to", "customize", "the", "text", "color"], "sentSegmentedWithoutStops": ["gah", "said", "could", "see", "leaving", "well", "since", "customize", "background", "able", "customize", "text", "color"], "sentSegmentedWithoutStopsStemmed": ["gah", "said", "could", "see", "leav", "well", "sinc", "custom", "background", "abl", "custom", "text", "color"]}, {"number": 24547, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Setting any color there though will present problems.", "sentSegmented": ["setting", "any", "color", "there", "though", "will", "present", "problems"], "sentSegmentedWithoutStops": ["setting", "color", "though", "present", "problems"], "sentSegmentedWithoutStopsStemmed": ["set", "color", "though", "present", "problem"]}, {"number": 24548, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As a side note to those following along, this is why we try to use unique classes on all the things:", "sentSegmented": ["as", "a", "side", "note", "to", "those", "following", "along", "this", "is", "why", "we", "try", "to", "use", "unique", "classes", "on", "all", "the", "things"], "sentSegmentedWithoutStops": ["side", "note", "following", "along", "try", "use", "unique", "classes", "things"], "sentSegmentedWithoutStopsStemmed": ["side", "note", "follow", "along", "tri", "use", "uniqu", "class", "thing"]}, {"number": 24549, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "/* No class, with leading parent class */", "sentSegmented": ["no", "class", "with", "leading", "parent", "class"], "sentSegmentedWithoutStops": ["leading", "parent"], "sentSegmentedWithoutStopsStemmed": ["lead", "parent"]}, {"number": 24550, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".jumbotron h1 { \u2026 }", "sentSegmented": [".jumbotron", "h1"], "sentSegmentedWithoutStops": [".jumbotron"], "sentSegmentedWithoutStopsStemmed": [".jumbotron"]}, {"number": 24551, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "/* Class, no leading parent */", "sentSegmented": ["class", "no", "leading", "parent"], "sentSegmentedWithoutStops": ["leading", "parent"], "sentSegmentedWithoutStopsStemmed": ["lead", "parent"]}, {"number": 24552, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".jumbotron-heading { \u2026 }", "sentSegmented": [".jumbotron-heading"], "sentSegmentedWithoutStops": [".jumbotron-heading"], "sentSegmentedWithoutStopsStemmed": [".jumbotron-head"]}, {"number": 24553, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In the first example, we cannot use classes on the h1 because that new rule is too specific.", "sentSegmented": ["in", "the", "first", "example", "we", "can", "not", "use", "classes", "on", "the", "h1", "because", "that", "new", "rule", "is", "too", "specific"], "sentSegmentedWithoutStops": ["first", "example", "use", "classes", "h1", "new", "rule", "specific"], "sentSegmentedWithoutStopsStemmed": ["first", "exampl", "use", "class", "h1", "new", "rule", "specif"]}, {"number": 24554, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In the latter example, we can because they're on the same specificity level (so long as those text utility classes come after the jumbotron in our CSS.", "sentSegmented": ["in", "the", "latter", "example", "we", "can", "because", "they", "'re", "on", "the", "same", "specificity", "level", "so", "long", "as", "those", "text", "utility", "classes", "come", "after", "the", "jumbotron", "in", "our", "css"], "sentSegmentedWithoutStops": ["latter", "example", "'re", "specificity", "level", "long", "text", "utility", "classes", "come", "jumbotron", "css"], "sentSegmentedWithoutStopsStemmed": ["latter", "exampl", "'re", "specif", "level", "long", "text", "util", "class", "come", "jumbotron", "css"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI1ODQzNzM3", "author": {"login": "cvrebert"}, "body": "Sounds backwards-incompatible to me :cry: \n", "bodyText": "Sounds backwards-incompatible to me \ud83d\ude22", "bodyHTML": "<p>Sounds backwards-incompatible to me <g-emoji class=\"g-emoji\" alias=\"cry\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png\">\ud83d\ude22</g-emoji></p>", "createdAt": "2013-10-07T20:48:04Z", "publishedAt": "2013-10-07T20:48:04Z", "lastEditedAt": null, "updatedAt": "2013-10-07T20:48:04Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24555, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sounds backwards-incompatible to me \ud83d\ude22", "sentSegmented": ["sounds", "backwards-incompatible", "to", "me"], "sentSegmentedWithoutStops": ["sounds", "backwards-incompatible"], "sentSegmentedWithoutStopsStemmed": ["sound", "backwards-incompat"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI2MjA3NzY0", "author": {"login": "mdo"}, "body": "Yeah, for now we'll have to leave this as-is. Use inline elements to override for the time being.\n", "bodyText": "Yeah, for now we'll have to leave this as-is. Use inline elements to override for the time being.", "bodyHTML": "<p>Yeah, for now we'll have to leave this as-is. Use inline elements to override for the time being.</p>", "createdAt": "2013-10-12T22:54:07Z", "publishedAt": "2013-10-12T22:54:07Z", "lastEditedAt": null, "updatedAt": "2013-10-12T22:54:07Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24556, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Yeah, for now we'll have to leave this as-is.", "sentSegmented": ["yeah", "for", "now", "we", "'ll", "have", "to", "leave", "this", "as-is"], "sentSegmentedWithoutStops": ["yeah", "'ll", "leave", "as-is"], "sentSegmentedWithoutStopsStemmed": ["yeah", "'ll", "leav", "as-i"]}, {"number": 24557, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Use inline elements to override for the time being.", "sentSegmented": ["use", "inline", "elements", "to", "override", "for", "the", "time", "being"], "sentSegmentedWithoutStops": ["use", "inline", "elements", "override", "time"], "sentSegmentedWithoutStopsStemmed": ["use", "inlin", "element", "overrid", "time"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3OTI5MDM0", "author": {"login": "dzwillia"}, "body": "This issue still exists, however, I don't know that the above jumbotron example is the best way to show the issue.  A better (and far simpler) example would be the following:\n\n```\n<a href=\"#\" class=\"h2\">Heading 2</a>\n```\n\nIn Bootstrap 3.0.0, the behavior is correct: we have an anchor tag with the proper color and sizing, however in Bootstrap 3.0.2, .h1, h2, .h3, etc. all have \"color: inherit\" as a property which overrides the default color of the anchor tag.  The result is that we have the correct sizing from the .h2 class, but the color of the anchor tag has been overridded by the .h2 class \"color: inherit\" property.\n\nYou can see respective examples in Bootstrap 3.0.0 here:\n\nhttp://jsfiddle.net/MYrV4/3/\n\n...and in Bootstrap 3.0.2 here:\n\nhttp://jsfiddle.net/5g7WH/2/\n\nYes, you could nest the anchor tag as follows...\n\n```\n<span class=\"h2\"><a href=\"#\">Heading 2</a></span>\n```\n\n...but I'm pretty sure the end goal of creating these _REALLY NIFTY_ helper classes was to alleviate the need for such DOM bloat.\n\nBest solution I can see for now would most likely be to remove the \"color: inherit\" property on these classes (the way it was in BS 3.0.0).\n", "bodyText": "This issue still exists, however, I don't know that the above jumbotron example is the best way to show the issue.  A better (and far simpler) example would be the following:\n<a href=\"#\" class=\"h2\">Heading 2</a>\n\nIn Bootstrap 3.0.0, the behavior is correct: we have an anchor tag with the proper color and sizing, however in Bootstrap 3.0.2, .h1, h2, .h3, etc. all have \"color: inherit\" as a property which overrides the default color of the anchor tag.  The result is that we have the correct sizing from the .h2 class, but the color of the anchor tag has been overridded by the .h2 class \"color: inherit\" property.\nYou can see respective examples in Bootstrap 3.0.0 here:\nhttp://jsfiddle.net/MYrV4/3/\n...and in Bootstrap 3.0.2 here:\nhttp://jsfiddle.net/5g7WH/2/\nYes, you could nest the anchor tag as follows...\n<span class=\"h2\"><a href=\"#\">Heading 2</a></span>\n\n...but I'm pretty sure the end goal of creating these REALLY NIFTY helper classes was to alleviate the need for such DOM bloat.\nBest solution I can see for now would most likely be to remove the \"color: inherit\" property on these classes (the way it was in BS 3.0.0).", "bodyHTML": "<p>This issue still exists, however, I don't know that the above jumbotron example is the best way to show the issue.  A better (and far simpler) example would be the following:</p>\n<pre><code>&lt;a href=\"#\" class=\"h2\"&gt;Heading 2&lt;/a&gt;\n</code></pre>\n<p>In Bootstrap 3.0.0, the behavior is correct: we have an anchor tag with the proper color and sizing, however in Bootstrap 3.0.2, .h1, h2, .h3, etc. all have \"color: inherit\" as a property which overrides the default color of the anchor tag.  The result is that we have the correct sizing from the .h2 class, but the color of the anchor tag has been overridded by the .h2 class \"color: inherit\" property.</p>\n<p>You can see respective examples in Bootstrap 3.0.0 here:</p>\n<p><a rel=\"nofollow\" href=\"http://jsfiddle.net/MYrV4/3/\">http://jsfiddle.net/MYrV4/3/</a></p>\n<p>...and in Bootstrap 3.0.2 here:</p>\n<p><a rel=\"nofollow\" href=\"http://jsfiddle.net/5g7WH/2/\">http://jsfiddle.net/5g7WH/2/</a></p>\n<p>Yes, you could nest the anchor tag as follows...</p>\n<pre><code>&lt;span class=\"h2\"&gt;&lt;a href=\"#\"&gt;Heading 2&lt;/a&gt;&lt;/span&gt;\n</code></pre>\n<p>...but I'm pretty sure the end goal of creating these <em>REALLY NIFTY</em> helper classes was to alleviate the need for such DOM bloat.</p>\n<p>Best solution I can see for now would most likely be to remove the \"color: inherit\" property on these classes (the way it was in BS 3.0.0).</p>", "createdAt": "2013-11-07T00:48:40Z", "publishedAt": "2013-11-07T00:48:40Z", "lastEditedAt": null, "updatedAt": "2013-11-07T00:50:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24558, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This issue still exists, however, I don't know that the above jumbotron example is the best way to show the issue.", "sentSegmented": ["this", "issue", "still", "exists", "however", "i", "do", "n't", "know", "that", "the", "above", "jumbotron", "example", "is", "the", "best", "way", "to", "show", "the", "issue"], "sentSegmentedWithoutStops": ["issue", "still", "exists", "however", "n't", "know", "jumbotron", "example", "best", "way", "show", "issue"], "sentSegmentedWithoutStopsStemmed": ["issu", "still", "exist", "howev", "n't", "know", "jumbotron", "exampl", "best", "way", "show", "issu"]}, {"number": 24559, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A better (and far simpler) example would be the following:", "sentSegmented": ["a", "better", "and", "far", "simpler", "example", "would", "be", "the", "following"], "sentSegmentedWithoutStops": ["better", "far", "simpler", "example", "would", "following"], "sentSegmentedWithoutStopsStemmed": ["better", "far", "simpler", "exampl", "would", "follow"]}, {"number": 24560, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Heading 2", "sentSegmented": ["heading", "2"], "sentSegmentedWithoutStops": ["heading", "2"], "sentSegmentedWithoutStopsStemmed": ["head", "2"]}, {"number": 24561, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Bootstrap 3.0.0, the behavior is correct: we have an anchor tag with the proper color and sizing, however in Bootstrap 3.0.2, .h1, h2, .h3, etc.", "sentSegmented": ["in", "bootstrap", "3.0.0", "the", "behavior", "is", "correct", "we", "have", "an", "anchor", "tag", "with", "the", "proper", "color", "and", "sizing", "however", "in", "bootstrap", "3.0.2", ".h1", "h2", ".h3", "etc"], "sentSegmentedWithoutStops": ["bootstrap", "3.0.0", "behavior", "correct", "anchor", "tag", "proper", "color", "sizing", "however", "bootstrap", "3.0.2", ".h1", "h2", ".h3", "etc"], "sentSegmentedWithoutStopsStemmed": ["bootstrap", "3.0.0", "behavior", "correct", "anchor", "tag", "proper", "color", "size", "howev", "bootstrap", "3.0.2", ".h1", "h2", ".h3", "etc"]}, {"number": 24562, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "all have \"color: inherit\" as a property which overrides the default color of the anchor tag.", "sentSegmented": ["all", "have", "color", "inherit", "as", "a", "property", "which", "overrides", "the", "default", "color", "of", "the", "anchor", "tag"], "sentSegmentedWithoutStops": ["color", "inherit", "property", "overrides", "default", "color", "anchor", "tag"], "sentSegmentedWithoutStopsStemmed": ["color", "inherit", "properti", "overrid", "default", "color", "anchor", "tag"]}, {"number": 24563, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The result is that we have the correct sizing from the .h2 class, but the color of the anchor tag has been overridded by the .h2 class \"color: inherit\" property.", "sentSegmented": ["the", "result", "is", "that", "we", "have", "the", "correct", "sizing", "from", "the", ".h2", "class", "but", "the", "color", "of", "the", "anchor", "tag", "has", "been", "overridded", "by", "the", ".h2", "class", "color", "inherit", "property"], "sentSegmentedWithoutStops": ["result", "correct", "sizing", ".h2", "class", "color", "anchor", "tag", "overridded", ".h2", "class", "color", "inherit", "property"], "sentSegmentedWithoutStopsStemmed": ["result", "correct", "size", ".h2", "class", "color", "anchor", "tag", "overrid", ".h2", "class", "color", "inherit", "properti"]}, {"number": 24564, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You can see respective examples in Bootstrap 3.0.0 here:", "sentSegmented": ["you", "can", "see", "respective", "examples", "in", "bootstrap", "3.0.0", "here"], "sentSegmentedWithoutStops": ["see", "respective", "examples", "bootstrap", "3.0.0"], "sentSegmentedWithoutStopsStemmed": ["see", "respect", "exampl", "bootstrap", "3.0.0"]}, {"number": 24565, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://jsfiddle.net/MYrV4/3/", "sentSegmented": ["http", "//jsfiddle.net/myrv4/3/"], "sentSegmentedWithoutStops": ["http", "//jsfiddle.net/myrv4/3/"], "sentSegmentedWithoutStopsStemmed": ["http", "//jsfiddle.net/myrv4/3/"]}, {"number": 24566, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "...and in Bootstrap 3.0.2 here:", "sentSegmented": ["and", "in", "bootstrap", "3.0.2", "here"], "sentSegmentedWithoutStops": ["bootstrap", "3.0.2"], "sentSegmentedWithoutStopsStemmed": ["bootstrap", "3.0.2"]}, {"number": 24567, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://jsfiddle.net/5g7WH/2/", "sentSegmented": ["http", "//jsfiddle.net/5g7wh/2/"], "sentSegmentedWithoutStops": ["http", "//jsfiddle.net/5g7wh/2/"], "sentSegmentedWithoutStopsStemmed": ["http", "//jsfiddle.net/5g7wh/2/"]}, {"number": 24568, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Yes, you could nest the anchor tag as follows...", "sentSegmented": ["yes", "you", "could", "nest", "the", "anchor", "tag", "as", "follows"], "sentSegmentedWithoutStops": ["yes", "could", "nest", "anchor", "tag", "follows"], "sentSegmentedWithoutStopsStemmed": ["ye", "could", "nest", "anchor", "tag", "follow"]}, {"number": 24569, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Heading 2", "sentSegmented": ["heading", "2"], "sentSegmentedWithoutStops": ["heading", "2"], "sentSegmentedWithoutStopsStemmed": ["head", "2"]}, {"number": 24570, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "...but I'm pretty sure the end goal of creating these REALLY NIFTY helper classes was to alleviate the need for such DOM bloat.", "sentSegmented": ["but", "i", "'m", "pretty", "sure", "the", "end", "goal", "of", "creating", "these", "really", "nifty", "helper", "classes", "was", "to", "alleviate", "the", "need", "for", "such", "dom", "bloat"], "sentSegmentedWithoutStops": ["'m", "pretty", "sure", "end", "goal", "creating", "really", "nifty", "helper", "classes", "alleviate", "need", "dom", "bloat"], "sentSegmentedWithoutStopsStemmed": ["'m", "pretti", "sure", "end", "goal", "creat", "realli", "nifti", "helper", "class", "allevi", "need", "dom", "bloat"]}, {"number": 24571, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Best solution I can see for now would most likely be to remove the \"color: inherit\" property on these classes (the way it was in BS 3.0.0).", "sentSegmented": ["best", "solution", "i", "can", "see", "for", "now", "would", "most", "likely", "be", "to", "remove", "the", "color", "inherit", "property", "on", "these", "classes", "the", "way", "it", "was", "in", "bs", "3.0.0"], "sentSegmentedWithoutStops": ["best", "solution", "see", "would", "likely", "remove", "color", "inherit", "property", "classes", "way", "bs", "3.0.0"], "sentSegmentedWithoutStopsStemmed": ["best", "solut", "see", "would", "like", "remov", "color", "inherit", "properti", "class", "way", "bs", "3.0.0"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI3OTI5ODA4", "author": {"login": "cvrebert"}, "body": "Added to internal Bootstrap v4 planning issue for eventual consideration.\n", "bodyText": "Added to internal Bootstrap v4 planning issue for eventual consideration.", "bodyHTML": "<p>Added to internal Bootstrap v4 planning issue for eventual consideration.</p>", "createdAt": "2013-11-07T01:04:23Z", "publishedAt": "2013-11-07T01:04:23Z", "lastEditedAt": null, "updatedAt": "2013-11-07T01:04:23Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24572, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Added to internal Bootstrap v4 planning issue for eventual consideration.", "sentSegmented": ["added", "to", "internal", "bootstrap", "v4", "planning", "issue", "for", "eventual", "consideration"], "sentSegmentedWithoutStops": ["added", "internal", "bootstrap", "v4", "planning", "issue", "eventual", "consideration"], "sentSegmentedWithoutStopsStemmed": ["ad", "intern", "bootstrap", "v4", "plan", "issu", "eventu", "consider"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOAaos0A==", "hasNextPage": false}, "totalCount": 11}, "labels": {"edges": [{"node": {"createdAt": "2007-10-20T11:24:19Z", "name": "css"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["jumbotron", "h1", "inherits", "color", "which", "overrides", "text-success", "text-warning", "etc"], "titleSegmentedWithoutStops": ["jumbotron", "h1", "inherits", "color", "overrides", "text-success", "text-warning", "etc"], "titleSegmentedWithoutStopsStemmed": ["jumbotron", "h1", "inherit", "color", "overrid", "text-success", "text-warn", "etc"], "bodyParsed": [{"number": 24511, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".jumbotron h1 sets color to inherit, i'm not really sure why it would need to do this but the problem is that if you try and set text-success, text-warning, text-info, etc on the h1 it fails to set the color because of this.", "sentSegmented": [".jumbotron", "h1", "sets", "color", "to", "inherit", "i", "'m", "not", "really", "sure", "why", "it", "would", "need", "to", "do", "this", "but", "the", "problem", "is", "that", "if", "you", "try", "and", "set", "text-success", "text-warning", "text-info", "etc", "on", "the", "h1", "it", "fails", "to", "set", "the", "color", "because", "of", "this"], "sentSegmentedWithoutStops": [".jumbotron", "h1", "sets", "color", "inherit", "'m", "really", "sure", "would", "need", "problem", "try", "set", "text-success", "text-warning", "text-info", "etc", "h1", "fails", "set", "color"], "sentSegmentedWithoutStopsStemmed": [".jumbotron", "h1", "set", "color", "inherit", "'m", "realli", "sure", "would", "need", "problem", "tri", "set", "text-success", "text-warn", "text-info", "etc", "h1", "fail", "set", "color"]}, {"number": 24512, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I know i could probably simply wrap the h1 in a div with a text-* class but that's extra markup that i'm thinking we can avoid?", "sentSegmented": ["i", "know", "i", "could", "probably", "simply", "wrap", "the", "h1", "in", "a", "div", "with", "a", "text-", "class", "but", "that", "'s", "extra", "markup", "that", "i", "'m", "thinking", "we", "can", "avoid"], "sentSegmentedWithoutStops": ["know", "could", "probably", "simply", "wrap", "h1", "div", "text-", "class", "'s", "extra", "markup", "'m", "thinking", "avoid"], "sentSegmentedWithoutStopsStemmed": ["know", "could", "probabl", "simpli", "wrap", "h1", "div", "text-", "class", "'s", "extra", "markup", "'m", "think", "avoid"]}, {"number": 24513, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "!", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}