{"repository": {"owner": {"login": "google"}, "name": "gson", "forkCount": 3753, "stargazerCount": 19300, "createdAt": "2015-03-19T18:21:20Z", "updatedAt": "2021-03-18T03:15:40Z", "repositoryTopics": {"edges": []}, "languages": {"edges": [{"node": {"name": "Java"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDExOlB1bGxSZXF1ZXN0MzY1NzM3OTM=", "number": 649, "author": {"login": "inder123"}, "title": "Added support for duplicate keys in Map while deserializing. The last\u2026", "body": "\u2026 value overrides any previous values.\n", "bodyHTML": "<p>\u2026 value overrides any previous values.</p>", "bodyText": "\u2026 value overrides any previous values.", "assignees": {"edges": [{"node": {"login": "swankjesse"}}]}, "createdAt": "2015-05-30T23:23:52Z", "closed": false, "closedAt": null, "lastEditedAt": null, "publishedAt": "2015-05-30T23:23:52Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzA5ODc3Nw==", "author": {"login": "googlebot"}, "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "bodyText": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\ud83d\udcdd Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.", "bodyHTML": "<p>Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).</p>\n<p><g-emoji class=\"g-emoji\" alias=\"memo\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png\">\ud83d\udcdd</g-emoji> <strong>Please visit <a rel=\"nofollow\" href=\"https://cla.developers.google.com/\">https://cla.developers.google.com/</a> to sign.</strong></p>\n<p>Once you've signed, please reply here (e.g. <code>I signed it!</code>) and we'll verify.  Thanks.</p>\n<hr>\n<ul>\n<li>If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check <a href=\"https://cla.developers.google.com/clas\" rel=\"nofollow\">your existing CLA data</a> and verify that your <a href=\"https://help.github.com/articles/setting-your-email-in-git/\">email is set on your git commits</a>.</li>\n<li>If you signed the CLA as a corporation, please let us know the company's name.</li>\n</ul>\n", "createdAt": "2015-05-30T23:23:53Z", "publishedAt": "2015-05-30T23:23:53Z", "lastEditedAt": null, "updatedAt": "2015-05-30T23:23:53Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-08-02T16:44:22Z"}}]}, "bodyParsed": [{"number": 2, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks for your pull request.", "sentSegmented": ["thanks", "for", "your", "pull", "request"], "sentSegmentedWithoutStops": ["thanks", "pull", "request"], "sentSegmentedWithoutStopsStemmed": ["thank", "pull", "request"]}, {"number": 3, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).", "sentSegmented": ["it", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "google", "open", "source", "project", "in", "which", "case", "you", "'ll", "need", "to", "sign", "a", "contributor", "license", "agreement", "cla"], "sentSegmentedWithoutStops": ["looks", "like", "may", "first", "contribution", "google", "open", "source", "project", "case", "'ll", "need", "sign", "contributor", "license", "agreement", "cla"], "sentSegmentedWithoutStopsStemmed": ["look", "like", "may", "first", "contribut", "googl", "open", "sourc", "project", "case", "'ll", "need", "sign", "contributor", "licens", "agreement", "cla"]}, {"number": 4, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\ud83d\udcdd Please visit https://cla.developers.google.com/ to sign.", "sentSegmented": ["please", "visit", "https", "//cla.developers.google.com/", "to", "sign"], "sentSegmentedWithoutStops": ["please", "visit", "https", "//cla.developers.google.com/", "sign"], "sentSegmentedWithoutStopsStemmed": ["pleas", "visit", "http", "//cla.developers.google.com/", "sign"]}, {"number": 5, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Once you've signed, please reply here (e.g.", "sentSegmented": ["once", "you", "'ve", "signed", "please", "reply", "here", "e.g"], "sentSegmentedWithoutStops": ["'ve", "signed", "please", "reply", "e.g"], "sentSegmentedWithoutStopsStemmed": ["'ve", "sign", "pleas", "repli", "e.g"]}, {"number": 6, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I signed it!)", "sentSegmented": ["i", "signed", "it"], "sentSegmentedWithoutStops": ["signed"], "sentSegmentedWithoutStopsStemmed": ["sign"]}, {"number": 7, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and we'll verify.", "sentSegmented": ["and", "we", "'ll", "verify"], "sentSegmentedWithoutStops": ["'ll", "verify"], "sentSegmentedWithoutStopsStemmed": ["'ll", "verifi"]}, {"number": 8, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks.", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 9, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.", "sentSegmented": ["if", "you", "'ve", "already", "signed", "a", "cla", "it", "'s", "possible", "we", "do", "n't", "have", "your", "github", "username", "or", "you", "'re", "using", "a", "different", "email", "address"], "sentSegmentedWithoutStops": ["'ve", "already", "signed", "cla", "'s", "possible", "n't", "github", "username", "'re", "using", "different", "email", "address"], "sentSegmentedWithoutStopsStemmed": ["'ve", "alreadi", "sign", "cla", "'s", "possibl", "n't", "github", "usernam", "'re", "use", "differ", "email", "address"]}, {"number": 10, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Check your existing CLA data and verify that your email is set on your git commits.", "sentSegmented": ["check", "your", "existing", "cla", "data", "and", "verify", "that", "your", "email", "is", "set", "on", "your", "git", "commits"], "sentSegmentedWithoutStops": ["check", "existing", "cla", "data", "verify", "email", "set", "git", "commits"], "sentSegmentedWithoutStopsStemmed": ["check", "exist", "cla", "data", "verifi", "email", "set", "git", "commit"]}, {"number": 11, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you signed the CLA as a corporation, please let us know the company's name.", "sentSegmented": ["if", "you", "signed", "the", "cla", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "'s", "name"], "sentSegmentedWithoutStops": ["signed", "cla", "corporation", "please", "let", "us", "know", "company", "'s", "name"], "sentSegmentedWithoutStopsStemmed": ["sign", "cla", "corpor", "pleas", "let", "us", "know", "compani", "'s", "name"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzEwMDg3NQ==", "author": {"login": "inder123"}, "body": "I signed it\n\nOn Sat, May 30, 2015 at 4:23 PM, googlebot notifications@github.com wrote:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project, in which case you'll need to\n> sign a Contributor License Agreement (CLA).\n> \n> [image: :memo:] _Please visit https://cla.developers.google.com/\n> https://cla.developers.google.com/ to sign._\n> \n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> \n> ## verify. Thanks.\n> - If you've already signed a CLA, it's possible we don't have your\n>   GitHub username or you're using a different email address. Check your\n>   existing CLA data https://cla.developers.google.com/clas and verify\n>   that your email is set on your git commits\n>   https://help.github.com/articles/setting-your-email-in-git/.\n> - If you signed the CLA as a corporation, please let us know the\n>   company's name.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/649#issuecomment-107098777.\n\n## \n\nhttp://www.singhinderjeet.com/\n", "bodyText": "I signed it\nOn Sat, May 30, 2015 at 4:23 PM, googlebot notifications@github.com wrote:\n\nThanks for your pull request. It looks like this may be your first\ncontribution to a Google open source project, in which case you'll need to\nsign a Contributor License Agreement (CLA).\n[image: \ud83d\udcdd] Please visit https://cla.developers.google.com/\nhttps://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll\nverify. Thanks.\n\nIf you've already signed a CLA, it's possible we don't have your\nGitHub username or you're using a different email address. Check your\nexisting CLA data https://cla.developers.google.com/clas and verify\nthat your email is set on your git commits\nhttps://help.github.com/articles/setting-your-email-in-git/.\nIf you signed the CLA as a corporation, please let us know the\ncompany's name.\n\n\u2014\nReply to this email directly or view it on GitHub\n#649 (comment).\n\n\nhttp://www.singhinderjeet.com/", "bodyHTML": "<p>I signed it</p>\n<p>On Sat, May 30, 2015 at 4:23 PM, googlebot <a href=\"mailto:notifications@github.com\">notifications@github.com</a> wrote:</p>\n<blockquote>\n<p>Thanks for your pull request. It looks like this may be your first<br>\ncontribution to a Google open source project, in which case you'll need to<br>\nsign a Contributor License Agreement (CLA).</p>\n<p>[image: <g-emoji class=\"g-emoji\" alias=\"memo\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png\">\ud83d\udcdd</g-emoji>] <em>Please visit <a href=\"https://cla.developers.google.com/\" rel=\"nofollow\">https://cla.developers.google.com/</a><br>\n<a href=\"https://cla.developers.google.com/\" rel=\"nofollow\">https://cla.developers.google.com/</a> to sign.</em></p>\n<p>Once you've signed, please reply here (e.g. I signed it!) and we'll</p>\n<h2>verify. Thanks.</h2>\n<ul>\n<li>If you've already signed a CLA, it's possible we don't have your<br>\nGitHub username or you're using a different email address. Check your<br>\nexisting CLA data <a href=\"https://cla.developers.google.com/clas\" rel=\"nofollow\">https://cla.developers.google.com/clas</a> and verify<br>\nthat your email is set on your git commits<br>\n<a href=\"https://help.github.com/articles/setting-your-email-in-git/\">https://help.github.com/articles/setting-your-email-in-git/</a>.</li>\n<li>If you signed the CLA as a corporation, please let us know the<br>\ncompany's name.</li>\n</ul>\n<p>\u2014<br>\nReply to this email directly or view it on GitHub<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"82942277\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/649\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/649/hovercard?comment_id=107098777&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/649#issuecomment-107098777\">#649 (comment)</a>.</p>\n</blockquote>\n<h2></h2>\n<p><a rel=\"nofollow\" href=\"http://www.singhinderjeet.com/\">http://www.singhinderjeet.com/</a></p>", "createdAt": "2015-05-30T23:43:15Z", "publishedAt": "2015-05-30T23:43:15Z", "lastEditedAt": null, "updatedAt": "2015-05-30T23:43:15Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 12, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I signed it", "sentSegmented": ["i", "signed", "it"], "sentSegmentedWithoutStops": ["signed"], "sentSegmentedWithoutStopsStemmed": ["sign"]}, {"number": 13, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "On Sat, May 30, 2015 at 4:23 PM, googlebot notifications@github.com wrote:", "sentSegmented": ["on", "sat", "may", "30", "2015", "at", "4:23", "pm", "googlebot", "notifications", "github.com", "wrote"], "sentSegmentedWithoutStops": ["sat", "may", "30", "2015", "4:23", "pm", "googlebot", "notifications", "github.com", "wrote"], "sentSegmentedWithoutStopsStemmed": ["sat", "may", "30", "2015", "4:23", "pm", "googlebot", "notif", "github.com", "wrote"]}, {"number": 14, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Thanks for your pull request.", "sentSegmented": ["thanks", "for", "your", "pull", "request"], "sentSegmentedWithoutStops": ["thanks", "pull", "request"], "sentSegmentedWithoutStopsStemmed": ["thank", "pull", "request"]}, {"number": 15, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "It looks like this may be your first", "sentSegmented": ["it", "looks", "like", "this", "may", "be", "your", "first"], "sentSegmentedWithoutStops": ["looks", "like", "may", "first"], "sentSegmentedWithoutStopsStemmed": ["look", "like", "may", "first"]}, {"number": 16, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "contribution to a Google open source project, in which case you'll need to", "sentSegmented": ["contribution", "to", "a", "google", "open", "source", "project", "in", "which", "case", "you", "'ll", "need", "to"], "sentSegmentedWithoutStops": ["contribution", "google", "open", "source", "project", "case", "'ll", "need"], "sentSegmentedWithoutStopsStemmed": ["contribut", "googl", "open", "sourc", "project", "case", "'ll", "need"]}, {"number": 17, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "sign a Contributor License Agreement (CLA).", "sentSegmented": ["sign", "a", "contributor", "license", "agreement", "cla"], "sentSegmentedWithoutStops": ["sign", "contributor", "license", "agreement", "cla"], "sentSegmentedWithoutStopsStemmed": ["sign", "contributor", "licens", "agreement", "cla"]}, {"number": 18, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "[image: \ud83d\udcdd] Please visit https://cla.developers.google.com/", "sentSegmented": ["image", "please", "visit", "https", "//cla.developers.google.com/"], "sentSegmentedWithoutStops": ["image", "please", "visit", "https", "//cla.developers.google.com/"], "sentSegmentedWithoutStopsStemmed": ["imag", "pleas", "visit", "http", "//cla.developers.google.com/"]}, {"number": 19, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "https://cla.developers.google.com/ to sign.", "sentSegmented": ["https", "//cla.developers.google.com/", "to", "sign"], "sentSegmentedWithoutStops": ["https", "//cla.developers.google.com/", "sign"], "sentSegmentedWithoutStopsStemmed": ["http", "//cla.developers.google.com/", "sign"]}, {"number": 20, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Once you've signed, please reply here (e.g.", "sentSegmented": ["once", "you", "'ve", "signed", "please", "reply", "here", "e.g"], "sentSegmentedWithoutStops": ["'ve", "signed", "please", "reply", "e.g"], "sentSegmentedWithoutStopsStemmed": ["'ve", "sign", "pleas", "repli", "e.g"]}, {"number": 21, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "I signed it!)", "sentSegmented": ["i", "signed", "it"], "sentSegmentedWithoutStops": ["signed"], "sentSegmentedWithoutStopsStemmed": ["sign"]}, {"number": 22, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "and we'll", "sentSegmented": ["and", "we", "'ll"], "sentSegmentedWithoutStops": ["'ll"], "sentSegmentedWithoutStopsStemmed": ["'ll"]}, {"number": 23, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "verify.", "sentSegmented": ["verify"], "sentSegmentedWithoutStops": ["verify"], "sentSegmentedWithoutStopsStemmed": ["verifi"]}, {"number": 24, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Thanks.", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 25, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "If you've already signed a CLA, it's possible we don't have your", "sentSegmented": ["if", "you", "'ve", "already", "signed", "a", "cla", "it", "'s", "possible", "we", "do", "n't", "have", "your"], "sentSegmentedWithoutStops": ["'ve", "already", "signed", "cla", "'s", "possible", "n't"], "sentSegmentedWithoutStopsStemmed": ["'ve", "alreadi", "sign", "cla", "'s", "possibl", "n't"]}, {"number": 26, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "GitHub username or you're using a different email address.", "sentSegmented": ["github", "username", "or", "you", "'re", "using", "a", "different", "email", "address"], "sentSegmentedWithoutStops": ["github", "username", "'re", "using", "different", "email", "address"], "sentSegmentedWithoutStopsStemmed": ["github", "usernam", "'re", "use", "differ", "email", "address"]}, {"number": 27, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Check your", "sentSegmented": ["check", "your"], "sentSegmentedWithoutStops": ["check"], "sentSegmentedWithoutStopsStemmed": ["check"]}, {"number": 28, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "existing CLA data https://cla.developers.google.com/clas and verify", "sentSegmented": ["existing", "cla", "data", "https", "//cla.developers.google.com/clas", "and", "verify"], "sentSegmentedWithoutStops": ["existing", "cla", "data", "https", "//cla.developers.google.com/clas", "verify"], "sentSegmentedWithoutStopsStemmed": ["exist", "cla", "data", "http", "//cla.developers.google.com/cla", "verifi"]}, {"number": 29, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "that your email is set on your git commits", "sentSegmented": ["that", "your", "email", "is", "set", "on", "your", "git", "commits"], "sentSegmentedWithoutStops": ["email", "set", "git", "commits"], "sentSegmentedWithoutStopsStemmed": ["email", "set", "git", "commit"]}, {"number": 30, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "https://help.github.com/articles/setting-your-email-in-git/.", "sentSegmented": ["https", "//help.github.com/articles/setting-your-email-in-git/"], "sentSegmentedWithoutStops": ["https", "//help.github.com/articles/setting-your-email-in-git/"], "sentSegmentedWithoutStopsStemmed": ["http", "//help.github.com/articles/setting-your-email-in-git/"]}, {"number": 31, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "If you signed the CLA as a corporation, please let us know the", "sentSegmented": ["if", "you", "signed", "the", "cla", "as", "a", "corporation", "please", "let", "us", "know", "the"], "sentSegmentedWithoutStops": ["signed", "cla", "corporation", "please", "let", "us", "know"], "sentSegmentedWithoutStopsStemmed": ["sign", "cla", "corpor", "pleas", "let", "us", "know"]}, {"number": 32, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "company's name.", "sentSegmented": ["company", "'s", "name"], "sentSegmentedWithoutStops": ["company", "'s", "name"], "sentSegmentedWithoutStopsStemmed": ["compani", "'s", "name"]}, {"number": 33, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "\u2014", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 34, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Reply to this email directly or view it on GitHub", "sentSegmented": ["reply", "to", "this", "email", "directly", "or", "view", "it", "on", "github"], "sentSegmentedWithoutStops": ["reply", "email", "directly", "view", "github"], "sentSegmentedWithoutStopsStemmed": ["repli", "email", "directli", "view", "github"]}, {"number": 35, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "#649 (comment).", "sentSegmented": ["649", "comment"], "sentSegmentedWithoutStops": ["649", "comment"], "sentSegmentedWithoutStopsStemmed": ["649", "comment"]}, {"number": 36, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://www.singhinderjeet.com/", "sentSegmented": ["http", "//www.singhinderjeet.com/"], "sentSegmentedWithoutStops": ["http", "//www.singhinderjeet.com/"], "sentSegmentedWithoutStopsStemmed": ["http", "//www.singhinderjeet.com/"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzEwMDg3Ng==", "author": {"login": "googlebot"}, "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "bodyText": "CLAs look good, thanks!", "bodyHTML": "<p>CLAs look good, thanks!</p>\n", "createdAt": "2015-05-30T23:43:16Z", "publishedAt": "2015-05-30T23:43:16Z", "lastEditedAt": null, "updatedAt": "2015-05-30T23:43:16Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 37, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "CLAs look good, thanks!", "sentSegmented": ["clas", "look", "good", "thanks"], "sentSegmentedWithoutStops": ["clas", "look", "good", "thanks"], "sentSegmentedWithoutStopsStemmed": ["cla", "look", "good", "thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzExMjYxNQ==", "author": {"login": "swankjesse"}, "body": "I think this is a bad idea. It should reject invalid JSON.\n", "bodyText": "I think this is a bad idea. It should reject invalid JSON.", "bodyHTML": "<p>I think this is a bad idea. It should reject invalid JSON.</p>", "createdAt": "2015-05-31T02:27:23Z", "publishedAt": "2015-05-31T02:27:23Z", "lastEditedAt": null, "updatedAt": "2015-05-31T02:27:23Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 38, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think this is a bad idea.", "sentSegmented": ["i", "think", "this", "is", "a", "bad", "idea"], "sentSegmentedWithoutStops": ["think", "bad", "idea"], "sentSegmentedWithoutStopsStemmed": ["think", "bad", "idea"]}, {"number": 39, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It should reject invalid JSON.", "sentSegmented": ["it", "should", "reject", "invalid", "json"], "sentSegmentedWithoutStops": ["reject", "invalid", "json"], "sentSegmentedWithoutStopsStemmed": ["reject", "invalid", "json"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzEyODQzMQ==", "author": {"login": "inder123"}, "body": "Jesse: Can you point me to the spec that says that it is invalid JSON?\nAlso, we do support it for objects. Why treat it differently for Maps?\n", "bodyText": "Jesse: Can you point me to the spec that says that it is invalid JSON?\nAlso, we do support it for objects. Why treat it differently for Maps?", "bodyHTML": "<p>Jesse: Can you point me to the spec that says that it is invalid JSON?<br>\nAlso, we do support it for objects. Why treat it differently for Maps?</p>", "createdAt": "2015-05-31T05:13:18Z", "publishedAt": "2015-05-31T05:13:18Z", "lastEditedAt": null, "updatedAt": "2015-05-31T05:13:18Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 40, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Jesse: Can you point me to the spec that says that it is invalid JSON?", "sentSegmented": ["jesse", "can", "you", "point", "me", "to", "the", "spec", "that", "says", "that", "it", "is", "invalid", "json"], "sentSegmentedWithoutStops": ["jesse", "point", "spec", "says", "invalid", "json"], "sentSegmentedWithoutStopsStemmed": ["jess", "point", "spec", "say", "invalid", "json"]}, {"number": 41, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Also, we do support it for objects.", "sentSegmented": ["also", "we", "do", "support", "it", "for", "objects"], "sentSegmentedWithoutStops": ["also", "support", "objects"], "sentSegmentedWithoutStopsStemmed": ["also", "support", "object"]}, {"number": 42, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Why treat it differently for Maps?", "sentSegmented": ["why", "treat", "it", "differently", "for", "maps"], "sentSegmentedWithoutStops": ["treat", "differently", "maps"], "sentSegmentedWithoutStopsStemmed": ["treat", "differ", "map"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzY1NDUwMQ==", "author": {"login": "inder123"}, "body": "@swankjesse I think Gson should be lenient in accepting JSON. Also, I can't seem to find spec that says that duplicate keys are not allowed.\n", "bodyText": "@swankjesse I think Gson should be lenient in accepting JSON. Also, I can't seem to find spec that says that duplicate keys are not allowed.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/swankjesse/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/swankjesse\">@swankjesse</a> I think Gson should be lenient in accepting JSON. Also, I can't seem to find spec that says that duplicate keys are not allowed.</p>", "createdAt": "2015-06-01T17:57:55Z", "publishedAt": "2015-06-01T17:57:55Z", "lastEditedAt": null, "updatedAt": "2015-06-01T17:57:55Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 43, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@swankjesse I think Gson should be lenient in accepting JSON.", "sentSegmented": ["swankjesse", "i", "think", "gson", "should", "be", "lenient", "in", "accepting", "json"], "sentSegmentedWithoutStops": ["swankjesse", "think", "gson", "lenient", "accepting", "json"], "sentSegmentedWithoutStopsStemmed": ["swankjess", "think", "gson", "lenient", "accept", "json"]}, {"number": 44, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Also, I can't seem to find spec that says that duplicate keys are not allowed.", "sentSegmented": ["also", "i", "ca", "n't", "seem", "to", "find", "spec", "that", "says", "that", "duplicate", "keys", "are", "not", "allowed"], "sentSegmentedWithoutStops": ["also", "ca", "n't", "seem", "find", "spec", "says", "duplicate", "keys", "allowed"], "sentSegmentedWithoutStopsStemmed": ["also", "ca", "n't", "seem", "find", "spec", "say", "duplic", "key", "allow"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzY1NTU3Nw==", "author": {"login": "swankjesse"}, "body": "From the [JSON RFC](https://tools.ietf.org/html/rfc7159):\n\n> An object whose names are all unique is interoperable in the sense\n> that all software implementations receiving that object will agree on\n> the name-value mappings.  When the names within an object are not\n> unique, the behavior of software that receives such an object is\n> unpredictable.  Many implementations report the last name/value pair\n> only.  Other implementations report an error or fail to parse the\n> object, and some implementations report all of the name/value pairs,\n> including duplicates.\n\nDuplicate keys is a potential security hole, and I'm against them. \n", "bodyText": "From the JSON RFC:\n\nAn object whose names are all unique is interoperable in the sense\nthat all software implementations receiving that object will agree on\nthe name-value mappings.  When the names within an object are not\nunique, the behavior of software that receives such an object is\nunpredictable.  Many implementations report the last name/value pair\nonly.  Other implementations report an error or fail to parse the\nobject, and some implementations report all of the name/value pairs,\nincluding duplicates.\n\nDuplicate keys is a potential security hole, and I'm against them.", "bodyHTML": "<p>From the <a href=\"https://tools.ietf.org/html/rfc7159\" rel=\"nofollow\">JSON RFC</a>:</p>\n<blockquote>\n<p>An object whose names are all unique is interoperable in the sense<br>\nthat all software implementations receiving that object will agree on<br>\nthe name-value mappings.  When the names within an object are not<br>\nunique, the behavior of software that receives such an object is<br>\nunpredictable.  Many implementations report the last name/value pair<br>\nonly.  Other implementations report an error or fail to parse the<br>\nobject, and some implementations report all of the name/value pairs,<br>\nincluding duplicates.</p>\n</blockquote>\n<p>Duplicate keys is a potential security hole, and I'm against them.</p>", "createdAt": "2015-06-01T18:00:59Z", "publishedAt": "2015-06-01T18:00:59Z", "lastEditedAt": null, "updatedAt": "2015-06-01T18:01:20Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 45, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "From the JSON RFC:", "sentSegmented": ["from", "the", "json", "rfc"], "sentSegmentedWithoutStops": ["json", "rfc"], "sentSegmentedWithoutStopsStemmed": ["json", "rfc"]}, {"number": 46, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "An object whose names are all unique is interoperable in the sense", "sentSegmented": ["an", "object", "whose", "names", "are", "all", "unique", "is", "interoperable", "in", "the", "sense"], "sentSegmentedWithoutStops": ["object", "whose", "names", "unique", "interoperable", "sense"], "sentSegmentedWithoutStopsStemmed": ["object", "whose", "name", "uniqu", "interoper", "sens"]}, {"number": 47, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "that all software implementations receiving that object will agree on", "sentSegmented": ["that", "all", "software", "implementations", "receiving", "that", "object", "will", "agree", "on"], "sentSegmentedWithoutStops": ["software", "implementations", "receiving", "object", "agree"], "sentSegmentedWithoutStopsStemmed": ["softwar", "implement", "receiv", "object", "agre"]}, {"number": 48, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "the name-value mappings.", "sentSegmented": ["the", "name-value", "mappings"], "sentSegmentedWithoutStops": ["name-value", "mappings"], "sentSegmentedWithoutStopsStemmed": ["name-valu", "map"]}, {"number": 49, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "When the names within an object are not", "sentSegmented": ["when", "the", "names", "within", "an", "object", "are", "not"], "sentSegmentedWithoutStops": ["names", "within", "object"], "sentSegmentedWithoutStopsStemmed": ["name", "within", "object"]}, {"number": 50, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "unique, the behavior of software that receives such an object is", "sentSegmented": ["unique", "the", "behavior", "of", "software", "that", "receives", "such", "an", "object", "is"], "sentSegmentedWithoutStops": ["unique", "behavior", "software", "receives", "object"], "sentSegmentedWithoutStopsStemmed": ["uniqu", "behavior", "softwar", "receiv", "object"]}, {"number": 51, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "unpredictable.", "sentSegmented": ["unpredictable"], "sentSegmentedWithoutStops": ["unpredictable"], "sentSegmentedWithoutStopsStemmed": ["unpredict"]}, {"number": 52, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Many implementations report the last name/value pair", "sentSegmented": ["many", "implementations", "report", "the", "last", "name/value", "pair"], "sentSegmentedWithoutStops": ["many", "implementations", "report", "last", "name/value", "pair"], "sentSegmentedWithoutStopsStemmed": ["mani", "implement", "report", "last", "name/valu", "pair"]}, {"number": 53, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "only.", "sentSegmented": ["only"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 54, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Other implementations report an error or fail to parse the", "sentSegmented": ["other", "implementations", "report", "an", "error", "or", "fail", "to", "parse", "the"], "sentSegmentedWithoutStops": ["implementations", "report", "error", "fail", "parse"], "sentSegmentedWithoutStopsStemmed": ["implement", "report", "error", "fail", "pars"]}, {"number": 55, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "object, and some implementations report all of the name/value pairs,", "sentSegmented": ["object", "and", "some", "implementations", "report", "all", "of", "the", "name/value", "pairs"], "sentSegmentedWithoutStops": ["object", "implementations", "report", "name/value", "pairs"], "sentSegmentedWithoutStopsStemmed": ["object", "implement", "report", "name/valu", "pair"]}, {"number": 56, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "including duplicates.", "sentSegmented": ["including", "duplicates"], "sentSegmentedWithoutStops": ["including", "duplicates"], "sentSegmentedWithoutStopsStemmed": ["includ", "duplic"]}, {"number": 57, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Duplicate keys is a potential security hole, and I'm against them.", "sentSegmented": ["duplicate", "keys", "is", "a", "potential", "security", "hole", "and", "i", "'m", "against", "them"], "sentSegmentedWithoutStops": ["duplicate", "keys", "potential", "security", "hole", "'m"], "sentSegmentedWithoutStopsStemmed": ["duplic", "key", "potenti", "secur", "hole", "'m"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzY1NzY0OA==", "author": {"login": "inder123"}, "body": "@swankjesse The spec says \"The names within an object SHOULD be unique.\"  It is a SHOULD not a MUST. In fact, the para you quote implies that names can be duplicate, and many implementations pick the last name/value.\n\nCan you elaborate on the security hole specific to this case? Clients should always validate user input anyway, I don't see duplicate keys causing any extra issues.\n\nOverall, for Gson, we are generally lenient while receiving input. In fact, we already do that for duplicate keys in JsonObject. Applying a higher level of strictness to Map sounds a little arbitrary.\n", "bodyText": "@swankjesse The spec says \"The names within an object SHOULD be unique.\"  It is a SHOULD not a MUST. In fact, the para you quote implies that names can be duplicate, and many implementations pick the last name/value.\nCan you elaborate on the security hole specific to this case? Clients should always validate user input anyway, I don't see duplicate keys causing any extra issues.\nOverall, for Gson, we are generally lenient while receiving input. In fact, we already do that for duplicate keys in JsonObject. Applying a higher level of strictness to Map sounds a little arbitrary.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/swankjesse/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/swankjesse\">@swankjesse</a> The spec says \"The names within an object SHOULD be unique.\"  It is a SHOULD not a MUST. In fact, the para you quote implies that names can be duplicate, and many implementations pick the last name/value.</p>\n<p>Can you elaborate on the security hole specific to this case? Clients should always validate user input anyway, I don't see duplicate keys causing any extra issues.</p>\n<p>Overall, for Gson, we are generally lenient while receiving input. In fact, we already do that for duplicate keys in JsonObject. Applying a higher level of strictness to Map sounds a little arbitrary.</p>", "createdAt": "2015-06-01T18:08:08Z", "publishedAt": "2015-06-01T18:08:08Z", "lastEditedAt": null, "updatedAt": "2015-06-01T18:08:08Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 58, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@swankjesse The spec says \"The names within an object SHOULD be unique.\"", "sentSegmented": ["swankjesse", "the", "spec", "says", "the", "names", "within", "an", "object", "should", "be", "unique"], "sentSegmentedWithoutStops": ["swankjesse", "spec", "says", "names", "within", "object", "unique"], "sentSegmentedWithoutStopsStemmed": ["swankjess", "spec", "say", "name", "within", "object", "uniqu"]}, {"number": 59, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It is a SHOULD not a MUST.", "sentSegmented": ["it", "is", "a", "should", "not", "a", "must"], "sentSegmentedWithoutStops": ["must"], "sentSegmentedWithoutStopsStemmed": ["must"]}, {"number": 60, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In fact, the para you quote implies that names can be duplicate, and many implementations pick the last name/value.", "sentSegmented": ["in", "fact", "the", "para", "you", "quote", "implies", "that", "names", "can", "be", "duplicate", "and", "many", "implementations", "pick", "the", "last", "name/value"], "sentSegmentedWithoutStops": ["fact", "para", "quote", "implies", "names", "duplicate", "many", "implementations", "pick", "last", "name/value"], "sentSegmentedWithoutStopsStemmed": ["fact", "para", "quot", "impli", "name", "duplic", "mani", "implement", "pick", "last", "name/valu"]}, {"number": 61, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Can you elaborate on the security hole specific to this case?", "sentSegmented": ["can", "you", "elaborate", "on", "the", "security", "hole", "specific", "to", "this", "case"], "sentSegmentedWithoutStops": ["elaborate", "security", "hole", "specific", "case"], "sentSegmentedWithoutStopsStemmed": ["elabor", "secur", "hole", "specif", "case"]}, {"number": 62, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Clients should always validate user input anyway, I don't see duplicate keys causing any extra issues.", "sentSegmented": ["clients", "should", "always", "validate", "user", "input", "anyway", "i", "do", "n't", "see", "duplicate", "keys", "causing", "any", "extra", "issues"], "sentSegmentedWithoutStops": ["clients", "always", "validate", "user", "input", "anyway", "n't", "see", "duplicate", "keys", "causing", "extra", "issues"], "sentSegmentedWithoutStopsStemmed": ["client", "alway", "valid", "user", "input", "anyway", "n't", "see", "duplic", "key", "caus", "extra", "issu"]}, {"number": 63, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Overall, for Gson, we are generally lenient while receiving input.", "sentSegmented": ["overall", "for", "gson", "we", "are", "generally", "lenient", "while", "receiving", "input"], "sentSegmentedWithoutStops": ["overall", "gson", "generally", "lenient", "receiving", "input"], "sentSegmentedWithoutStopsStemmed": ["overal", "gson", "gener", "lenient", "receiv", "input"]}, {"number": 64, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In fact, we already do that for duplicate keys in JsonObject.", "sentSegmented": ["in", "fact", "we", "already", "do", "that", "for", "duplicate", "keys", "in", "jsonobject"], "sentSegmentedWithoutStops": ["fact", "already", "duplicate", "keys", "jsonobject"], "sentSegmentedWithoutStopsStemmed": ["fact", "alreadi", "duplic", "key", "jsonobject"]}, {"number": 65, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Applying a higher level of strictness to Map sounds a little arbitrary.", "sentSegmented": ["applying", "a", "higher", "level", "of", "strictness", "to", "map", "sounds", "a", "little", "arbitrary"], "sentSegmentedWithoutStops": ["applying", "higher", "level", "strictness", "map", "sounds", "little", "arbitrary"], "sentSegmentedWithoutStopsStemmed": ["appli", "higher", "level", "strict", "map", "sound", "littl", "arbitrari"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzY5MjcwNg==", "author": {"login": "swankjesse"}, "body": "The security hole is that you validate the first occurrence of a value, but use the last occurrence, or vice-versa. For example, you might write code like this:\n\n```\n  public boolean userHasLimitedPermissions(String json) {\n    JsonReader r = new JsonReader(...);\n    r.beginObject();\n    while (r.hasNext()) {\n      String key = r.nextKey();\n      String value = r.nextString();\n      if (key.equals(\"userid\")) return !value.equals(\"root\");\n    }\n    r.endObject();\n  }\n```\n\nBugs like this happen all the time. Most recently the Android code that checks signatures on `.apk` files failed on this.\n\nIt's a bug that we permit duplicates in JsonObject, but a more defensible one: checking the alternative there is more work.\n\nHere's a better question: who wants this? Nobody sane should be using JSON that has duplicated keys.\n", "bodyText": "The security hole is that you validate the first occurrence of a value, but use the last occurrence, or vice-versa. For example, you might write code like this:\n  public boolean userHasLimitedPermissions(String json) {\n    JsonReader r = new JsonReader(...);\n    r.beginObject();\n    while (r.hasNext()) {\n      String key = r.nextKey();\n      String value = r.nextString();\n      if (key.equals(\"userid\")) return !value.equals(\"root\");\n    }\n    r.endObject();\n  }\n\nBugs like this happen all the time. Most recently the Android code that checks signatures on .apk files failed on this.\nIt's a bug that we permit duplicates in JsonObject, but a more defensible one: checking the alternative there is more work.\nHere's a better question: who wants this? Nobody sane should be using JSON that has duplicated keys.", "bodyHTML": "<p>The security hole is that you validate the first occurrence of a value, but use the last occurrence, or vice-versa. For example, you might write code like this:</p>\n<pre><code>  public boolean userHasLimitedPermissions(String json) {\n    JsonReader r = new JsonReader(...);\n    r.beginObject();\n    while (r.hasNext()) {\n      String key = r.nextKey();\n      String value = r.nextString();\n      if (key.equals(\"userid\")) return !value.equals(\"root\");\n    }\n    r.endObject();\n  }\n</code></pre>\n<p>Bugs like this happen all the time. Most recently the Android code that checks signatures on <code>.apk</code> files failed on this.</p>\n<p>It's a bug that we permit duplicates in JsonObject, but a more defensible one: checking the alternative there is more work.</p>\n<p>Here's a better question: who wants this? Nobody sane should be using JSON that has duplicated keys.</p>", "createdAt": "2015-06-01T20:09:02Z", "publishedAt": "2015-06-01T20:09:02Z", "lastEditedAt": null, "updatedAt": "2015-06-01T20:09:02Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 66, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The security hole is that you validate the first occurrence of a value, but use the last occurrence, or vice-versa.", "sentSegmented": ["the", "security", "hole", "is", "that", "you", "validate", "the", "first", "occurrence", "of", "a", "value", "but", "use", "the", "last", "occurrence", "or", "vice-versa"], "sentSegmentedWithoutStops": ["security", "hole", "validate", "first", "occurrence", "value", "use", "last", "occurrence", "vice-versa"], "sentSegmentedWithoutStopsStemmed": ["secur", "hole", "valid", "first", "occurr", "valu", "use", "last", "occurr", "vice-versa"]}, {"number": 67, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For example, you might write code like this:", "sentSegmented": ["for", "example", "you", "might", "write", "code", "like", "this"], "sentSegmentedWithoutStops": ["example", "might", "write", "code", "like"], "sentSegmentedWithoutStopsStemmed": ["exampl", "might", "write", "code", "like"]}, {"number": 68, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public boolean userHasLimitedPermissions(String json) {", "sentSegmented": ["public", "boolean", "userhaslimitedpermissions", "string", "json"], "sentSegmentedWithoutStops": ["userhaslimitedpermissions", "string", "json"], "sentSegmentedWithoutStopsStemmed": ["userhaslimitedpermiss", "string", "json"]}, {"number": 69, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    JsonReader r = new JsonReader(...);", "sentSegmented": ["jsonreader", "r", "new", "jsonreader"], "sentSegmentedWithoutStops": ["jsonreader", "r", "jsonreader"], "sentSegmentedWithoutStopsStemmed": ["jsonread", "r", "jsonread"]}, {"number": 70, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    r.beginObject();", "sentSegmented": ["r.beginobject"], "sentSegmentedWithoutStops": ["r.beginobject"], "sentSegmentedWithoutStopsStemmed": ["r.beginobject"]}, {"number": 71, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    while (r.hasNext()) {", "sentSegmented": ["while", "r.hasnext"], "sentSegmentedWithoutStops": ["r.hasnext"], "sentSegmentedWithoutStopsStemmed": ["r.hasnext"]}, {"number": 72, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      String key = r.nextKey();", "sentSegmented": ["string", "key", "r.nextkey"], "sentSegmentedWithoutStops": ["string", "key", "r.nextkey"], "sentSegmentedWithoutStopsStemmed": ["string", "key", "r.nextkey"]}, {"number": 73, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      String value = r.nextString();", "sentSegmented": ["string", "value", "r.nextstring"], "sentSegmentedWithoutStops": ["string", "value", "r.nextstring"], "sentSegmentedWithoutStopsStemmed": ["string", "valu", "r.nextstr"]}, {"number": 74, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      if (key.equals(\"userid\")) return !value.equals(\"root\");", "sentSegmented": ["if", "key.equals", "userid", "return", "value.equals", "root"], "sentSegmentedWithoutStops": ["key.equals", "userid", "value.equals", "root"], "sentSegmentedWithoutStopsStemmed": ["key.equ", "userid", "value.equ", "root"]}, {"number": 75, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 76, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    r.endObject();", "sentSegmented": ["r.endobject"], "sentSegmentedWithoutStops": ["r.endobject"], "sentSegmentedWithoutStopsStemmed": ["r.endobject"]}, {"number": 77, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "  }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 78, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Bugs like this happen all the time.", "sentSegmented": ["bugs", "like", "this", "happen", "all", "the", "time"], "sentSegmentedWithoutStops": ["bugs", "like", "happen", "time"], "sentSegmentedWithoutStopsStemmed": ["bug", "like", "happen", "time"]}, {"number": 79, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Most recently the Android code that checks signatures on .apk files failed on this.", "sentSegmented": ["most", "recently", "the", "android", "code", "that", "checks", "signatures", "on", ".apk", "files", "failed", "on", "this"], "sentSegmentedWithoutStops": ["recently", "android", "code", "checks", "signatures", ".apk", "files", "failed"], "sentSegmentedWithoutStopsStemmed": ["recent", "android", "code", "check", "signatur", ".apk", "file", "fail"]}, {"number": 80, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's a bug that we permit duplicates in JsonObject, but a more defensible one: checking the alternative there is more work.", "sentSegmented": ["it", "'s", "a", "bug", "that", "we", "permit", "duplicates", "in", "jsonobject", "but", "a", "more", "defensible", "one", "checking", "the", "alternative", "there", "is", "more", "work"], "sentSegmentedWithoutStops": ["'s", "bug", "permit", "duplicates", "jsonobject", "defensible", "one", "checking", "alternative", "work"], "sentSegmentedWithoutStopsStemmed": ["'s", "bug", "permit", "duplic", "jsonobject", "defens", "one", "check", "altern", "work"]}, {"number": 81, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Here's a better question: who wants this?", "sentSegmented": ["here", "'s", "a", "better", "question", "who", "wants", "this"], "sentSegmentedWithoutStops": ["'s", "better", "question", "wants"], "sentSegmentedWithoutStopsStemmed": ["'s", "better", "question", "want"]}, {"number": 82, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Nobody sane should be using JSON that has duplicated keys.", "sentSegmented": ["nobody", "sane", "should", "be", "using", "json", "that", "has", "duplicated", "keys"], "sentSegmentedWithoutStops": ["nobody", "sane", "using", "json", "duplicated", "keys"], "sentSegmentedWithoutStopsStemmed": ["nobodi", "sane", "use", "json", "duplic", "key"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzNDMwNDUzMA==", "author": {"login": "trothwell"}, "body": "What is status of this commit? Will Gson have ability to control duplicated key behavior?\n", "bodyText": "What is status of this commit? Will Gson have ability to control duplicated key behavior?", "bodyHTML": "<p>What is status of this commit? Will Gson have ability to control duplicated key behavior?</p>", "createdAt": "2016-07-21T16:15:37Z", "publishedAt": "2016-07-21T16:15:37Z", "lastEditedAt": null, "updatedAt": "2016-07-21T16:15:37Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 83, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What is status of this commit?", "sentSegmented": ["what", "is", "status", "of", "this", "commit"], "sentSegmentedWithoutStops": ["status", "commit"], "sentSegmentedWithoutStopsStemmed": ["statu", "commit"]}, {"number": 84, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Will Gson have ability to control duplicated key behavior?", "sentSegmented": ["will", "gson", "have", "ability", "to", "control", "duplicated", "key", "behavior"], "sentSegmentedWithoutStops": ["gson", "ability", "control", "duplicated", "key", "behavior"], "sentSegmentedWithoutStopsStemmed": ["gson", "abil", "control", "duplic", "key", "behavior"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI0ODI3ODEzMg==", "author": {"login": "svetob"}, "body": "@swankjesse Someone who wants this is me - for example recent versions of the RabbitMQ management API have a bug where duplicate keys are, in fact, returned: https://github.com/rabbitmq/rabbitmq-management/issues/278 This causes our deserialisation with GSON to fail. It has since been fixed, but we need to support all versions in our library.\n\nIn the real world, you can't always control what data you get, but might still need to be able to handle it somehow.\n\nIf GSON cannot support this, we'll need to switch library, which would be a shame since GSON is otherwise convenient and easy to work with. So either an option to fail versus ignore duplicates, or changing the current behaviour, would be preferable.\n", "bodyText": "@swankjesse Someone who wants this is me - for example recent versions of the RabbitMQ management API have a bug where duplicate keys are, in fact, returned: rabbitmq/rabbitmq-management#278 This causes our deserialisation with GSON to fail. It has since been fixed, but we need to support all versions in our library.\nIn the real world, you can't always control what data you get, but might still need to be able to handle it somehow.\nIf GSON cannot support this, we'll need to switch library, which would be a shame since GSON is otherwise convenient and easy to work with. So either an option to fail versus ignore duplicates, or changing the current behaviour, would be preferable.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/swankjesse/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/swankjesse\">@swankjesse</a> Someone who wants this is me - for example recent versions of the RabbitMQ management API have a bug where duplicate keys are, in fact, returned: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"171821179\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rabbitmq/rabbitmq-management/issues/278\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rabbitmq/rabbitmq-management/issues/278/hovercard\" href=\"https://github.com/rabbitmq/rabbitmq-management/issues/278\">rabbitmq/rabbitmq-management#278</a> This causes our deserialisation with GSON to fail. It has since been fixed, but we need to support all versions in our library.</p>\n<p>In the real world, you can't always control what data you get, but might still need to be able to handle it somehow.</p>\n<p>If GSON cannot support this, we'll need to switch library, which would be a shame since GSON is otherwise convenient and easy to work with. So either an option to fail versus ignore duplicates, or changing the current behaviour, would be preferable.</p>", "createdAt": "2016-09-20T11:45:29Z", "publishedAt": "2016-09-20T11:45:29Z", "lastEditedAt": "2016-09-20T11:46:20Z", "updatedAt": "2016-09-20T11:46:20Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-10-30T13:23:31Z"}}]}, "bodyParsed": [{"number": 85, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@swankjesse Someone who wants this is me - for example recent versions of the RabbitMQ management API have a bug where duplicate keys are, in fact, returned: rabbitmq/rabbitmq-management#278 This causes our deserialisation with GSON to fail.", "sentSegmented": ["swankjesse", "someone", "who", "wants", "this", "is", "me", "for", "example", "recent", "versions", "of", "the", "rabbitmq", "management", "api", "have", "a", "bug", "where", "duplicate", "keys", "are", "in", "fact", "returned", "rabbitmq/rabbitmq-management", "278", "this", "causes", "our", "deserialisation", "with", "gson", "to", "fail"], "sentSegmentedWithoutStops": ["swankjesse", "someone", "wants", "example", "recent", "versions", "rabbitmq", "management", "api", "bug", "duplicate", "keys", "fact", "returned", "rabbitmq/rabbitmq-management", "278", "causes", "deserialisation", "gson", "fail"], "sentSegmentedWithoutStopsStemmed": ["swankjess", "someon", "want", "exampl", "recent", "version", "rabbitmq", "manag", "api", "bug", "duplic", "key", "fact", "return", "rabbitmq/rabbitmq-manag", "278", "caus", "deserialis", "gson", "fail"]}, {"number": 86, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It has since been fixed, but we need to support all versions in our library.", "sentSegmented": ["it", "has", "since", "been", "fixed", "but", "we", "need", "to", "support", "all", "versions", "in", "our", "library"], "sentSegmentedWithoutStops": ["since", "fixed", "need", "support", "versions", "library"], "sentSegmentedWithoutStopsStemmed": ["sinc", "fix", "need", "support", "version", "librari"]}, {"number": 87, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In the real world, you can't always control what data you get, but might still need to be able to handle it somehow.", "sentSegmented": ["in", "the", "real", "world", "you", "ca", "n't", "always", "control", "what", "data", "you", "get", "but", "might", "still", "need", "to", "be", "able", "to", "handle", "it", "somehow"], "sentSegmentedWithoutStops": ["real", "world", "ca", "n't", "always", "control", "data", "get", "might", "still", "need", "able", "handle", "somehow"], "sentSegmentedWithoutStopsStemmed": ["real", "world", "ca", "n't", "alway", "control", "data", "get", "might", "still", "need", "abl", "handl", "somehow"]}, {"number": 88, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If GSON cannot support this, we'll need to switch library, which would be a shame since GSON is otherwise convenient and easy to work with.", "sentSegmented": ["if", "gson", "can", "not", "support", "this", "we", "'ll", "need", "to", "switch", "library", "which", "would", "be", "a", "shame", "since", "gson", "is", "otherwise", "convenient", "and", "easy", "to", "work", "with"], "sentSegmentedWithoutStops": ["gson", "support", "'ll", "need", "switch", "library", "would", "shame", "since", "gson", "otherwise", "convenient", "easy", "work"], "sentSegmentedWithoutStopsStemmed": ["gson", "support", "'ll", "need", "switch", "librari", "would", "shame", "sinc", "gson", "otherwis", "conveni", "easi", "work"]}, {"number": 89, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So either an option to fail versus ignore duplicates, or changing the current behaviour, would be preferable.", "sentSegmented": ["so", "either", "an", "option", "to", "fail", "versus", "ignore", "duplicates", "or", "changing", "the", "current", "behaviour", "would", "be", "preferable"], "sentSegmentedWithoutStops": ["either", "option", "fail", "versus", "ignore", "duplicates", "changing", "current", "behaviour", "would", "preferable"], "sentSegmentedWithoutStopsStemmed": ["either", "option", "fail", "versu", "ignor", "duplic", "chang", "current", "behaviour", "would", "prefer"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI0ODI5MDk1OA==", "author": {"login": "swankjesse"}, "body": "@svetob you.can install your own TypeAdapter to workaround this I'd you like. It\u2019s a few lines of code to write the adapter and install it.\n", "bodyText": "@svetob you.can install your own TypeAdapter to workaround this I'd you like. It\u2019s a few lines of code to write the adapter and install it.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/svetob/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/svetob\">@svetob</a> you.can install your own TypeAdapter to workaround this I'd you like. It\u2019s a few lines of code to write the adapter and install it.</p>", "createdAt": "2016-09-20T12:47:06Z", "publishedAt": "2016-09-20T12:47:06Z", "lastEditedAt": null, "updatedAt": "2016-09-20T12:47:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 90, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@svetob you.can install your own TypeAdapter to workaround this I'd you like.", "sentSegmented": ["svetob", "you.can", "install", "your", "own", "typeadapter", "to", "workaround", "this", "i", "'d", "you", "like"], "sentSegmentedWithoutStops": ["svetob", "you.can", "install", "typeadapter", "workaround", "'d", "like"], "sentSegmentedWithoutStopsStemmed": ["svetob", "you.can", "instal", "typeadapt", "workaround", "'d", "like"]}, {"number": 91, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It\u2019s a few lines of code to write the adapter and install it.", "sentSegmented": ["it", "s", "a", "few", "lines", "of", "code", "to", "write", "the", "adapter", "and", "install", "it"], "sentSegmentedWithoutStops": ["lines", "code", "write", "adapter", "install"], "sentSegmentedWithoutStopsStemmed": ["line", "code", "write", "adapt", "instal"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI2NDAxMzY5MA==", "author": {"login": "michaelklishin"}, "body": "@svetob this is a terrible idea. If all JSON parsers behaved this way we would discover https://github.com/rabbitmq/rabbitmq-management/issues/278 much later.", "bodyText": "@svetob this is a terrible idea. If all JSON parsers behaved this way we would discover rabbitmq/rabbitmq-management#278 much later.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/svetob/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/svetob\">@svetob</a> this is a terrible idea. If all JSON parsers behaved this way we would discover <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"171821179\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rabbitmq/rabbitmq-management/issues/278\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rabbitmq/rabbitmq-management/issues/278/hovercard\" href=\"https://github.com/rabbitmq/rabbitmq-management/issues/278\">rabbitmq/rabbitmq-management#278</a> much later.</p>", "createdAt": "2016-11-30T22:15:37Z", "publishedAt": "2016-11-30T22:15:37Z", "lastEditedAt": null, "updatedAt": "2016-11-30T22:15:37Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 92, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@svetob this is a terrible idea.", "sentSegmented": ["svetob", "this", "is", "a", "terrible", "idea"], "sentSegmentedWithoutStops": ["svetob", "terrible", "idea"], "sentSegmentedWithoutStopsStemmed": ["svetob", "terribl", "idea"]}, {"number": 93, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If all JSON parsers behaved this way we would discover rabbitmq/rabbitmq-management#278 much later.", "sentSegmented": ["if", "all", "json", "parsers", "behaved", "this", "way", "we", "would", "discover", "rabbitmq/rabbitmq-management", "278", "much", "later"], "sentSegmentedWithoutStops": ["json", "parsers", "behaved", "way", "would", "discover", "rabbitmq/rabbitmq-management", "278", "much", "later"], "sentSegmentedWithoutStopsStemmed": ["json", "parser", "behav", "way", "would", "discov", "rabbitmq/rabbitmq-manag", "278", "much", "later"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOD7yHeg==", "hasNextPage": false}, "totalCount": 13}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "OPEN", "titleSegmented": ["added", "support", "for", "duplicate", "keys", "in", "map", "while", "deserializing", "the", "last\u2026"], "titleSegmentedWithoutStops": ["added", "support", "duplicate", "keys", "map", "deserializing", "last\u2026"], "titleSegmentedWithoutStopsStemmed": ["ad", "support", "duplic", "key", "map", "deseri", "last\u2026"], "bodyParsed": [{"number": 1, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u2026 value overrides any previous values.", "sentSegmented": ["value", "overrides", "any", "previous", "values"], "sentSegmentedWithoutStops": ["value", "overrides", "previous", "values"], "sentSegmentedWithoutStopsStemmed": ["valu", "overrid", "previou", "valu"]}]}