{"repository": {"owner": {"login": "google"}, "name": "gson", "forkCount": 3753, "stargazerCount": 19300, "createdAt": "2015-03-19T18:21:20Z", "updatedAt": "2021-03-18T03:15:40Z", "repositoryTopics": {"edges": []}, "languages": {"edges": [{"node": {"name": "Java"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWUzNzExMDUxMTE=", "number": 1409, "author": {"login": "lyubomyr-shaydariv"}, "title": "Should MapTypeAdapterFactory.Adapter throw an exception while reading objects with duplicate keys?", "body": "Today I came across an interesting [question](https://stackoverflow.com/questions/52855391/javajson-to-map-using-gson) on StackOverflow. The author asks why the following JSON document cannot be deserialized:\r\n\r\n```json\r\n{\r\n\t\"K1\": \"V1\",\r\n\t\"K2\": \"V2\",\r\n\t\"K1\": \"V3\"\r\n}\r\n```\r\n\r\nIf deserializing the above document with `gson.fromJson(..., Map.class)`, the following exception is thrown:\r\n\r\n```\r\nJsonSyntaxException: duplicate key: key0\r\n```\r\n\r\nHowever, if the document is deserialized with `gson.fromJson(..., Object.class)`, as found by another user, the deserialized map is as follows:\r\n\r\n```\r\n{K1=V3, K2=V2}\r\n```\r\n\r\nThis is obviously an inconsistent behavior, but I find the \"`Object`\" implementation more useful. As far as I know, JSON [does not prohibit](https://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object) use of duplicate keys simply describing its grammar.\r\n\r\nShould `ObjectTypeAdapter` throw an exception on duplicate keys, or should `MapTypeAdapterFactory.Adapter` not check duplicate keys (however, the check was added by a clear intention in a98d6eae472df67317d58d34f13438bb958668b1)?\r\n\r\n----\r\n\r\nRelated: #386, #649", "bodyHTML": "<p>Today I came across an interesting <a href=\"https://stackoverflow.com/questions/52855391/javajson-to-map-using-gson\" rel=\"nofollow\">question</a> on StackOverflow. The author asks why the following JSON document cannot be deserialized:</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>K1<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>V1<span class=\"pl-pds\">\"</span></span>,\n\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>K2<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>V2<span class=\"pl-pds\">\"</span></span>,\n\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>K1<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>V3<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p>If deserializing the above document with <code>gson.fromJson(..., Map.class)</code>, the following exception is thrown:</p>\n<pre><code>JsonSyntaxException: duplicate key: key0\n</code></pre>\n<p>However, if the document is deserialized with <code>gson.fromJson(..., Object.class)</code>, as found by another user, the deserialized map is as follows:</p>\n<pre><code>{K1=V3, K2=V2}\n</code></pre>\n<p>This is obviously an inconsistent behavior, but I find the \"<code>Object</code>\" implementation more useful. As far as I know, JSON <a href=\"https://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object\" rel=\"nofollow\">does not prohibit</a> use of duplicate keys simply describing its grammar.</p>\n<p>Should <code>ObjectTypeAdapter</code> throw an exception on duplicate keys, or should <code>MapTypeAdapterFactory.Adapter</code> not check duplicate keys (however, the check was added by a clear intention in <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/google/gson/commit/a98d6eae472df67317d58d34f13438bb958668b1/hovercard\" href=\"https://github.com/google/gson/commit/a98d6eae472df67317d58d34f13438bb958668b1\"><tt>a98d6ea</tt></a>)?</p>\n<hr>\n<p>Related: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63059073\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/386\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/386/hovercard\" href=\"https://github.com/google/gson/issues/386\">#386</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"82942277\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/649\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/649/hovercard\" href=\"https://github.com/google/gson/pull/649\">#649</a></p>", "bodyText": "Today I came across an interesting question on StackOverflow. The author asks why the following JSON document cannot be deserialized:\n{\n\t\"K1\": \"V1\",\n\t\"K2\": \"V2\",\n\t\"K1\": \"V3\"\n}\nIf deserializing the above document with gson.fromJson(..., Map.class), the following exception is thrown:\nJsonSyntaxException: duplicate key: key0\n\nHowever, if the document is deserialized with gson.fromJson(..., Object.class), as found by another user, the deserialized map is as follows:\n{K1=V3, K2=V2}\n\nThis is obviously an inconsistent behavior, but I find the \"Object\" implementation more useful. As far as I know, JSON does not prohibit use of duplicate keys simply describing its grammar.\nShould ObjectTypeAdapter throw an exception on duplicate keys, or should MapTypeAdapterFactory.Adapter not check duplicate keys (however, the check was added by a clear intention in a98d6ea)?\n\nRelated: #386, #649", "assignees": {"edges": []}, "createdAt": "2018-10-17T14:25:52Z", "closed": true, "closedAt": "2018-12-05T19:45:35Z", "lastEditedAt": "2018-12-05T14:07:37Z", "publishedAt": "2018-10-17T14:25:52Z", "comments": {"totalCount": 1, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ0NDYxOTQyMA==", "author": {"login": "lyubomyr-shaydariv"}, "body": "Closed as a duplicate of #649.", "bodyText": "Closed as a duplicate of #649.", "bodyHTML": "<p>Closed as a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"82942277\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/649\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/649/hovercard\" href=\"https://github.com/google/gson/pull/649\">#649</a>.</p>", "createdAt": "2018-12-05T19:45:35Z", "publishedAt": "2018-12-05T19:45:35Z", "lastEditedAt": null, "updatedAt": "2018-12-05T19:45:35Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 109, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Closed as a duplicate of #649.", "sentSegmented": ["closed", "as", "a", "duplicate", "of", "649"], "sentSegmentedWithoutStops": ["closed", "duplicate", "649"], "sentSegmentedWithoutStopsStemmed": ["close", "duplic", "649"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOGoBanA==", "hasNextPage": false}}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["should", "maptypeadapterfactory.adapter", "throw", "an", "exception", "while", "reading", "objects", "with", "duplicate", "keys"], "titleSegmentedWithoutStops": ["maptypeadapterfactory.adapter", "throw", "exception", "reading", "objects", "duplicate", "keys"], "titleSegmentedWithoutStopsStemmed": ["maptypeadapterfactory.adapt", "throw", "except", "read", "object", "duplic", "key"], "bodyParsed": [{"number": 94, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Today I came across an interesting question on StackOverflow.", "sentSegmented": ["today", "i", "came", "across", "an", "interesting", "question", "on", "stackoverflow"], "sentSegmentedWithoutStops": ["today", "came", "across", "interesting", "question", "stackoverflow"], "sentSegmentedWithoutStopsStemmed": ["today", "came", "across", "interest", "question", "stackoverflow"]}, {"number": 95, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The author asks why the following JSON document cannot be deserialized:", "sentSegmented": ["the", "author", "asks", "why", "the", "following", "json", "document", "can", "not", "be", "deserialized"], "sentSegmentedWithoutStops": ["author", "asks", "following", "json", "document", "deserialized"], "sentSegmentedWithoutStopsStemmed": ["author", "ask", "follow", "json", "document", "deseri"]}, {"number": 96, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 97, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\"K1\": \"V1\",", "sentSegmented": ["k1", "v1"], "sentSegmentedWithoutStops": ["k1", "v1"], "sentSegmentedWithoutStopsStemmed": ["k1", "v1"]}, {"number": 98, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\"K2\": \"V2\",", "sentSegmented": ["k2", "v2"], "sentSegmentedWithoutStops": ["k2", "v2"], "sentSegmentedWithoutStopsStemmed": ["k2", "v2"]}, {"number": 99, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\t\"K1\": \"V3\"", "sentSegmented": ["k1", "v3"], "sentSegmentedWithoutStops": ["k1", "v3"], "sentSegmentedWithoutStopsStemmed": ["k1", "v3"]}, {"number": 100, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 101, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If deserializing the above document with gson.fromJson(..., Map.class), the following exception is thrown:", "sentSegmented": ["if", "deserializing", "the", "above", "document", "with", "gson.fromjson", "map.class", "the", "following", "exception", "is", "thrown"], "sentSegmentedWithoutStops": ["deserializing", "document", "gson.fromjson", "map.class", "following", "exception", "thrown"], "sentSegmentedWithoutStopsStemmed": ["deseri", "document", "gson.fromjson", "map.class", "follow", "except", "thrown"]}, {"number": 102, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "JsonSyntaxException: duplicate key: key0", "sentSegmented": ["jsonsyntaxexception", "duplicate", "key", "key0"], "sentSegmentedWithoutStops": ["jsonsyntaxexception", "duplicate", "key", "key0"], "sentSegmentedWithoutStopsStemmed": ["jsonsyntaxexcept", "duplic", "key", "key0"]}, {"number": 103, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, if the document is deserialized with gson.fromJson(..., Object.class), as found by another user, the deserialized map is as follows:", "sentSegmented": ["however", "if", "the", "document", "is", "deserialized", "with", "gson.fromjson", "object.class", "as", "found", "by", "another", "user", "the", "deserialized", "map", "is", "as", "follows"], "sentSegmentedWithoutStops": ["however", "document", "deserialized", "gson.fromjson", "object.class", "found", "another", "user", "deserialized", "map", "follows"], "sentSegmentedWithoutStopsStemmed": ["howev", "document", "deseri", "gson.fromjson", "object.class", "found", "anoth", "user", "deseri", "map", "follow"]}, {"number": 104, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{K1=V3, K2=V2}", "sentSegmented": ["k1=v3", "k2=v2"], "sentSegmentedWithoutStops": ["k1=v3", "k2=v2"], "sentSegmentedWithoutStopsStemmed": ["k1=v3", "k2=v2"]}, {"number": 105, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is obviously an inconsistent behavior, but I find the \"Object\" implementation more useful.", "sentSegmented": ["this", "is", "obviously", "an", "inconsistent", "behavior", "but", "i", "find", "the", "object", "implementation", "more", "useful"], "sentSegmentedWithoutStops": ["obviously", "inconsistent", "behavior", "find", "object", "implementation", "useful"], "sentSegmentedWithoutStopsStemmed": ["obvious", "inconsist", "behavior", "find", "object", "implement", "use"]}, {"number": 106, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As far as I know, JSON does not prohibit use of duplicate keys simply describing its grammar.", "sentSegmented": ["as", "far", "as", "i", "know", "json", "does", "not", "prohibit", "use", "of", "duplicate", "keys", "simply", "describing", "its", "grammar"], "sentSegmentedWithoutStops": ["far", "know", "json", "prohibit", "use", "duplicate", "keys", "simply", "describing", "grammar"], "sentSegmentedWithoutStopsStemmed": ["far", "know", "json", "prohibit", "use", "duplic", "key", "simpli", "describ", "grammar"]}, {"number": 107, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Should ObjectTypeAdapter throw an exception on duplicate keys, or should MapTypeAdapterFactory.Adapter not check duplicate keys (however, the check was added by a clear intention in a98d6ea)?", "sentSegmented": ["should", "objecttypeadapter", "throw", "an", "exception", "on", "duplicate", "keys", "or", "should", "maptypeadapterfactory.adapter", "not", "check", "duplicate", "keys", "however", "the", "check", "was", "added", "by", "a", "clear", "intention", "in", "a98d6ea"], "sentSegmentedWithoutStops": ["objecttypeadapter", "throw", "exception", "duplicate", "keys", "maptypeadapterfactory.adapter", "check", "duplicate", "keys", "however", "check", "added", "clear", "intention", "a98d6ea"], "sentSegmentedWithoutStopsStemmed": ["objecttypeadapt", "throw", "except", "duplic", "key", "maptypeadapterfactory.adapt", "check", "duplic", "key", "howev", "check", "ad", "clear", "intent", "a98d6ea"]}, {"number": 108, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Related: #386, #649", "sentSegmented": ["related", "386", "649"], "sentSegmentedWithoutStops": ["related", "386", "649"], "sentSegmentedWithoutStopsStemmed": ["relat", "386", "649"]}]}