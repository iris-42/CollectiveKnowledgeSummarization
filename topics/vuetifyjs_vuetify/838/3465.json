{"repository": {"owner": {"login": "vuetifyjs"}, "name": "vuetify", "forkCount": 5428, "stargazerCount": 29812, "createdAt": "2016-09-12T00:39:35Z", "updatedAt": "2021-03-11T03:13:06Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "vue"}}}, {"node": {"topic": {"name": "vuejs"}}}, {"node": {"topic": {"name": "vue-components"}}}, {"node": {"topic": {"name": "material-design"}}}, {"node": {"topic": {"name": "material"}}}, {"node": {"topic": {"name": "material-theme"}}}, {"node": {"topic": {"name": "material-components"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "semantic"}}}, {"node": {"topic": {"name": "vue-material"}}}, {"node": {"topic": {"name": "vuetify"}}}, {"node": {"topic": {"name": "vuetifyjs"}}}, {"node": {"topic": {"name": "ui"}}}, {"node": {"topic": {"name": "ui-components"}}}, {"node": {"topic": {"name": "ui-kit"}}}, {"node": {"topic": {"name": "typescript"}}}, {"node": {"topic": {"name": "hacktoberfest"}}}, {"node": {"topic": {"name": "vuejs3"}}}, {"node": {"topic": {"name": "ui-design"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "Vue"}}, {"node": {"name": "HTML"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "Shell"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "Sass"}}, {"node": {"name": "SCSS"}}]}, "primaryLanguage": {"name": "TypeScript"}}, "id": "MDU6SXNzdWUzMDIxMDM2MDA=", "number": 3465, "author": {"login": "jwhentsch"}, "title": "[Feature Request] Please add standard form support for selects and selection controls", "body": "### New Functionality\r\nIt'l allow me to incorporate these nice elements into my so far plain rails-driven app. As a workarround can you or someone else please advice me how to implement a <form-wrapper> component, which wraps all these <v-select>-elements to make them standard-form-compatible?\r\n\r\n### Improvements\r\nI tried to implement a wrapper to put arround <v-checkbox> and <v-select>. But a the moment I fail on implementing a \"name\"-attribute. And I can't figure out how the \"name\"-attribute is supported by <v-text-field>.\r\n\r\n### Bugs or Edge Cases it Helps Avoid\r\nAt the moment, I test vuejs and vuetify against webcomponents/polymer. I like the completeness of the ui-elements and the ease incorporation of vuejs and vuetify within rails/webpack/turbolinks (with webcomponents/polymer that's a nightmare).\r\n\r\n<!-- generated by vuetify-issue-helper. DO NOT REMOVE -->", "bodyHTML": "<h3>New Functionality</h3>\n<p>It'l allow me to incorporate these nice elements into my so far plain rails-driven app. As a workarround can you or someone else please advice me how to implement a  component, which wraps all these -elements to make them standard-form-compatible?</p>\n<h3>Improvements</h3>\n<p>I tried to implement a wrapper to put arround  and . But a the moment I fail on implementing a \"name\"-attribute. And I can't figure out how the \"name\"-attribute is supported by .</p>\n<h3>Bugs or Edge Cases it Helps Avoid</h3>\n<p>At the moment, I test vuejs and vuetify against webcomponents/polymer. I like the completeness of the ui-elements and the ease incorporation of vuejs and vuetify within rails/webpack/turbolinks (with webcomponents/polymer that's a nightmare).</p>\n", "bodyText": "New Functionality\nIt'l allow me to incorporate these nice elements into my so far plain rails-driven app. As a workarround can you or someone else please advice me how to implement a  component, which wraps all these -elements to make them standard-form-compatible?\nImprovements\nI tried to implement a wrapper to put arround  and . But a the moment I fail on implementing a \"name\"-attribute. And I can't figure out how the \"name\"-attribute is supported by .\nBugs or Edge Cases it Helps Avoid\nAt the moment, I test vuejs and vuetify against webcomponents/polymer. I like the completeness of the ui-elements and the ease incorporation of vuejs and vuetify within rails/webpack/turbolinks (with webcomponents/polymer that's a nightmare).", "assignees": {"edges": []}, "createdAt": "2018-03-04T17:22:52Z", "closed": true, "closedAt": "2018-03-08T11:48:33Z", "lastEditedAt": null, "publishedAt": "2018-03-04T17:22:52Z", "comments": {"totalCount": 7, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3MDUxMTQ5OA==", "author": {"login": "jwhentsch"}, "body": "In the meantime I have implemented a \"form-element-wrapper\" which almost works but a problem with v-model in scoped-slot environment stops me from success.\r\n\r\nHere is this very little example file (54 lines and renamed for uploading, orig file ist .vue)\r\n[form-element-wrapper-vue.txt](https://github.com/vuetifyjs/vuetify/files/1782049/form-element-wrapper-vue.txt)\r\n\r\nThe problem is at 'v-model=\"slotscope.value\"'. I can not operate the switch - but if I change the value with vue-dev-tool then the switch slides - STRANGE.\r\n\r\nIf I take the v-switch (or v-checkbox) experimentally into my element (not in a slot) then with 'v-model=\"value\"' everything works as expected.\r\n\r\nSo is that a Bug? Is it in the vuetify-elements or in vuejs?\r\n\r\nI'm brandnew in vuejs and vuetify and English is not my mother language.\r\n\r\nSo every help is very welcome.\r\n\r\nthanks from Germany!\r\n\r\njwh", "bodyText": "In the meantime I have implemented a \"form-element-wrapper\" which almost works but a problem with v-model in scoped-slot environment stops me from success.\nHere is this very little example file (54 lines and renamed for uploading, orig file ist .vue)\nform-element-wrapper-vue.txt\nThe problem is at 'v-model=\"slotscope.value\"'. I can not operate the switch - but if I change the value with vue-dev-tool then the switch slides - STRANGE.\nIf I take the v-switch (or v-checkbox) experimentally into my element (not in a slot) then with 'v-model=\"value\"' everything works as expected.\nSo is that a Bug? Is it in the vuetify-elements or in vuejs?\nI'm brandnew in vuejs and vuetify and English is not my mother language.\nSo every help is very welcome.\nthanks from Germany!\njwh", "bodyHTML": "<p>In the meantime I have implemented a \"form-element-wrapper\" which almost works but a problem with v-model in scoped-slot environment stops me from success.</p>\n<p>Here is this very little example file (54 lines and renamed for uploading, orig file ist .vue)<br>\n<a href=\"https://github.com/vuetifyjs/vuetify/files/1782049/form-element-wrapper-vue.txt\">form-element-wrapper-vue.txt</a></p>\n<p>The problem is at 'v-model=\"slotscope.value\"'. I can not operate the switch - but if I change the value with vue-dev-tool then the switch slides - STRANGE.</p>\n<p>If I take the v-switch (or v-checkbox) experimentally into my element (not in a slot) then with 'v-model=\"value\"' everything works as expected.</p>\n<p>So is that a Bug? Is it in the vuetify-elements or in vuejs?</p>\n<p>I'm brandnew in vuejs and vuetify and English is not my mother language.</p>\n<p>So every help is very welcome.</p>\n<p>thanks from Germany!</p>\n<p>jwh</p>", "createdAt": "2018-03-05T18:14:17Z", "publishedAt": "2018-03-05T18:14:17Z", "lastEditedAt": "2018-03-05T18:20:27Z", "updatedAt": "2018-03-05T18:20:27Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29321, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In the meantime I have implemented a \"form-element-wrapper\" which almost works but a problem with v-model in scoped-slot environment stops me from success.", "sentSegmented": ["in", "the", "meantime", "i", "have", "implemented", "a", "form-element-wrapper", "which", "almost", "works", "but", "a", "problem", "with", "v-model", "in", "scoped-slot", "environment", "stops", "me", "from", "success"], "sentSegmentedWithoutStops": ["meantime", "implemented", "form-element-wrapper", "almost", "works", "problem", "v-model", "scoped-slot", "environment", "stops", "success"], "sentSegmentedWithoutStopsStemmed": ["meantim", "implement", "form-element-wrapp", "almost", "work", "problem", "v-model", "scoped-slot", "environ", "stop", "success"]}, {"number": 29322, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Here is this very little example file (54 lines and renamed for uploading, orig file ist .vue)", "sentSegmented": ["here", "is", "this", "very", "little", "example", "file", "54", "lines", "and", "renamed", "for", "uploading", "orig", "file", "ist", ".vue"], "sentSegmentedWithoutStops": ["little", "example", "file", "54", "lines", "renamed", "uploading", "orig", "file", "ist", ".vue"], "sentSegmentedWithoutStopsStemmed": ["littl", "exampl", "file", "54", "line", "renam", "upload", "orig", "file", "ist", ".vue"]}, {"number": 29323, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "form-element-wrapper-vue.txt", "sentSegmented": ["form-element-wrapper-vue.txt"], "sentSegmentedWithoutStops": ["form-element-wrapper-vue.txt"], "sentSegmentedWithoutStopsStemmed": ["form-element-wrapper-vue.txt"]}, {"number": 29324, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The problem is at 'v-model=\"slotscope.value\"'.", "sentSegmented": ["the", "problem", "is", "at", "v-model=", "slotscope.value"], "sentSegmentedWithoutStops": ["problem", "v-model=", "slotscope.value"], "sentSegmentedWithoutStopsStemmed": ["problem", "v-model=", "slotscope.valu"]}, {"number": 29325, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can not operate the switch - but if I change the value with vue-dev-tool then the switch slides - STRANGE.", "sentSegmented": ["i", "can", "not", "operate", "the", "switch", "but", "if", "i", "change", "the", "value", "with", "vue-dev-tool", "then", "the", "switch", "slides", "strange"], "sentSegmentedWithoutStops": ["operate", "switch", "change", "value", "vue-dev-tool", "switch", "slides", "strange"], "sentSegmentedWithoutStopsStemmed": ["oper", "switch", "chang", "valu", "vue-dev-tool", "switch", "slide", "strang"]}, {"number": 29326, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If I take the v-switch (or v-checkbox) experimentally into my element (not in a slot) then with 'v-model=\"value\"' everything works as expected.", "sentSegmented": ["if", "i", "take", "the", "v-switch", "or", "v-checkbox", "experimentally", "into", "my", "element", "not", "in", "a", "slot", "then", "with", "v-model=", "value", "everything", "works", "as", "expected"], "sentSegmentedWithoutStops": ["take", "v-switch", "v-checkbox", "experimentally", "element", "slot", "v-model=", "value", "everything", "works", "expected"], "sentSegmentedWithoutStopsStemmed": ["take", "v-switch", "v-checkbox", "experiment", "element", "slot", "v-model=", "valu", "everyth", "work", "expect"]}, {"number": 29327, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So is that a Bug?", "sentSegmented": ["so", "is", "that", "a", "bug"], "sentSegmentedWithoutStops": ["bug"], "sentSegmentedWithoutStopsStemmed": ["bug"]}, {"number": 29328, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is it in the vuetify-elements or in vuejs?", "sentSegmented": ["is", "it", "in", "the", "vuetify-elements", "or", "in", "vuejs"], "sentSegmentedWithoutStops": ["vuetify-elements", "vuejs"], "sentSegmentedWithoutStopsStemmed": ["vuetify-el", "vuej"]}, {"number": 29329, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm brandnew in vuejs and vuetify and English is not my mother language.", "sentSegmented": ["i", "'m", "brandnew", "in", "vuejs", "and", "vuetify", "and", "english", "is", "not", "my", "mother", "language"], "sentSegmentedWithoutStops": ["'m", "brandnew", "vuejs", "vuetify", "english", "mother", "language"], "sentSegmentedWithoutStopsStemmed": ["'m", "brandnew", "vuej", "vuetifi", "english", "mother", "languag"]}, {"number": 29330, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So every help is very welcome.", "sentSegmented": ["so", "every", "help", "is", "very", "welcome"], "sentSegmentedWithoutStops": ["every", "help", "welcome"], "sentSegmentedWithoutStopsStemmed": ["everi", "help", "welcom"]}, {"number": 29331, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "thanks from Germany!", "sentSegmented": ["thanks", "from", "germany"], "sentSegmentedWithoutStops": ["thanks", "germany"], "sentSegmentedWithoutStopsStemmed": ["thank", "germani"]}, {"number": 29332, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "jwh", "sentSegmented": ["jwh"], "sentSegmentedWithoutStops": ["jwh"], "sentSegmentedWithoutStopsStemmed": ["jwh"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3MDUxOTE1Ng==", "author": {"login": "jwhentsch"}, "body": "well, and I tested it with v-select as well, same problem. I can change the value of the select with the vue.js dev-tools and the selected item changes. But it doesn't work the other way round.\r\n\r\nI've tried tu put some html-code-example here, but it gets corrupted. \r\n\r\nSo I put it in a small file.\r\n\r\n[call-form-element-wrapper-with-v-select.html.txt](https://github.com/vuetifyjs/vuetify/files/1782156/call-form-element-wrapper-with-v-select.html.txt)\r\n", "bodyText": "well, and I tested it with v-select as well, same problem. I can change the value of the select with the vue.js dev-tools and the selected item changes. But it doesn't work the other way round.\nI've tried tu put some html-code-example here, but it gets corrupted.\nSo I put it in a small file.\ncall-form-element-wrapper-with-v-select.html.txt", "bodyHTML": "<p>well, and I tested it with v-select as well, same problem. I can change the value of the select with the vue.js dev-tools and the selected item changes. But it doesn't work the other way round.</p>\n<p>I've tried tu put some html-code-example here, but it gets corrupted.</p>\n<p>So I put it in a small file.</p>\n<p><a href=\"https://github.com/vuetifyjs/vuetify/files/1782156/call-form-element-wrapper-with-v-select.html.txt\">call-form-element-wrapper-with-v-select.html.txt</a></p>", "createdAt": "2018-03-05T18:39:26Z", "publishedAt": "2018-03-05T18:39:26Z", "lastEditedAt": "2018-03-05T18:46:49Z", "updatedAt": "2018-03-05T18:46:49Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29333, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "well, and I tested it with v-select as well, same problem.", "sentSegmented": ["well", "and", "i", "tested", "it", "with", "v-select", "as", "well", "same", "problem"], "sentSegmentedWithoutStops": ["well", "tested", "v-select", "well", "problem"], "sentSegmentedWithoutStopsStemmed": ["well", "test", "v-select", "well", "problem"]}, {"number": 29334, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can change the value of the select with the vue.js dev-tools and the selected item changes.", "sentSegmented": ["i", "can", "change", "the", "value", "of", "the", "select", "with", "the", "vue.js", "dev-tools", "and", "the", "selected", "item", "changes"], "sentSegmentedWithoutStops": ["change", "value", "select", "vue.js", "dev-tools", "selected", "item", "changes"], "sentSegmentedWithoutStopsStemmed": ["chang", "valu", "select", "vue.j", "dev-tool", "select", "item", "chang"]}, {"number": 29335, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But it doesn't work the other way round.", "sentSegmented": ["but", "it", "does", "n't", "work", "the", "other", "way", "round"], "sentSegmentedWithoutStops": ["n't", "work", "way", "round"], "sentSegmentedWithoutStopsStemmed": ["n't", "work", "way", "round"]}, {"number": 29336, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I've tried tu put some html-code-example here, but it gets corrupted.", "sentSegmented": ["i", "'ve", "tried", "tu", "put", "some", "html-code-example", "here", "but", "it", "gets", "corrupted"], "sentSegmentedWithoutStops": ["'ve", "tried", "tu", "put", "html-code-example", "gets", "corrupted"], "sentSegmentedWithoutStopsStemmed": ["'ve", "tri", "tu", "put", "html-code-exampl", "get", "corrupt"]}, {"number": 29337, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So I put it in a small file.", "sentSegmented": ["so", "i", "put", "it", "in", "a", "small", "file"], "sentSegmentedWithoutStops": ["put", "small", "file"], "sentSegmentedWithoutStopsStemmed": ["put", "small", "file"]}, {"number": 29338, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "call-form-element-wrapper-with-v-select.html.txt", "sentSegmented": ["call-form-element-wrapper-with-v-select.html.txt"], "sentSegmentedWithoutStops": ["call-form-element-wrapper-with-v-select.html.txt"], "sentSegmentedWithoutStopsStemmed": ["call-form-element-wrapper-with-v-select.html.txt"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3MDk1Njg1OQ==", "author": {"login": "jwhentsch"}, "body": "OK, finally, I figured out (by testing my wrapper wrapping arround a standard input - element) that scoped slots may not work with two-way-sync by now - I' ll try to ask at vuejs.org for a change.\r\n\r\nHere my request is still - please make your selectors \"standard-form\" compatible - same as the v-text-field is already - MANY THANKS !!!", "bodyText": "OK, finally, I figured out (by testing my wrapper wrapping arround a standard input - element) that scoped slots may not work with two-way-sync by now - I' ll try to ask at vuejs.org for a change.\nHere my request is still - please make your selectors \"standard-form\" compatible - same as the v-text-field is already - MANY THANKS !!!", "bodyHTML": "<p>OK, finally, I figured out (by testing my wrapper wrapping arround a standard input - element) that scoped slots may not work with two-way-sync by now - I' ll try to ask at vuejs.org for a change.</p>\n<p>Here my request is still - please make your selectors \"standard-form\" compatible - same as the v-text-field is already - MANY THANKS !!!</p>", "createdAt": "2018-03-06T22:47:07Z", "publishedAt": "2018-03-06T22:47:07Z", "lastEditedAt": null, "updatedAt": "2018-03-06T22:47:07Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29339, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "OK, finally, I figured out (by testing my wrapper wrapping arround a standard input - element) that scoped slots may not work with two-way-sync by now - I' ll try to ask at vuejs.org for a change.", "sentSegmented": ["ok", "finally", "i", "figured", "out", "by", "testing", "my", "wrapper", "wrapping", "arround", "a", "standard", "input", "element", "that", "scoped", "slots", "may", "not", "work", "with", "two-way-sync", "by", "now", "i", "ll", "try", "to", "ask", "at", "vuejs.org", "for", "a", "change"], "sentSegmentedWithoutStops": ["ok", "finally", "figured", "testing", "wrapper", "wrapping", "arround", "standard", "input", "element", "scoped", "slots", "may", "work", "two-way-sync", "try", "ask", "vuejs.org", "change"], "sentSegmentedWithoutStopsStemmed": ["ok", "final", "figur", "test", "wrapper", "wrap", "arround", "standard", "input", "element", "scope", "slot", "may", "work", "two-way-sync", "tri", "ask", "vuejs.org", "chang"]}, {"number": 29340, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Here my request is still - please make your selectors \"standard-form\" compatible - same as the v-text-field is already - MANY THANKS !!", "sentSegmented": ["here", "my", "request", "is", "still", "please", "make", "your", "selectors", "standard-form", "compatible", "same", "as", "the", "v-text-field", "is", "already", "many", "thanks"], "sentSegmentedWithoutStops": ["request", "still", "please", "make", "selectors", "standard-form", "compatible", "v-text-field", "already", "many", "thanks"], "sentSegmentedWithoutStopsStemmed": ["request", "still", "pleas", "make", "selector", "standard-form", "compat", "v-text-field", "alreadi", "mani", "thank"]}, {"number": 29341, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "!", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3MTQ0Nzg1MA==", "author": {"login": "nekosaur"}, "body": "What exactly do you mean by standard form support? If you are having specific problems with v-select or other input controls perhaps this is a bug report instead of a feature request?", "bodyText": "What exactly do you mean by standard form support? If you are having specific problems with v-select or other input controls perhaps this is a bug report instead of a feature request?", "bodyHTML": "<p>What exactly do you mean by standard form support? If you are having specific problems with v-select or other input controls perhaps this is a bug report instead of a feature request?</p>", "createdAt": "2018-03-08T10:31:44Z", "publishedAt": "2018-03-08T10:31:44Z", "lastEditedAt": null, "updatedAt": "2018-03-08T10:31:44Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29342, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What exactly do you mean by standard form support?", "sentSegmented": ["what", "exactly", "do", "you", "mean", "by", "standard", "form", "support"], "sentSegmentedWithoutStops": ["exactly", "mean", "standard", "form", "support"], "sentSegmentedWithoutStopsStemmed": ["exactli", "mean", "standard", "form", "support"]}, {"number": 29343, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you are having specific problems with v-select or other input controls perhaps this is a bug report instead of a feature request?", "sentSegmented": ["if", "you", "are", "having", "specific", "problems", "with", "v-select", "or", "other", "input", "controls", "perhaps", "this", "is", "a", "bug", "report", "instead", "of", "a", "feature", "request"], "sentSegmentedWithoutStops": ["specific", "problems", "v-select", "input", "controls", "perhaps", "bug", "report", "instead", "feature", "request"], "sentSegmentedWithoutStopsStemmed": ["specif", "problem", "v-select", "input", "control", "perhap", "bug", "report", "instead", "featur", "request"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3MTQ1NDI5NQ==", "author": {"login": "jwhentsch"}, "body": "With standard form support I mean adding a \"name\" property to the selects (like it is with the v-text-input) Then you could put the v-select, v-checkbox and v-switch just into a regular form-element provide the name and the \"start\"-value to the value-property and the support for the \"old\"-world would be fine. Of course you have to load vuejs and vuetify, have to instantiate at least one vue-instance and have to wrap the whole form by v-app.\r\nBecause the v-select's don't have the \"name\"-support (the docs say you MUST use v-model) I can put a regular \"input hidden\" aside each v-select-like element and couple it with v-model and v-bind. But than I have no markup-way to set the start value. Thats why I try (as a vue-newbee and relative JS-hater) to implement a wrapper which hooks up this regular input-element and which has an input-value-property to set the start value. This wouldn't be necessary, if the v-select's have that \"standard-form-support\" already aboard. I don't see the point, why v-text-input has support for it whereas v-select's don't.\r\nClearly, that's all not needed in the whole new single page app world. But vuejs claimes to be able to renew just parts of older solutions step by step. And the wonderfull vuetify-components may help to renew those old-style-web-apps even step by step.\r\n\r\nDo you see my problem/feature-request now. Sorry for my bad English. In my own mother language I could explain it way better.\r\n\r\nBut again - thanks for your responce and thanks to all the people, who made those fantastic looking vuetify-stuff at all.", "bodyText": "With standard form support I mean adding a \"name\" property to the selects (like it is with the v-text-input) Then you could put the v-select, v-checkbox and v-switch just into a regular form-element provide the name and the \"start\"-value to the value-property and the support for the \"old\"-world would be fine. Of course you have to load vuejs and vuetify, have to instantiate at least one vue-instance and have to wrap the whole form by v-app.\nBecause the v-select's don't have the \"name\"-support (the docs say you MUST use v-model) I can put a regular \"input hidden\" aside each v-select-like element and couple it with v-model and v-bind. But than I have no markup-way to set the start value. Thats why I try (as a vue-newbee and relative JS-hater) to implement a wrapper which hooks up this regular input-element and which has an input-value-property to set the start value. This wouldn't be necessary, if the v-select's have that \"standard-form-support\" already aboard. I don't see the point, why v-text-input has support for it whereas v-select's don't.\nClearly, that's all not needed in the whole new single page app world. But vuejs claimes to be able to renew just parts of older solutions step by step. And the wonderfull vuetify-components may help to renew those old-style-web-apps even step by step.\nDo you see my problem/feature-request now. Sorry for my bad English. In my own mother language I could explain it way better.\nBut again - thanks for your responce and thanks to all the people, who made those fantastic looking vuetify-stuff at all.", "bodyHTML": "<p>With standard form support I mean adding a \"name\" property to the selects (like it is with the v-text-input) Then you could put the v-select, v-checkbox and v-switch just into a regular form-element provide the name and the \"start\"-value to the value-property and the support for the \"old\"-world would be fine. Of course you have to load vuejs and vuetify, have to instantiate at least one vue-instance and have to wrap the whole form by v-app.<br>\nBecause the v-select's don't have the \"name\"-support (the docs say you MUST use v-model) I can put a regular \"input hidden\" aside each v-select-like element and couple it with v-model and v-bind. But than I have no markup-way to set the start value. Thats why I try (as a vue-newbee and relative JS-hater) to implement a wrapper which hooks up this regular input-element and which has an input-value-property to set the start value. This wouldn't be necessary, if the v-select's have that \"standard-form-support\" already aboard. I don't see the point, why v-text-input has support for it whereas v-select's don't.<br>\nClearly, that's all not needed in the whole new single page app world. But vuejs claimes to be able to renew just parts of older solutions step by step. And the wonderfull vuetify-components may help to renew those old-style-web-apps even step by step.</p>\n<p>Do you see my problem/feature-request now. Sorry for my bad English. In my own mother language I could explain it way better.</p>\n<p>But again - thanks for your responce and thanks to all the people, who made those fantastic looking vuetify-stuff at all.</p>", "createdAt": "2018-03-08T10:58:15Z", "publishedAt": "2018-03-08T10:58:15Z", "lastEditedAt": "2018-03-08T10:59:12Z", "updatedAt": "2018-03-08T10:59:12Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29344, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "With standard form support I mean adding a \"name\" property to the selects (like it is with the v-text-input) Then you could put the v-select, v-checkbox and v-switch just into a regular form-element provide the name and the \"start\"-value to the value-property and the support for the \"old\"-world would be fine.", "sentSegmented": ["with", "standard", "form", "support", "i", "mean", "adding", "a", "name", "property", "to", "the", "selects", "like", "it", "is", "with", "the", "v-text-input", "then", "you", "could", "put", "the", "v-select", "v-checkbox", "and", "v-switch", "just", "into", "a", "regular", "form-element", "provide", "the", "name", "and", "the", "start", "-value", "to", "the", "value-property", "and", "the", "support", "for", "the", "old", "-world", "would", "be", "fine"], "sentSegmentedWithoutStops": ["standard", "form", "support", "mean", "adding", "name", "property", "selects", "like", "v-text-input", "could", "put", "v-select", "v-checkbox", "v-switch", "regular", "form-element", "provide", "name", "start", "-value", "value-property", "support", "old", "-world", "would", "fine"], "sentSegmentedWithoutStopsStemmed": ["standard", "form", "support", "mean", "ad", "name", "properti", "select", "like", "v-text-input", "could", "put", "v-select", "v-checkbox", "v-switch", "regular", "form-el", "provid", "name", "start", "-valu", "value-properti", "support", "old", "-world", "would", "fine"]}, {"number": 29345, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Of course you have to load vuejs and vuetify, have to instantiate at least one vue-instance and have to wrap the whole form by v-app.", "sentSegmented": ["of", "course", "you", "have", "to", "load", "vuejs", "and", "vuetify", "have", "to", "instantiate", "at", "least", "one", "vue-instance", "and", "have", "to", "wrap", "the", "whole", "form", "by", "v-app"], "sentSegmentedWithoutStops": ["course", "load", "vuejs", "vuetify", "instantiate", "least", "one", "vue-instance", "wrap", "whole", "form", "v-app"], "sentSegmentedWithoutStopsStemmed": ["cours", "load", "vuej", "vuetifi", "instanti", "least", "one", "vue-inst", "wrap", "whole", "form", "v-app"]}, {"number": 29346, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Because the v-select's don't have the \"name\"-support (the docs say you MUST use v-model) I can put a regular \"input hidden\" aside each v-select-like element and couple it with v-model and v-bind.", "sentSegmented": ["because", "the", "v-select", "'s", "do", "n't", "have", "the", "name", "-support", "the", "docs", "say", "you", "must", "use", "v-model", "i", "can", "put", "a", "regular", "input", "hidden", "aside", "each", "v-select-like", "element", "and", "couple", "it", "with", "v-model", "and", "v-bind"], "sentSegmentedWithoutStops": ["v-select", "'s", "n't", "name", "-support", "docs", "say", "must", "use", "v-model", "put", "regular", "input", "hidden", "aside", "v-select-like", "element", "couple", "v-model", "v-bind"], "sentSegmentedWithoutStopsStemmed": ["v-select", "'s", "n't", "name", "-support", "doc", "say", "must", "use", "v-model", "put", "regular", "input", "hidden", "asid", "v-select-lik", "element", "coupl", "v-model", "v-bind"]}, {"number": 29347, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But than I have no markup-way to set the start value.", "sentSegmented": ["but", "than", "i", "have", "no", "markup-way", "to", "set", "the", "start", "value"], "sentSegmentedWithoutStops": ["markup-way", "set", "start", "value"], "sentSegmentedWithoutStopsStemmed": ["markup-way", "set", "start", "valu"]}, {"number": 29348, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thats why I try (as a vue-newbee and relative JS-hater) to implement a wrapper which hooks up this regular input-element and which has an input-value-property to set the start value.", "sentSegmented": ["thats", "why", "i", "try", "as", "a", "vue-newbee", "and", "relative", "js-hater", "to", "implement", "a", "wrapper", "which", "hooks", "up", "this", "regular", "input-element", "and", "which", "has", "an", "input-value-property", "to", "set", "the", "start", "value"], "sentSegmentedWithoutStops": ["thats", "try", "vue-newbee", "relative", "js-hater", "implement", "wrapper", "hooks", "regular", "input-element", "input-value-property", "set", "start", "value"], "sentSegmentedWithoutStopsStemmed": ["that", "tri", "vue-newbe", "rel", "js-hater", "implement", "wrapper", "hook", "regular", "input-el", "input-value-properti", "set", "start", "valu"]}, {"number": 29349, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This wouldn't be necessary, if the v-select's have that \"standard-form-support\" already aboard.", "sentSegmented": ["this", "would", "n't", "be", "necessary", "if", "the", "v-select", "'s", "have", "that", "standard-form-support", "already", "aboard"], "sentSegmentedWithoutStops": ["would", "n't", "necessary", "v-select", "'s", "standard-form-support", "already", "aboard"], "sentSegmentedWithoutStopsStemmed": ["would", "n't", "necessari", "v-select", "'s", "standard-form-support", "alreadi", "aboard"]}, {"number": 29350, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I don't see the point, why v-text-input has support for it whereas v-select's don't.", "sentSegmented": ["i", "do", "n't", "see", "the", "point", "why", "v-text-input", "has", "support", "for", "it", "whereas", "v-select", "'s", "do", "n't"], "sentSegmentedWithoutStops": ["n't", "see", "point", "v-text-input", "support", "whereas", "v-select", "'s", "n't"], "sentSegmentedWithoutStopsStemmed": ["n't", "see", "point", "v-text-input", "support", "wherea", "v-select", "'s", "n't"]}, {"number": 29351, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Clearly, that's all not needed in the whole new single page app world.", "sentSegmented": ["clearly", "that", "'s", "all", "not", "needed", "in", "the", "whole", "new", "single", "page", "app", "world"], "sentSegmentedWithoutStops": ["clearly", "'s", "needed", "whole", "new", "single", "page", "app", "world"], "sentSegmentedWithoutStopsStemmed": ["clearli", "'s", "need", "whole", "new", "singl", "page", "app", "world"]}, {"number": 29352, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But vuejs claimes to be able to renew just parts of older solutions step by step.", "sentSegmented": ["but", "vuejs", "claimes", "to", "be", "able", "to", "renew", "just", "parts", "of", "older", "solutions", "step", "by", "step"], "sentSegmentedWithoutStops": ["vuejs", "claimes", "able", "renew", "parts", "older", "solutions", "step", "step"], "sentSegmentedWithoutStopsStemmed": ["vuej", "claim", "abl", "renew", "part", "older", "solut", "step", "step"]}, {"number": 29353, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And the wonderfull vuetify-components may help to renew those old-style-web-apps even step by step.", "sentSegmented": ["and", "the", "wonderfull", "vuetify-components", "may", "help", "to", "renew", "those", "old-style-web-apps", "even", "step", "by", "step"], "sentSegmentedWithoutStops": ["wonderfull", "vuetify-components", "may", "help", "renew", "old-style-web-apps", "even", "step", "step"], "sentSegmentedWithoutStopsStemmed": ["wonderful", "vuetify-compon", "may", "help", "renew", "old-style-web-app", "even", "step", "step"]}, {"number": 29354, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Do you see my problem/feature-request now.", "sentSegmented": ["do", "you", "see", "my", "problem/feature-request", "now"], "sentSegmentedWithoutStops": ["see", "problem/feature-request"], "sentSegmentedWithoutStopsStemmed": ["see", "problem/feature-request"]}, {"number": 29355, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sorry for my bad English.", "sentSegmented": ["sorry", "for", "my", "bad", "english"], "sentSegmentedWithoutStops": ["sorry", "bad", "english"], "sentSegmentedWithoutStopsStemmed": ["sorri", "bad", "english"]}, {"number": 29356, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In my own mother language I could explain it way better.", "sentSegmented": ["in", "my", "own", "mother", "language", "i", "could", "explain", "it", "way", "better"], "sentSegmentedWithoutStops": ["mother", "language", "could", "explain", "way", "better"], "sentSegmentedWithoutStopsStemmed": ["mother", "languag", "could", "explain", "way", "better"]}, {"number": 29357, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But again - thanks for your responce and thanks to all the people, who made those fantastic looking vuetify-stuff at all.", "sentSegmented": ["but", "again", "thanks", "for", "your", "responce", "and", "thanks", "to", "all", "the", "people", "who", "made", "those", "fantastic", "looking", "vuetify-stuff", "at", "all"], "sentSegmentedWithoutStops": ["thanks", "responce", "thanks", "people", "made", "fantastic", "looking", "vuetify-stuff"], "sentSegmentedWithoutStopsStemmed": ["thank", "responc", "thank", "peopl", "made", "fantast", "look", "vuetify-stuff"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM3MTQ2NTA1OA==", "author": {"login": "nekosaur"}, "body": "Ah, I understand. With the input refactor we're working on for 1.1 we're hoping to include native input elements where appropriate.\r\n\r\nI will be closing this issue since it is pretty much a duplicate of https://github.com/vuetifyjs/vuetify/issues/838 where we are tracking this feature.", "bodyText": "Ah, I understand. With the input refactor we're working on for 1.1 we're hoping to include native input elements where appropriate.\nI will be closing this issue since it is pretty much a duplicate of #838 where we are tracking this feature.", "bodyHTML": "<p>Ah, I understand. With the input refactor we're working on for 1.1 we're hoping to include native input elements where appropriate.</p>\n<p>I will be closing this issue since it is pretty much a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"239243597\" data-permission-text=\"Title is private\" data-url=\"https://github.com/vuetifyjs/vuetify/issues/838\" data-hovercard-type=\"issue\" data-hovercard-url=\"/vuetifyjs/vuetify/issues/838/hovercard\" href=\"https://github.com/vuetifyjs/vuetify/issues/838\">#838</a> where we are tracking this feature.</p>", "createdAt": "2018-03-08T11:48:33Z", "publishedAt": "2018-03-08T11:48:33Z", "lastEditedAt": null, "updatedAt": "2018-03-08T11:48:33Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29358, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Ah, I understand.", "sentSegmented": ["ah", "i", "understand"], "sentSegmentedWithoutStops": ["ah", "understand"], "sentSegmentedWithoutStopsStemmed": ["ah", "understand"]}, {"number": 29359, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "With the input refactor we're working on for 1.1 we're hoping to include native input elements where appropriate.", "sentSegmented": ["with", "the", "input", "refactor", "we", "'re", "working", "on", "for", "1.1", "we", "'re", "hoping", "to", "include", "native", "input", "elements", "where", "appropriate"], "sentSegmentedWithoutStops": ["input", "refactor", "'re", "working", "1.1", "'re", "hoping", "include", "native", "input", "elements", "appropriate"], "sentSegmentedWithoutStopsStemmed": ["input", "refactor", "'re", "work", "1.1", "'re", "hope", "includ", "nativ", "input", "element", "appropri"]}, {"number": 29360, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I will be closing this issue since it is pretty much a duplicate of #838 where we are tracking this feature.", "sentSegmented": ["i", "will", "be", "closing", "this", "issue", "since", "it", "is", "pretty", "much", "a", "duplicate", "of", "838", "where", "we", "are", "tracking", "this", "feature"], "sentSegmentedWithoutStops": ["closing", "issue", "since", "pretty", "much", "duplicate", "838", "tracking", "feature"], "sentSegmentedWithoutStopsStemmed": ["close", "issu", "sinc", "pretti", "much", "duplic", "838", "track", "featur"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ4Mjk4NTYxOA==", "author": {"login": "lock"}, "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a [new issue](https://issues.vuetifyjs.com) for related bugs. Please direct any non-bug questions to our [Discord](https://community.vuetifyjs.com)", "bodyText": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs. Please direct any non-bug questions to our Discord", "bodyHTML": "<p>This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a <a href=\"https://issues.vuetifyjs.com\" rel=\"nofollow\">new issue</a> for related bugs. Please direct any non-bug questions to our <a href=\"https://community.vuetifyjs.com\" rel=\"nofollow\">Discord</a></p>", "createdAt": "2019-04-14T14:17:36Z", "publishedAt": "2019-04-14T14:17:36Z", "lastEditedAt": null, "updatedAt": "2019-04-14T14:17:36Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29361, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This thread has been automatically locked since there has not been any recent activity after it was closed.", "sentSegmented": ["this", "thread", "has", "been", "automatically", "locked", "since", "there", "has", "not", "been", "any", "recent", "activity", "after", "it", "was", "closed"], "sentSegmentedWithoutStops": ["thread", "automatically", "locked", "since", "recent", "activity", "closed"], "sentSegmentedWithoutStopsStemmed": ["thread", "automat", "lock", "sinc", "recent", "activ", "close"]}, {"number": 29362, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please open a new issue for related bugs.", "sentSegmented": ["please", "open", "a", "new", "issue", "for", "related", "bugs"], "sentSegmentedWithoutStops": ["please", "open", "new", "issue", "related", "bugs"], "sentSegmentedWithoutStopsStemmed": ["pleas", "open", "new", "issu", "relat", "bug"]}, {"number": 29363, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please direct any non-bug questions to our Discord", "sentSegmented": ["please", "direct", "any", "non-bug", "questions", "to", "our", "discord"], "sentSegmentedWithoutStops": ["please", "direct", "non-bug", "questions", "discord"], "sentSegmentedWithoutStopsStemmed": ["pleas", "direct", "non-bug", "question", "discord"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOHMnGkg==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2016-09-12T00:39:35Z", "name": "duplicate"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["feature", "request", "please", "add", "standard", "form", "support", "for", "selects", "and", "selection", "controls"], "titleSegmentedWithoutStops": ["feature", "request", "please", "add", "standard", "form", "support", "selects", "selection", "controls"], "titleSegmentedWithoutStopsStemmed": ["featur", "request", "pleas", "add", "standard", "form", "support", "select", "select", "control"], "bodyParsed": [{"number": 29311, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "New Functionality", "sentSegmented": ["new", "functionality"], "sentSegmentedWithoutStops": ["new", "functionality"], "sentSegmentedWithoutStopsStemmed": ["new", "function"]}, {"number": 29312, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It'l allow me to incorporate these nice elements into my so far plain rails-driven app.", "sentSegmented": ["it", "l", "allow", "me", "to", "incorporate", "these", "nice", "elements", "into", "my", "so", "far", "plain", "rails-driven", "app"], "sentSegmentedWithoutStops": ["l", "allow", "incorporate", "nice", "elements", "far", "plain", "rails-driven", "app"], "sentSegmentedWithoutStopsStemmed": ["l", "allow", "incorpor", "nice", "element", "far", "plain", "rails-driven", "app"]}, {"number": 29313, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As a workarround can you or someone else please advice me how to implement a  component, which wraps all these -elements to make them standard-form-compatible?", "sentSegmented": ["as", "a", "workarround", "can", "you", "or", "someone", "else", "please", "advice", "me", "how", "to", "implement", "a", "component", "which", "wraps", "all", "these", "-elements", "to", "make", "them", "standard-form-compatible"], "sentSegmentedWithoutStops": ["workarround", "someone", "else", "please", "advice", "implement", "component", "wraps", "-elements", "make", "standard-form-compatible"], "sentSegmentedWithoutStopsStemmed": ["workarround", "someon", "els", "pleas", "advic", "implement", "compon", "wrap", "-element", "make", "standard-form-compat"]}, {"number": 29314, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Improvements", "sentSegmented": ["improvements"], "sentSegmentedWithoutStops": ["improvements"], "sentSegmentedWithoutStopsStemmed": ["improv"]}, {"number": 29315, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I tried to implement a wrapper to put arround  and .", "sentSegmented": ["i", "tried", "to", "implement", "a", "wrapper", "to", "put", "arround", "and"], "sentSegmentedWithoutStops": ["tried", "implement", "wrapper", "put", "arround"], "sentSegmentedWithoutStopsStemmed": ["tri", "implement", "wrapper", "put", "arround"]}, {"number": 29316, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But a the moment I fail on implementing a \"name\"-attribute.", "sentSegmented": ["but", "a", "the", "moment", "i", "fail", "on", "implementing", "a", "name", "-attribute"], "sentSegmentedWithoutStops": ["moment", "fail", "implementing", "name", "-attribute"], "sentSegmentedWithoutStopsStemmed": ["moment", "fail", "implement", "name", "-attribut"]}, {"number": 29317, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And I can't figure out how the \"name\"-attribute is supported by .", "sentSegmented": ["and", "i", "ca", "n't", "figure", "out", "how", "the", "name", "-attribute", "is", "supported", "by"], "sentSegmentedWithoutStops": ["ca", "n't", "figure", "name", "-attribute", "supported"], "sentSegmentedWithoutStopsStemmed": ["ca", "n't", "figur", "name", "-attribut", "support"]}, {"number": 29318, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Bugs or Edge Cases it Helps Avoid", "sentSegmented": ["bugs", "or", "edge", "cases", "it", "helps", "avoid"], "sentSegmentedWithoutStops": ["bugs", "edge", "cases", "helps", "avoid"], "sentSegmentedWithoutStopsStemmed": ["bug", "edg", "case", "help", "avoid"]}, {"number": 29319, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "At the moment, I test vuejs and vuetify against webcomponents/polymer.", "sentSegmented": ["at", "the", "moment", "i", "test", "vuejs", "and", "vuetify", "against", "webcomponents/polymer"], "sentSegmentedWithoutStops": ["moment", "test", "vuejs", "vuetify", "webcomponents/polymer"], "sentSegmentedWithoutStopsStemmed": ["moment", "test", "vuej", "vuetifi", "webcomponents/polym"]}, {"number": 29320, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I like the completeness of the ui-elements and the ease incorporation of vuejs and vuetify within rails/webpack/turbolinks (with webcomponents/polymer that's a nightmare).", "sentSegmented": ["i", "like", "the", "completeness", "of", "the", "ui-elements", "and", "the", "ease", "incorporation", "of", "vuejs", "and", "vuetify", "within", "rails/webpack/turbolinks", "with", "webcomponents/polymer", "that", "'s", "a", "nightmare"], "sentSegmentedWithoutStops": ["like", "completeness", "ui-elements", "ease", "incorporation", "vuejs", "vuetify", "within", "rails/webpack/turbolinks", "webcomponents/polymer", "'s", "nightmare"], "sentSegmentedWithoutStopsStemmed": ["like", "complet", "ui-el", "eas", "incorpor", "vuej", "vuetifi", "within", "rails/webpack/turbolink", "webcomponents/polym", "'s", "nightmar"]}]}