{"repository": {"owner": {"login": "httpie"}, "name": "httpie", "forkCount": 3265, "stargazerCount": 50173, "createdAt": "2012-02-25T12:39:13Z", "updatedAt": "2021-03-17T12:46:51Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "http"}}}, {"node": {"topic": {"name": "cli"}}}, {"node": {"topic": {"name": "client"}}}, {"node": {"topic": {"name": "terminal"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "json"}}}, {"node": {"topic": {"name": "development"}}}, {"node": {"topic": {"name": "rest"}}}, {"node": {"topic": {"name": "debugging"}}}, {"node": {"topic": {"name": "python"}}}, {"node": {"topic": {"name": "usability"}}}, {"node": {"topic": {"name": "httpie"}}}, {"node": {"topic": {"name": "developer-tools"}}}, {"node": {"topic": {"name": "http-client"}}}, {"node": {"topic": {"name": "curl"}}}, {"node": {"topic": {"name": "devops"}}}, {"node": {"topic": {"name": "api"}}}, {"node": {"topic": {"name": "api-client"}}}, {"node": {"topic": {"name": "rest-api"}}}, {"node": {"topic": {"name": "api-testing"}}}]}, "languages": {"edges": [{"node": {"name": "Makefile"}}, {"node": {"name": "Shell"}}, {"node": {"name": "Python"}}, {"node": {"name": "Ruby"}}]}, "primaryLanguage": {"name": "Python"}}, "id": "MDU6SXNzdWU1ODY3MTU3", "number": 78, "author": {"login": "sym3tri"}, "title": "Syntax for nested JSON ", "body": "The simple examples work, but what about nested data?\nIn curl I do something like this:\n\n-d \\\n'\"credentials\": {\n    \"username\": \"me\",\n    \"key\": \"my-key\"}\n}'\n\nHow can I do this with httpie?\n", "bodyHTML": "<p>The simple examples work, but what about nested data?<br>\nIn curl I do something like this:</p>\n<p>-d <br>\n'\"credentials\": {<br>\n\"username\": \"me\",<br>\n\"key\": \"my-key\"}<br>\n}'</p>\n<p>How can I do this with httpie?</p>", "bodyText": "The simple examples work, but what about nested data?\nIn curl I do something like this:\n-d \n'\"credentials\": {\n\"username\": \"me\",\n\"key\": \"my-key\"}\n}'\nHow can I do this with httpie?", "assignees": {"edges": []}, "createdAt": "2012-07-26T23:52:27Z", "closed": false, "closedAt": null, "lastEditedAt": null, "publishedAt": "2012-07-26T23:52:27Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDcyOTQyMjU=", "author": {"login": "jakubroztocil"}, "body": "For deeply nested JSON it's easier to use `stdin`. For example:\n\n```\n echo '{\"foo\": {\"bar\": \"baz\"}}' | http url\n\n # Or from a file:\n http url < file.json\n```\n\nMore examples are listed in the [README](https://github.com/jkbr/httpie#examples).\n", "bodyText": "For deeply nested JSON it's easier to use stdin. For example:\n echo '{\"foo\": {\"bar\": \"baz\"}}' | http url\n\n # Or from a file:\n http url < file.json\n\nMore examples are listed in the README.", "bodyHTML": "<p>For deeply nested JSON it's easier to use <code>stdin</code>. For example:</p>\n<pre><code> echo '{\"foo\": {\"bar\": \"baz\"}}' | http url\n\n # Or from a file:\n http url &lt; file.json\n</code></pre>\n<p>More examples are listed in the <a href=\"https://github.com/jkbr/httpie#examples\">README</a>.</p>", "createdAt": "2012-07-26T23:59:42Z", "publishedAt": "2012-07-26T23:59:42Z", "lastEditedAt": null, "updatedAt": "2012-07-26T23:59:42Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2016-04-05T11:12:41Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-05-01T23:00:16Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-05-18T20:08:27Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-05-29T23:31:23Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-07-10T15:14:25Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-07-11T16:29:10Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-09-03T23:02:29Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-12-05T15:29:17Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-12-09T02:36:44Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-03-12T13:19:41Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-03-15T21:24:51Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-06-06T07:36:12Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-07-03T15:03:28Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-07-12T15:38:28Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-08-23T08:24:53Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-09T14:27:34Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-10T19:54:25Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-23T17:07:48Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-27T12:21:04Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-12-07T13:17:06Z"}}]}, "bodyParsed": [{"number": 820, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For deeply nested JSON it's easier to use stdin.", "sentSegmented": ["for", "deeply", "nested", "json", "it", "'s", "easier", "to", "use", "stdin"], "sentSegmentedWithoutStops": ["deeply", "nested", "json", "'s", "easier", "use", "stdin"], "sentSegmentedWithoutStopsStemmed": ["deepli", "nest", "json", "'s", "easier", "use", "stdin"]}, {"number": 821, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For example:", "sentSegmented": ["for", "example"], "sentSegmentedWithoutStops": ["example"], "sentSegmentedWithoutStopsStemmed": ["exampl"]}, {"number": 822, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "echo '{\"foo\": {\"bar\": \"baz\"}}' | http url", "sentSegmented": ["echo", "foo", "bar", "baz", "http", "url"], "sentSegmentedWithoutStops": ["echo", "foo", "bar", "baz", "http", "url"], "sentSegmentedWithoutStopsStemmed": ["echo", "foo", "bar", "baz", "http", "url"]}, {"number": 823, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": " # Or from a file:", "sentSegmented": ["or", "from", "a", "file"], "sentSegmentedWithoutStops": ["file"], "sentSegmentedWithoutStopsStemmed": ["file"]}, {"number": 824, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": " http url < file.json", "sentSegmented": ["http", "url", "file.json"], "sentSegmentedWithoutStops": ["http", "url", "file.json"], "sentSegmentedWithoutStopsStemmed": ["http", "url", "file.json"]}, {"number": 825, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "More examples are listed in the README.", "sentSegmented": ["more", "examples", "are", "listed", "in", "the", "readme"], "sentSegmentedWithoutStops": ["examples", "listed", "readme"], "sentSegmentedWithoutStopsStemmed": ["exampl", "list", "readm"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNjcyNDUwMw==", "author": {"login": "sandstrom"}, "body": "httpie is a dream! nesting would make it even more awesome though.\n\nIt would be nice with rails-like nesting, e.g. `path/to/endpoint credentials[username]=me`\n", "bodyText": "httpie is a dream! nesting would make it even more awesome though.\nIt would be nice with rails-like nesting, e.g. path/to/endpoint credentials[username]=me", "bodyHTML": "<p>httpie is a dream! nesting would make it even more awesome though.</p>\n<p>It would be nice with rails-like nesting, e.g. <code>path/to/endpoint credentials[username]=me</code></p>", "createdAt": "2015-05-29T07:29:00Z", "publishedAt": "2015-05-29T07:29:00Z", "lastEditedAt": null, "updatedAt": "2015-05-29T07:29:00Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2016-09-13T08:21:30Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-12-13T09:51:38Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-12-07T21:54:26Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-05-24T11:54:23Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-06-18T19:47:07Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-07-05T19:06:05Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-15T10:42:43Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-07-08T12:39:10Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2020-10-15T17:10:37Z"}}, {"node": {"content": "THUMBS_DOWN", "createdAt": "2020-11-03T11:15:32Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-11-16T14:42:38Z"}}]}, "bodyParsed": [{"number": 826, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "httpie is a dream!", "sentSegmented": ["httpie", "is", "a", "dream"], "sentSegmentedWithoutStops": ["httpie", "dream"], "sentSegmentedWithoutStopsStemmed": ["httpie", "dream"]}, {"number": 827, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "nesting would make it even more awesome though.", "sentSegmented": ["nesting", "would", "make", "it", "even", "more", "awesome", "though"], "sentSegmentedWithoutStops": ["nesting", "would", "make", "even", "awesome", "though"], "sentSegmentedWithoutStopsStemmed": ["nest", "would", "make", "even", "awesom", "though"]}, {"number": 828, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It would be nice with rails-like nesting, e.g.", "sentSegmented": ["it", "would", "be", "nice", "with", "rails-like", "nesting", "e.g"], "sentSegmentedWithoutStops": ["would", "nice", "rails-like", "nesting", "e.g"], "sentSegmentedWithoutStopsStemmed": ["would", "nice", "rails-lik", "nest", "e.g"]}, {"number": 829, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "path/to/endpoint credentials[username]=me", "sentSegmented": ["path/to/endpoint", "credentials", "username", "=me"], "sentSegmentedWithoutStops": ["path/to/endpoint", "credentials", "username", "=me"], "sentSegmentedWithoutStopsStemmed": ["path/to/endpoint", "credenti", "usernam", "=me"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNjc1ODMwOA==", "author": {"login": "mfussenegger"}, "body": "Some sort of easier syntax for nested data would really be a nice thing to have.\nThere is also another issue with some syntax suggestions: https://github.com/jakubroztocil/httpie/issues/346\n", "bodyText": "Some sort of easier syntax for nested data would really be a nice thing to have.\nThere is also another issue with some syntax suggestions: #346", "bodyHTML": "<p>Some sort of easier syntax for nested data would really be a nice thing to have.<br>\nThere is also another issue with some syntax suggestions: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"71742738\" data-permission-text=\"Title is private\" data-url=\"https://github.com/httpie/httpie/issues/346\" data-hovercard-type=\"issue\" data-hovercard-url=\"/httpie/httpie/issues/346/hovercard\" href=\"https://github.com/httpie/httpie/issues/346\">#346</a></p>", "createdAt": "2015-05-29T09:33:56Z", "publishedAt": "2015-05-29T09:33:56Z", "lastEditedAt": null, "updatedAt": "2015-05-29T09:33:56Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 830, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Some sort of easier syntax for nested data would really be a nice thing to have.", "sentSegmented": ["some", "sort", "of", "easier", "syntax", "for", "nested", "data", "would", "really", "be", "a", "nice", "thing", "to", "have"], "sentSegmentedWithoutStops": ["sort", "easier", "syntax", "nested", "data", "would", "really", "nice", "thing"], "sentSegmentedWithoutStopsStemmed": ["sort", "easier", "syntax", "nest", "data", "would", "realli", "nice", "thing"]}, {"number": 831, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There is also another issue with some syntax suggestions: #346", "sentSegmented": ["there", "is", "also", "another", "issue", "with", "some", "syntax", "suggestions", "346"], "sentSegmentedWithoutStops": ["also", "another", "issue", "syntax", "suggestions", "346"], "sentSegmentedWithoutStopsStemmed": ["also", "anoth", "issu", "syntax", "suggest", "346"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNjc2MjczMw==", "author": {"login": "jakubroztocil"}, "body": "So nesting could be expressed either with brackets or using dot notation. \n", "bodyText": "So nesting could be expressed either with brackets or using dot notation.", "bodyHTML": "<p>So nesting could be expressed either with brackets or using dot notation.</p>", "createdAt": "2015-05-29T10:00:37Z", "publishedAt": "2015-05-29T10:00:37Z", "lastEditedAt": null, "updatedAt": "2015-05-29T10:00:37Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 832, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So nesting could be expressed either with brackets or using dot notation.", "sentSegmented": ["so", "nesting", "could", "be", "expressed", "either", "with", "brackets", "or", "using", "dot", "notation"], "sentSegmentedWithoutStops": ["nesting", "could", "expressed", "either", "brackets", "using", "dot", "notation"], "sentSegmentedWithoutStopsStemmed": ["nest", "could", "express", "either", "bracket", "use", "dot", "notat"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDExMDcyODYyOQ==", "author": {"login": "akamalov"}, "body": "Greetings!!!  Small question regarding nested json and httpie. So I have a json file:\n\n```\n{\n      \"apps\": [\n         { \"id\": \"/product/web/tutum-hello-world-2\",\n                   \"container\": {\n               \"type\": \"DOCKER\",\n                   \"docker\": {\n                     \"image\": \"tutum/hello-world\",\n                         \"network\": \"BRIDGE\"\n                          }\n                        },\n                        \"id\": \"/product/web/tutum-hello-world-2\",\n                        \"instances\": 1,\n                        \"cpus\": 0.25,\n                        \"mem\": 256,\n                        \"uris\": [],\n                        \"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]\n\n                }\n        ]\n}\n```\n\nI want to increase the value of  `\"instances\":` to `2` and use `\"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]`. I tried different permutations, but I am getting `No JSON object could be decoded` over and over again :(\n\nUsing just `instances:` is pretty easy:\n\n```\nroot@node108:~# http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=1\nPUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate, compress\nContent-Length: 16\nContent-Type: application/json; charset=utf-8\nHost: 10.9.158.219:8080\nUser-Agent: HTTPie/0.8.0\n\n{\n    \"instances\": 1\n}\n\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, must-revalidate\nContent-Length: 92\nContent-Type: application/json\nExpires: 0\nPragma: no-cache\nServer: Jetty(8.y.z-SNAPSHOT)\n\n{\n    \"deploymentId\": \"6eeda6ac-2ec1-4554-95f3-a0dc19333c56\", \n    \"version\": \"2015-06-10T11:33:53.165Z\"\n}\n\n```\n\n...however using it TOGETHER with `constraints` directive + nested values has proven to be difficult (for me). Any help, please ???\n\nThanks!!!!\n", "bodyText": "Greetings!!!  Small question regarding nested json and httpie. So I have a json file:\n{\n      \"apps\": [\n         { \"id\": \"/product/web/tutum-hello-world-2\",\n                   \"container\": {\n               \"type\": \"DOCKER\",\n                   \"docker\": {\n                     \"image\": \"tutum/hello-world\",\n                         \"network\": \"BRIDGE\"\n                          }\n                        },\n                        \"id\": \"/product/web/tutum-hello-world-2\",\n                        \"instances\": 1,\n                        \"cpus\": 0.25,\n                        \"mem\": 256,\n                        \"uris\": [],\n                        \"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]\n\n                }\n        ]\n}\n\nI want to increase the value of  \"instances\": to 2 and use \"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]. I tried different permutations, but I am getting No JSON object could be decoded over and over again :(\nUsing just instances: is pretty easy:\nroot@node108:~# http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=1\nPUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate, compress\nContent-Length: 16\nContent-Type: application/json; charset=utf-8\nHost: 10.9.158.219:8080\nUser-Agent: HTTPie/0.8.0\n\n{\n    \"instances\": 1\n}\n\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, must-revalidate\nContent-Length: 92\nContent-Type: application/json\nExpires: 0\nPragma: no-cache\nServer: Jetty(8.y.z-SNAPSHOT)\n\n{\n    \"deploymentId\": \"6eeda6ac-2ec1-4554-95f3-a0dc19333c56\", \n    \"version\": \"2015-06-10T11:33:53.165Z\"\n}\n\n\n...however using it TOGETHER with constraints directive + nested values has proven to be difficult (for me). Any help, please ???\nThanks!!!!", "bodyHTML": "<p>Greetings!!!  Small question regarding nested json and httpie. So I have a json file:</p>\n<pre><code>{\n      \"apps\": [\n         { \"id\": \"/product/web/tutum-hello-world-2\",\n                   \"container\": {\n               \"type\": \"DOCKER\",\n                   \"docker\": {\n                     \"image\": \"tutum/hello-world\",\n                         \"network\": \"BRIDGE\"\n                          }\n                        },\n                        \"id\": \"/product/web/tutum-hello-world-2\",\n                        \"instances\": 1,\n                        \"cpus\": 0.25,\n                        \"mem\": 256,\n                        \"uris\": [],\n                        \"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]\n\n                }\n        ]\n}\n</code></pre>\n<p>I want to increase the value of  <code>\"instances\":</code> to <code>2</code> and use <code>\"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]</code>. I tried different permutations, but I am getting <code>No JSON object could be decoded</code> over and over again :(</p>\n<p>Using just <code>instances:</code> is pretty easy:</p>\n<pre><code>root@node108:~# http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=1\nPUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate, compress\nContent-Length: 16\nContent-Type: application/json; charset=utf-8\nHost: 10.9.158.219:8080\nUser-Agent: HTTPie/0.8.0\n\n{\n    \"instances\": 1\n}\n\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, must-revalidate\nContent-Length: 92\nContent-Type: application/json\nExpires: 0\nPragma: no-cache\nServer: Jetty(8.y.z-SNAPSHOT)\n\n{\n    \"deploymentId\": \"6eeda6ac-2ec1-4554-95f3-a0dc19333c56\", \n    \"version\": \"2015-06-10T11:33:53.165Z\"\n}\n\n</code></pre>\n<p>...however using it TOGETHER with <code>constraints</code> directive + nested values has proven to be difficult (for me). Any help, please ???</p>\n<p>Thanks!!!!</p>", "createdAt": "2015-06-10T12:22:39Z", "publishedAt": "2015-06-10T12:22:39Z", "lastEditedAt": null, "updatedAt": "2015-06-10T12:32:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 833, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Greetings!!!", "sentSegmented": ["greetings"], "sentSegmentedWithoutStops": ["greetings"], "sentSegmentedWithoutStopsStemmed": ["greet"]}, {"number": 834, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Small question regarding nested json and httpie.", "sentSegmented": ["small", "question", "regarding", "nested", "json", "and", "httpie"], "sentSegmentedWithoutStops": ["small", "question", "regarding", "nested", "json", "httpie"], "sentSegmentedWithoutStopsStemmed": ["small", "question", "regard", "nest", "json", "httpie"]}, {"number": 835, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So I have a json file:", "sentSegmented": ["so", "i", "have", "a", "json", "file"], "sentSegmentedWithoutStops": ["json", "file"], "sentSegmentedWithoutStopsStemmed": ["json", "file"]}, {"number": 836, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 837, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      \"apps\": [", "sentSegmented": ["apps"], "sentSegmentedWithoutStops": ["apps"], "sentSegmentedWithoutStopsStemmed": ["app"]}, {"number": 838, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "         { \"id\": \"/product/web/tutum-hello-world-2\",", "sentSegmented": ["id", "/product/web/tutum-hello-world-2"], "sentSegmentedWithoutStops": ["id", "/product/web/tutum-hello-world-2"], "sentSegmentedWithoutStopsStemmed": ["id", "/product/web/tutum-hello-world-2"]}, {"number": 839, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                   \"container\": {", "sentSegmented": ["container"], "sentSegmentedWithoutStops": ["container"], "sentSegmentedWithoutStopsStemmed": ["contain"]}, {"number": 840, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "               \"type\": \"DOCKER\",", "sentSegmented": ["type", "docker"], "sentSegmentedWithoutStops": ["type", "docker"], "sentSegmentedWithoutStopsStemmed": ["type", "docker"]}, {"number": 841, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                   \"docker\": {", "sentSegmented": ["docker"], "sentSegmentedWithoutStops": ["docker"], "sentSegmentedWithoutStopsStemmed": ["docker"]}, {"number": 842, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                     \"image\": \"tutum/hello-world\",", "sentSegmented": ["image", "tutum/hello-world"], "sentSegmentedWithoutStops": ["image", "tutum/hello-world"], "sentSegmentedWithoutStopsStemmed": ["imag", "tutum/hello-world"]}, {"number": 843, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                         \"network\": \"BRIDGE\"", "sentSegmented": ["network", "bridge"], "sentSegmentedWithoutStops": ["network", "bridge"], "sentSegmentedWithoutStopsStemmed": ["network", "bridg"]}, {"number": 844, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                          }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 845, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        },", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 846, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"id\": \"/product/web/tutum-hello-world-2\",", "sentSegmented": ["id", "/product/web/tutum-hello-world-2"], "sentSegmentedWithoutStops": ["id", "/product/web/tutum-hello-world-2"], "sentSegmentedWithoutStopsStemmed": ["id", "/product/web/tutum-hello-world-2"]}, {"number": 847, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"instances\": 1,", "sentSegmented": ["instances", "1"], "sentSegmentedWithoutStops": ["instances", "1"], "sentSegmentedWithoutStopsStemmed": ["instanc", "1"]}, {"number": 848, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"cpus\": 0.25,", "sentSegmented": ["cpus", "0.25"], "sentSegmentedWithoutStops": ["cpus", "0.25"], "sentSegmentedWithoutStopsStemmed": ["cpu", "0.25"]}, {"number": 849, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"mem\": 256,", "sentSegmented": ["mem", "256"], "sentSegmentedWithoutStops": ["mem", "256"], "sentSegmentedWithoutStopsStemmed": ["mem", "256"]}, {"number": 850, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"uris\": [],", "sentSegmented": ["uris"], "sentSegmentedWithoutStops": ["uris"], "sentSegmentedWithoutStopsStemmed": ["uri"]}, {"number": 851, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]]", "sentSegmented": ["constraints", "hostname", "like", "server1.localnet.net"], "sentSegmentedWithoutStops": ["constraints", "hostname", "like", "server1.localnet.net"], "sentSegmentedWithoutStopsStemmed": ["constraint", "hostnam", "like", "server1.localnet.net"]}, {"number": 852, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 853, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        ]", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 854, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 855, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I want to increase the value of  \"instances\": to 2 and use \"constraints\": [[\"hostname\", \"LIKE\", \"server1.localnet.net\"]].", "sentSegmented": ["i", "want", "to", "increase", "the", "value", "of", "instances", "to", "2", "and", "use", "constraints", "hostname", "like", "server1.localnet.net"], "sentSegmentedWithoutStops": ["want", "increase", "value", "instances", "2", "use", "constraints", "hostname", "like", "server1.localnet.net"], "sentSegmentedWithoutStopsStemmed": ["want", "increas", "valu", "instanc", "2", "use", "constraint", "hostnam", "like", "server1.localnet.net"]}, {"number": 856, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I tried different permutations, but I am getting No JSON object could be decoded over and over again :(", "sentSegmented": ["i", "tried", "different", "permutations", "but", "i", "am", "getting", "no", "json", "object", "could", "be", "decoded", "over", "and", "over", "again"], "sentSegmentedWithoutStops": ["tried", "different", "permutations", "getting", "json", "object", "could", "decoded"], "sentSegmentedWithoutStopsStemmed": ["tri", "differ", "permut", "get", "json", "object", "could", "decod"]}, {"number": 857, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Using just instances: is pretty easy:", "sentSegmented": ["using", "just", "instances", "is", "pretty", "easy"], "sentSegmentedWithoutStops": ["using", "instances", "pretty", "easy"], "sentSegmentedWithoutStopsStemmed": ["use", "instanc", "pretti", "easi"]}, {"number": 858, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "root@node108:~# http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=1", "sentSegmented": ["root", "node108", "http", "-v", "put", "http", "//10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1", "instances", "=1"], "sentSegmentedWithoutStops": ["root", "node108", "http", "-v", "put", "http", "//10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1", "instances", "=1"], "sentSegmentedWithoutStopsStemmed": ["root", "node108", "http", "-v", "put", "http", "//10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1", "instanc", "=1"]}, {"number": 859, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "PUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1", "sentSegmented": ["put", "/v2/apps/product/web/tutum-hello-world-1", "http/1.1"], "sentSegmentedWithoutStops": ["put", "/v2/apps/product/web/tutum-hello-world-1", "http/1.1"], "sentSegmentedWithoutStopsStemmed": ["put", "/v2/apps/product/web/tutum-hello-world-1", "http/1.1"]}, {"number": 860, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Accept: application/json", "sentSegmented": ["accept", "application/json"], "sentSegmentedWithoutStops": ["accept", "application/json"], "sentSegmentedWithoutStopsStemmed": ["accept", "application/json"]}, {"number": 861, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Accept-Encoding: gzip, deflate, compress", "sentSegmented": ["accept-encoding", "gzip", "deflate", "compress"], "sentSegmentedWithoutStops": ["accept-encoding", "gzip", "deflate", "compress"], "sentSegmentedWithoutStopsStemmed": ["accept-encod", "gzip", "deflat", "compress"]}, {"number": 862, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Length: 16", "sentSegmented": ["content-length", "16"], "sentSegmentedWithoutStops": ["content-length", "16"], "sentSegmentedWithoutStopsStemmed": ["content-length", "16"]}, {"number": 863, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Type: application/json; charset=utf-8", "sentSegmented": ["content-type", "application/json", "charset=utf-8"], "sentSegmentedWithoutStops": ["content-type", "application/json", "charset=utf-8"], "sentSegmentedWithoutStopsStemmed": ["content-typ", "application/json", "charset=utf-8"]}, {"number": 864, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Host: 10.9.158.219:8080", "sentSegmented": ["host", "10.9.158.219:8080"], "sentSegmentedWithoutStops": ["host", "10.9.158.219:8080"], "sentSegmentedWithoutStopsStemmed": ["host", "10.9.158.219:8080"]}, {"number": 865, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "User-Agent: HTTPie/0.8.0", "sentSegmented": ["user-agent", "httpie/0.8.0"], "sentSegmentedWithoutStops": ["user-agent", "httpie/0.8.0"], "sentSegmentedWithoutStopsStemmed": ["user-ag", "httpie/0.8.0"]}, {"number": 866, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 867, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"instances\": 1", "sentSegmented": ["instances", "1"], "sentSegmentedWithoutStops": ["instances", "1"], "sentSegmentedWithoutStopsStemmed": ["instanc", "1"]}, {"number": 868, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 869, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "HTTP/1.1 200 OK", "sentSegmented": ["http/1.1", "200", "ok"], "sentSegmentedWithoutStops": ["http/1.1", "200", "ok"], "sentSegmentedWithoutStopsStemmed": ["http/1.1", "200", "ok"]}, {"number": 870, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Cache-Control: no-cache, no-store, must-revalidate", "sentSegmented": ["cache-control", "no-cache", "no-store", "must-revalidate"], "sentSegmentedWithoutStops": ["cache-control", "no-cache", "no-store", "must-revalidate"], "sentSegmentedWithoutStopsStemmed": ["cache-control", "no-cach", "no-stor", "must-revalid"]}, {"number": 871, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Length: 92", "sentSegmented": ["content-length", "92"], "sentSegmentedWithoutStops": ["content-length", "92"], "sentSegmentedWithoutStopsStemmed": ["content-length", "92"]}, {"number": 872, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Type: application/json", "sentSegmented": ["content-type", "application/json"], "sentSegmentedWithoutStops": ["content-type", "application/json"], "sentSegmentedWithoutStopsStemmed": ["content-typ", "application/json"]}, {"number": 873, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Expires: 0", "sentSegmented": ["expires", "0"], "sentSegmentedWithoutStops": ["expires", "0"], "sentSegmentedWithoutStopsStemmed": ["expir", "0"]}, {"number": 874, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Pragma: no-cache", "sentSegmented": ["pragma", "no-cache"], "sentSegmentedWithoutStops": ["pragma", "no-cache"], "sentSegmentedWithoutStopsStemmed": ["pragma", "no-cach"]}, {"number": 875, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Server: Jetty(8.y.z-SNAPSHOT)", "sentSegmented": ["server", "jetty", "8.y.z-snapshot"], "sentSegmentedWithoutStops": ["server", "jetty", "8.y.z-snapshot"], "sentSegmentedWithoutStopsStemmed": ["server", "jetti", "8.y.z-snapshot"]}, {"number": 876, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 877, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"deploymentId\": \"6eeda6ac-2ec1-4554-95f3-a0dc19333c56\", ", "sentSegmented": ["deploymentid", "6eeda6ac-2ec1-4554-95f3-a0dc19333c56"], "sentSegmentedWithoutStops": ["deploymentid", "6eeda6ac-2ec1-4554-95f3-a0dc19333c56"], "sentSegmentedWithoutStopsStemmed": ["deploymentid", "6eeda6ac-2ec1-4554-95f3-a0dc19333c56"]}, {"number": 878, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"version\": \"2015-06-10T11:33:53.165Z\"", "sentSegmented": ["version", "2015-06-10t11:33:53.165z"], "sentSegmentedWithoutStops": ["version", "2015-06-10t11:33:53.165z"], "sentSegmentedWithoutStopsStemmed": ["version", "2015-06-10t11:33:53.165z"]}, {"number": 879, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 880, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "...however using it TOGETHER with constraints directive + nested values has proven to be difficult (for me).", "sentSegmented": ["however", "using", "it", "together", "with", "constraints", "directive", "nested", "values", "has", "proven", "to", "be", "difficult", "for", "me"], "sentSegmentedWithoutStops": ["however", "using", "together", "constraints", "directive", "nested", "values", "proven", "difficult"], "sentSegmentedWithoutStopsStemmed": ["howev", "use", "togeth", "constraint", "direct", "nest", "valu", "proven", "difficult"]}, {"number": 881, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Any help, please ??", "sentSegmented": ["any", "help", "please"], "sentSegmentedWithoutStops": ["help", "please"], "sentSegmentedWithoutStopsStemmed": ["help", "pleas"]}, {"number": 882, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "?", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 883, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks!!!", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 884, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "!", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDExMDczMjIyMQ==", "author": {"login": "akamalov"}, "body": "Answering my own question:\n\n<b> http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=2 constraints:='[[\"hostname\", \"LIKE\", server1.localnet.nett\"]]' </b>\n\n```\nPUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate, compress\nContent-Length: 85\nContent-Type: application/json; charset=utf-8\nHost: 10.9.158.219:8080\nUser-Agent: HTTPie/0.8.0\n\n{\n    \"constraints\": [\n        [\n            \"hostname\", \n            \"LIKE\", \n            \"server1.localnet.net\"\n        ]\n    ], \n    \"instances\": 2\n}\n\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, must-revalidate\nContent-Length: 92\nContent-Type: application/json\nExpires: 0\nPragma: no-cache\nServer: Jetty(8.y.z-SNAPSHOT)\n\n{\n    \"deploymentId\": \"bde62f56-89f6-406a-9c3a-d0309ea3dde6\", \n    \"version\": \"2015-06-10T12:28:06.056Z\"\n}\n```\n\nThanks!!\n\nAlex\n", "bodyText": "Answering my own question:\n http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=2 constraints:='[[\"hostname\", \"LIKE\", server1.localnet.nett\"]]' \nPUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate, compress\nContent-Length: 85\nContent-Type: application/json; charset=utf-8\nHost: 10.9.158.219:8080\nUser-Agent: HTTPie/0.8.0\n\n{\n    \"constraints\": [\n        [\n            \"hostname\", \n            \"LIKE\", \n            \"server1.localnet.net\"\n        ]\n    ], \n    \"instances\": 2\n}\n\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, must-revalidate\nContent-Length: 92\nContent-Type: application/json\nExpires: 0\nPragma: no-cache\nServer: Jetty(8.y.z-SNAPSHOT)\n\n{\n    \"deploymentId\": \"bde62f56-89f6-406a-9c3a-d0309ea3dde6\", \n    \"version\": \"2015-06-10T12:28:06.056Z\"\n}\n\nThanks!!\nAlex", "bodyHTML": "<p>Answering my own question:</p>\n<p><b> http -v PUT <a rel=\"nofollow\" href=\"http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1\">http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1</a> instances:=2 constraints:='[[\"hostname\", \"LIKE\", server1.localnet.nett\"]]' </b></p>\n<pre><code>PUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate, compress\nContent-Length: 85\nContent-Type: application/json; charset=utf-8\nHost: 10.9.158.219:8080\nUser-Agent: HTTPie/0.8.0\n\n{\n    \"constraints\": [\n        [\n            \"hostname\", \n            \"LIKE\", \n            \"server1.localnet.net\"\n        ]\n    ], \n    \"instances\": 2\n}\n\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, must-revalidate\nContent-Length: 92\nContent-Type: application/json\nExpires: 0\nPragma: no-cache\nServer: Jetty(8.y.z-SNAPSHOT)\n\n{\n    \"deploymentId\": \"bde62f56-89f6-406a-9c3a-d0309ea3dde6\", \n    \"version\": \"2015-06-10T12:28:06.056Z\"\n}\n</code></pre>\n<p>Thanks!!</p>\n<p>Alex</p>", "createdAt": "2015-06-10T12:33:29Z", "publishedAt": "2015-06-10T12:33:29Z", "lastEditedAt": null, "updatedAt": "2015-06-10T12:34:31Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2016-10-21T06:23:58Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-06-13T00:04:30Z"}}]}, "bodyParsed": [{"number": 885, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Answering my own question:", "sentSegmented": ["answering", "my", "own", "question"], "sentSegmentedWithoutStops": ["answering", "question"], "sentSegmentedWithoutStopsStemmed": ["answer", "question"]}, {"number": 886, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http -v PUT http://10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1 instances:=2 constraints:='[[\"hostname\", \"LIKE\", server1.localnet.nett\"]]'", "sentSegmented": ["http", "-v", "put", "http", "//10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1", "instances", "=2", "constraints", "hostname", "like", "server1.localnet.nett"], "sentSegmentedWithoutStops": ["http", "-v", "put", "http", "//10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1", "instances", "=2", "constraints", "hostname", "like", "server1.localnet.nett"], "sentSegmentedWithoutStopsStemmed": ["http", "-v", "put", "http", "//10.10.10.219:8080/v2/apps/product/web/tutum-hello-world-1", "instanc", "=2", "constraint", "hostnam", "like", "server1.localnet.nett"]}, {"number": 887, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "PUT /v2/apps/product/web/tutum-hello-world-1 HTTP/1.1", "sentSegmented": ["put", "/v2/apps/product/web/tutum-hello-world-1", "http/1.1"], "sentSegmentedWithoutStops": ["put", "/v2/apps/product/web/tutum-hello-world-1", "http/1.1"], "sentSegmentedWithoutStopsStemmed": ["put", "/v2/apps/product/web/tutum-hello-world-1", "http/1.1"]}, {"number": 888, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Accept: application/json", "sentSegmented": ["accept", "application/json"], "sentSegmentedWithoutStops": ["accept", "application/json"], "sentSegmentedWithoutStopsStemmed": ["accept", "application/json"]}, {"number": 889, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Accept-Encoding: gzip, deflate, compress", "sentSegmented": ["accept-encoding", "gzip", "deflate", "compress"], "sentSegmentedWithoutStops": ["accept-encoding", "gzip", "deflate", "compress"], "sentSegmentedWithoutStopsStemmed": ["accept-encod", "gzip", "deflat", "compress"]}, {"number": 890, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Length: 85", "sentSegmented": ["content-length", "85"], "sentSegmentedWithoutStops": ["content-length", "85"], "sentSegmentedWithoutStopsStemmed": ["content-length", "85"]}, {"number": 891, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Type: application/json; charset=utf-8", "sentSegmented": ["content-type", "application/json", "charset=utf-8"], "sentSegmentedWithoutStops": ["content-type", "application/json", "charset=utf-8"], "sentSegmentedWithoutStopsStemmed": ["content-typ", "application/json", "charset=utf-8"]}, {"number": 892, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Host: 10.9.158.219:8080", "sentSegmented": ["host", "10.9.158.219:8080"], "sentSegmentedWithoutStops": ["host", "10.9.158.219:8080"], "sentSegmentedWithoutStopsStemmed": ["host", "10.9.158.219:8080"]}, {"number": 893, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "User-Agent: HTTPie/0.8.0", "sentSegmented": ["user-agent", "httpie/0.8.0"], "sentSegmentedWithoutStops": ["user-agent", "httpie/0.8.0"], "sentSegmentedWithoutStopsStemmed": ["user-ag", "httpie/0.8.0"]}, {"number": 894, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 895, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"constraints\": [", "sentSegmented": ["constraints"], "sentSegmentedWithoutStops": ["constraints"], "sentSegmentedWithoutStopsStemmed": ["constraint"]}, {"number": 896, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        [", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 897, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            \"hostname\", ", "sentSegmented": ["hostname"], "sentSegmentedWithoutStops": ["hostname"], "sentSegmentedWithoutStopsStemmed": ["hostnam"]}, {"number": 898, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            \"LIKE\", ", "sentSegmented": ["like"], "sentSegmentedWithoutStops": ["like"], "sentSegmentedWithoutStopsStemmed": ["like"]}, {"number": 899, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            \"server1.localnet.net\"", "sentSegmented": ["server1.localnet.net"], "sentSegmentedWithoutStops": ["server1.localnet.net"], "sentSegmentedWithoutStopsStemmed": ["server1.localnet.net"]}, {"number": 900, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        ]", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 901, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    ], ", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 902, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"instances\": 2", "sentSegmented": ["instances", "2"], "sentSegmentedWithoutStops": ["instances", "2"], "sentSegmentedWithoutStopsStemmed": ["instanc", "2"]}, {"number": 903, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 904, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "HTTP/1.1 200 OK", "sentSegmented": ["http/1.1", "200", "ok"], "sentSegmentedWithoutStops": ["http/1.1", "200", "ok"], "sentSegmentedWithoutStopsStemmed": ["http/1.1", "200", "ok"]}, {"number": 905, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Cache-Control: no-cache, no-store, must-revalidate", "sentSegmented": ["cache-control", "no-cache", "no-store", "must-revalidate"], "sentSegmentedWithoutStops": ["cache-control", "no-cache", "no-store", "must-revalidate"], "sentSegmentedWithoutStopsStemmed": ["cache-control", "no-cach", "no-stor", "must-revalid"]}, {"number": 906, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Length: 92", "sentSegmented": ["content-length", "92"], "sentSegmentedWithoutStops": ["content-length", "92"], "sentSegmentedWithoutStopsStemmed": ["content-length", "92"]}, {"number": 907, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Content-Type: application/json", "sentSegmented": ["content-type", "application/json"], "sentSegmentedWithoutStops": ["content-type", "application/json"], "sentSegmentedWithoutStopsStemmed": ["content-typ", "application/json"]}, {"number": 908, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Expires: 0", "sentSegmented": ["expires", "0"], "sentSegmentedWithoutStops": ["expires", "0"], "sentSegmentedWithoutStopsStemmed": ["expir", "0"]}, {"number": 909, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Pragma: no-cache", "sentSegmented": ["pragma", "no-cache"], "sentSegmentedWithoutStops": ["pragma", "no-cache"], "sentSegmentedWithoutStopsStemmed": ["pragma", "no-cach"]}, {"number": 910, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Server: Jetty(8.y.z-SNAPSHOT)", "sentSegmented": ["server", "jetty", "8.y.z-snapshot"], "sentSegmentedWithoutStops": ["server", "jetty", "8.y.z-snapshot"], "sentSegmentedWithoutStopsStemmed": ["server", "jetti", "8.y.z-snapshot"]}, {"number": 911, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 912, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"deploymentId\": \"bde62f56-89f6-406a-9c3a-d0309ea3dde6\", ", "sentSegmented": ["deploymentid", "bde62f56-89f6-406a-9c3a-d0309ea3dde6"], "sentSegmentedWithoutStops": ["deploymentid", "bde62f56-89f6-406a-9c3a-d0309ea3dde6"], "sentSegmentedWithoutStopsStemmed": ["deploymentid", "bde62f56-89f6-406a-9c3a-d0309ea3dde6"]}, {"number": 913, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"version\": \"2015-06-10T12:28:06.056Z\"", "sentSegmented": ["version", "2015-06-10t12:28:06.056z"], "sentSegmentedWithoutStops": ["version", "2015-06-10t12:28:06.056z"], "sentSegmentedWithoutStopsStemmed": ["version", "2015-06-10t12:28:06.056z"]}, {"number": 914, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 915, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks!", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 916, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "!", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 917, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Alex", "sentSegmented": ["alex"], "sentSegmentedWithoutStops": ["alex"], "sentSegmentedWithoutStopsStemmed": ["alex"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDE5MzEzMjk0Nw==", "author": {"login": "jakubroztocil"}, "body": "Syntax: https://www.w3.org/TR/html-json-forms/ \n\n(https://github.com/jdp/jarg)\n", "bodyText": "Syntax: https://www.w3.org/TR/html-json-forms/\n(https://github.com/jdp/jarg)", "bodyHTML": "<p>Syntax: <a rel=\"nofollow\" href=\"https://www.w3.org/TR/html-json-forms/\">https://www.w3.org/TR/html-json-forms/</a></p>\n<p>(<a href=\"https://github.com/jdp/jarg\">https://github.com/jdp/jarg</a>)</p>", "createdAt": "2016-03-07T07:08:13Z", "publishedAt": "2016-03-07T07:08:13Z", "lastEditedAt": null, "updatedAt": "2016-03-07T07:08:13Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-11-09T16:33:35Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-02-17T19:36:34Z"}}]}, "bodyParsed": [{"number": 918, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Syntax: https://www.w3.org/TR/html-json-forms/", "sentSegmented": ["syntax", "https", "//www.w3.org/tr/html-json-forms/"], "sentSegmentedWithoutStops": ["syntax", "https", "//www.w3.org/tr/html-json-forms/"], "sentSegmentedWithoutStopsStemmed": ["syntax", "http", "//www.w3.org/tr/html-json-forms/"]}, {"number": 919, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(https://github.com/jdp/jarg)", "sentSegmented": ["https", "//github.com/jdp/jarg"], "sentSegmentedWithoutStops": ["https", "//github.com/jdp/jarg"], "sentSegmentedWithoutStopsStemmed": ["http", "//github.com/jdp/jarg"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIwODkwNzA5Mg==", "author": {"login": "lastcoolnameleft"}, "body": "@jkbrzt For clarification are you referencing jarg for your own notes/feature development?  I tried the following which didn't work:\n\n```\nhttp post localhost:3000/api foo[bar]=baz\n```\n\nIs received as:\n\n```\nbody= { 'foo[bar]': 'baz' }\n```\n\nHowever, piping through jarg does seem to work:\n\n```\njarg foo[bar]=baz | http post localhost:3000/api\n```\n\nIs received as:\n\n```\nbody= { foo: { bar: 'baz' } }\n```\n", "bodyText": "@jkbrzt For clarification are you referencing jarg for your own notes/feature development?  I tried the following which didn't work:\nhttp post localhost:3000/api foo[bar]=baz\n\nIs received as:\nbody= { 'foo[bar]': 'baz' }\n\nHowever, piping through jarg does seem to work:\njarg foo[bar]=baz | http post localhost:3000/api\n\nIs received as:\nbody= { foo: { bar: 'baz' } }", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jkbrzt/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jkbrzt\">@jkbrzt</a> For clarification are you referencing jarg for your own notes/feature development?  I tried the following which didn't work:</p>\n<pre><code>http post localhost:3000/api foo[bar]=baz\n</code></pre>\n<p>Is received as:</p>\n<pre><code>body= { 'foo[bar]': 'baz' }\n</code></pre>\n<p>However, piping through jarg does seem to work:</p>\n<pre><code>jarg foo[bar]=baz | http post localhost:3000/api\n</code></pre>\n<p>Is received as:</p>\n<pre><code>body= { foo: { bar: 'baz' } }\n</code></pre>", "createdAt": "2016-04-12T13:32:46Z", "publishedAt": "2016-04-12T13:32:46Z", "lastEditedAt": null, "updatedAt": "2016-04-12T13:32:46Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2016-09-21T22:32:32Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-10-31T18:45:46Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-12-06T11:00:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-12-13T10:12:29Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-11-09T18:49:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-09-24T14:07:02Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-07-08T12:40:20Z"}}]}, "bodyParsed": [{"number": 920, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@jkbrzt For clarification are you referencing jarg for your own notes/feature development?", "sentSegmented": ["jkbrzt", "for", "clarification", "are", "you", "referencing", "jarg", "for", "your", "own", "notes/feature", "development"], "sentSegmentedWithoutStops": ["jkbrzt", "clarification", "referencing", "jarg", "notes/feature", "development"], "sentSegmentedWithoutStopsStemmed": ["jkbrzt", "clarif", "referenc", "jarg", "notes/featur", "develop"]}, {"number": 921, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I tried the following which didn't work:", "sentSegmented": ["i", "tried", "the", "following", "which", "did", "n't", "work"], "sentSegmentedWithoutStops": ["tried", "following", "n't", "work"], "sentSegmentedWithoutStopsStemmed": ["tri", "follow", "n't", "work"]}, {"number": 922, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http post localhost:3000/api foo[bar]=baz", "sentSegmented": ["http", "post", "localhost:3000/api", "foo", "bar", "=baz"], "sentSegmentedWithoutStops": ["http", "post", "localhost:3000/api", "foo", "bar", "=baz"], "sentSegmentedWithoutStopsStemmed": ["http", "post", "localhost:3000/api", "foo", "bar", "=baz"]}, {"number": 923, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is received as:", "sentSegmented": ["is", "received", "as"], "sentSegmentedWithoutStops": ["received"], "sentSegmentedWithoutStopsStemmed": ["receiv"]}, {"number": 924, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "body= { 'foo[bar]': 'baz' }", "sentSegmented": ["body=", "'foo", "bar", "'baz"], "sentSegmentedWithoutStops": ["body=", "'foo", "bar", "'baz"], "sentSegmentedWithoutStopsStemmed": ["body=", "'foo", "bar", "'baz"]}, {"number": 925, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, piping through jarg does seem to work:", "sentSegmented": ["however", "piping", "through", "jarg", "does", "seem", "to", "work"], "sentSegmentedWithoutStops": ["however", "piping", "jarg", "seem", "work"], "sentSegmentedWithoutStopsStemmed": ["howev", "pipe", "jarg", "seem", "work"]}, {"number": 926, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "jarg foo[bar]=baz | http post localhost:3000/api", "sentSegmented": ["jarg", "foo", "bar", "=baz", "http", "post", "localhost:3000/api"], "sentSegmentedWithoutStops": ["jarg", "foo", "bar", "=baz", "http", "post", "localhost:3000/api"], "sentSegmentedWithoutStopsStemmed": ["jarg", "foo", "bar", "=baz", "http", "post", "localhost:3000/api"]}, {"number": 927, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is received as:", "sentSegmented": ["is", "received", "as"], "sentSegmentedWithoutStops": ["received"], "sentSegmentedWithoutStopsStemmed": ["receiv"]}, {"number": 928, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "body= { foo: { bar: 'baz' } }", "sentSegmented": ["body=", "foo", "bar", "'baz"], "sentSegmentedWithoutStops": ["body=", "foo", "bar", "'baz"], "sentSegmentedWithoutStopsStemmed": ["body=", "foo", "bar", "'baz"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIwODkwODQxNg==", "author": {"login": "jakubroztocil"}, "body": "@lastcoolnameleft yes, I was just bookmarking that spec. Sorry for the confusion.\n", "bodyText": "@lastcoolnameleft yes, I was just bookmarking that spec. Sorry for the confusion.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lastcoolnameleft/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lastcoolnameleft\">@lastcoolnameleft</a> yes, I was just bookmarking that spec. Sorry for the confusion.</p>", "createdAt": "2016-04-12T13:36:07Z", "publishedAt": "2016-04-12T13:36:07Z", "lastEditedAt": null, "updatedAt": "2016-04-12T13:36:07Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 929, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@lastcoolnameleft yes, I was just bookmarking that spec.", "sentSegmented": ["lastcoolnameleft", "yes", "i", "was", "just", "bookmarking", "that", "spec"], "sentSegmentedWithoutStops": ["lastcoolnameleft", "yes", "bookmarking", "spec"], "sentSegmentedWithoutStopsStemmed": ["lastcoolnameleft", "ye", "bookmark", "spec"]}, {"number": 930, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sorry for the confusion.", "sentSegmented": ["sorry", "for", "the", "confusion"], "sentSegmentedWithoutStops": ["sorry", "confusion"], "sentSegmentedWithoutStopsStemmed": ["sorri", "confus"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIxOTA5OTI3MA==", "author": {"login": "Maatary"}, "body": "Hi, I am not sure to understand, how do you provided nested json object with Httpie\n", "bodyText": "Hi, I am not sure to understand, how do you provided nested json object with Httpie", "bodyHTML": "<p>Hi, I am not sure to understand, how do you provided nested json object with Httpie</p>", "createdAt": "2016-05-13T16:54:39Z", "publishedAt": "2016-05-13T16:54:39Z", "lastEditedAt": null, "updatedAt": "2016-05-13T16:54:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 931, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi, I am not sure to understand, how do you provided nested json object with Httpie", "sentSegmented": ["hi", "i", "am", "not", "sure", "to", "understand", "how", "do", "you", "provided", "nested", "json", "object", "with", "httpie"], "sentSegmentedWithoutStops": ["hi", "sure", "understand", "provided", "nested", "json", "object", "httpie"], "sentSegmentedWithoutStopsStemmed": ["hi", "sure", "understand", "provid", "nest", "json", "object", "httpie"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI1MzE2ODI4Ng==", "author": {"login": "akvadrako"}, "body": "I would prefer javascript compatible syntax, so `http post parent.child=value` and the more complex syntax for embedded dots: `[parent.with.dots]=value`. The common use case should be easiest and json properties with dots are ugly to use in javascript.\n", "bodyText": "I would prefer javascript compatible syntax, so http post parent.child=value and the more complex syntax for embedded dots: [parent.with.dots]=value. The common use case should be easiest and json properties with dots are ugly to use in javascript.", "bodyHTML": "<p>I would prefer javascript compatible syntax, so <code>http post parent.child=value</code> and the more complex syntax for embedded dots: <code>[parent.with.dots]=value</code>. The common use case should be easiest and json properties with dots are ugly to use in javascript.</p>", "createdAt": "2016-10-12T09:46:57Z", "publishedAt": "2016-10-12T09:46:57Z", "lastEditedAt": null, "updatedAt": "2016-10-12T09:46:57Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2016-10-31T18:45:31Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-12-20T22:15:06Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-01-04T03:50:01Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-01-28T08:48:01Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-02-22T01:28:54Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-05-22T14:47:30Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-05-26T19:59:24Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-06-06T09:33:53Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-06-22T19:03:45Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-08-23T08:25:43Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-11T07:27:36Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-13T09:08:02Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-11-10T16:46:04Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-12-07T03:35:33Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-12-18T14:41:17Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-01-31T13:54:34Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-03-14T13:46:03Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-03-24T00:32:59Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-15T12:56:41Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-16T13:48:38Z"}}]}, "bodyParsed": [{"number": 932, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I would prefer javascript compatible syntax, so http post parent.child=value and the more complex syntax for embedded dots: [parent.with.dots]=value.", "sentSegmented": ["i", "would", "prefer", "javascript", "compatible", "syntax", "so", "http", "post", "parent.child=value", "and", "the", "more", "complex", "syntax", "for", "embedded", "dots", "parent.with.dots", "=value"], "sentSegmentedWithoutStops": ["would", "prefer", "javascript", "compatible", "syntax", "http", "post", "parent.child=value", "complex", "syntax", "embedded", "dots", "parent.with.dots", "=value"], "sentSegmentedWithoutStopsStemmed": ["would", "prefer", "javascript", "compat", "syntax", "http", "post", "parent.child=valu", "complex", "syntax", "embed", "dot", "parent.with.dot", "=valu"]}, {"number": 933, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The common use case should be easiest and json properties with dots are ugly to use in javascript.", "sentSegmented": ["the", "common", "use", "case", "should", "be", "easiest", "and", "json", "properties", "with", "dots", "are", "ugly", "to", "use", "in", "javascript"], "sentSegmentedWithoutStops": ["common", "use", "case", "easiest", "json", "properties", "dots", "ugly", "use", "javascript"], "sentSegmentedWithoutStopsStemmed": ["common", "use", "case", "easiest", "json", "properti", "dot", "ugli", "use", "javascript"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM1MjQ0NDI2NA==", "author": {"login": "rubemz"}, "body": "any updates on this issue?\r\nI'd also prefer what @akvadrako suggested", "bodyText": "any updates on this issue?\nI'd also prefer what @akvadrako suggested", "bodyHTML": "<p>any updates on this issue?<br>\nI'd also prefer what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/akvadrako/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/akvadrako\">@akvadrako</a> suggested</p>", "createdAt": "2017-12-18T14:41:52Z", "publishedAt": "2017-12-18T14:41:52Z", "lastEditedAt": null, "updatedAt": "2017-12-18T14:41:52Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 934, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "any updates on this issue?", "sentSegmented": ["any", "updates", "on", "this", "issue"], "sentSegmentedWithoutStops": ["updates", "issue"], "sentSegmentedWithoutStopsStemmed": ["updat", "issu"]}, {"number": 935, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'd also prefer what @akvadrako suggested", "sentSegmented": ["i", "'d", "also", "prefer", "what", "akvadrako", "suggested"], "sentSegmentedWithoutStops": ["'d", "also", "prefer", "akvadrako", "suggested"], "sentSegmentedWithoutStopsStemmed": ["'d", "also", "prefer", "akvadrako", "suggest"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM4OTIwMzE1Mw==", "author": {"login": "odusseys"}, "body": "agree that this would be very welcome. ", "bodyText": "agree that this would be very welcome.", "bodyHTML": "<p>agree that this would be very welcome.</p>", "createdAt": "2018-05-15T15:11:21Z", "publishedAt": "2018-05-15T15:11:21Z", "lastEditedAt": null, "updatedAt": "2018-05-15T15:11:21Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 936, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "agree that this would be very welcome.", "sentSegmented": ["agree", "that", "this", "would", "be", "very", "welcome"], "sentSegmentedWithoutStops": ["agree", "would", "welcome"], "sentSegmentedWithoutStopsStemmed": ["agre", "would", "welcom"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMDgzMTM0OA==", "author": {"login": "nikolay"}, "body": "@jakubroztocil This issue has been open for 6 years! And it is such a rudimentary feature! Of course, we can all do `echo`, but we can use `curl` as well, right? The point is that `httpie` does all the basic REST operations. Of course, we can use it along with [jarg](https://jdp.github.io/jarg/) or [jo](https://github.com/jpmens/jo), but it's so easy to implement this within `httpie`, I think!", "bodyText": "@jakubroztocil This issue has been open for 6 years! And it is such a rudimentary feature! Of course, we can all do echo, but we can use curl as well, right? The point is that httpie does all the basic REST operations. Of course, we can use it along with jarg or jo, but it's so easy to implement this within httpie, I think!", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jakubroztocil/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jakubroztocil\">@jakubroztocil</a> This issue has been open for 6 years! And it is such a rudimentary feature! Of course, we can all do <code>echo</code>, but we can use <code>curl</code> as well, right? The point is that <code>httpie</code> does all the basic REST operations. Of course, we can use it along with <a href=\"https://jdp.github.io/jarg/\" rel=\"nofollow\">jarg</a> or <a href=\"https://github.com/jpmens/jo\">jo</a>, but it's so easy to implement this within <code>httpie</code>, I think!</p>", "createdAt": "2018-06-27T21:15:02Z", "publishedAt": "2018-06-27T21:15:02Z", "lastEditedAt": null, "updatedAt": "2018-06-27T21:15:02Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-11-20T12:04:55Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-23T22:24:01Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-05-02T15:10:47Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-07-05T19:06:39Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-11-04T18:35:56Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-02-14T08:15:22Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-07-08T12:41:00Z"}}, {"node": {"content": "CONFUSED", "createdAt": "2021-02-06T05:55:54Z"}}]}, "bodyParsed": [{"number": 937, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@jakubroztocil This issue has been open for 6 years!", "sentSegmented": ["jakubroztocil", "this", "issue", "has", "been", "open", "for", "6", "years"], "sentSegmentedWithoutStops": ["jakubroztocil", "issue", "open", "6", "years"], "sentSegmentedWithoutStopsStemmed": ["jakubroztocil", "issu", "open", "6", "year"]}, {"number": 938, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And it is such a rudimentary feature!", "sentSegmented": ["and", "it", "is", "such", "a", "rudimentary", "feature"], "sentSegmentedWithoutStops": ["rudimentary", "feature"], "sentSegmentedWithoutStopsStemmed": ["rudimentari", "featur"]}, {"number": 939, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Of course, we can all do echo, but we can use curl as well, right?", "sentSegmented": ["of", "course", "we", "can", "all", "do", "echo", "but", "we", "can", "use", "curl", "as", "well", "right"], "sentSegmentedWithoutStops": ["course", "echo", "use", "curl", "well", "right"], "sentSegmentedWithoutStopsStemmed": ["cours", "echo", "use", "curl", "well", "right"]}, {"number": 940, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The point is that httpie does all the basic REST operations.", "sentSegmented": ["the", "point", "is", "that", "httpie", "does", "all", "the", "basic", "rest", "operations"], "sentSegmentedWithoutStops": ["point", "httpie", "basic", "rest", "operations"], "sentSegmentedWithoutStopsStemmed": ["point", "httpie", "basic", "rest", "oper"]}, {"number": 941, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Of course, we can use it along with jarg or jo, but it's so easy to implement this within httpie, I think!", "sentSegmented": ["of", "course", "we", "can", "use", "it", "along", "with", "jarg", "or", "jo", "but", "it", "'s", "so", "easy", "to", "implement", "this", "within", "httpie", "i", "think"], "sentSegmentedWithoutStops": ["course", "use", "along", "jarg", "jo", "'s", "easy", "implement", "within", "httpie", "think"], "sentSegmentedWithoutStopsStemmed": ["cours", "use", "along", "jarg", "jo", "'s", "easi", "implement", "within", "httpie", "think"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMDg0MzMwNQ==", "author": {"login": "merwok"}, "body": "I don\u2019t think it\u2019s that simple, or someone would have sent a pull request!\r\n\r\nWe should appreciate projects written on free time and given for free.", "bodyText": "I don\u2019t think it\u2019s that simple, or someone would have sent a pull request!\nWe should appreciate projects written on free time and given for free.", "bodyHTML": "<p>I don\u2019t think it\u2019s that simple, or someone would have sent a pull request!</p>\n<p>We should appreciate projects written on free time and given for free.</p>", "createdAt": "2018-06-27T22:02:19Z", "publishedAt": "2018-06-27T22:02:19Z", "lastEditedAt": null, "updatedAt": "2018-06-27T22:02:19Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-01-24T19:05:11Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-07-08T12:41:09Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-08-12T17:49:04Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2021-02-03T14:00:18Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2021-02-06T05:56:06Z"}}]}, "bodyParsed": [{"number": 942, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I don\u2019t think it\u2019s that simple, or someone would have sent a pull request!", "sentSegmented": ["i", "don", "t", "think", "it", "s", "that", "simple", "or", "someone", "would", "have", "sent", "a", "pull", "request"], "sentSegmentedWithoutStops": ["think", "simple", "someone", "would", "sent", "pull", "request"], "sentSegmentedWithoutStopsStemmed": ["think", "simpl", "someon", "would", "sent", "pull", "request"]}, {"number": 943, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We should appreciate projects written on free time and given for free.", "sentSegmented": ["we", "should", "appreciate", "projects", "written", "on", "free", "time", "and", "given", "for", "free"], "sentSegmentedWithoutStops": ["appreciate", "projects", "written", "free", "time", "given", "free"], "sentSegmentedWithoutStopsStemmed": ["appreci", "project", "written", "free", "time", "given", "free"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMDg0NzAwMg==", "author": {"login": "nikolay"}, "body": "@merwork We appreciate it. But how many REST services you know to have only a flat JSON?", "bodyText": "@merwork We appreciate it. But how many REST services you know to have only a flat JSON?", "bodyHTML": "<p>@merwork We appreciate it. But how many REST services you know to have only a flat JSON?</p>", "createdAt": "2018-06-27T22:16:48Z", "publishedAt": "2018-06-27T22:16:48Z", "lastEditedAt": null, "updatedAt": "2018-06-27T22:16:48Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-11-04T18:36:13Z"}}]}, "bodyParsed": [{"number": 944, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@merwork We appreciate it.", "sentSegmented": ["merwork", "we", "appreciate", "it"], "sentSegmentedWithoutStops": ["merwork", "appreciate"], "sentSegmentedWithoutStopsStemmed": ["merwork", "appreci"]}, {"number": 945, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But how many REST services you know to have only a flat JSON?", "sentSegmented": ["but", "how", "many", "rest", "services", "you", "know", "to", "have", "only", "a", "flat", "json"], "sentSegmentedWithoutStops": ["many", "rest", "services", "know", "flat", "json"], "sentSegmentedWithoutStopsStemmed": ["mani", "rest", "servic", "know", "flat", "json"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMDg0NzE3OA==", "author": {"login": "merwok"}, "body": "Many that I write :)\r\n\r\nThanks for the pointers to jarg and jo!  Goes well in my json toolbox with jq and gron.", "bodyText": "Many that I write :)\nThanks for the pointers to jarg and jo!  Goes well in my json toolbox with jq and gron.", "bodyHTML": "<p>Many that I write :)</p>\n<p>Thanks for the pointers to jarg and jo!  Goes well in my json toolbox with jq and gron.</p>", "createdAt": "2018-06-27T22:17:29Z", "publishedAt": "2018-06-27T22:17:29Z", "lastEditedAt": null, "updatedAt": "2018-06-27T22:17:29Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 946, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Many that I write :)", "sentSegmented": ["many", "that", "i", "write"], "sentSegmentedWithoutStops": ["many", "write"], "sentSegmentedWithoutStopsStemmed": ["mani", "write"]}, {"number": 947, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks for the pointers to jarg and jo!", "sentSegmented": ["thanks", "for", "the", "pointers", "to", "jarg", "and", "jo"], "sentSegmentedWithoutStops": ["thanks", "pointers", "jarg", "jo"], "sentSegmentedWithoutStopsStemmed": ["thank", "pointer", "jarg", "jo"]}, {"number": 948, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Goes well in my json toolbox with jq and gron.", "sentSegmented": ["goes", "well", "in", "my", "json", "toolbox", "with", "jq", "and", "gron"], "sentSegmentedWithoutStops": ["goes", "well", "json", "toolbox", "jq", "gron"], "sentSegmentedWithoutStopsStemmed": ["goe", "well", "json", "toolbox", "jq", "gron"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDcwOTQzMjk0OA==", "author": {"login": "segevfiner"}, "body": "If you don't like piping JSON from `jo` or `jarg` before the http command. you can also use shell process substitution so the JSON is in a similar location when using the builtin syntax of HTTPie:\r\n```sh\r\nhttps postman-echo.com/post @<(jo hello=world)\r\n```\r\n\r\nIt would still be much better if HTTPie supported a syntax like those tools of course.", "bodyText": "If you don't like piping JSON from jo or jarg before the http command. you can also use shell process substitution so the JSON is in a similar location when using the builtin syntax of HTTPie:\nhttps postman-echo.com/post @<(jo hello=world)\nIt would still be much better if HTTPie supported a syntax like those tools of course.", "bodyHTML": "<p>If you don't like piping JSON from <code>jo</code> or <code>jarg</code> before the http command. you can also use shell process substitution so the JSON is in a similar location when using the builtin syntax of HTTPie:</p>\n<div class=\"highlight highlight-source-shell\"><pre>https postman-echo.com/post @<span class=\"pl-s\"><span class=\"pl-pds\">&lt;(</span>jo hello=world<span class=\"pl-pds\">)</span></span></pre></div>\n<p>It would still be much better if HTTPie supported a syntax like those tools of course.</p>", "createdAt": "2020-10-15T16:13:18Z", "publishedAt": "2020-10-15T16:13:18Z", "lastEditedAt": null, "updatedAt": "2020-10-15T16:13:18Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-10-16T08:00:53Z"}}]}, "bodyParsed": [{"number": 949, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you don't like piping JSON from jo or jarg before the http command.", "sentSegmented": ["if", "you", "do", "n't", "like", "piping", "json", "from", "jo", "or", "jarg", "before", "the", "http", "command"], "sentSegmentedWithoutStops": ["n't", "like", "piping", "json", "jo", "jarg", "http", "command"], "sentSegmentedWithoutStopsStemmed": ["n't", "like", "pipe", "json", "jo", "jarg", "http", "command"]}, {"number": 950, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "you can also use shell process substitution so the JSON is in a similar location when using the builtin syntax of HTTPie:", "sentSegmented": ["you", "can", "also", "use", "shell", "process", "substitution", "so", "the", "json", "is", "in", "a", "similar", "location", "when", "using", "the", "builtin", "syntax", "of", "httpie"], "sentSegmentedWithoutStops": ["also", "use", "shell", "process", "substitution", "json", "similar", "location", "using", "builtin", "syntax", "httpie"], "sentSegmentedWithoutStopsStemmed": ["also", "use", "shell", "process", "substitut", "json", "similar", "locat", "use", "builtin", "syntax", "httpie"]}, {"number": 951, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "https postman-echo.com/post @<(jo hello=world)", "sentSegmented": ["https", "postman-echo.com/post", "jo", "hello=world"], "sentSegmentedWithoutStops": ["https", "postman-echo.com/post", "jo", "hello=world"], "sentSegmentedWithoutStopsStemmed": ["http", "postman-echo.com/post", "jo", "hello=world"]}, {"number": 952, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It would still be much better if HTTPie supported a syntax like those tools of course.", "sentSegmented": ["it", "would", "still", "be", "much", "better", "if", "httpie", "supported", "a", "syntax", "like", "those", "tools", "of", "course"], "sentSegmentedWithoutStops": ["would", "still", "much", "better", "httpie", "supported", "syntax", "like", "tools", "course"], "sentSegmentedWithoutStopsStemmed": ["would", "still", "much", "better", "httpie", "support", "syntax", "like", "tool", "cours"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc3Njc1OTE1MA==", "author": {"login": "jakubroztocil"}, "body": "An important consideration here is backwards compatibility. If we simply introduce a syntax relying on dots, than a script containing the following HTTPie command:\r\n\r\n```bash\r\n$ http httpbin.org/post  foo.bar=baz\r\n```\r\nWhich currently produces this JSON:\r\n\r\n```json\r\n{\r\n    \"foo.bar\": \"baz\"\r\n}\r\n```\r\n\r\nWould unexpectly result in:\r\n\r\n```json\r\n{\r\n    \"foo\": {\r\n        \"bar\": \"baz\"\r\n    }\r\n}\r\n```\r\n\r\nSo the command would have to be updated to escape the newly-meanignful `.` character:\r\n\r\n```bash\r\n$ http httpbin.org/post  'foo\\.bar=baz'\r\n```\r\n", "bodyText": "An important consideration here is backwards compatibility. If we simply introduce a syntax relying on dots, than a script containing the following HTTPie command:\n$ http httpbin.org/post  foo.bar=baz\nWhich currently produces this JSON:\n{\n    \"foo.bar\": \"baz\"\n}\nWould unexpectly result in:\n{\n    \"foo\": {\n        \"bar\": \"baz\"\n    }\n}\nSo the command would have to be updated to escape the newly-meanignful . character:\n$ http httpbin.org/post  'foo\\.bar=baz'", "bodyHTML": "<p>An important consideration here is backwards compatibility. If we simply introduce a syntax relying on dots, than a script containing the following HTTPie command:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ http httpbin.org/post  foo.bar=baz</pre></div>\n<p>Which currently produces this JSON:</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo.bar<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p>Would unexpectly result in:</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>: {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>\n    }\n}</pre></div>\n<p>So the command would have to be updated to escape the newly-meanignful <code>.</code> character:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ http httpbin.org/post  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo\\.bar=baz<span class=\"pl-pds\">'</span></span></pre></div>", "createdAt": "2021-02-10T14:49:42Z", "publishedAt": "2021-02-10T14:49:42Z", "lastEditedAt": "2021-02-10T15:11:21Z", "updatedAt": "2021-02-10T15:11:21Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2021-02-10T15:06:31Z"}}]}, "bodyParsed": [{"number": 953, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "An important consideration here is backwards compatibility.", "sentSegmented": ["an", "important", "consideration", "here", "is", "backwards", "compatibility"], "sentSegmentedWithoutStops": ["important", "consideration", "backwards", "compatibility"], "sentSegmentedWithoutStopsStemmed": ["import", "consider", "backward", "compat"]}, {"number": 954, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If we simply introduce a syntax relying on dots, than a script containing the following HTTPie command:", "sentSegmented": ["if", "we", "simply", "introduce", "a", "syntax", "relying", "on", "dots", "than", "a", "script", "containing", "the", "following", "httpie", "command"], "sentSegmentedWithoutStops": ["simply", "introduce", "syntax", "relying", "dots", "script", "containing", "following", "httpie", "command"], "sentSegmentedWithoutStopsStemmed": ["simpli", "introduc", "syntax", "reli", "dot", "script", "contain", "follow", "httpie", "command"]}, {"number": 955, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$ http httpbin.org/post  foo.bar=baz", "sentSegmented": ["http", "httpbin.org/post", "foo.bar=baz"], "sentSegmentedWithoutStops": ["http", "httpbin.org/post", "foo.bar=baz"], "sentSegmentedWithoutStopsStemmed": ["http", "httpbin.org/post", "foo.bar=baz"]}, {"number": 956, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Which currently produces this JSON:", "sentSegmented": ["which", "currently", "produces", "this", "json"], "sentSegmentedWithoutStops": ["currently", "produces", "json"], "sentSegmentedWithoutStopsStemmed": ["current", "produc", "json"]}, {"number": 957, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 958, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"foo.bar\": \"baz\"", "sentSegmented": ["foo.bar", "baz"], "sentSegmentedWithoutStops": ["foo.bar", "baz"], "sentSegmentedWithoutStopsStemmed": ["foo.bar", "baz"]}, {"number": 959, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 960, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Would unexpectly result in:", "sentSegmented": ["would", "unexpectly", "result", "in"], "sentSegmentedWithoutStops": ["would", "unexpectly", "result"], "sentSegmentedWithoutStopsStemmed": ["would", "unexpectli", "result"]}, {"number": 961, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 962, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    \"foo\": {", "sentSegmented": ["foo"], "sentSegmentedWithoutStops": ["foo"], "sentSegmentedWithoutStopsStemmed": ["foo"]}, {"number": 963, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        \"bar\": \"baz\"", "sentSegmented": ["bar", "baz"], "sentSegmentedWithoutStops": ["bar", "baz"], "sentSegmentedWithoutStopsStemmed": ["bar", "baz"]}, {"number": 964, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 965, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 966, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So the command would have to be updated to escape the newly-meanignful .", "sentSegmented": ["so", "the", "command", "would", "have", "to", "be", "updated", "to", "escape", "the", "newly-meanignful"], "sentSegmentedWithoutStops": ["command", "would", "updated", "escape", "newly-meanignful"], "sentSegmentedWithoutStopsStemmed": ["command", "would", "updat", "escap", "newly-meanign"]}, {"number": 967, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "character:", "sentSegmented": ["character"], "sentSegmentedWithoutStops": ["character"], "sentSegmentedWithoutStopsStemmed": ["charact"]}, {"number": 968, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$ http httpbin.org/post  'foo\\.bar=baz'", "sentSegmented": ["http", "httpbin.org/post", "'foo\\.bar=baz"], "sentSegmentedWithoutStops": ["http", "httpbin.org/post", "'foo\\.bar=baz"], "sentSegmentedWithoutStopsStemmed": ["http", "httpbin.org/post", "'foo\\.bar=baz"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc3Njc3MjM1NA==", "author": {"login": "merwok"}, "body": "+1 for the compat issue, but the proposed solution should be more complicated:\r\n\r\n```shell\r\n$ http httpbin.org/post \"foo\\.bar=baz\"\r\n```\r\n\r\notherwise the shell escape `\\.` is interpreted by the shell as `.` and the backslash is not passed to the command called.", "bodyText": "+1 for the compat issue, but the proposed solution should be more complicated:\n$ http httpbin.org/post \"foo\\.bar=baz\"\notherwise the shell escape \\. is interpreted by the shell as . and the backslash is not passed to the command called.", "bodyHTML": "<p>+1 for the compat issue, but the proposed solution should be more complicated:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ http httpbin.org/post <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo\\.bar=baz<span class=\"pl-pds\">\"</span></span></pre></div>\n<p>otherwise the shell escape <code>\\.</code> is interpreted by the shell as <code>.</code> and the backslash is not passed to the command called.</p>", "createdAt": "2021-02-10T15:08:45Z", "publishedAt": "2021-02-10T15:08:45Z", "lastEditedAt": null, "updatedAt": "2021-02-10T15:08:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 969, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1 for the compat issue, but the proposed solution should be more complicated:", "sentSegmented": ["+1", "for", "the", "compat", "issue", "but", "the", "proposed", "solution", "should", "be", "more", "complicated"], "sentSegmentedWithoutStops": ["+1", "compat", "issue", "proposed", "solution", "complicated"], "sentSegmentedWithoutStopsStemmed": ["+1", "compat", "issu", "propos", "solut", "complic"]}, {"number": 970, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$ http httpbin.org/post \"foo\\.bar=baz\"", "sentSegmented": ["http", "httpbin.org/post", "foo\\.bar=baz"], "sentSegmentedWithoutStops": ["http", "httpbin.org/post", "foo\\.bar=baz"], "sentSegmentedWithoutStopsStemmed": ["http", "httpbin.org/post", "foo\\.bar=baz"]}, {"number": 971, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "otherwise the shell escape \\.", "sentSegmented": ["otherwise", "the", "shell", "escape"], "sentSegmentedWithoutStops": ["otherwise", "shell", "escape"], "sentSegmentedWithoutStopsStemmed": ["otherwis", "shell", "escap"]}, {"number": 972, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "is interpreted by the shell as .", "sentSegmented": ["is", "interpreted", "by", "the", "shell", "as"], "sentSegmentedWithoutStops": ["interpreted", "shell"], "sentSegmentedWithoutStopsStemmed": ["interpret", "shell"]}, {"number": 973, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and the backslash is not passed to the command called.", "sentSegmented": ["and", "the", "backslash", "is", "not", "passed", "to", "the", "command", "called"], "sentSegmentedWithoutStops": ["backslash", "passed", "command", "called"], "sentSegmentedWithoutStopsStemmed": ["backslash", "pass", "command", "call"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc3Njc3NDk0Mg==", "author": {"login": "jakubroztocil"}, "body": "@merwok Good point. I\u2019ve updated the example to take shell escaping into account. General [request item escaping rules](https://httpie.io/docs#escaping-rules) apply.", "bodyText": "@merwok Good point. I\u2019ve updated the example to take shell escaping into account. General request item escaping rules apply.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/merwok/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/merwok\">@merwok</a> Good point. I\u2019ve updated the example to take shell escaping into account. General <a href=\"https://httpie.io/docs#escaping-rules\" rel=\"nofollow\">request item escaping rules</a> apply.</p>", "createdAt": "2021-02-10T15:12:37Z", "publishedAt": "2021-02-10T15:12:37Z", "lastEditedAt": null, "updatedAt": "2021-02-10T15:12:37Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 974, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@merwok Good point.", "sentSegmented": ["merwok", "good", "point"], "sentSegmentedWithoutStops": ["merwok", "good", "point"], "sentSegmentedWithoutStopsStemmed": ["merwok", "good", "point"]}, {"number": 975, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I\u2019ve updated the example to take shell escaping into account.", "sentSegmented": ["i", "ve", "updated", "the", "example", "to", "take", "shell", "escaping", "into", "account"], "sentSegmentedWithoutStops": ["updated", "example", "take", "shell", "escaping", "account"], "sentSegmentedWithoutStopsStemmed": ["updat", "exampl", "take", "shell", "escap", "account"]}, {"number": 976, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "General request item escaping rules apply.", "sentSegmented": ["general", "request", "item", "escaping", "rules", "apply"], "sentSegmentedWithoutStops": ["general", "request", "item", "escaping", "rules", "apply"], "sentSegmentedWithoutStopsStemmed": ["gener", "request", "item", "escap", "rule", "appli"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOLkybAg==", "hasNextPage": true}, "totalCount": 21}, "labels": {"edges": [{"node": {"createdAt": "2007-10-20T11:24:19Z", "name": "enhancement"}}, {"node": {"createdAt": "2021-01-20T13:55:48Z", "name": "needs product design"}}, {"node": {"createdAt": "2012-09-21T03:10:48Z", "name": "planned"}}]}, "milestone": null, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2016-07-10T15:14:31Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2016-10-12T09:43:38Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-06-06T09:33:39Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-02-17T19:37:47Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-25T14:05:45Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-09-03T15:53:55Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-09-23T19:45:30Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-11-16T17:57:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-03-27T21:28:08Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-08-28T17:09:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-11T21:10:42Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-19T02:37:55Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-08-23T06:14:04Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-10-03T09:00:02Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-10-19T18:00:09Z"}}]}, "state": "OPEN", "titleSegmented": ["syntax", "for", "nested", "json"], "titleSegmentedWithoutStops": ["syntax", "nested", "json"], "titleSegmentedWithoutStopsStemmed": ["syntax", "nest", "json"], "bodyParsed": [{"number": 812, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The simple examples work, but what about nested data?", "sentSegmented": ["the", "simple", "examples", "work", "but", "what", "about", "nested", "data"], "sentSegmentedWithoutStops": ["simple", "examples", "work", "nested", "data"], "sentSegmentedWithoutStopsStemmed": ["simpl", "exampl", "work", "nest", "data"]}, {"number": 813, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In curl I do something like this:", "sentSegmented": ["in", "curl", "i", "do", "something", "like", "this"], "sentSegmentedWithoutStops": ["curl", "something", "like"], "sentSegmentedWithoutStopsStemmed": ["curl", "someth", "like"]}, {"number": 814, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "-d", "sentSegmented": ["-d"], "sentSegmentedWithoutStops": ["-d"], "sentSegmentedWithoutStopsStemmed": ["-d"]}, {"number": 815, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "'\"credentials\": {", "sentSegmented": ["credentials"], "sentSegmentedWithoutStops": ["credentials"], "sentSegmentedWithoutStopsStemmed": ["credenti"]}, {"number": 816, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\"username\": \"me\",", "sentSegmented": ["username", "me"], "sentSegmentedWithoutStops": ["username"], "sentSegmentedWithoutStopsStemmed": ["usernam"]}, {"number": 817, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\"key\": \"my-key\"}", "sentSegmented": ["key", "my-key"], "sentSegmentedWithoutStops": ["key", "my-key"], "sentSegmentedWithoutStopsStemmed": ["key", "my-key"]}, {"number": 818, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}'", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 819, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "How can I do this with httpie?", "sentSegmented": ["how", "can", "i", "do", "this", "with", "httpie"], "sentSegmentedWithoutStops": ["httpie"], "sentSegmentedWithoutStopsStemmed": ["httpie"]}]}