{"repository": {"owner": {"login": "httpie"}, "name": "httpie", "forkCount": 3258, "stargazerCount": 50112, "createdAt": "2012-02-25T12:39:13Z", "updatedAt": "2021-03-11T03:37:52Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "http"}}}, {"node": {"topic": {"name": "cli"}}}, {"node": {"topic": {"name": "client"}}}, {"node": {"topic": {"name": "terminal"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "json"}}}, {"node": {"topic": {"name": "development"}}}, {"node": {"topic": {"name": "rest"}}}, {"node": {"topic": {"name": "debugging"}}}, {"node": {"topic": {"name": "python"}}}, {"node": {"topic": {"name": "usability"}}}, {"node": {"topic": {"name": "httpie"}}}, {"node": {"topic": {"name": "developer-tools"}}}, {"node": {"topic": {"name": "http-client"}}}, {"node": {"topic": {"name": "curl"}}}, {"node": {"topic": {"name": "devops"}}}, {"node": {"topic": {"name": "api"}}}, {"node": {"topic": {"name": "api-client"}}}, {"node": {"topic": {"name": "rest-api"}}}, {"node": {"topic": {"name": "api-testing"}}}]}, "languages": {"edges": [{"node": {"name": "Makefile"}}, {"node": {"name": "Shell"}}, {"node": {"name": "Python"}}, {"node": {"name": "Ruby"}}]}, "primaryLanguage": {"name": "Python"}}, "id": "MDU6SXNzdWU3MTc0MjczOA==", "number": 346, "author": {"login": "BrandonY"}, "title": "Feature request: Quick way to set nested JSON values", "body": "Let's say an API takes several values, like in this example call:\n\n```\n{\n   \"name\": \"Fred\",\n   \"age\", 27,\n   \"pets\" : {\n      \"penguins\": 2,\n      \"dogs\":1\n   }\n}\n```\n\nI can reference name and age easily:\n\n```\n$> http PUT https://www.example.com/users/1  name=Phil age=25\n```\n\nBut editing pets is uglier:\n\n```\n$>   http PUT https://www.example.com/users/1 pets:='{\"penguins\":2, \"dogs\":1}'\n```\n\nI'd like to do something like one of these:\n\n```\n$> http PUT https://www.example.com/users/1 pets.penguins=2  pets.dogs=1\n$> http PUT https://www.example.com/users/1 pets=\"penguins=2 dogs=1\"\n$> http PUT https://www.example.com/users/1 pets\\penguins=2 pets\\dogs=1\n```\n\nThat said, \".\" and \"\\\" could conceivably be part of a JSON key, so maybe that's not actually a good idea?\n", "bodyHTML": "<p>Let's say an API takes several values, like in this example call:</p>\n<pre><code>{\n   \"name\": \"Fred\",\n   \"age\", 27,\n   \"pets\" : {\n      \"penguins\": 2,\n      \"dogs\":1\n   }\n}\n</code></pre>\n<p>I can reference name and age easily:</p>\n<pre><code>$&gt; http PUT https://www.example.com/users/1  name=Phil age=25\n</code></pre>\n<p>But editing pets is uglier:</p>\n<pre><code>$&gt;   http PUT https://www.example.com/users/1 pets:='{\"penguins\":2, \"dogs\":1}'\n</code></pre>\n<p>I'd like to do something like one of these:</p>\n<pre><code>$&gt; http PUT https://www.example.com/users/1 pets.penguins=2  pets.dogs=1\n$&gt; http PUT https://www.example.com/users/1 pets=\"penguins=2 dogs=1\"\n$&gt; http PUT https://www.example.com/users/1 pets\\penguins=2 pets\\dogs=1\n</code></pre>\n<p>That said, \".\" and \"\" could conceivably be part of a JSON key, so maybe that's not actually a good idea?</p>", "bodyText": "Let's say an API takes several values, like in this example call:\n{\n   \"name\": \"Fred\",\n   \"age\", 27,\n   \"pets\" : {\n      \"penguins\": 2,\n      \"dogs\":1\n   }\n}\n\nI can reference name and age easily:\n$> http PUT https://www.example.com/users/1  name=Phil age=25\n\nBut editing pets is uglier:\n$>   http PUT https://www.example.com/users/1 pets:='{\"penguins\":2, \"dogs\":1}'\n\nI'd like to do something like one of these:\n$> http PUT https://www.example.com/users/1 pets.penguins=2  pets.dogs=1\n$> http PUT https://www.example.com/users/1 pets=\"penguins=2 dogs=1\"\n$> http PUT https://www.example.com/users/1 pets\\penguins=2 pets\\dogs=1\n\nThat said, \".\" and \"\" could conceivably be part of a JSON key, so maybe that's not actually a good idea?", "assignees": {"edges": []}, "createdAt": "2015-04-29T00:19:06Z", "closed": true, "closedAt": "2015-06-26T15:47:43Z", "lastEditedAt": null, "publishedAt": "2015-04-29T00:19:06Z", "comments": {"totalCount": 3, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzQ2MzU3OA==", "author": {"login": "matleh"}, "body": "Maybe have a look at JSONPath (http://goessner.net/articles/JsonPath/) for syntax inspiration.\n", "bodyText": "Maybe have a look at JSONPath (http://goessner.net/articles/JsonPath/) for syntax inspiration.", "bodyHTML": "<p>Maybe have a look at JSONPath (<a rel=\"nofollow\" href=\"http://goessner.net/articles/JsonPath/\">http://goessner.net/articles/JsonPath/</a>) for syntax inspiration.</p>", "createdAt": "2015-06-01T13:27:06Z", "publishedAt": "2015-06-01T13:27:06Z", "lastEditedAt": null, "updatedAt": "2015-06-01T13:27:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 809, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Maybe have a look at JSONPath (http://goessner.net/articles/JsonPath/) for syntax inspiration.", "sentSegmented": ["maybe", "have", "a", "look", "at", "jsonpath", "http", "//goessner.net/articles/jsonpath/", "for", "syntax", "inspiration"], "sentSegmentedWithoutStops": ["maybe", "look", "jsonpath", "http", "//goessner.net/articles/jsonpath/", "syntax", "inspiration"], "sentSegmentedWithoutStopsStemmed": ["mayb", "look", "jsonpath", "http", "//goessner.net/articles/jsonpath/", "syntax", "inspir"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNzU1Nzk4MA==", "author": {"login": "sigmavirus24"}, "body": "Duplicate of #78 \n", "bodyText": "Duplicate of #78", "bodyHTML": "<p><span aria-label=\"This issue is a duplicate of #78\" class=\"issue-keyword tooltipped tooltipped-se\">Duplicate of</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"5867157\" data-permission-text=\"Title is private\" data-url=\"https://github.com/httpie/httpie/issues/78\" data-hovercard-type=\"issue\" data-hovercard-url=\"/httpie/httpie/issues/78/hovercard\" href=\"https://github.com/httpie/httpie/issues/78\">#78</a></p>", "createdAt": "2015-06-01T15:02:24Z", "publishedAt": "2015-06-01T15:02:24Z", "lastEditedAt": null, "updatedAt": "2015-06-01T15:02:24Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 810, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Duplicate of #78", "sentSegmented": ["duplicate", "of", "78"], "sentSegmentedWithoutStops": ["duplicate", "78"], "sentSegmentedWithoutStopsStemmed": ["duplic", "78"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDExNTczNzM0MQ==", "author": {"login": "jakubroztocil"}, "body": "Closing this in favor of #78\n", "bodyText": "Closing this in favor of #78", "bodyHTML": "<p>Closing this in favor of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"5867157\" data-permission-text=\"Title is private\" data-url=\"https://github.com/httpie/httpie/issues/78\" data-hovercard-type=\"issue\" data-hovercard-url=\"/httpie/httpie/issues/78/hovercard\" href=\"https://github.com/httpie/httpie/issues/78\">#78</a></p>", "createdAt": "2015-06-26T15:47:42Z", "publishedAt": "2015-06-26T15:47:42Z", "lastEditedAt": null, "updatedAt": "2015-06-26T15:47:42Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 811, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Closing this in favor of #78", "sentSegmented": ["closing", "this", "in", "favor", "of", "78"], "sentSegmentedWithoutStops": ["closing", "favor", "78"], "sentSegmentedWithoutStopsStemmed": ["close", "favor", "78"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOBuYC_Q==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2007-10-20T11:24:19Z", "name": "duplicate"}}, {"node": {"createdAt": "2007-10-20T11:24:19Z", "name": "enhancement"}}]}, "milestone": null, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-09-23T19:45:19Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-07-02T17:46:22Z"}}]}, "state": "CLOSED", "titleSegmented": ["feature", "request", "quick", "way", "to", "set", "nested", "json", "values"], "titleSegmentedWithoutStops": ["feature", "request", "quick", "way", "set", "nested", "json", "values"], "titleSegmentedWithoutStopsStemmed": ["featur", "request", "quick", "way", "set", "nest", "json", "valu"], "bodyParsed": [{"number": 790, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Let's say an API takes several values, like in this example call:", "sentSegmented": ["let", "'s", "say", "an", "api", "takes", "several", "values", "like", "in", "this", "example", "call"], "sentSegmentedWithoutStops": ["let", "'s", "say", "api", "takes", "several", "values", "like", "example", "call"], "sentSegmentedWithoutStopsStemmed": ["let", "'s", "say", "api", "take", "sever", "valu", "like", "exampl", "call"]}, {"number": 791, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 792, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   \"name\": \"Fred\",", "sentSegmented": ["name", "fred"], "sentSegmentedWithoutStops": ["name", "fred"], "sentSegmentedWithoutStopsStemmed": ["name", "fred"]}, {"number": 793, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   \"age\", 27,", "sentSegmented": ["age", "27"], "sentSegmentedWithoutStops": ["age", "27"], "sentSegmentedWithoutStopsStemmed": ["age", "27"]}, {"number": 794, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   \"pets\" : {", "sentSegmented": ["pets"], "sentSegmentedWithoutStops": ["pets"], "sentSegmentedWithoutStopsStemmed": ["pet"]}, {"number": 795, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      \"penguins\": 2,", "sentSegmented": ["penguins", "2"], "sentSegmentedWithoutStops": ["penguins", "2"], "sentSegmentedWithoutStopsStemmed": ["penguin", "2"]}, {"number": 796, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "      \"dogs\":1", "sentSegmented": ["dogs", ":1"], "sentSegmentedWithoutStops": ["dogs", ":1"], "sentSegmentedWithoutStopsStemmed": ["dog", ":1"]}, {"number": 797, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 798, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 799, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can reference name and age easily:", "sentSegmented": ["i", "can", "reference", "name", "and", "age", "easily"], "sentSegmentedWithoutStops": ["reference", "name", "age", "easily"], "sentSegmentedWithoutStopsStemmed": ["refer", "name", "age", "easili"]}, {"number": 800, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$> http PUT https://www.example.com/users/1  name=Phil age=25", "sentSegmented": ["http", "put", "https", "//www.example.com/users/1", "name=phil", "age=25"], "sentSegmentedWithoutStops": ["http", "put", "https", "//www.example.com/users/1", "name=phil", "age=25"], "sentSegmentedWithoutStopsStemmed": ["http", "put", "http", "//www.example.com/users/1", "name=phil", "age=25"]}, {"number": 801, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But editing pets is uglier:", "sentSegmented": ["but", "editing", "pets", "is", "uglier"], "sentSegmentedWithoutStops": ["editing", "pets", "uglier"], "sentSegmentedWithoutStopsStemmed": ["edit", "pet", "uglier"]}, {"number": 802, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$>   http PUT https://www.example.com/users/1 pets:='{\"penguins\":2, \"dogs\":1}'", "sentSegmented": ["http", "put", "https", "//www.example.com/users/1", "pets", "penguins", ":2", "dogs", ":1"], "sentSegmentedWithoutStops": ["http", "put", "https", "//www.example.com/users/1", "pets", "penguins", ":2", "dogs", ":1"], "sentSegmentedWithoutStopsStemmed": ["http", "put", "http", "//www.example.com/users/1", "pet", "penguin", ":2", "dog", ":1"]}, {"number": 803, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'd like to do something like one of these:", "sentSegmented": ["i", "'d", "like", "to", "do", "something", "like", "one", "of", "these"], "sentSegmentedWithoutStops": ["'d", "like", "something", "like", "one"], "sentSegmentedWithoutStopsStemmed": ["'d", "like", "someth", "like", "one"]}, {"number": 804, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$> http PUT https://www.example.com/users/1 pets.penguins=2  pets.dogs=1", "sentSegmented": ["http", "put", "https", "//www.example.com/users/1", "pets.penguins=2", "pets.dogs=1"], "sentSegmentedWithoutStops": ["http", "put", "https", "//www.example.com/users/1", "pets.penguins=2", "pets.dogs=1"], "sentSegmentedWithoutStopsStemmed": ["http", "put", "http", "//www.example.com/users/1", "pets.penguins=2", "pets.dogs=1"]}, {"number": 805, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$> http PUT https://www.example.com/users/1 pets=\"penguins=2 dogs=1\"", "sentSegmented": ["http", "put", "https", "//www.example.com/users/1", "pets=", "penguins=2", "dogs=1"], "sentSegmentedWithoutStops": ["http", "put", "https", "//www.example.com/users/1", "pets=", "penguins=2", "dogs=1"], "sentSegmentedWithoutStopsStemmed": ["http", "put", "http", "//www.example.com/users/1", "pets=", "penguins=2", "dogs=1"]}, {"number": 806, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "$> http PUT https://www.example.com/users/1 pets\\penguins=2 pets\\dogs=1", "sentSegmented": ["http", "put", "https", "//www.example.com/users/1", "pets\\penguins=2", "pets\\dogs=1"], "sentSegmentedWithoutStops": ["http", "put", "https", "//www.example.com/users/1", "pets\\penguins=2", "pets\\dogs=1"], "sentSegmentedWithoutStopsStemmed": ["http", "put", "http", "//www.example.com/users/1", "pets\\penguins=2", "pets\\dogs=1"]}, {"number": 807, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That said, \".\"", "sentSegmented": ["that", "said"], "sentSegmentedWithoutStops": ["said"], "sentSegmentedWithoutStopsStemmed": ["said"]}, {"number": 808, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and \"\" could conceivably be part of a JSON key, so maybe that's not actually a good idea?", "sentSegmented": ["and", "could", "conceivably", "be", "part", "of", "a", "json", "key", "so", "maybe", "that", "'s", "not", "actually", "a", "good", "idea"], "sentSegmentedWithoutStops": ["could", "conceivably", "part", "json", "key", "maybe", "'s", "actually", "good", "idea"], "sentSegmentedWithoutStopsStemmed": ["could", "conceiv", "part", "json", "key", "mayb", "'s", "actual", "good", "idea"]}]}