{"repository": {"owner": {"login": "angular"}, "name": "angular", "forkCount": 18765, "stargazerCount": 71747, "createdAt": "2014-09-18T16:12:01Z", "updatedAt": "2021-03-16T23:44:02Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "angular"}}}, {"node": {"topic": {"name": "typescript"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "pwa"}}}, {"node": {"topic": {"name": "web-framework"}}}, {"node": {"topic": {"name": "web-performance"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Shell"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "PHP"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "JSONiq"}}, {"node": {"name": "PowerShell"}}, {"node": {"name": "Starlark"}}, {"node": {"name": "SCSS"}}, {"node": {"name": "Less"}}]}, "primaryLanguage": {"name": "TypeScript"}}, "id": "MDU6SXNzdWUyOTk5NzE5Nzk=", "number": 22434, "author": {"login": "devpreview"}, "title": "Support custom TypeScript transformers", "body": "<!--\r\nPLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION.\r\n\r\nISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION.\r\n-->\r\n\r\n## I'm submitting a...\r\n<!-- Check one of the following options with \"x\" -->\r\n<pre><code>\r\n[ ] Regression (a behavior that used to work and stopped working in a new release)\r\n[ ] Bug report  <!-- Please search GitHub for a similar issue or PR before submitting -->\r\n[*] Feature request\r\n[ ] Documentation issue or request\r\n[ ] Support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\r\n</code></pre>\r\n\r\n## Current behavior\r\n<!-- Describe how the issue manifests. -->\r\nNow angular-cli does not support custom TypeScript transformers.\r\n\r\n## Expected behavior\r\n<!-- Describe what the desired behavior would be. -->\r\nProvide custom transformers as it does Webpack [ts-loader](https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory---) and [awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader/blob/master/src/checker/runtime.ts#L324).", "bodyHTML": "\n<h2>I'm submitting a...</h2>\n\n<pre><code>\n[ ] Regression (a behavior that used to work and stopped working in a new release)\n[ ] Bug report  \n[*] Feature request\n[ ] Documentation issue or request\n[ ] Support request =&gt; Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\n</code></pre>\n<h2>Current behavior</h2>\n\n<p>Now angular-cli does not support custom TypeScript transformers.</p>\n<h2>Expected behavior</h2>\n\n<p>Provide custom transformers as it does Webpack <a href=\"https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory---\">ts-loader</a> and <a href=\"https://github.com/s-panferov/awesome-typescript-loader/blob/master/src/checker/runtime.ts#L324\">awesome-typescript-loader</a>.</p>", "bodyText": "I'm submitting a...\n\n\n[ ] Regression (a behavior that used to work and stopped working in a new release)\n[ ] Bug report  \n[*] Feature request\n[ ] Documentation issue or request\n[ ] Support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\n\nCurrent behavior\n\nNow angular-cli does not support custom TypeScript transformers.\nExpected behavior\n\nProvide custom transformers as it does Webpack ts-loader and awesome-typescript-loader.", "assignees": {"edges": []}, "createdAt": "2018-02-24T20:54:24Z", "closed": false, "closedAt": null, "lastEditedAt": null, "publishedAt": "2018-02-24T20:54:24Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDQzNDk1NzIwNA==", "author": {"login": "dscheerens"}, "body": "Might also help to upvote the following Typescript issue:\r\n\r\nhttps://github.com/Microsoft/TypeScript/issues/14419\r\n\r\nI can imagine that it would be a prerequisite for the Angular team to have the plugin system standardized in Typescript first.", "bodyText": "Might also help to upvote the following Typescript issue:\nmicrosoft/TypeScript#14419\nI can imagine that it would be a prerequisite for the Angular team to have the plugin system standardized in Typescript first.", "bodyHTML": "<p>Might also help to upvote the following Typescript issue:</p>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"211460832\" data-permission-text=\"Title is private\" data-url=\"https://github.com/microsoft/TypeScript/issues/14419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/microsoft/TypeScript/issues/14419/hovercard\" href=\"https://github.com/microsoft/TypeScript/issues/14419\">microsoft/TypeScript#14419</a></p>\n<p>I can imagine that it would be a prerequisite for the Angular team to have the plugin system standardized in Typescript first.</p>", "createdAt": "2018-11-01T07:32:58Z", "publishedAt": "2018-11-01T07:32:58Z", "lastEditedAt": null, "updatedAt": "2018-11-01T07:32:58Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 88984, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Might also help to upvote the following Typescript issue:", "sentSegmented": ["might", "also", "help", "to", "upvote", "the", "following", "typescript", "issue"], "sentSegmentedWithoutStops": ["might", "also", "help", "upvote", "following", "typescript", "issue"], "sentSegmentedWithoutStopsStemmed": ["might", "also", "help", "upvot", "follow", "typescript", "issu"]}, {"number": 88985, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "microsoft/TypeScript#14419", "sentSegmented": ["microsoft/typescript", "14419"], "sentSegmentedWithoutStops": ["microsoft/typescript", "14419"], "sentSegmentedWithoutStopsStemmed": ["microsoft/typescript", "14419"]}, {"number": 88986, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can imagine that it would be a prerequisite for the Angular team to have the plugin system standardized in Typescript first.", "sentSegmented": ["i", "can", "imagine", "that", "it", "would", "be", "a", "prerequisite", "for", "the", "angular", "team", "to", "have", "the", "plugin", "system", "standardized", "in", "typescript", "first"], "sentSegmentedWithoutStops": ["imagine", "would", "prerequisite", "angular", "team", "plugin", "system", "standardized", "typescript", "first"], "sentSegmentedWithoutStopsStemmed": ["imagin", "would", "prerequisit", "angular", "team", "plugin", "system", "standard", "typescript", "first"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ4NjM4NjQyOA==", "author": {"login": "wvanderdeijl"}, "body": "I would also love to have this in the angular CLI.\r\nJust found a blog explaining how you could already do this using ngx-build-plus: https://medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05\r\n\r\nMight be a plan to read the requested additional transformers from tsconfig.json as https://github.com/cevek/ttypescript does", "bodyText": "I would also love to have this in the angular CLI.\nJust found a blog explaining how you could already do this using ngx-build-plus: https://medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05\nMight be a plan to read the requested additional transformers from tsconfig.json as https://github.com/cevek/ttypescript does", "bodyHTML": "<p>I would also love to have this in the angular CLI.<br>\nJust found a blog explaining how you could already do this using ngx-build-plus: <a rel=\"nofollow\" href=\"https://medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05\">https://medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05</a></p>\n<p>Might be a plan to read the requested additional transformers from tsconfig.json as <a href=\"https://github.com/cevek/ttypescript\">https://github.com/cevek/ttypescript</a> does</p>", "createdAt": "2019-04-24T19:09:31Z", "publishedAt": "2019-04-24T19:09:31Z", "lastEditedAt": null, "updatedAt": "2019-04-24T19:09:31Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-08-28T14:16:07Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-09-03T14:41:57Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-07T08:02:13Z"}}]}, "bodyParsed": [{"number": 88987, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I would also love to have this in the angular CLI.", "sentSegmented": ["i", "would", "also", "love", "to", "have", "this", "in", "the", "angular", "cli"], "sentSegmentedWithoutStops": ["would", "also", "love", "angular", "cli"], "sentSegmentedWithoutStopsStemmed": ["would", "also", "love", "angular", "cli"]}, {"number": 88988, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Just found a blog explaining how you could already do this using ngx-build-plus: https://medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05", "sentSegmented": ["just", "found", "a", "blog", "explaining", "how", "you", "could", "already", "do", "this", "using", "ngx-build-plus", "https", "//medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05"], "sentSegmentedWithoutStops": ["found", "blog", "explaining", "could", "already", "using", "ngx-build-plus", "https", "//medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05"], "sentSegmentedWithoutStopsStemmed": ["found", "blog", "explain", "could", "alreadi", "use", "ngx-build-plu", "http", "//medium.com/joolsoftware/custom-typescript-transformers-with-angular-cli-7f4150797e05"]}, {"number": 88989, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Might be a plan to read the requested additional transformers from tsconfig.json as https://github.com/cevek/ttypescript does", "sentSegmented": ["might", "be", "a", "plan", "to", "read", "the", "requested", "additional", "transformers", "from", "tsconfig.json", "as", "https", "//github.com/cevek/ttypescript", "does"], "sentSegmentedWithoutStops": ["might", "plan", "read", "requested", "additional", "transformers", "tsconfig.json", "https", "//github.com/cevek/ttypescript"], "sentSegmentedWithoutStopsStemmed": ["might", "plan", "read", "request", "addit", "transform", "tsconfig.json", "http", "//github.com/cevek/ttypescript"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU5Mzg1NDI5NA==", "author": {"login": "hmil"}, "body": "The current methods to add custom transformers to angular are all brittle hacks. It's not something you want to add to a large enterprise app. Besides, none of these hacks work with angular libraries because ng-packagr doesn't even expose the transformers array.\r\n\r\nWhat the community needs is an official way to specify custom transformers.\r\nIt isn't clear to me yet if this is falls under the responsibility of the angular compiler, or higher level build tools from the angular-devkit.\r\n\r\nWould the angular team be open to such feature?", "bodyText": "The current methods to add custom transformers to angular are all brittle hacks. It's not something you want to add to a large enterprise app. Besides, none of these hacks work with angular libraries because ng-packagr doesn't even expose the transformers array.\nWhat the community needs is an official way to specify custom transformers.\nIt isn't clear to me yet if this is falls under the responsibility of the angular compiler, or higher level build tools from the angular-devkit.\nWould the angular team be open to such feature?", "bodyHTML": "<p>The current methods to add custom transformers to angular are all brittle hacks. It's not something you want to add to a large enterprise app. Besides, none of these hacks work with angular libraries because ng-packagr doesn't even expose the transformers array.</p>\n<p>What the community needs is an official way to specify custom transformers.<br>\nIt isn't clear to me yet if this is falls under the responsibility of the angular compiler, or higher level build tools from the angular-devkit.</p>\n<p>Would the angular team be open to such feature?</p>", "createdAt": "2020-03-03T09:33:51Z", "publishedAt": "2020-03-03T09:33:51Z", "lastEditedAt": null, "updatedAt": "2020-03-03T09:33:51Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-06-29T15:29:35Z"}}]}, "bodyParsed": [{"number": 88990, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The current methods to add custom transformers to angular are all brittle hacks.", "sentSegmented": ["the", "current", "methods", "to", "add", "custom", "transformers", "to", "angular", "are", "all", "brittle", "hacks"], "sentSegmentedWithoutStops": ["current", "methods", "add", "custom", "transformers", "angular", "brittle", "hacks"], "sentSegmentedWithoutStopsStemmed": ["current", "method", "add", "custom", "transform", "angular", "brittl", "hack"]}, {"number": 88991, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's not something you want to add to a large enterprise app.", "sentSegmented": ["it", "'s", "not", "something", "you", "want", "to", "add", "to", "a", "large", "enterprise", "app"], "sentSegmentedWithoutStops": ["'s", "something", "want", "add", "large", "enterprise", "app"], "sentSegmentedWithoutStopsStemmed": ["'s", "someth", "want", "add", "larg", "enterpris", "app"]}, {"number": 88992, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Besides, none of these hacks work with angular libraries because ng-packagr doesn't even expose the transformers array.", "sentSegmented": ["besides", "none", "of", "these", "hacks", "work", "with", "angular", "libraries", "because", "ng-packagr", "does", "n't", "even", "expose", "the", "transformers", "array"], "sentSegmentedWithoutStops": ["besides", "none", "hacks", "work", "angular", "libraries", "ng-packagr", "n't", "even", "expose", "transformers", "array"], "sentSegmentedWithoutStopsStemmed": ["besid", "none", "hack", "work", "angular", "librari", "ng-packagr", "n't", "even", "expos", "transform", "array"]}, {"number": 88993, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What the community needs is an official way to specify custom transformers.", "sentSegmented": ["what", "the", "community", "needs", "is", "an", "official", "way", "to", "specify", "custom", "transformers"], "sentSegmentedWithoutStops": ["community", "needs", "official", "way", "specify", "custom", "transformers"], "sentSegmentedWithoutStopsStemmed": ["commun", "need", "offici", "way", "specifi", "custom", "transform"]}, {"number": 88994, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It isn't clear to me yet if this is falls under the responsibility of the angular compiler, or higher level build tools from the angular-devkit.", "sentSegmented": ["it", "is", "n't", "clear", "to", "me", "yet", "if", "this", "is", "falls", "under", "the", "responsibility", "of", "the", "angular", "compiler", "or", "higher", "level", "build", "tools", "from", "the", "angular-devkit"], "sentSegmentedWithoutStops": ["n't", "clear", "yet", "falls", "responsibility", "angular", "compiler", "higher", "level", "build", "tools", "angular-devkit"], "sentSegmentedWithoutStopsStemmed": ["n't", "clear", "yet", "fall", "respons", "angular", "compil", "higher", "level", "build", "tool", "angular-devkit"]}, {"number": 88995, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Would the angular team be open to such feature?", "sentSegmented": ["would", "the", "angular", "team", "be", "open", "to", "such", "feature"], "sentSegmentedWithoutStops": ["would", "angular", "team", "open", "feature"], "sentSegmentedWithoutStopsStemmed": ["would", "angular", "team", "open", "featur"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU5NDA3NDkwMg==", "author": {"login": "alxhub"}, "body": "Hello everyone!\r\n\r\nUnfortunately I don't think this is something we're going to support, at least on the `ngc` (`@angular/compiler-cli`) side, for a couple reasons.\r\n\r\n1. Custom transformers can't be used to affect Angular compilation.\r\n\r\nThis is perhaps the biggest reason. The main point of such an API, I'd imagine, would be to operate on users' TS code and apply transformations that they want `ngc` to then process. Unfortunately the entire `ngc` analysis phase happens before TS emit and thus before any transformers run. Almost by definition then, custom transformers must have nothing to do with Angular.\r\n\r\n2. Custom transformers have a lot of surprising gotchas.\r\n\r\nI've worked with custom transformers a lot on the compiler internally, and they have some really big limitations that are easy to end up tripping over. I'll try to give a couple examples:\r\n\r\n* if you know that a file imports `Foo`, and you want to add a new reference to `Foo`, it's not enough to emit a `ts.createIdentifier('Foo')`. This looks fine in the AST, but certain downlevelings will cause incorrect code to be emitted.\r\n\r\n```typescript\r\n// the import\r\nconst foo_1 = require('foo-lib');\r\n\r\n// a regular reference to Foo, in user code\r\ndoSomething(foo_1.Foo);\r\n\r\n// with a ts.createIdentifier('Foo') added in a transform\r\ndoSomething(Foo); // ReferenceError\r\n```\r\n\r\nTo make this work, it's necessary to find an _existing_ reference to `Foo` and copy its `ts.Identifier` - this has the correct binding under the hood to downlevel correctly.\r\n\r\n* The same goes for adding an import. It's impossible to add:\r\n\r\n```typescript\r\nimport {Foo} from 'foo-lib';\r\n```\r\n\r\nand have it work correctly. One must do:\r\n\r\n```typescript\r\nimport * as foo from 'foo-lib';\r\n```\r\n\r\nand emit manual references to `foo.Foo`.\r\n\r\nSo I think the transformers API is limited in its usefulness for affecting Angular right now, and too nuanced to support as a public API for the compiler.\r\n\r\nI do like the idea of having some level of extensibility in the compiler, but I don't think transformers are the right answer.", "bodyText": "Hello everyone!\nUnfortunately I don't think this is something we're going to support, at least on the ngc (@angular/compiler-cli) side, for a couple reasons.\n\nCustom transformers can't be used to affect Angular compilation.\n\nThis is perhaps the biggest reason. The main point of such an API, I'd imagine, would be to operate on users' TS code and apply transformations that they want ngc to then process. Unfortunately the entire ngc analysis phase happens before TS emit and thus before any transformers run. Almost by definition then, custom transformers must have nothing to do with Angular.\n\nCustom transformers have a lot of surprising gotchas.\n\nI've worked with custom transformers a lot on the compiler internally, and they have some really big limitations that are easy to end up tripping over. I'll try to give a couple examples:\n\nif you know that a file imports Foo, and you want to add a new reference to Foo, it's not enough to emit a ts.createIdentifier('Foo'). This looks fine in the AST, but certain downlevelings will cause incorrect code to be emitted.\n\n// the import\nconst foo_1 = require('foo-lib');\n\n// a regular reference to Foo, in user code\ndoSomething(foo_1.Foo);\n\n// with a ts.createIdentifier('Foo') added in a transform\ndoSomething(Foo); // ReferenceError\nTo make this work, it's necessary to find an existing reference to Foo and copy its ts.Identifier - this has the correct binding under the hood to downlevel correctly.\n\nThe same goes for adding an import. It's impossible to add:\n\nimport {Foo} from 'foo-lib';\nand have it work correctly. One must do:\nimport * as foo from 'foo-lib';\nand emit manual references to foo.Foo.\nSo I think the transformers API is limited in its usefulness for affecting Angular right now, and too nuanced to support as a public API for the compiler.\nI do like the idea of having some level of extensibility in the compiler, but I don't think transformers are the right answer.", "bodyHTML": "<p>Hello everyone!</p>\n<p>Unfortunately I don't think this is something we're going to support, at least on the <code>ngc</code> (<code>@angular/compiler-cli</code>) side, for a couple reasons.</p>\n<ol>\n<li>Custom transformers can't be used to affect Angular compilation.</li>\n</ol>\n<p>This is perhaps the biggest reason. The main point of such an API, I'd imagine, would be to operate on users' TS code and apply transformations that they want <code>ngc</code> to then process. Unfortunately the entire <code>ngc</code> analysis phase happens before TS emit and thus before any transformers run. Almost by definition then, custom transformers must have nothing to do with Angular.</p>\n<ol start=\"2\">\n<li>Custom transformers have a lot of surprising gotchas.</li>\n</ol>\n<p>I've worked with custom transformers a lot on the compiler internally, and they have some really big limitations that are easy to end up tripping over. I'll try to give a couple examples:</p>\n<ul>\n<li>if you know that a file imports <code>Foo</code>, and you want to add a new reference to <code>Foo</code>, it's not enough to emit a <code>ts.createIdentifier('Foo')</code>. This looks fine in the AST, but certain downlevelings will cause incorrect code to be emitted.</li>\n</ul>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-c\">// the import</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">foo_1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'foo-lib'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// a regular reference to Foo, in user code</span>\n<span class=\"pl-en\">doSomething</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo_1</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Foo</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// with a ts.createIdentifier('Foo') added in a transform</span>\n<span class=\"pl-en\">doSomething</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// ReferenceError</span></pre></div>\n<p>To make this work, it's necessary to find an <em>existing</em> reference to <code>Foo</code> and copy its <code>ts.Identifier</code> - this has the correct binding under the hood to downlevel correctly.</p>\n<ul>\n<li>The same goes for adding an import. It's impossible to add:</li>\n</ul>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span><span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'foo-lib'</span><span class=\"pl-kos\">;</span></pre></div>\n<p>and have it work correctly. One must do:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span> <span class=\"pl-k\">as</span> <span class=\"pl-s1\">foo</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'foo-lib'</span><span class=\"pl-kos\">;</span></pre></div>\n<p>and emit manual references to <code>foo.Foo</code>.</p>\n<p>So I think the transformers API is limited in its usefulness for affecting Angular right now, and too nuanced to support as a public API for the compiler.</p>\n<p>I do like the idea of having some level of extensibility in the compiler, but I don't think transformers are the right answer.</p>", "createdAt": "2020-03-03T17:37:33Z", "publishedAt": "2020-03-03T17:37:33Z", "lastEditedAt": null, "updatedAt": "2020-03-03T17:37:33Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-03-03T18:28:10Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-03T21:46:22Z"}}, {"node": {"content": "CONFUSED", "createdAt": "2020-11-10T09:45:23Z"}}]}, "bodyParsed": [{"number": 88996, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hello everyone!", "sentSegmented": ["hello", "everyone"], "sentSegmentedWithoutStops": ["hello", "everyone"], "sentSegmentedWithoutStopsStemmed": ["hello", "everyon"]}, {"number": 88997, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Unfortunately I don't think this is something we're going to support, at least on the ngc (@angular/compiler-cli) side, for a couple reasons.", "sentSegmented": ["unfortunately", "i", "do", "n't", "think", "this", "is", "something", "we", "'re", "going", "to", "support", "at", "least", "on", "the", "ngc", "angular/compiler-cli", "side", "for", "a", "couple", "reasons"], "sentSegmentedWithoutStops": ["unfortunately", "n't", "think", "something", "'re", "going", "support", "least", "ngc", "angular/compiler-cli", "side", "couple", "reasons"], "sentSegmentedWithoutStopsStemmed": ["unfortun", "n't", "think", "someth", "'re", "go", "support", "least", "ngc", "angular/compiler-cli", "side", "coupl", "reason"]}, {"number": 88998, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Custom transformers can't be used to affect Angular compilation.", "sentSegmented": ["custom", "transformers", "ca", "n't", "be", "used", "to", "affect", "angular", "compilation"], "sentSegmentedWithoutStops": ["custom", "transformers", "ca", "n't", "used", "affect", "angular", "compilation"], "sentSegmentedWithoutStopsStemmed": ["custom", "transform", "ca", "n't", "use", "affect", "angular", "compil"]}, {"number": 88999, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is perhaps the biggest reason.", "sentSegmented": ["this", "is", "perhaps", "the", "biggest", "reason"], "sentSegmentedWithoutStops": ["perhaps", "biggest", "reason"], "sentSegmentedWithoutStopsStemmed": ["perhap", "biggest", "reason"]}, {"number": 89000, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The main point of such an API, I'd imagine, would be to operate on users' TS code and apply transformations that they want ngc to then process.", "sentSegmented": ["the", "main", "point", "of", "such", "an", "api", "i", "'d", "imagine", "would", "be", "to", "operate", "on", "users", "ts", "code", "and", "apply", "transformations", "that", "they", "want", "ngc", "to", "then", "process"], "sentSegmentedWithoutStops": ["main", "point", "api", "'d", "imagine", "would", "operate", "users", "ts", "code", "apply", "transformations", "want", "ngc", "process"], "sentSegmentedWithoutStopsStemmed": ["main", "point", "api", "'d", "imagin", "would", "oper", "user", "ts", "code", "appli", "transform", "want", "ngc", "process"]}, {"number": 89001, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Unfortunately the entire ngc analysis phase happens before TS emit and thus before any transformers run.", "sentSegmented": ["unfortunately", "the", "entire", "ngc", "analysis", "phase", "happens", "before", "ts", "emit", "and", "thus", "before", "any", "transformers", "run"], "sentSegmentedWithoutStops": ["unfortunately", "entire", "ngc", "analysis", "phase", "happens", "ts", "emit", "thus", "transformers", "run"], "sentSegmentedWithoutStopsStemmed": ["unfortun", "entir", "ngc", "analysi", "phase", "happen", "ts", "emit", "thu", "transform", "run"]}, {"number": 89002, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Almost by definition then, custom transformers must have nothing to do with Angular.", "sentSegmented": ["almost", "by", "definition", "then", "custom", "transformers", "must", "have", "nothing", "to", "do", "with", "angular"], "sentSegmentedWithoutStops": ["almost", "definition", "custom", "transformers", "must", "nothing", "angular"], "sentSegmentedWithoutStopsStemmed": ["almost", "definit", "custom", "transform", "must", "noth", "angular"]}, {"number": 89003, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Custom transformers have a lot of surprising gotchas.", "sentSegmented": ["custom", "transformers", "have", "a", "lot", "of", "surprising", "gotchas"], "sentSegmentedWithoutStops": ["custom", "transformers", "lot", "surprising", "gotchas"], "sentSegmentedWithoutStopsStemmed": ["custom", "transform", "lot", "surpris", "gotcha"]}, {"number": 89004, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I've worked with custom transformers a lot on the compiler internally, and they have some really big limitations that are easy to end up tripping over.", "sentSegmented": ["i", "'ve", "worked", "with", "custom", "transformers", "a", "lot", "on", "the", "compiler", "internally", "and", "they", "have", "some", "really", "big", "limitations", "that", "are", "easy", "to", "end", "up", "tripping", "over"], "sentSegmentedWithoutStops": ["'ve", "worked", "custom", "transformers", "lot", "compiler", "internally", "really", "big", "limitations", "easy", "end", "tripping"], "sentSegmentedWithoutStopsStemmed": ["'ve", "work", "custom", "transform", "lot", "compil", "intern", "realli", "big", "limit", "easi", "end", "trip"]}, {"number": 89005, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'll try to give a couple examples:", "sentSegmented": ["i", "'ll", "try", "to", "give", "a", "couple", "examples"], "sentSegmentedWithoutStops": ["'ll", "try", "give", "couple", "examples"], "sentSegmentedWithoutStopsStemmed": ["'ll", "tri", "give", "coupl", "exampl"]}, {"number": 89006, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "if you know that a file imports Foo, and you want to add a new reference to Foo, it's not enough to emit a ts.createIdentifier('Foo').", "sentSegmented": ["if", "you", "know", "that", "a", "file", "imports", "foo", "and", "you", "want", "to", "add", "a", "new", "reference", "to", "foo", "it", "'s", "not", "enough", "to", "emit", "a", "ts.createidentifier", "'foo"], "sentSegmentedWithoutStops": ["know", "file", "imports", "foo", "want", "add", "new", "reference", "foo", "'s", "enough", "emit", "ts.createidentifier", "'foo"], "sentSegmentedWithoutStopsStemmed": ["know", "file", "import", "foo", "want", "add", "new", "refer", "foo", "'s", "enough", "emit", "ts.createidentifi", "'foo"]}, {"number": 89007, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This looks fine in the AST, but certain downlevelings will cause incorrect code to be emitted.", "sentSegmented": ["this", "looks", "fine", "in", "the", "ast", "but", "certain", "downlevelings", "will", "cause", "incorrect", "code", "to", "be", "emitted"], "sentSegmentedWithoutStops": ["looks", "fine", "ast", "certain", "downlevelings", "cause", "incorrect", "code", "emitted"], "sentSegmentedWithoutStopsStemmed": ["look", "fine", "ast", "certain", "downlevel", "caus", "incorrect", "code", "emit"]}, {"number": 89008, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// the import", "sentSegmented": ["the", "import"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 89009, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const foo_1 = require('foo-lib');", "sentSegmented": ["const", "foo_1", "require", "'foo-lib"], "sentSegmentedWithoutStops": ["foo_1", "'foo-lib"], "sentSegmentedWithoutStopsStemmed": ["foo_1", "'foo-lib"]}, {"number": 89010, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// a regular reference to Foo, in user code", "sentSegmented": ["a", "regular", "reference", "to", "foo", "in", "user", "code"], "sentSegmentedWithoutStops": ["regular", "reference", "foo"], "sentSegmentedWithoutStopsStemmed": ["regular", "refer", "foo"]}, {"number": 89011, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "doSomething(foo_1.Foo);", "sentSegmented": ["dosomething", "foo_1.foo"], "sentSegmentedWithoutStops": ["dosomething", "foo_1.foo"], "sentSegmentedWithoutStopsStemmed": ["dosometh", "foo_1.foo"]}, {"number": 89012, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// with a ts.createIdentifier('Foo') added in a transform", "sentSegmented": ["with", "a", "ts.createidentifier", "'foo", "added", "in", "a", "transform"], "sentSegmentedWithoutStops": ["ts.createidentifier", "'foo", "added", "transform"], "sentSegmentedWithoutStopsStemmed": ["ts.createidentifi", "'foo", "ad", "transform"]}, {"number": 89013, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "doSomething(Foo); // ReferenceError", "sentSegmented": ["dosomething", "foo", "referenceerror"], "sentSegmentedWithoutStops": ["dosomething", "foo", "referenceerror"], "sentSegmentedWithoutStopsStemmed": ["dosometh", "foo", "referenceerror"]}, {"number": 89014, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "To make this work, it's necessary to find an existing reference to Foo and copy its ts.Identifier - this has the correct binding under the hood to downlevel correctly.", "sentSegmented": ["to", "make", "this", "work", "it", "'s", "necessary", "to", "find", "an", "existing", "reference", "to", "foo", "and", "copy", "its", "ts.identifier", "this", "has", "the", "correct", "binding", "under", "the", "hood", "to", "downlevel", "correctly"], "sentSegmentedWithoutStops": ["make", "work", "'s", "necessary", "find", "existing", "reference", "foo", "copy", "ts.identifier", "correct", "binding", "hood", "downlevel", "correctly"], "sentSegmentedWithoutStopsStemmed": ["make", "work", "'s", "necessari", "find", "exist", "refer", "foo", "copi", "ts.identifi", "correct", "bind", "hood", "downlevel", "correctli"]}, {"number": 89015, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The same goes for adding an import.", "sentSegmented": ["the", "same", "goes", "for", "adding", "an", "import"], "sentSegmentedWithoutStops": ["goes", "adding", "import"], "sentSegmentedWithoutStopsStemmed": ["goe", "ad", "import"]}, {"number": 89016, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's impossible to add:", "sentSegmented": ["it", "'s", "impossible", "to", "add"], "sentSegmentedWithoutStops": ["'s", "impossible", "add"], "sentSegmentedWithoutStopsStemmed": ["'s", "imposs", "add"]}, {"number": 89017, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "import {Foo} from 'foo-lib';", "sentSegmented": ["import", "foo", "from", "'foo-lib"], "sentSegmentedWithoutStops": ["foo", "'foo-lib"], "sentSegmentedWithoutStopsStemmed": ["foo", "'foo-lib"]}, {"number": 89018, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and have it work correctly.", "sentSegmented": ["and", "have", "it", "work", "correctly"], "sentSegmentedWithoutStops": ["work", "correctly"], "sentSegmentedWithoutStopsStemmed": ["work", "correctli"]}, {"number": 89019, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "One must do:", "sentSegmented": ["one", "must", "do"], "sentSegmentedWithoutStops": ["one", "must"], "sentSegmentedWithoutStopsStemmed": ["one", "must"]}, {"number": 89020, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "import * as foo from 'foo-lib';", "sentSegmented": ["import", "as", "foo", "from", "'foo-lib"], "sentSegmentedWithoutStops": ["foo", "'foo-lib"], "sentSegmentedWithoutStopsStemmed": ["foo", "'foo-lib"]}, {"number": 89021, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and emit manual references to foo.Foo.", "sentSegmented": ["and", "emit", "manual", "references", "to", "foo.foo"], "sentSegmentedWithoutStops": ["emit", "manual", "references", "foo.foo"], "sentSegmentedWithoutStopsStemmed": ["emit", "manual", "refer", "foo.foo"]}, {"number": 89022, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So I think the transformers API is limited in its usefulness for affecting Angular right now, and too nuanced to support as a public API for the compiler.", "sentSegmented": ["so", "i", "think", "the", "transformers", "api", "is", "limited", "in", "its", "usefulness", "for", "affecting", "angular", "right", "now", "and", "too", "nuanced", "to", "support", "as", "a", "public", "api", "for", "the", "compiler"], "sentSegmentedWithoutStops": ["think", "transformers", "api", "limited", "usefulness", "affecting", "angular", "right", "nuanced", "support", "public", "api", "compiler"], "sentSegmentedWithoutStopsStemmed": ["think", "transform", "api", "limit", "use", "affect", "angular", "right", "nuanc", "support", "public", "api", "compil"]}, {"number": 89023, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I do like the idea of having some level of extensibility in the compiler, but I don't think transformers are the right answer.", "sentSegmented": ["i", "do", "like", "the", "idea", "of", "having", "some", "level", "of", "extensibility", "in", "the", "compiler", "but", "i", "do", "n't", "think", "transformers", "are", "the", "right", "answer"], "sentSegmentedWithoutStops": ["like", "idea", "level", "extensibility", "compiler", "n't", "think", "transformers", "right", "answer"], "sentSegmentedWithoutStopsStemmed": ["like", "idea", "level", "extens", "compil", "n't", "think", "transform", "right", "answer"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU5NDE4NDI4OA==", "author": {"login": "hmil"}, "body": "Thank you @alxhub for the detailed answer.\r\n\r\nI think that you missed something important though: In most cases the goal isn't to affect angular, the goal is to affect TypeScript at the language level, independently from the whole angular fuss.\r\n\r\nTake this use case for instance: I wanted to add runtime type checking to sensitive API entry points of our ui platform library using [typescript-is](https://github.com/woutervh-/typescript-is#decorators-validateclass-and-asserttype).\r\n\r\nThis transformer injects a preamble to the annotated methods, which performs a type assertion at runtime.\r\n\r\nI think it would work if we just prepended this transformer to the \"customTransformers\" array passed to Program.emit. It doesn't need to interfere with any angular-specific concept. Or am I missing something?", "bodyText": "Thank you @alxhub for the detailed answer.\nI think that you missed something important though: In most cases the goal isn't to affect angular, the goal is to affect TypeScript at the language level, independently from the whole angular fuss.\nTake this use case for instance: I wanted to add runtime type checking to sensitive API entry points of our ui platform library using typescript-is.\nThis transformer injects a preamble to the annotated methods, which performs a type assertion at runtime.\nI think it would work if we just prepended this transformer to the \"customTransformers\" array passed to Program.emit. It doesn't need to interfere with any angular-specific concept. Or am I missing something?", "bodyHTML": "<p>Thank you <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/alxhub/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alxhub\">@alxhub</a> for the detailed answer.</p>\n<p>I think that you missed something important though: In most cases the goal isn't to affect angular, the goal is to affect TypeScript at the language level, independently from the whole angular fuss.</p>\n<p>Take this use case for instance: I wanted to add runtime type checking to sensitive API entry points of our ui platform library using <a href=\"https://github.com/woutervh-/typescript-is#decorators-validateclass-and-asserttype\">typescript-is</a>.</p>\n<p>This transformer injects a preamble to the annotated methods, which performs a type assertion at runtime.</p>\n<p>I think it would work if we just prepended this transformer to the \"customTransformers\" array passed to Program.emit. It doesn't need to interfere with any angular-specific concept. Or am I missing something?</p>", "createdAt": "2020-03-03T21:41:17Z", "publishedAt": "2020-03-03T21:41:17Z", "lastEditedAt": null, "updatedAt": "2020-03-03T21:41:17Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-03-04T10:10:39Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-22T15:39:16Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-04-27T16:06:02Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-06-29T15:32:21Z"}}]}, "bodyParsed": [{"number": 89024, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thank you @alxhub for the detailed answer.", "sentSegmented": ["thank", "you", "alxhub", "for", "the", "detailed", "answer"], "sentSegmentedWithoutStops": ["thank", "alxhub", "detailed", "answer"], "sentSegmentedWithoutStopsStemmed": ["thank", "alxhub", "detail", "answer"]}, {"number": 89025, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think that you missed something important though: In most cases the goal isn't to affect angular, the goal is to affect TypeScript at the language level, independently from the whole angular fuss.", "sentSegmented": ["i", "think", "that", "you", "missed", "something", "important", "though", "in", "most", "cases", "the", "goal", "is", "n't", "to", "affect", "angular", "the", "goal", "is", "to", "affect", "typescript", "at", "the", "language", "level", "independently", "from", "the", "whole", "angular", "fuss"], "sentSegmentedWithoutStops": ["think", "missed", "something", "important", "though", "cases", "goal", "n't", "affect", "angular", "goal", "affect", "typescript", "language", "level", "independently", "whole", "angular", "fuss"], "sentSegmentedWithoutStopsStemmed": ["think", "miss", "someth", "import", "though", "case", "goal", "n't", "affect", "angular", "goal", "affect", "typescript", "languag", "level", "independ", "whole", "angular", "fuss"]}, {"number": 89026, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Take this use case for instance: I wanted to add runtime type checking to sensitive API entry points of our ui platform library using typescript-is.", "sentSegmented": ["take", "this", "use", "case", "for", "instance", "i", "wanted", "to", "add", "runtime", "type", "checking", "to", "sensitive", "api", "entry", "points", "of", "our", "ui", "platform", "library", "using", "typescript-is"], "sentSegmentedWithoutStops": ["take", "use", "case", "instance", "wanted", "add", "runtime", "type", "checking", "sensitive", "api", "entry", "points", "ui", "platform", "library", "using", "typescript-is"], "sentSegmentedWithoutStopsStemmed": ["take", "use", "case", "instanc", "want", "add", "runtim", "type", "check", "sensit", "api", "entri", "point", "ui", "platform", "librari", "use", "typescript-i"]}, {"number": 89027, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This transformer injects a preamble to the annotated methods, which performs a type assertion at runtime.", "sentSegmented": ["this", "transformer", "injects", "a", "preamble", "to", "the", "annotated", "methods", "which", "performs", "a", "type", "assertion", "at", "runtime"], "sentSegmentedWithoutStops": ["transformer", "injects", "preamble", "annotated", "methods", "performs", "type", "assertion", "runtime"], "sentSegmentedWithoutStopsStemmed": ["transform", "inject", "preambl", "annot", "method", "perform", "type", "assert", "runtim"]}, {"number": 89028, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think it would work if we just prepended this transformer to the \"customTransformers\" array passed to Program.emit.", "sentSegmented": ["i", "think", "it", "would", "work", "if", "we", "just", "prepended", "this", "transformer", "to", "the", "customtransformers", "array", "passed", "to", "program.emit"], "sentSegmentedWithoutStops": ["think", "would", "work", "prepended", "transformer", "customtransformers", "array", "passed", "program.emit"], "sentSegmentedWithoutStopsStemmed": ["think", "would", "work", "prepend", "transform", "customtransform", "array", "pass", "program.emit"]}, {"number": 89029, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It doesn't need to interfere with any angular-specific concept.", "sentSegmented": ["it", "does", "n't", "need", "to", "interfere", "with", "any", "angular-specific", "concept"], "sentSegmentedWithoutStops": ["n't", "need", "interfere", "angular-specific", "concept"], "sentSegmentedWithoutStopsStemmed": ["n't", "need", "interfer", "angular-specif", "concept"]}, {"number": 89030, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Or am I missing something?", "sentSegmented": ["or", "am", "i", "missing", "something"], "sentSegmentedWithoutStops": ["missing", "something"], "sentSegmentedWithoutStopsStemmed": ["miss", "someth"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1MTE5ODI3OQ==", "author": {"login": "klemenoslaj"}, "body": "Another example that would not effect Angular in any way would be the transformation of GraphQL queries.\r\nRight now GraphQL support in Angular is really rough at best. Whoever wants to use the two technologies has some serious price to pay: huge strings - big bundles, high script initialisation due to the `gql` tags.\r\n\r\nWith TS transformer one could probably parse the strings into the standard GraphQL AST.\r\n\r\nRight now all people can do is use unsupported APIs and risk serious troubles later.", "bodyText": "Another example that would not effect Angular in any way would be the transformation of GraphQL queries.\nRight now GraphQL support in Angular is really rough at best. Whoever wants to use the two technologies has some serious price to pay: huge strings - big bundles, high script initialisation due to the gql tags.\nWith TS transformer one could probably parse the strings into the standard GraphQL AST.\nRight now all people can do is use unsupported APIs and risk serious troubles later.", "bodyHTML": "<p>Another example that would not effect Angular in any way would be the transformation of GraphQL queries.<br>\nRight now GraphQL support in Angular is really rough at best. Whoever wants to use the two technologies has some serious price to pay: huge strings - big bundles, high script initialisation due to the <code>gql</code> tags.</p>\n<p>With TS transformer one could probably parse the strings into the standard GraphQL AST.</p>\n<p>Right now all people can do is use unsupported APIs and risk serious troubles later.</p>", "createdAt": "2020-06-29T15:36:02Z", "publishedAt": "2020-06-29T15:36:02Z", "lastEditedAt": "2020-06-29T15:37:04Z", "updatedAt": "2020-06-29T15:37:04Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-06-30T18:05:26Z"}}]}, "bodyParsed": [{"number": 89031, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Another example that would not effect Angular in any way would be the transformation of GraphQL queries.", "sentSegmented": ["another", "example", "that", "would", "not", "effect", "angular", "in", "any", "way", "would", "be", "the", "transformation", "of", "graphql", "queries"], "sentSegmentedWithoutStops": ["another", "example", "would", "effect", "angular", "way", "would", "transformation", "graphql", "queries"], "sentSegmentedWithoutStopsStemmed": ["anoth", "exampl", "would", "effect", "angular", "way", "would", "transform", "graphql", "queri"]}, {"number": 89032, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Right now GraphQL support in Angular is really rough at best.", "sentSegmented": ["right", "now", "graphql", "support", "in", "angular", "is", "really", "rough", "at", "best"], "sentSegmentedWithoutStops": ["right", "graphql", "support", "angular", "really", "rough", "best"], "sentSegmentedWithoutStopsStemmed": ["right", "graphql", "support", "angular", "realli", "rough", "best"]}, {"number": 89033, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Whoever wants to use the two technologies has some serious price to pay: huge strings - big bundles, high script initialisation due to the gql tags.", "sentSegmented": ["whoever", "wants", "to", "use", "the", "two", "technologies", "has", "some", "serious", "price", "to", "pay", "huge", "strings", "big", "bundles", "high", "script", "initialisation", "due", "to", "the", "gql", "tags"], "sentSegmentedWithoutStops": ["whoever", "wants", "use", "two", "technologies", "serious", "price", "pay", "huge", "strings", "big", "bundles", "high", "script", "initialisation", "due", "gql", "tags"], "sentSegmentedWithoutStopsStemmed": ["whoever", "want", "use", "two", "technolog", "seriou", "price", "pay", "huge", "string", "big", "bundl", "high", "script", "initialis", "due", "gql", "tag"]}, {"number": 89034, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "With TS transformer one could probably parse the strings into the standard GraphQL AST.", "sentSegmented": ["with", "ts", "transformer", "one", "could", "probably", "parse", "the", "strings", "into", "the", "standard", "graphql", "ast"], "sentSegmentedWithoutStops": ["ts", "transformer", "one", "could", "probably", "parse", "strings", "standard", "graphql", "ast"], "sentSegmentedWithoutStopsStemmed": ["ts", "transform", "one", "could", "probabl", "pars", "string", "standard", "graphql", "ast"]}, {"number": 89035, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Right now all people can do is use unsupported APIs and risk serious troubles later.", "sentSegmented": ["right", "now", "all", "people", "can", "do", "is", "use", "unsupported", "apis", "and", "risk", "serious", "troubles", "later"], "sentSegmentedWithoutStops": ["right", "people", "use", "unsupported", "apis", "risk", "serious", "troubles", "later"], "sentSegmentedWithoutStopsStemmed": ["right", "peopl", "use", "unsupport", "api", "risk", "seriou", "troubl", "later"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1MTk1NjMwMg==", "author": {"login": "hmil"}, "body": "@klemenoslaj FYI I have [a working PR](https://github.com/ng-packagr/ng-packagr/pull/1573) on ng-packagr, which brings support for library-type projects, but the maintainers have completely ignored my request so far.\r\n", "bodyText": "@klemenoslaj FYI I have a working PR on ng-packagr, which brings support for library-type projects, but the maintainers have completely ignored my request so far.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/klemenoslaj/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/klemenoslaj\">@klemenoslaj</a> FYI I have <a href=\"https://github.com/ng-packagr/ng-packagr/pull/1573\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/ng-packagr/ng-packagr/pull/1573/hovercard\">a working PR</a> on ng-packagr, which brings support for library-type projects, but the maintainers have completely ignored my request so far.</p>", "createdAt": "2020-06-30T18:08:26Z", "publishedAt": "2020-06-30T18:08:26Z", "lastEditedAt": null, "updatedAt": "2020-06-30T18:08:26Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-06-30T18:35:45Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-10-08T13:26:55Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-11-09T23:05:44Z"}}]}, "bodyParsed": [{"number": 89036, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@klemenoslaj FYI I have a working PR on ng-packagr, which brings support for library-type projects, but the maintainers have completely ignored my request so far.", "sentSegmented": ["klemenoslaj", "fyi", "i", "have", "a", "working", "pr", "on", "ng-packagr", "which", "brings", "support", "for", "library-type", "projects", "but", "the", "maintainers", "have", "completely", "ignored", "my", "request", "so", "far"], "sentSegmentedWithoutStops": ["klemenoslaj", "fyi", "working", "pr", "ng-packagr", "brings", "support", "library-type", "projects", "maintainers", "completely", "ignored", "request", "far"], "sentSegmentedWithoutStopsStemmed": ["klemenoslaj", "fyi", "work", "pr", "ng-packagr", "bring", "support", "library-typ", "project", "maintain", "complet", "ignor", "request", "far"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1MTk2NjI1NA==", "author": {"login": "klemenoslaj"}, "body": "@hmil great, upvoted. I wish I could do more \ud83d\ude1f", "bodyText": "@hmil great, upvoted. I wish I could do more \ud83d\ude1f", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hmil/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hmil\">@hmil</a> great, upvoted. I wish I could do more <g-emoji class=\"g-emoji\" alias=\"worried\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png\">\ud83d\ude1f</g-emoji></p>", "createdAt": "2020-06-30T18:27:11Z", "publishedAt": "2020-06-30T18:27:11Z", "lastEditedAt": null, "updatedAt": "2020-06-30T18:27:11Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 89037, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@hmil great, upvoted.", "sentSegmented": ["hmil", "great", "upvoted"], "sentSegmentedWithoutStops": ["hmil", "great", "upvoted"], "sentSegmentedWithoutStopsStemmed": ["hmil", "great", "upvot"]}, {"number": 89038, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I wish I could do more \ud83d\ude1f", "sentSegmented": ["i", "wish", "i", "could", "do", "more"], "sentSegmentedWithoutStops": ["wish", "could"], "sentSegmentedWithoutStopsStemmed": ["wish", "could"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOJtw3Lg==", "hasNextPage": false}, "totalCount": 8}, "labels": {"edges": [{"node": {"createdAt": "2019-06-18T22:16:55Z", "name": "comp: compiler"}}, {"node": {"createdAt": "2014-09-18T16:12:01Z", "name": "feature"}}]}, "milestone": {"title": "Backlog", "dueOn": null}, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-03-07T15:43:44Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-20T07:51:17Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-06-06T10:51:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-08-03T21:02:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-08-08T21:22:56Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-09-13T04:25:21Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-09-19T05:58:02Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-09-27T08:29:10Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-10-19T23:26:59Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-10-22T15:16:48Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-11-01T07:27:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-11-06T00:39:04Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-11-26T15:05:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-01-07T11:24:06Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-01-14T21:24:50Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-01-15T15:33:55Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-01-23T00:02:49Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-02-03T08:18:15Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-02-07T10:50:07Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-03-06T12:51:31Z"}}]}, "state": "OPEN", "titleSegmented": ["support", "custom", "typescript", "transformers"], "titleSegmentedWithoutStops": ["support", "custom", "typescript", "transformers"], "titleSegmentedWithoutStopsStemmed": ["support", "custom", "typescript", "transform"], "bodyParsed": [{"number": 88974, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm submitting a...", "sentSegmented": ["i", "'m", "submitting", "a"], "sentSegmentedWithoutStops": ["'m", "submitting"], "sentSegmentedWithoutStopsStemmed": ["'m", "submit"]}, {"number": 88975, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] Regression (a behavior that used to work and stopped working in a new release)", "sentSegmented": ["regression", "a", "behavior", "that", "used", "to", "work", "and", "stopped", "working", "in", "a", "new", "release"], "sentSegmentedWithoutStops": ["regression", "behavior", "used", "work", "stopped", "working", "release"], "sentSegmentedWithoutStopsStemmed": ["regress", "behavior", "use", "work", "stop", "work", "releas"]}, {"number": 88976, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] Bug report  ", "sentSegmented": ["bug", "report"], "sentSegmentedWithoutStops": ["bug", "report"], "sentSegmentedWithoutStopsStemmed": ["bug", "report"]}, {"number": 88977, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[*] Feature request", "sentSegmented": ["feature", "request"], "sentSegmentedWithoutStops": ["feature", "request"], "sentSegmentedWithoutStopsStemmed": ["featur", "request"]}, {"number": 88978, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] Documentation issue or request", "sentSegmented": ["documentation", "issue", "or", "request"], "sentSegmentedWithoutStops": ["documentation", "issue", "request"], "sentSegmentedWithoutStopsStemmed": ["document", "issu", "request"]}, {"number": 88979, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] Support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question", "sentSegmented": ["support", "request", "please", "do", "not", "submit", "support", "request", "here", "instead", "see", "https", "//github.com/angular/angular/blob/master/contributing.md", "question"], "sentSegmentedWithoutStops": ["support", "request", "please", "submit", "support", "request", "instead", "see", "https", "//github.com/angular/angular/blob/master/contributing.md", "question"], "sentSegmentedWithoutStopsStemmed": ["support", "request", "pleas", "submit", "support", "request", "instead", "see", "http", "//github.com/angular/angular/blob/master/contributing.md", "question"]}, {"number": 88980, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Current behavior", "sentSegmented": ["current", "behavior"], "sentSegmentedWithoutStops": ["current", "behavior"], "sentSegmentedWithoutStopsStemmed": ["current", "behavior"]}, {"number": 88981, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Now angular-cli does not support custom TypeScript transformers.", "sentSegmented": ["now", "angular-cli", "does", "not", "support", "custom", "typescript", "transformers"], "sentSegmentedWithoutStops": ["angular-cli", "support", "custom", "typescript", "transformers"], "sentSegmentedWithoutStopsStemmed": ["angular-cli", "support", "custom", "typescript", "transform"]}, {"number": 88982, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Expected behavior", "sentSegmented": ["expected", "behavior"], "sentSegmentedWithoutStops": ["expected", "behavior"], "sentSegmentedWithoutStopsStemmed": ["expect", "behavior"]}, {"number": 88983, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Provide custom transformers as it does Webpack ts-loader and awesome-typescript-loader.", "sentSegmented": ["provide", "custom", "transformers", "as", "it", "does", "webpack", "ts-loader", "and", "awesome-typescript-loader"], "sentSegmentedWithoutStops": ["provide", "custom", "transformers", "webpack", "ts-loader", "awesome-typescript-loader"], "sentSegmentedWithoutStopsStemmed": ["provid", "custom", "transform", "webpack", "ts-loader", "awesome-typescript-load"]}]}