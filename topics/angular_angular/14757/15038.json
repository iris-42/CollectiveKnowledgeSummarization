{"repository": {"owner": {"login": "angular"}, "name": "angular", "forkCount": 18765, "stargazerCount": 71747, "createdAt": "2014-09-18T16:12:01Z", "updatedAt": "2021-03-16T23:44:02Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "angular"}}}, {"node": {"topic": {"name": "typescript"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "pwa"}}}, {"node": {"topic": {"name": "web-framework"}}}, {"node": {"topic": {"name": "web-performance"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Shell"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "PHP"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "JSONiq"}}, {"node": {"name": "PowerShell"}}, {"node": {"name": "Starlark"}}, {"node": {"name": "SCSS"}}, {"node": {"name": "Less"}}]}, "primaryLanguage": {"name": "TypeScript"}}, "id": "MDU6SXNzdWUyMTMwOTkxMTU=", "number": 15038, "author": {"login": "JanBoshoff"}, "title": "Element interpolated class removes bound classes.", "body": "<!--\r\nIF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING\r\n-->\r\n\r\n**I'm submitting a ...**  (check one with \"x\")\r\n```\r\n[x] bug report => search github for a similar issue or PR before submitting\r\n[ ] feature request\r\n[ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\r\n```\r\n\r\n**Current behavior**\r\n<!-- Describe how the bug manifests. -->\r\nIf an element has an interpolated class as well as a class that is bound to a component property, bound class is removed if the interpolated class value changes.\r\n\r\nTake the following html as example: \r\n`<h2 class=\"existing-class {{compClass}}\" [class.bound]=\"hasClass\">Hello {{name}}</h2>`\r\n\r\nOnce the `compClass` property changes, the `bound` class is removed. \r\n\r\n**Expected behavior**\r\n<!-- Describe what the behavior would be without the bug. -->\r\nThe expected behavior is that the class that is bound by a variable is unaffected by an interpolated class.\r\n\r\nThus, in the above example, if `hasClass` is true the element should have the following classes present \"existing-class\", \"bound\" and whatever the value of `compClass` is.\r\n\r\nWhen `compClass` changes and `hasClass` is still true, the element should still have the \"bound\" class. \r\n\r\n**Minimal reproduction of the problem with instructions**\r\n<!--\r\nIf the current behavior is a bug or you can illustrate your feature request better with an example, \r\nplease provide the *STEPS TO REPRODUCE* and if possible a *MINIMAL DEMO* of the problem via\r\nhttps://plnkr.co or similar (you can use this template as a starting point: http://plnkr.co/edit/tpl:AvJOMERrnz94ekVua0u5).\r\n-->\r\n1. Create a component with a boolean and string property.\r\n2. Within the component template, add the string property as a interpolated string in an element's class attribute.\r\n3. Bind another class to the element with the boolean property (`[class.bound]=\"boolProp\"`)\r\n4. Change the string property's value after a certain amount of time.\r\n5. The the class that is added with attribute binding is removed.\r\n\r\nOr check out this [plunker](http://plnkr.co/edit/McE9UyP3h07eMqS3EOag)\r\n\r\n**What is the motivation / use case for changing the behavior?**\r\n<!-- Describe the motivation or the concrete use case -->\r\nI think it makes sense to be able to change one class without effecting other classes on an element.\r\n\r\n**Please tell us about your environment:**\r\n<!-- Operating system, IDE, package manager, HTTP server, ... -->\r\n\r\n* **Angular version:** 2.4.9 && 4.0.0-rc.2\r\n<!-- Check whether this is still an issue in the most recent Angular version -->\r\n\r\n* **Browser:** [Chromium 56 | Firefox 52]\r\n<!-- All browsers where this could be reproduced -->\r\n \r\n* **Language:** [all | TypeScript X.X | ES6/7 | ES5]\r\nTypescript 2.0.2 (with Angular 2.4.9)\r\nTypescript 2.1.5 (with Angular 4.0.0-rc.2)\r\n\r\n* **Node (for AoT issues):** `node --version` =   \r\n", "bodyHTML": "\n<p><strong>I'm submitting a ...</strong>  (check one with \"x\")</p>\n<pre><code>[x] bug report =&gt; search github for a similar issue or PR before submitting\n[ ] feature request\n[ ] support request =&gt; Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\n</code></pre>\n<p><strong>Current behavior</strong></p>\n\n<p>If an element has an interpolated class as well as a class that is bound to a component property, bound class is removed if the interpolated class value changes.</p>\n<p>Take the following html as example:<br>\n<code>&lt;h2 class=\"existing-class {{compClass}}\" [class.bound]=\"hasClass\"&gt;Hello {{name}}&lt;/h2&gt;</code></p>\n<p>Once the <code>compClass</code> property changes, the <code>bound</code> class is removed.</p>\n<p><strong>Expected behavior</strong></p>\n\n<p>The expected behavior is that the class that is bound by a variable is unaffected by an interpolated class.</p>\n<p>Thus, in the above example, if <code>hasClass</code> is true the element should have the following classes present \"existing-class\", \"bound\" and whatever the value of <code>compClass</code> is.</p>\n<p>When <code>compClass</code> changes and <code>hasClass</code> is still true, the element should still have the \"bound\" class.</p>\n<p><strong>Minimal reproduction of the problem with instructions</strong></p>\n\n<ol>\n<li>Create a component with a boolean and string property.</li>\n<li>Within the component template, add the string property as a interpolated string in an element's class attribute.</li>\n<li>Bind another class to the element with the boolean property (<code>[class.bound]=\"boolProp\"</code>)</li>\n<li>Change the string property's value after a certain amount of time.</li>\n<li>The the class that is added with attribute binding is removed.</li>\n</ol>\n<p>Or check out this <a href=\"http://plnkr.co/edit/McE9UyP3h07eMqS3EOag\" rel=\"nofollow\">plunker</a></p>\n<p><strong>What is the motivation / use case for changing the behavior?</strong></p>\n\n<p>I think it makes sense to be able to change one class without effecting other classes on an element.</p>\n<p><strong>Please tell us about your environment:</strong></p>\n\n<ul>\n<li><strong>Angular version:</strong> 2.4.9 &amp;&amp; 4.0.0-rc.2</li>\n</ul>\n\n<ul>\n<li><strong>Browser:</strong> [Chromium 56 | Firefox 52]</li>\n</ul>\n\n<ul>\n<li>\n<p><strong>Language:</strong> [all | TypeScript X.X | ES6/7 | ES5]<br>\nTypescript 2.0.2 (with Angular 2.4.9)<br>\nTypescript 2.1.5 (with Angular 4.0.0-rc.2)</p>\n</li>\n<li>\n<p><strong>Node (for AoT issues):</strong> <code>node --version</code> =</p>\n</li>\n</ul>", "bodyText": "I'm submitting a ...  (check one with \"x\")\n[x] bug report => search github for a similar issue or PR before submitting\n[ ] feature request\n[ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\n\nCurrent behavior\n\nIf an element has an interpolated class as well as a class that is bound to a component property, bound class is removed if the interpolated class value changes.\nTake the following html as example:\n<h2 class=\"existing-class {{compClass}}\" [class.bound]=\"hasClass\">Hello {{name}}</h2>\nOnce the compClass property changes, the bound class is removed.\nExpected behavior\n\nThe expected behavior is that the class that is bound by a variable is unaffected by an interpolated class.\nThus, in the above example, if hasClass is true the element should have the following classes present \"existing-class\", \"bound\" and whatever the value of compClass is.\nWhen compClass changes and hasClass is still true, the element should still have the \"bound\" class.\nMinimal reproduction of the problem with instructions\n\n\nCreate a component with a boolean and string property.\nWithin the component template, add the string property as a interpolated string in an element's class attribute.\nBind another class to the element with the boolean property ([class.bound]=\"boolProp\")\nChange the string property's value after a certain amount of time.\nThe the class that is added with attribute binding is removed.\n\nOr check out this plunker\nWhat is the motivation / use case for changing the behavior?\n\nI think it makes sense to be able to change one class without effecting other classes on an element.\nPlease tell us about your environment:\n\n\nAngular version: 2.4.9 && 4.0.0-rc.2\n\n\n\nBrowser: [Chromium 56 | Firefox 52]\n\n\n\n\nLanguage: [all | TypeScript X.X | ES6/7 | ES5]\nTypescript 2.0.2 (with Angular 2.4.9)\nTypescript 2.1.5 (with Angular 4.0.0-rc.2)\n\n\nNode (for AoT issues): node --version =", "assignees": {"edges": []}, "createdAt": "2017-03-09T16:54:00Z", "closed": true, "closedAt": "2017-07-26T10:41:06Z", "lastEditedAt": null, "publishedAt": "2017-03-09T16:54:00Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4NjA3NDE1Mg==", "author": {"login": "willmendesneto"}, "body": "@JanBoshoff Your example will works fine if you use `[ngClass]` with bindings instead `[class.bound]`. Here's a plunkr with the expected result:\r\n\r\nhttp://plnkr.co/edit/YdCJkVIc5TOQ7vY0GNIS?p=preview", "bodyText": "@JanBoshoff Your example will works fine if you use [ngClass] with bindings instead [class.bound]. Here's a plunkr with the expected result:\nhttp://plnkr.co/edit/YdCJkVIc5TOQ7vY0GNIS?p=preview", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JanBoshoff/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JanBoshoff\">@JanBoshoff</a> Your example will works fine if you use <code>[ngClass]</code> with bindings instead <code>[class.bound]</code>. Here's a plunkr with the expected result:</p>\n<p><a rel=\"nofollow\" href=\"http://plnkr.co/edit/YdCJkVIc5TOQ7vY0GNIS?p=preview\">http://plnkr.co/edit/YdCJkVIc5TOQ7vY0GNIS?p=preview</a></p>", "createdAt": "2017-03-13T10:50:46Z", "publishedAt": "2017-03-13T10:50:46Z", "lastEditedAt": null, "updatedAt": "2017-03-13T10:50:46Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 13073, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@JanBoshoff Your example will works fine if you use [ngClass] with bindings instead [class.bound].", "sentSegmented": ["janboshoff", "your", "example", "will", "works", "fine", "if", "you", "use", "ngclass", "with", "bindings", "instead", "class.bound"], "sentSegmentedWithoutStops": ["janboshoff", "example", "works", "fine", "use", "ngclass", "bindings", "instead", "class.bound"], "sentSegmentedWithoutStopsStemmed": ["janboshoff", "exampl", "work", "fine", "use", "ngclass", "bind", "instead", "class.bound"]}, {"number": 13074, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Here's a plunkr with the expected result:", "sentSegmented": ["here", "'s", "a", "plunkr", "with", "the", "expected", "result"], "sentSegmentedWithoutStops": ["'s", "plunkr", "expected", "result"], "sentSegmentedWithoutStopsStemmed": ["'s", "plunkr", "expect", "result"]}, {"number": 13075, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://plnkr.co/edit/YdCJkVIc5TOQ7vY0GNIS?p=preview", "sentSegmented": ["http", "//plnkr.co/edit/ydcjkvic5toq7vy0gnis", "p=preview"], "sentSegmentedWithoutStops": ["http", "//plnkr.co/edit/ydcjkvic5toq7vy0gnis", "p=preview"], "sentSegmentedWithoutStopsStemmed": ["http", "//plnkr.co/edit/ydcjkvic5toq7vy0gni", "p=preview"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4NjA4MzE0NQ==", "author": {"login": "JanBoshoff"}, "body": "@willmendesneto Great, thanks. I missed that one. \r\n\r\nI guess it's still a bug, since it makes sense for it to work correctly in both ways? But [ngClass] seems cleaner anyway.", "bodyText": "@willmendesneto Great, thanks. I missed that one.\nI guess it's still a bug, since it makes sense for it to work correctly in both ways? But [ngClass] seems cleaner anyway.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/willmendesneto/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/willmendesneto\">@willmendesneto</a> Great, thanks. I missed that one.</p>\n<p>I guess it's still a bug, since it makes sense for it to work correctly in both ways? But [ngClass] seems cleaner anyway.</p>", "createdAt": "2017-03-13T11:35:02Z", "publishedAt": "2017-03-13T11:35:02Z", "lastEditedAt": null, "updatedAt": "2017-03-13T11:35:02Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-03-13T12:00:13Z"}}]}, "bodyParsed": [{"number": 13076, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@willmendesneto Great, thanks.", "sentSegmented": ["willmendesneto", "great", "thanks"], "sentSegmentedWithoutStops": ["willmendesneto", "great", "thanks"], "sentSegmentedWithoutStopsStemmed": ["willmendesneto", "great", "thank"]}, {"number": 13077, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I missed that one.", "sentSegmented": ["i", "missed", "that", "one"], "sentSegmentedWithoutStops": ["missed", "one"], "sentSegmentedWithoutStopsStemmed": ["miss", "one"]}, {"number": 13078, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I guess it's still a bug, since it makes sense for it to work correctly in both ways?", "sentSegmented": ["i", "guess", "it", "'s", "still", "a", "bug", "since", "it", "makes", "sense", "for", "it", "to", "work", "correctly", "in", "both", "ways"], "sentSegmentedWithoutStops": ["guess", "'s", "still", "bug", "since", "makes", "sense", "work", "correctly", "ways"], "sentSegmentedWithoutStopsStemmed": ["guess", "'s", "still", "bug", "sinc", "make", "sens", "work", "correctli", "way"]}, {"number": 13079, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But [ngClass] seems cleaner anyway.", "sentSegmented": ["but", "ngclass", "seems", "cleaner", "anyway"], "sentSegmentedWithoutStops": ["ngclass", "seems", "cleaner", "anyway"], "sentSegmentedWithoutStopsStemmed": ["ngclass", "seem", "cleaner", "anyway"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4NjA4ODc5OA==", "author": {"login": "JanBoshoff"}, "body": "@willmendesneto Oh I just tested some more, and the `[ngClass]` solution does not actually work 100% correctly.\r\n\r\nBut using `[ngClass]` to bind the property and interpolation `{{compClass}}` works as expected. So it's just the `[class.className]` syntax that doesn't work as expected.\r\n\r\nExample plunkr: [http://plnkr.co/edit/tngggh00Zlik9F8XI7cV](http://plnkr.co/edit/tngggh00Zlik9F8XI7cV)", "bodyText": "@willmendesneto Oh I just tested some more, and the [ngClass] solution does not actually work 100% correctly.\nBut using [ngClass] to bind the property and interpolation {{compClass}} works as expected. So it's just the [class.className] syntax that doesn't work as expected.\nExample plunkr: http://plnkr.co/edit/tngggh00Zlik9F8XI7cV", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/willmendesneto/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/willmendesneto\">@willmendesneto</a> Oh I just tested some more, and the <code>[ngClass]</code> solution does not actually work 100% correctly.</p>\n<p>But using <code>[ngClass]</code> to bind the property and interpolation <code>{{compClass}}</code> works as expected. So it's just the <code>[class.className]</code> syntax that doesn't work as expected.</p>\n<p>Example plunkr: <a rel=\"nofollow\" href=\"http://plnkr.co/edit/tngggh00Zlik9F8XI7cV\">http://plnkr.co/edit/tngggh00Zlik9F8XI7cV</a></p>", "createdAt": "2017-03-13T12:04:13Z", "publishedAt": "2017-03-13T12:04:13Z", "lastEditedAt": null, "updatedAt": "2017-03-13T12:04:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 13080, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@willmendesneto Oh I just tested some more, and the [ngClass] solution does not actually work 100% correctly.", "sentSegmented": ["willmendesneto", "oh", "i", "just", "tested", "some", "more", "and", "the", "ngclass", "solution", "does", "not", "actually", "work", "100", "correctly"], "sentSegmentedWithoutStops": ["willmendesneto", "oh", "tested", "ngclass", "solution", "actually", "work", "100", "correctly"], "sentSegmentedWithoutStopsStemmed": ["willmendesneto", "oh", "test", "ngclass", "solut", "actual", "work", "100", "correctli"]}, {"number": 13081, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But using [ngClass] to bind the property and interpolation {{compClass}} works as expected.", "sentSegmented": ["but", "using", "ngclass", "to", "bind", "the", "property", "and", "interpolation", "compclass", "works", "as", "expected"], "sentSegmentedWithoutStops": ["using", "ngclass", "bind", "property", "interpolation", "compclass", "works", "expected"], "sentSegmentedWithoutStopsStemmed": ["use", "ngclass", "bind", "properti", "interpol", "compclass", "work", "expect"]}, {"number": 13082, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So it's just the [class.className] syntax that doesn't work as expected.", "sentSegmented": ["so", "it", "'s", "just", "the", "class.classname", "syntax", "that", "does", "n't", "work", "as", "expected"], "sentSegmentedWithoutStops": ["'s", "class.classname", "syntax", "n't", "work", "expected"], "sentSegmentedWithoutStopsStemmed": ["'s", "class.classnam", "syntax", "n't", "work", "expect"]}, {"number": 13083, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Example plunkr: http://plnkr.co/edit/tngggh00Zlik9F8XI7cV", "sentSegmented": ["example", "plunkr", "http", "//plnkr.co/edit/tngggh00zlik9f8xi7cv"], "sentSegmentedWithoutStops": ["example", "plunkr", "http", "//plnkr.co/edit/tngggh00zlik9f8xi7cv"], "sentSegmentedWithoutStopsStemmed": ["exampl", "plunkr", "http", "//plnkr.co/edit/tngggh00zlik9f8xi7cv"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI4NjI1MzUxOA==", "author": {"login": "willmendesneto"}, "body": "@JanBoshoff I got your point. I didn't get this step, but looks good.\r\n\r\nThis is a plunkr using the same idea using `ngClass`. For sure you can use other approaches but still works fine via `ngClass`. http://plnkr.co/edit/Ow4Vr2juTX4I5DDplgHM?p=preview", "bodyText": "@JanBoshoff I got your point. I didn't get this step, but looks good.\nThis is a plunkr using the same idea using ngClass. For sure you can use other approaches but still works fine via ngClass. http://plnkr.co/edit/Ow4Vr2juTX4I5DDplgHM?p=preview", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JanBoshoff/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JanBoshoff\">@JanBoshoff</a> I got your point. I didn't get this step, but looks good.</p>\n<p>This is a plunkr using the same idea using <code>ngClass</code>. For sure you can use other approaches but still works fine via <code>ngClass</code>. <a rel=\"nofollow\" href=\"http://plnkr.co/edit/Ow4Vr2juTX4I5DDplgHM?p=preview\">http://plnkr.co/edit/Ow4Vr2juTX4I5DDplgHM?p=preview</a></p>", "createdAt": "2017-03-13T21:44:26Z", "publishedAt": "2017-03-13T21:44:26Z", "lastEditedAt": null, "updatedAt": "2017-03-13T21:44:26Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 13084, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@JanBoshoff I got your point.", "sentSegmented": ["janboshoff", "i", "got", "your", "point"], "sentSegmentedWithoutStops": ["janboshoff", "got", "point"], "sentSegmentedWithoutStopsStemmed": ["janboshoff", "got", "point"]}, {"number": 13085, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I didn't get this step, but looks good.", "sentSegmented": ["i", "did", "n't", "get", "this", "step", "but", "looks", "good"], "sentSegmentedWithoutStops": ["n't", "get", "step", "looks", "good"], "sentSegmentedWithoutStopsStemmed": ["n't", "get", "step", "look", "good"]}, {"number": 13086, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is a plunkr using the same idea using ngClass.", "sentSegmented": ["this", "is", "a", "plunkr", "using", "the", "same", "idea", "using", "ngclass"], "sentSegmentedWithoutStops": ["plunkr", "using", "idea", "using", "ngclass"], "sentSegmentedWithoutStopsStemmed": ["plunkr", "use", "idea", "use", "ngclass"]}, {"number": 13087, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For sure you can use other approaches but still works fine via ngClass.", "sentSegmented": ["for", "sure", "you", "can", "use", "other", "approaches", "but", "still", "works", "fine", "via", "ngclass"], "sentSegmentedWithoutStops": ["sure", "use", "approaches", "still", "works", "fine", "via", "ngclass"], "sentSegmentedWithoutStopsStemmed": ["sure", "use", "approach", "still", "work", "fine", "via", "ngclass"]}, {"number": 13088, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "http://plnkr.co/edit/Ow4Vr2juTX4I5DDplgHM?p=preview", "sentSegmented": ["http", "//plnkr.co/edit/ow4vr2jutx4i5ddplghm", "p=preview"], "sentSegmentedWithoutStops": ["http", "//plnkr.co/edit/ow4vr2jutx4i5ddplghm", "p=preview"], "sentSegmentedWithoutStopsStemmed": ["http", "//plnkr.co/edit/ow4vr2jutx4i5ddplghm", "p=preview"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMxODAxNzEyNA==", "author": {"login": "pkozlowski-opensource"}, "body": "In the original plunker we've got 2 bindings on the `<h2>` element:\r\n* `[className]=\"'existing-class ' + compClass\"` (this is what `class=\"existing-class {{compClass}}\"` gets transformed to)\r\n* `[class.bound]=\"hasClass\"`\r\n\r\nOn the first change detection the expressions are evaluated to `existing-class` and `true` which translates to the following operations:\r\n* set `className` to `existing-class`\r\n* add `bound` to the element's `classList`\r\n\r\nSo far so good and the element ends up with the `existing-class bound` classes.\r\n\r\nThen, after 5 seconds the change detection runs again and this time the values evaluate to `existing-class interpolated` and `true`. **Please notice that only one expression changed value here and only it will trigger DOM update**. But binding to `[className]` is \"destructive\" in the sense that it will wipe out and re-assign all the CSS classes.\r\n\r\nNow, having _both_ interpolation and `[class.bound]` works (even if `hasClass` doesn't change) would mean that we would have to _systematically_ trigger DOM manipulations for  `[class.bound]`-like bindings. **This would be super-expensive and would bring performance to its knees**. \r\n\r\nI don't think that there is a good solution here (meaning one that is correct _and_ performant) and this is why I'm going to close this issue. As other suggested please use `ngClass` (or interpolation only).", "bodyText": "In the original plunker we've got 2 bindings on the <h2> element:\n\n[className]=\"'existing-class ' + compClass\" (this is what class=\"existing-class {{compClass}}\" gets transformed to)\n[class.bound]=\"hasClass\"\n\nOn the first change detection the expressions are evaluated to existing-class and true which translates to the following operations:\n\nset className to existing-class\nadd bound to the element's classList\n\nSo far so good and the element ends up with the existing-class bound classes.\nThen, after 5 seconds the change detection runs again and this time the values evaluate to existing-class interpolated and true. Please notice that only one expression changed value here and only it will trigger DOM update. But binding to [className] is \"destructive\" in the sense that it will wipe out and re-assign all the CSS classes.\nNow, having both interpolation and [class.bound] works (even if hasClass doesn't change) would mean that we would have to systematically trigger DOM manipulations for  [class.bound]-like bindings. This would be super-expensive and would bring performance to its knees.\nI don't think that there is a good solution here (meaning one that is correct and performant) and this is why I'm going to close this issue. As other suggested please use ngClass (or interpolation only).", "bodyHTML": "<p>In the original plunker we've got 2 bindings on the <code>&lt;h2&gt;</code> element:</p>\n<ul>\n<li><code>[className]=\"'existing-class ' + compClass\"</code> (this is what <code>class=\"existing-class {{compClass}}\"</code> gets transformed to)</li>\n<li><code>[class.bound]=\"hasClass\"</code></li>\n</ul>\n<p>On the first change detection the expressions are evaluated to <code>existing-class</code> and <code>true</code> which translates to the following operations:</p>\n<ul>\n<li>set <code>className</code> to <code>existing-class</code></li>\n<li>add <code>bound</code> to the element's <code>classList</code></li>\n</ul>\n<p>So far so good and the element ends up with the <code>existing-class bound</code> classes.</p>\n<p>Then, after 5 seconds the change detection runs again and this time the values evaluate to <code>existing-class interpolated</code> and <code>true</code>. <strong>Please notice that only one expression changed value here and only it will trigger DOM update</strong>. But binding to <code>[className]</code> is \"destructive\" in the sense that it will wipe out and re-assign all the CSS classes.</p>\n<p>Now, having <em>both</em> interpolation and <code>[class.bound]</code> works (even if <code>hasClass</code> doesn't change) would mean that we would have to <em>systematically</em> trigger DOM manipulations for  <code>[class.bound]</code>-like bindings. <strong>This would be super-expensive and would bring performance to its knees</strong>.</p>\n<p>I don't think that there is a good solution here (meaning one that is correct <em>and</em> performant) and this is why I'm going to close this issue. As other suggested please use <code>ngClass</code> (or interpolation only).</p>", "createdAt": "2017-07-26T10:41:06Z", "publishedAt": "2017-07-26T10:41:06Z", "lastEditedAt": null, "updatedAt": "2017-07-26T10:41:06Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-07-26T12:05:15Z"}}]}, "bodyParsed": [{"number": 13089, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In the original plunker we've got 2 bindings on the  element:", "sentSegmented": ["in", "the", "original", "plunker", "we", "'ve", "got", "2", "bindings", "on", "the", "element"], "sentSegmentedWithoutStops": ["original", "plunker", "'ve", "got", "2", "bindings", "element"], "sentSegmentedWithoutStopsStemmed": ["origin", "plunker", "'ve", "got", "2", "bind", "element"]}, {"number": 13090, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[className]=\"'existing-class ' + compClass\" (this is what class=\"existing-class {{compClass}}\" gets transformed to)", "sentSegmented": ["classname", "'existing-class", "compclass", "this", "is", "what", "class=", "existing-class", "compclass", "gets", "transformed", "to"], "sentSegmentedWithoutStops": ["classname", "'existing-class", "compclass", "class=", "existing-class", "compclass", "gets", "transformed"], "sentSegmentedWithoutStopsStemmed": ["classnam", "'existing-class", "compclass", "class=", "existing-class", "compclass", "get", "transform"]}, {"number": 13091, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[class.bound]=\"hasClass\"", "sentSegmented": ["class.bound", "hasclass"], "sentSegmentedWithoutStops": ["class.bound", "hasclass"], "sentSegmentedWithoutStopsStemmed": ["class.bound", "hasclass"]}, {"number": 13092, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "On the first change detection the expressions are evaluated to existing-class and true which translates to the following operations:", "sentSegmented": ["on", "the", "first", "change", "detection", "the", "expressions", "are", "evaluated", "to", "existing-class", "and", "true", "which", "translates", "to", "the", "following", "operations"], "sentSegmentedWithoutStops": ["first", "change", "detection", "expressions", "evaluated", "existing-class", "true", "translates", "following", "operations"], "sentSegmentedWithoutStopsStemmed": ["first", "chang", "detect", "express", "evalu", "existing-class", "true", "translat", "follow", "oper"]}, {"number": 13093, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "set className to existing-class", "sentSegmented": ["set", "classname", "to", "existing-class"], "sentSegmentedWithoutStops": ["set", "classname", "existing-class"], "sentSegmentedWithoutStopsStemmed": ["set", "classnam", "existing-class"]}, {"number": 13094, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "add bound to the element's classList", "sentSegmented": ["add", "bound", "to", "the", "element", "'s", "classlist"], "sentSegmentedWithoutStops": ["add", "bound", "element", "'s", "classlist"], "sentSegmentedWithoutStopsStemmed": ["add", "bound", "element", "'s", "classlist"]}, {"number": 13095, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So far so good and the element ends up with the existing-class bound classes.", "sentSegmented": ["so", "far", "so", "good", "and", "the", "element", "ends", "up", "with", "the", "existing-class", "bound", "classes"], "sentSegmentedWithoutStops": ["far", "good", "element", "ends", "existing-class", "bound", "classes"], "sentSegmentedWithoutStopsStemmed": ["far", "good", "element", "end", "existing-class", "bound", "class"]}, {"number": 13096, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Then, after 5 seconds the change detection runs again and this time the values evaluate to existing-class interpolated and true.", "sentSegmented": ["then", "after", "5", "seconds", "the", "change", "detection", "runs", "again", "and", "this", "time", "the", "values", "evaluate", "to", "existing-class", "interpolated", "and", "true"], "sentSegmentedWithoutStops": ["5", "seconds", "change", "detection", "runs", "time", "values", "evaluate", "existing-class", "interpolated", "true"], "sentSegmentedWithoutStopsStemmed": ["5", "second", "chang", "detect", "run", "time", "valu", "evalu", "existing-class", "interpol", "true"]}, {"number": 13097, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please notice that only one expression changed value here and only it will trigger DOM update.", "sentSegmented": ["please", "notice", "that", "only", "one", "expression", "changed", "value", "here", "and", "only", "it", "will", "trigger", "dom", "update"], "sentSegmentedWithoutStops": ["please", "notice", "one", "expression", "changed", "value", "trigger", "dom", "update"], "sentSegmentedWithoutStopsStemmed": ["pleas", "notic", "one", "express", "chang", "valu", "trigger", "dom", "updat"]}, {"number": 13098, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But binding to [className] is \"destructive\" in the sense that it will wipe out and re-assign all the CSS classes.", "sentSegmented": ["but", "binding", "to", "classname", "is", "destructive", "in", "the", "sense", "that", "it", "will", "wipe", "out", "and", "re-assign", "all", "the", "css", "classes"], "sentSegmentedWithoutStops": ["binding", "classname", "destructive", "sense", "wipe", "re-assign", "css", "classes"], "sentSegmentedWithoutStopsStemmed": ["bind", "classnam", "destruct", "sens", "wipe", "re-assign", "css", "class"]}, {"number": 13099, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Now, having both interpolation and [class.bound] works (even if hasClass doesn't change) would mean that we would have to systematically trigger DOM manipulations for  [class.bound]-like bindings.", "sentSegmented": ["now", "having", "both", "interpolation", "and", "class.bound", "works", "even", "if", "hasclass", "does", "n't", "change", "would", "mean", "that", "we", "would", "have", "to", "systematically", "trigger", "dom", "manipulations", "for", "class.bound", "-like", "bindings"], "sentSegmentedWithoutStops": ["interpolation", "class.bound", "works", "even", "hasclass", "n't", "change", "would", "mean", "would", "systematically", "trigger", "dom", "manipulations", "class.bound", "-like", "bindings"], "sentSegmentedWithoutStopsStemmed": ["interpol", "class.bound", "work", "even", "hasclass", "n't", "chang", "would", "mean", "would", "systemat", "trigger", "dom", "manipul", "class.bound", "-like", "bind"]}, {"number": 13100, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This would be super-expensive and would bring performance to its knees.", "sentSegmented": ["this", "would", "be", "super-expensive", "and", "would", "bring", "performance", "to", "its", "knees"], "sentSegmentedWithoutStops": ["would", "super-expensive", "would", "bring", "performance", "knees"], "sentSegmentedWithoutStopsStemmed": ["would", "super-expens", "would", "bring", "perform", "knee"]}, {"number": 13101, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I don't think that there is a good solution here (meaning one that is correct and performant) and this is why I'm going to close this issue.", "sentSegmented": ["i", "do", "n't", "think", "that", "there", "is", "a", "good", "solution", "here", "meaning", "one", "that", "is", "correct", "and", "performant", "and", "this", "is", "why", "i", "'m", "going", "to", "close", "this", "issue"], "sentSegmentedWithoutStops": ["n't", "think", "good", "solution", "meaning", "one", "correct", "performant", "'m", "going", "close", "issue"], "sentSegmentedWithoutStopsStemmed": ["n't", "think", "good", "solut", "mean", "one", "correct", "perform", "'m", "go", "close", "issu"]}, {"number": 13102, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "As other suggested please use ngClass (or interpolation only).", "sentSegmented": ["as", "other", "suggested", "please", "use", "ngclass", "or", "interpolation", "only"], "sentSegmentedWithoutStops": ["suggested", "please", "use", "ngclass", "interpolation"], "sentSegmentedWithoutStopsStemmed": ["suggest", "pleas", "use", "ngclass", "interpol"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM1MTA1NDcwNA==", "author": {"login": "staeke"}, "body": "@pkozlowski-opensource I stumbled upon this issue now. I think you have a fair argument. However, if it's not supported I think the compiler should throw an error, e.g. \"You cannot mix interpolated class values with class bindings\"", "bodyText": "@pkozlowski-opensource I stumbled upon this issue now. I think you have a fair argument. However, if it's not supported I think the compiler should throw an error, e.g. \"You cannot mix interpolated class values with class bindings\"", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/pkozlowski-opensource/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pkozlowski-opensource\">@pkozlowski-opensource</a> I stumbled upon this issue now. I think you have a fair argument. However, if it's not supported I think the compiler should throw an error, e.g. \"You cannot mix interpolated class values with class bindings\"</p>", "createdAt": "2017-12-12T13:43:03Z", "publishedAt": "2017-12-12T13:43:03Z", "lastEditedAt": null, "updatedAt": "2017-12-12T13:43:03Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 13103, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@pkozlowski-opensource I stumbled upon this issue now.", "sentSegmented": ["pkozlowski-opensource", "i", "stumbled", "upon", "this", "issue", "now"], "sentSegmentedWithoutStops": ["pkozlowski-opensource", "stumbled", "upon", "issue"], "sentSegmentedWithoutStopsStemmed": ["pkozlowski-opensourc", "stumbl", "upon", "issu"]}, {"number": 13104, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think you have a fair argument.", "sentSegmented": ["i", "think", "you", "have", "a", "fair", "argument"], "sentSegmentedWithoutStops": ["think", "fair", "argument"], "sentSegmentedWithoutStopsStemmed": ["think", "fair", "argument"]}, {"number": 13105, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, if it's not supported I think the compiler should throw an error, e.g.", "sentSegmented": ["however", "if", "it", "'s", "not", "supported", "i", "think", "the", "compiler", "should", "throw", "an", "error", "e.g"], "sentSegmentedWithoutStops": ["however", "'s", "supported", "think", "compiler", "throw", "error", "e.g"], "sentSegmentedWithoutStopsStemmed": ["howev", "'s", "support", "think", "compil", "throw", "error", "e.g"]}, {"number": 13106, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\"You cannot mix interpolated class values with class bindings\"", "sentSegmented": ["you", "can", "not", "mix", "interpolated", "class", "values", "with", "class", "bindings"], "sentSegmentedWithoutStops": ["mix", "interpolated", "class", "values", "class", "bindings"], "sentSegmentedWithoutStopsStemmed": ["mix", "interpol", "class", "valu", "class", "bind"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUzMTA2NDM5MA==", "author": {"login": "angular-automatic-lock-bot"}, "body": "This issue has been automatically locked due to inactivity.\nPlease file a new issue if you are encountering a similar or related problem.\n\nRead more about our [automatic conversation locking policy](https://github.com/angular/angular/blob/67d80f/docs/GITHUB_PROCESS.md#conversation-locking).\n\n<sub>_This action has been performed automatically by a bot._</sub>", "bodyText": "This issue has been automatically locked due to inactivity.\nPlease file a new issue if you are encountering a similar or related problem.\nRead more about our automatic conversation locking policy.\nThis action has been performed automatically by a bot.", "bodyHTML": "<p>This issue has been automatically locked due to inactivity.<br>\nPlease file a new issue if you are encountering a similar or related problem.</p>\n<p>Read more about our <a href=\"https://github.com/angular/angular/blob/67d80f/docs/GITHUB_PROCESS.md#conversation-locking\">automatic conversation locking policy</a>.</p>\n<p><sub><em>This action has been performed automatically by a bot.</em></sub></p>", "createdAt": "2019-09-13T01:21:48Z", "publishedAt": "2019-09-13T01:21:48Z", "lastEditedAt": null, "updatedAt": "2019-09-13T01:21:48Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 13107, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This issue has been automatically locked due to inactivity.", "sentSegmented": ["this", "issue", "has", "been", "automatically", "locked", "due", "to", "inactivity"], "sentSegmentedWithoutStops": ["issue", "automatically", "locked", "due", "inactivity"], "sentSegmentedWithoutStopsStemmed": ["issu", "automat", "lock", "due", "inact"]}, {"number": 13108, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please file a new issue if you are encountering a similar or related problem.", "sentSegmented": ["please", "file", "a", "new", "issue", "if", "you", "are", "encountering", "a", "similar", "or", "related", "problem"], "sentSegmentedWithoutStops": ["please", "file", "new", "issue", "encountering", "similar", "related", "problem"], "sentSegmentedWithoutStopsStemmed": ["pleas", "file", "new", "issu", "encount", "similar", "relat", "problem"]}, {"number": 13109, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Read more about our automatic conversation locking policy.", "sentSegmented": ["read", "more", "about", "our", "automatic", "conversation", "locking", "policy"], "sentSegmentedWithoutStops": ["read", "automatic", "conversation", "locking", "policy"], "sentSegmentedWithoutStopsStemmed": ["read", "automat", "convers", "lock", "polici"]}, {"number": 13110, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This action has been performed automatically by a bot.", "sentSegmented": ["this", "action", "has", "been", "performed", "automatically", "by", "a", "bot"], "sentSegmentedWithoutStops": ["action", "performed", "automatically", "bot"], "sentSegmentedWithoutStopsStemmed": ["action", "perform", "automat", "bot"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOH6dmRg==", "hasNextPage": false}, "totalCount": 7}, "labels": {"edges": [{"node": {"createdAt": "2016-05-13T04:35:11Z", "name": "comp: core"}}, {"node": {"createdAt": "2014-09-18T16:12:01Z", "name": "type: bug/fix"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["element", "interpolated", "class", "removes", "bound", "classes"], "titleSegmentedWithoutStops": ["element", "interpolated", "class", "removes", "bound", "classes"], "titleSegmentedWithoutStopsStemmed": ["element", "interpol", "class", "remov", "bound", "class"], "bodyParsed": [{"number": 13044, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm submitting a ...  (check one with \"x\")", "sentSegmented": ["i", "'m", "submitting", "a", "check", "one", "with", "x"], "sentSegmentedWithoutStops": ["'m", "submitting", "check", "one", "x"], "sentSegmentedWithoutStopsStemmed": ["'m", "submit", "check", "one", "x"]}, {"number": 13045, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[x] bug report => search github for a similar issue or PR before submitting", "sentSegmented": ["x", "bug", "report", "search", "github", "for", "a", "similar", "issue", "or", "pr", "before", "submitting"], "sentSegmentedWithoutStops": ["x", "bug", "report", "search", "github", "similar", "issue", "pr", "submitting"], "sentSegmentedWithoutStopsStemmed": ["x", "bug", "report", "search", "github", "similar", "issu", "pr", "submit"]}, {"number": 13046, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] feature request", "sentSegmented": ["feature", "request"], "sentSegmentedWithoutStops": ["feature", "request"], "sentSegmentedWithoutStopsStemmed": ["featur", "request"]}, {"number": 13047, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question", "sentSegmented": ["support", "request", "please", "do", "not", "submit", "support", "request", "here", "instead", "see", "https", "//github.com/angular/angular/blob/master/contributing.md", "question"], "sentSegmentedWithoutStops": ["support", "request", "please", "submit", "support", "request", "instead", "see", "https", "//github.com/angular/angular/blob/master/contributing.md", "question"], "sentSegmentedWithoutStopsStemmed": ["support", "request", "pleas", "submit", "support", "request", "instead", "see", "http", "//github.com/angular/angular/blob/master/contributing.md", "question"]}, {"number": 13048, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Current behavior", "sentSegmented": ["current", "behavior"], "sentSegmentedWithoutStops": ["current", "behavior"], "sentSegmentedWithoutStopsStemmed": ["current", "behavior"]}, {"number": 13049, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If an element has an interpolated class as well as a class that is bound to a component property, bound class is removed if the interpolated class value changes.", "sentSegmented": ["if", "an", "element", "has", "an", "interpolated", "class", "as", "well", "as", "a", "class", "that", "is", "bound", "to", "a", "component", "property", "bound", "class", "is", "removed", "if", "the", "interpolated", "class", "value", "changes"], "sentSegmentedWithoutStops": ["element", "interpolated", "class", "well", "class", "bound", "component", "property", "bound", "class", "removed", "interpolated", "class", "value", "changes"], "sentSegmentedWithoutStopsStemmed": ["element", "interpol", "class", "well", "class", "bound", "compon", "properti", "bound", "class", "remov", "interpol", "class", "valu", "chang"]}, {"number": 13050, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Take the following html as example:", "sentSegmented": ["take", "the", "following", "html", "as", "example"], "sentSegmentedWithoutStops": ["take", "following", "html", "example"], "sentSegmentedWithoutStopsStemmed": ["take", "follow", "html", "exampl"]}, {"number": 13051, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hello {{name}}", "sentSegmented": ["hello", "name"], "sentSegmentedWithoutStops": ["hello", "name"], "sentSegmentedWithoutStopsStemmed": ["hello", "name"]}, {"number": 13052, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Once the compClass property changes, the bound class is removed.", "sentSegmented": ["once", "the", "compclass", "property", "changes", "the", "bound", "class", "is", "removed"], "sentSegmentedWithoutStops": ["compclass", "property", "changes", "bound", "class", "removed"], "sentSegmentedWithoutStopsStemmed": ["compclass", "properti", "chang", "bound", "class", "remov"]}, {"number": 13053, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Expected behavior", "sentSegmented": ["expected", "behavior"], "sentSegmentedWithoutStops": ["expected", "behavior"], "sentSegmentedWithoutStopsStemmed": ["expect", "behavior"]}, {"number": 13054, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The expected behavior is that the class that is bound by a variable is unaffected by an interpolated class.", "sentSegmented": ["the", "expected", "behavior", "is", "that", "the", "class", "that", "is", "bound", "by", "a", "variable", "is", "unaffected", "by", "an", "interpolated", "class"], "sentSegmentedWithoutStops": ["expected", "behavior", "class", "bound", "variable", "unaffected", "interpolated", "class"], "sentSegmentedWithoutStopsStemmed": ["expect", "behavior", "class", "bound", "variabl", "unaffect", "interpol", "class"]}, {"number": 13055, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thus, in the above example, if hasClass is true the element should have the following classes present \"existing-class\", \"bound\" and whatever the value of compClass is.", "sentSegmented": ["thus", "in", "the", "above", "example", "if", "hasclass", "is", "true", "the", "element", "should", "have", "the", "following", "classes", "present", "existing-class", "bound", "and", "whatever", "the", "value", "of", "compclass", "is"], "sentSegmentedWithoutStops": ["thus", "example", "hasclass", "true", "element", "following", "classes", "present", "existing-class", "bound", "whatever", "value", "compclass"], "sentSegmentedWithoutStopsStemmed": ["thu", "exampl", "hasclass", "true", "element", "follow", "class", "present", "existing-class", "bound", "whatev", "valu", "compclass"]}, {"number": 13056, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When compClass changes and hasClass is still true, the element should still have the \"bound\" class.", "sentSegmented": ["when", "compclass", "changes", "and", "hasclass", "is", "still", "true", "the", "element", "should", "still", "have", "the", "bound", "class"], "sentSegmentedWithoutStops": ["compclass", "changes", "hasclass", "still", "true", "element", "still", "bound", "class"], "sentSegmentedWithoutStopsStemmed": ["compclass", "chang", "hasclass", "still", "true", "element", "still", "bound", "class"]}, {"number": 13057, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Minimal reproduction of the problem with instructions", "sentSegmented": ["minimal", "reproduction", "of", "the", "problem", "with", "instructions"], "sentSegmentedWithoutStops": ["minimal", "reproduction", "problem", "instructions"], "sentSegmentedWithoutStopsStemmed": ["minim", "reproduct", "problem", "instruct"]}, {"number": 13058, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Create a component with a boolean and string property.", "sentSegmented": ["create", "a", "component", "with", "a", "boolean", "and", "string", "property"], "sentSegmentedWithoutStops": ["create", "component", "boolean", "string", "property"], "sentSegmentedWithoutStopsStemmed": ["creat", "compon", "boolean", "string", "properti"]}, {"number": 13059, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Within the component template, add the string property as a interpolated string in an element's class attribute.", "sentSegmented": ["within", "the", "component", "template", "add", "the", "string", "property", "as", "a", "interpolated", "string", "in", "an", "element", "'s", "class", "attribute"], "sentSegmentedWithoutStops": ["within", "component", "template", "add", "string", "property", "interpolated", "string", "element", "'s", "class", "attribute"], "sentSegmentedWithoutStopsStemmed": ["within", "compon", "templat", "add", "string", "properti", "interpol", "string", "element", "'s", "class", "attribut"]}, {"number": 13060, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Bind another class to the element with the boolean property ([class.bound]=\"boolProp\")", "sentSegmented": ["bind", "another", "class", "to", "the", "element", "with", "the", "boolean", "property", "class.bound", "boolprop"], "sentSegmentedWithoutStops": ["bind", "another", "class", "element", "boolean", "property", "class.bound", "boolprop"], "sentSegmentedWithoutStopsStemmed": ["bind", "anoth", "class", "element", "boolean", "properti", "class.bound", "boolprop"]}, {"number": 13061, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Change the string property's value after a certain amount of time.", "sentSegmented": ["change", "the", "string", "property", "'s", "value", "after", "a", "certain", "amount", "of", "time"], "sentSegmentedWithoutStops": ["change", "string", "property", "'s", "value", "certain", "amount", "time"], "sentSegmentedWithoutStopsStemmed": ["chang", "string", "properti", "'s", "valu", "certain", "amount", "time"]}, {"number": 13062, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The the class that is added with attribute binding is removed.", "sentSegmented": ["the", "the", "class", "that", "is", "added", "with", "attribute", "binding", "is", "removed"], "sentSegmentedWithoutStops": ["class", "added", "attribute", "binding", "removed"], "sentSegmentedWithoutStopsStemmed": ["class", "ad", "attribut", "bind", "remov"]}, {"number": 13063, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Or check out this plunker", "sentSegmented": ["or", "check", "out", "this", "plunker"], "sentSegmentedWithoutStops": ["check", "plunker"], "sentSegmentedWithoutStopsStemmed": ["check", "plunker"]}, {"number": 13064, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "What is the motivation / use case for changing the behavior?", "sentSegmented": ["what", "is", "the", "motivation", "use", "case", "for", "changing", "the", "behavior"], "sentSegmentedWithoutStops": ["motivation", "use", "case", "changing", "behavior"], "sentSegmentedWithoutStopsStemmed": ["motiv", "use", "case", "chang", "behavior"]}, {"number": 13065, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think it makes sense to be able to change one class without effecting other classes on an element.", "sentSegmented": ["i", "think", "it", "makes", "sense", "to", "be", "able", "to", "change", "one", "class", "without", "effecting", "other", "classes", "on", "an", "element"], "sentSegmentedWithoutStops": ["think", "makes", "sense", "able", "change", "one", "class", "without", "effecting", "classes", "element"], "sentSegmentedWithoutStopsStemmed": ["think", "make", "sens", "abl", "chang", "one", "class", "without", "effect", "class", "element"]}, {"number": 13066, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please tell us about your environment:", "sentSegmented": ["please", "tell", "us", "about", "your", "environment"], "sentSegmentedWithoutStops": ["please", "tell", "us", "environment"], "sentSegmentedWithoutStopsStemmed": ["pleas", "tell", "us", "environ"]}, {"number": 13067, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Angular version: 2.4.9 && 4.0.0-rc.2", "sentSegmented": ["angular", "version", "2.4.9", "4.0.0-rc.2"], "sentSegmentedWithoutStops": ["angular", "version", "2.4.9", "4.0.0-rc.2"], "sentSegmentedWithoutStopsStemmed": ["angular", "version", "2.4.9", "4.0.0-rc.2"]}, {"number": 13068, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Browser: [Chromium 56 | Firefox 52]", "sentSegmented": ["browser", "chromium", "56", "firefox", "52"], "sentSegmentedWithoutStops": ["browser", "chromium", "56", "firefox", "52"], "sentSegmentedWithoutStopsStemmed": ["browser", "chromium", "56", "firefox", "52"]}, {"number": 13069, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Language: [all | TypeScript X.X | ES6/7 | ES5]", "sentSegmented": ["language", "all", "typescript", "x.x", "es6/7", "es5"], "sentSegmentedWithoutStops": ["language", "typescript", "x.x", "es6/7", "es5"], "sentSegmentedWithoutStopsStemmed": ["languag", "typescript", "x.x", "es6/7", "es5"]}, {"number": 13070, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Typescript 2.0.2 (with Angular 2.4.9)", "sentSegmented": ["typescript", "2.0.2", "with", "angular", "2.4.9"], "sentSegmentedWithoutStops": ["typescript", "2.0.2", "angular", "2.4.9"], "sentSegmentedWithoutStopsStemmed": ["typescript", "2.0.2", "angular", "2.4.9"]}, {"number": 13071, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Typescript 2.1.5 (with Angular 4.0.0-rc.2)", "sentSegmented": ["typescript", "2.1.5", "with", "angular", "4.0.0-rc.2"], "sentSegmentedWithoutStops": ["typescript", "2.1.5", "angular", "4.0.0-rc.2"], "sentSegmentedWithoutStopsStemmed": ["typescript", "2.1.5", "angular", "4.0.0-rc.2"]}, {"number": 13072, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Node (for AoT issues): node --version =", "sentSegmented": ["node", "for", "aot", "issues", "node", "version"], "sentSegmentedWithoutStops": ["node", "aot", "issues", "node", "version"], "sentSegmentedWithoutStopsStemmed": ["node", "aot", "issu", "node", "version"]}]}