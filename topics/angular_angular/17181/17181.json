{"repository": {"owner": {"login": "angular"}, "name": "angular", "forkCount": 18739, "stargazerCount": 71466, "createdAt": "2014-09-18T16:12:01Z", "updatedAt": "2021-03-10T14:49:39Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "angular"}}}, {"node": {"topic": {"name": "typescript"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "pwa"}}}, {"node": {"topic": {"name": "web-framework"}}}, {"node": {"topic": {"name": "web-performance"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Shell"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "PHP"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "JSONiq"}}, {"node": {"name": "PowerShell"}}, {"node": {"name": "Starlark"}}, {"node": {"name": "SCSS"}}, {"node": {"name": "Less"}}]}, "primaryLanguage": {"name": "TypeScript"}}, "id": "MDU6SXNzdWUyMzMyNjU4MjQ=", "number": 17181, "author": {"login": "karptonite"}, "title": "feat: add bracket access to safe navigation operator", "body": "**I'm submitting a ...**  (check one with \"x\")\r\n```\r\n[ ] bug report => search github for a similar issue or PR before submitting\r\n[x] feature request\r\n[ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\r\n```\r\n\r\nThe safe navigation operator `?.` is great, but it would be even better if it also supported bracket notation, `foo?[bar]`. This was first mentioned here, but didn't get any traction\r\nhttps://github.com/angular/angular/issues/791#issuecomment-77801474", "bodyHTML": "<p><strong>I'm submitting a ...</strong>  (check one with \"x\")</p>\n<pre><code>[ ] bug report =&gt; search github for a similar issue or PR before submitting\n[x] feature request\n[ ] support request =&gt; Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\n</code></pre>\n<p>The safe navigation operator <code>?.</code> is great, but it would be even better if it also supported bracket notation, <code>foo?[bar]</code>. This was first mentioned here, but didn't get any traction<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"58959849\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/791\" data-hovercard-type=\"issue\" data-hovercard-url=\"/angular/angular/issues/791/hovercard?comment_id=77801474&amp;comment_type=issue_comment\" href=\"https://github.com/angular/angular/issues/791#issuecomment-77801474\">#791 (comment)</a></p>", "bodyText": "I'm submitting a ...  (check one with \"x\")\n[ ] bug report => search github for a similar issue or PR before submitting\n[x] feature request\n[ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question\n\nThe safe navigation operator ?. is great, but it would be even better if it also supported bracket notation, foo?[bar]. This was first mentioned here, but didn't get any traction\n#791 (comment)", "assignees": {"edges": []}, "createdAt": "2017-06-02T18:39:02Z", "closed": true, "closedAt": "2020-05-11T14:41:59Z", "lastEditedAt": "2017-06-20T17:05:29Z", "publishedAt": "2017-06-02T18:39:02Z", "comments": {"totalCount": 15, "edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDMzNDMyOTQwMA==", "author": {"login": "akram1905"}, "body": "Any updates?\r\nNow we have Angular Language Service, it's annoying seeing this \"error\".\r\nMostly I need it in errors validations like `input.errors?['required']` instead of `input.errors?.required`.\r\n", "bodyText": "Any updates?\nNow we have Angular Language Service, it's annoying seeing this \"error\".\nMostly I need it in errors validations like input.errors?['required'] instead of input.errors?.required.", "bodyHTML": "<p>Any updates?<br>\nNow we have Angular Language Service, it's annoying seeing this \"error\".<br>\nMostly I need it in errors validations like <code>input.errors?['required']</code> instead of <code>input.errors?.required</code>.</p>", "createdAt": "2017-10-05T00:50:15Z", "publishedAt": "2017-10-05T00:50:15Z", "lastEditedAt": null, "updatedAt": "2017-10-05T00:50:15Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-01-17T20:15:05Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-05-24T10:24:41Z"}}]}, "bodyParsed": [{"number": 61500, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Any updates?", "sentSegmented": ["any", "updates"], "sentSegmentedWithoutStops": ["updates"], "sentSegmentedWithoutStopsStemmed": ["updat"]}, {"number": 61501, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Now we have Angular Language Service, it's annoying seeing this \"error\".", "sentSegmented": ["now", "we", "have", "angular", "language", "service", "it", "'s", "annoying", "seeing", "this", "error"], "sentSegmentedWithoutStops": ["angular", "language", "service", "'s", "annoying", "seeing", "error"], "sentSegmentedWithoutStopsStemmed": ["angular", "languag", "servic", "'s", "annoy", "see", "error"]}, {"number": 61502, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Mostly I need it in errors validations like input.errors?", "sentSegmented": ["mostly", "i", "need", "it", "in", "errors", "validations", "like", "input.errors"], "sentSegmentedWithoutStops": ["mostly", "need", "errors", "validations", "like", "input.errors"], "sentSegmentedWithoutStopsStemmed": ["mostli", "need", "error", "valid", "like", "input.error"]}, {"number": 61503, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "['required'] instead of input.errors?.required.", "sentSegmented": ["'required", "instead", "of", "input.errors", ".required"], "sentSegmentedWithoutStops": ["'required", "instead", "input.errors", ".required"], "sentSegmentedWithoutStopsStemmed": ["'requir", "instead", "input.error", ".requir"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM2MDUwMTgwMg==", "author": {"login": "trotyl"}, "body": "This syntax is too ambiguous, and already got rejected in [optional chaining proposal](https://github.com/tc39/proposal-optional-chaining). The final syntax should be `foo?.[bar]` or `foo??[bar]` (Waiting for tc39-notes to update).\r\n\r\nWriting different syntax in logic code and template code may not be a good idea.", "bodyText": "This syntax is too ambiguous, and already got rejected in optional chaining proposal. The final syntax should be foo?.[bar] or foo??[bar] (Waiting for tc39-notes to update).\nWriting different syntax in logic code and template code may not be a good idea.", "bodyHTML": "<p>This syntax is too ambiguous, and already got rejected in <a href=\"https://github.com/tc39/proposal-optional-chaining\">optional chaining proposal</a>. The final syntax should be <code>foo?.[bar]</code> or <code>foo??[bar]</code> (Waiting for tc39-notes to update).</p>\n<p>Writing different syntax in logic code and template code may not be a good idea.</p>", "createdAt": "2018-01-25T15:32:25Z", "publishedAt": "2018-01-25T15:32:25Z", "lastEditedAt": null, "updatedAt": "2018-01-25T15:32:25Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61504, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This syntax is too ambiguous, and already got rejected in optional chaining proposal.", "sentSegmented": ["this", "syntax", "is", "too", "ambiguous", "and", "already", "got", "rejected", "in", "optional", "chaining", "proposal"], "sentSegmentedWithoutStops": ["syntax", "ambiguous", "already", "got", "rejected", "optional", "chaining", "proposal"], "sentSegmentedWithoutStopsStemmed": ["syntax", "ambigu", "alreadi", "got", "reject", "option", "chain", "propos"]}, {"number": 61505, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The final syntax should be foo?.", "sentSegmented": ["the", "final", "syntax", "should", "be", "foo"], "sentSegmentedWithoutStops": ["final", "syntax", "foo"], "sentSegmentedWithoutStopsStemmed": ["final", "syntax", "foo"]}, {"number": 61506, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[bar] or foo??", "sentSegmented": ["bar", "or", "foo"], "sentSegmentedWithoutStops": ["bar", "foo"], "sentSegmentedWithoutStopsStemmed": ["bar", "foo"]}, {"number": 61507, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[bar] (Waiting for tc39-notes to update).", "sentSegmented": ["bar", "waiting", "for", "tc39-notes", "to", "update"], "sentSegmentedWithoutStops": ["bar", "waiting", "tc39-notes", "update"], "sentSegmentedWithoutStopsStemmed": ["bar", "wait", "tc39-note", "updat"]}, {"number": 61508, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Writing different syntax in logic code and template code may not be a good idea.", "sentSegmented": ["writing", "different", "syntax", "in", "logic", "code", "and", "template", "code", "may", "not", "be", "a", "good", "idea"], "sentSegmentedWithoutStops": ["writing", "different", "syntax", "logic", "code", "template", "code", "may", "good", "idea"], "sentSegmentedWithoutStopsStemmed": ["write", "differ", "syntax", "logic", "code", "templat", "code", "may", "good", "idea"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMjc1MDUwNA==", "author": {"login": "mtuzinskiy"}, "body": "Any updates on this? Thank you", "bodyText": "Any updates on this? Thank you", "bodyHTML": "<p>Any updates on this? Thank you</p>", "createdAt": "2018-07-05T14:56:26Z", "publishedAt": "2018-07-05T14:56:26Z", "lastEditedAt": null, "updatedAt": "2018-07-05T14:56:26Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-10-01T12:21:50Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-10-18T18:08:56Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-04-09T14:41:07Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-05-24T10:24:18Z"}}]}, "bodyParsed": [{"number": 61509, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Any updates on this?", "sentSegmented": ["any", "updates", "on", "this"], "sentSegmentedWithoutStops": ["updates"], "sentSegmentedWithoutStopsStemmed": ["updat"]}, {"number": 61510, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thank you", "sentSegmented": ["thank", "you"], "sentSegmentedWithoutStops": ["thank"], "sentSegmentedWithoutStopsStemmed": ["thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQ4MTI4MjM2MA==", "author": {"login": "bvandenbon"}, "body": "Not only for arrays, but also for objects this would be useful.\r\ni.e.\r\n\r\n    // for a given object o\r\n    const o = { \"with.dots\" : \"...\" }\r\n\r\n    // accessing its value in typescript or es6.\r\n    const withDots = o && o[\"with.dots\"];\r\n    \r\n    // accessing the value in an Angular template:\r\n    {{ o?[\"with.dots\"] }}", "bodyText": "Not only for arrays, but also for objects this would be useful.\ni.e.\n// for a given object o\nconst o = { \"with.dots\" : \"...\" }\n\n// accessing its value in typescript or es6.\nconst withDots = o && o[\"with.dots\"];\n\n// accessing the value in an Angular template:\n{{ o?[\"with.dots\"] }}", "bodyHTML": "<p>Not only for arrays, but also for objects this would be useful.<br>\ni.e.</p>\n<pre><code>// for a given object o\nconst o = { \"with.dots\" : \"...\" }\n\n// accessing its value in typescript or es6.\nconst withDots = o &amp;&amp; o[\"with.dots\"];\n\n// accessing the value in an Angular template:\n{{ o?[\"with.dots\"] }}\n</code></pre>", "createdAt": "2019-04-09T14:44:21Z", "publishedAt": "2019-04-09T14:44:21Z", "lastEditedAt": "2019-04-09T14:44:54Z", "updatedAt": "2019-04-09T14:44:54Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61511, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Not only for arrays, but also for objects this would be useful.", "sentSegmented": ["not", "only", "for", "arrays", "but", "also", "for", "objects", "this", "would", "be", "useful"], "sentSegmentedWithoutStops": ["arrays", "also", "objects", "would", "useful"], "sentSegmentedWithoutStopsStemmed": ["array", "also", "object", "would", "use"]}, {"number": 61512, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "i.e.", "sentSegmented": ["i.e"], "sentSegmentedWithoutStops": ["i.e"], "sentSegmentedWithoutStopsStemmed": ["i.e"]}, {"number": 61513, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// for a given object o", "sentSegmented": ["for", "a", "given", "object", "o"], "sentSegmentedWithoutStops": ["given"], "sentSegmentedWithoutStopsStemmed": ["given"]}, {"number": 61514, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const o = { \"with.dots\" : \"...\" }", "sentSegmented": ["const", "o", "with.dots"], "sentSegmentedWithoutStops": ["with.dots"], "sentSegmentedWithoutStopsStemmed": ["with.dot"]}, {"number": 61515, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// accessing its value in typescript or es6.", "sentSegmented": ["accessing", "its", "value", "in", "typescript", "or", "es6"], "sentSegmentedWithoutStops": ["accessing", "value", "typescript", "es6"], "sentSegmentedWithoutStopsStemmed": ["access", "valu", "typescript", "es6"]}, {"number": 61516, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "const withDots = o && o[\"with.dots\"];", "sentSegmented": ["const", "withdots", "o", "o", "with.dots"], "sentSegmentedWithoutStops": ["withdots", "with.dots"], "sentSegmentedWithoutStopsStemmed": ["withdot", "with.dot"]}, {"number": 61517, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// accessing the value in an Angular template:", "sentSegmented": ["accessing", "the", "value", "in", "an", "angular", "template"], "sentSegmentedWithoutStops": ["accessing", "value", "angular"], "sentSegmentedWithoutStopsStemmed": ["access", "valu", "angular"]}, {"number": 61518, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "{{ o?[\"with.dots\"] }}", "sentSegmented": ["o", "with.dots"], "sentSegmentedWithoutStops": ["with.dots"], "sentSegmentedWithoutStopsStemmed": ["with.dot"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUyODQ0NDg0Mg==", "author": {"login": "sheikalthaf"}, "body": "@chuckjaz @hansl @trotyl Any update on this?", "bodyText": "@chuckjaz @hansl @trotyl Any update on this?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/chuckjaz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/chuckjaz\">@chuckjaz</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hansl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hansl\">@hansl</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/trotyl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/trotyl\">@trotyl</a> Any update on this?</p>", "createdAt": "2019-09-05T16:16:06Z", "publishedAt": "2019-09-05T16:16:06Z", "lastEditedAt": null, "updatedAt": "2019-09-05T16:16:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61519, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@chuckjaz @hansl @trotyl Any update on this?", "sentSegmented": ["chuckjaz", "hansl", "trotyl", "any", "update", "on", "this"], "sentSegmentedWithoutStops": ["chuckjaz", "hansl", "trotyl", "update"], "sentSegmentedWithoutStopsStemmed": ["chuckjaz", "hansl", "trotyl", "updat"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUyODcxMTQ3MA==", "author": {"login": "trotyl"}, "body": "@sheikalthaf In JavaScript the syntax has been settled as `a?.[x] `, I'm not sure whether Angular are currently consider this, but likely no one would like to write different syntax between TypeScript and template expression.", "bodyText": "@sheikalthaf In JavaScript the syntax has been settled as a?.[x] , I'm not sure whether Angular are currently consider this, but likely no one would like to write different syntax between TypeScript and template expression.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/sheikalthaf/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sheikalthaf\">@sheikalthaf</a> In JavaScript the syntax has been settled as <code>a?.[x] </code>, I'm not sure whether Angular are currently consider this, but likely no one would like to write different syntax between TypeScript and template expression.</p>", "createdAt": "2019-09-06T05:15:05Z", "publishedAt": "2019-09-06T05:15:05Z", "lastEditedAt": null, "updatedAt": "2019-09-06T05:15:05Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61520, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@sheikalthaf In JavaScript the syntax has been settled as a?.", "sentSegmented": ["sheikalthaf", "in", "javascript", "the", "syntax", "has", "been", "settled", "as", "a"], "sentSegmentedWithoutStops": ["sheikalthaf", "javascript", "syntax", "settled"], "sentSegmentedWithoutStopsStemmed": ["sheikalthaf", "javascript", "syntax", "settl"]}, {"number": 61521, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[x] , I'm not sure whether Angular are currently consider this, but likely no one would like to write different syntax between TypeScript and template expression.", "sentSegmented": ["x", "i", "'m", "not", "sure", "whether", "angular", "are", "currently", "consider", "this", "but", "likely", "no", "one", "would", "like", "to", "write", "different", "syntax", "between", "typescript", "and", "template", "expression"], "sentSegmentedWithoutStops": ["x", "'m", "sure", "whether", "angular", "currently", "consider", "likely", "one", "would", "like", "write", "different", "syntax", "typescript", "template", "expression"], "sentSegmentedWithoutStopsStemmed": ["x", "'m", "sure", "whether", "angular", "current", "consid", "like", "one", "would", "like", "write", "differ", "syntax", "typescript", "templat", "express"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUyODg3MzMyMA==", "author": {"login": "AbakumovAlexandr"}, "body": "@trotyl I guess we mostly interested in being _able_ to navigation safely with arrays\\objects.\r\n\r\nI believe very little people her are concerned in it being implemented via either `foo?[bar]` or `foo?.[bar]`, so whichever is simpler\\faster to implement. This request for the very basic syntactic sugar is more than 2 years old already.", "bodyText": "@trotyl I guess we mostly interested in being able to navigation safely with arrays\\objects.\nI believe very little people her are concerned in it being implemented via either foo?[bar] or foo?.[bar], so whichever is simpler\\faster to implement. This request for the very basic syntactic sugar is more than 2 years old already.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/trotyl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/trotyl\">@trotyl</a> I guess we mostly interested in being <em>able</em> to navigation safely with arrays\\objects.</p>\n<p>I believe very little people her are concerned in it being implemented via either <code>foo?[bar]</code> or <code>foo?.[bar]</code>, so whichever is simpler\\faster to implement. This request for the very basic syntactic sugar is more than 2 years old already.</p>", "createdAt": "2019-09-06T14:18:51Z", "publishedAt": "2019-09-06T14:18:51Z", "lastEditedAt": "2019-09-06T14:20:46Z", "updatedAt": "2019-09-06T14:20:46Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61522, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@trotyl I guess we mostly interested in being able to navigation safely with arrays\\objects.", "sentSegmented": ["trotyl", "i", "guess", "we", "mostly", "interested", "in", "being", "able", "to", "navigation", "safely", "with", "arrays\\objects"], "sentSegmentedWithoutStops": ["trotyl", "guess", "mostly", "interested", "able", "navigation", "safely", "arrays\\objects"], "sentSegmentedWithoutStopsStemmed": ["trotyl", "guess", "mostli", "interest", "abl", "navig", "safe", "arrays\\object"]}, {"number": 61523, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I believe very little people her are concerned in it being implemented via either foo?", "sentSegmented": ["i", "believe", "very", "little", "people", "her", "are", "concerned", "in", "it", "being", "implemented", "via", "either", "foo"], "sentSegmentedWithoutStops": ["believe", "little", "people", "concerned", "implemented", "via", "either", "foo"], "sentSegmentedWithoutStopsStemmed": ["believ", "littl", "peopl", "concern", "implement", "via", "either", "foo"]}, {"number": 61524, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[bar] or foo?.", "sentSegmented": ["bar", "or", "foo"], "sentSegmentedWithoutStops": ["bar", "foo"], "sentSegmentedWithoutStopsStemmed": ["bar", "foo"]}, {"number": 61525, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[bar], so whichever is simpler\\faster to implement.", "sentSegmented": ["bar", "so", "whichever", "is", "simpler\\faster", "to", "implement"], "sentSegmentedWithoutStops": ["bar", "whichever", "simpler\\faster", "implement"], "sentSegmentedWithoutStopsStemmed": ["bar", "whichev", "simpler\\fast", "implement"]}, {"number": 61526, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This request for the very basic syntactic sugar is more than 2 years old already.", "sentSegmented": ["this", "request", "for", "the", "very", "basic", "syntactic", "sugar", "is", "more", "than", "2", "years", "old", "already"], "sentSegmentedWithoutStops": ["request", "basic", "syntactic", "sugar", "2", "years", "old", "already"], "sentSegmentedWithoutStopsStemmed": ["request", "basic", "syntact", "sugar", "2", "year", "old", "alreadi"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU1MTEzNjE3OQ==", "author": {"login": "electrofLy"}, "body": "Any updates or workarounds on this?", "bodyText": "Any updates or workarounds on this?", "bodyHTML": "<p>Any updates or workarounds on this?</p>", "createdAt": "2019-11-07T15:44:48Z", "publishedAt": "2019-11-07T15:44:48Z", "lastEditedAt": null, "updatedAt": "2019-11-07T15:44:48Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61527, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Any updates or workarounds on this?", "sentSegmented": ["any", "updates", "or", "workarounds", "on", "this"], "sentSegmentedWithoutStops": ["updates", "workarounds"], "sentSegmentedWithoutStopsStemmed": ["updat", "workaround"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU1OTE0MDk5Mw==", "author": {"login": "sheikalthaf"}, "body": "Any possibility of this feature to be available in ivy?", "bodyText": "Any possibility of this feature to be available in ivy?", "bodyHTML": "<p>Any possibility of this feature to be available in ivy?</p>", "createdAt": "2019-11-27T15:43:17Z", "publishedAt": "2019-11-27T15:43:17Z", "lastEditedAt": null, "updatedAt": "2019-11-27T15:43:17Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-12-08T21:55:29Z"}}]}, "bodyParsed": [{"number": 61528, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Any possibility of this feature to be available in ivy?", "sentSegmented": ["any", "possibility", "of", "this", "feature", "to", "be", "available", "in", "ivy"], "sentSegmentedWithoutStops": ["possibility", "feature", "available", "ivy"], "sentSegmentedWithoutStopsStemmed": ["possibl", "featur", "avail", "ivi"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU4MDg5NDkyNA==", "author": {"login": "nadeemramsing"}, "body": "Any news on this feature?", "bodyText": "Any news on this feature?", "bodyHTML": "<p>Any news on this feature?</p>", "createdAt": "2020-01-31T20:17:57Z", "publishedAt": "2020-01-31T20:17:57Z", "lastEditedAt": null, "updatedAt": "2020-01-31T20:17:57Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-02-06T02:25:28Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-04-02T16:50:14Z"}}]}, "bodyParsed": [{"number": 61529, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Any news on this feature?", "sentSegmented": ["any", "news", "on", "this", "feature"], "sentSegmentedWithoutStops": ["news", "feature"], "sentSegmentedWithoutStopsStemmed": ["news", "featur"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDU5ODA1OTQ1MQ==", "author": {"login": "pkozlowski-opensource"}, "body": "So, this is [supported in TS 3.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining) but not supported in expressions used in Angular templates: https://ng-run.com/edit/sqFt4zLEyZ9oOMDtmOxp", "bodyText": "So, this is supported in TS 3.7 but not supported in expressions used in Angular templates: https://ng-run.com/edit/sqFt4zLEyZ9oOMDtmOxp", "bodyHTML": "<p>So, this is <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining\" rel=\"nofollow\">supported in TS 3.7</a> but not supported in expressions used in Angular templates: <a rel=\"nofollow\" href=\"https://ng-run.com/edit/sqFt4zLEyZ9oOMDtmOxp\">https://ng-run.com/edit/sqFt4zLEyZ9oOMDtmOxp</a></p>", "createdAt": "2020-03-12T08:12:57Z", "publishedAt": "2020-03-12T08:12:57Z", "lastEditedAt": null, "updatedAt": "2020-03-12T08:12:57Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-03-12T11:21:53Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-13T11:16:24Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-22T14:08:44Z"}}]}, "bodyParsed": [{"number": 61530, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So, this is supported in TS 3.7 but not supported in expressions used in Angular templates: https://ng-run.com/edit/sqFt4zLEyZ9oOMDtmOxp", "sentSegmented": ["so", "this", "is", "supported", "in", "ts", "3.7", "but", "not", "supported", "in", "expressions", "used", "in", "angular", "templates", "https", "//ng-run.com/edit/sqft4zleyz9oomdtmoxp"], "sentSegmentedWithoutStops": ["supported", "ts", "3.7", "supported", "expressions", "used", "angular", "templates", "https", "//ng-run.com/edit/sqft4zleyz9oomdtmoxp"], "sentSegmentedWithoutStopsStemmed": ["support", "ts", "3.7", "support", "express", "use", "angular", "templat", "http", "//ng-run.com/edit/sqft4zleyz9oomdtmoxp"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYyNTgzNDczMQ==", "author": {"login": "pkozlowski-opensource"}, "body": "For the record, we are tracking all issues related to `?` support in #34385 ", "bodyText": "For the record, we are tracking all issues related to ? support in #34385", "bodyHTML": "<p>For the record, we are tracking all issues related to <code>?</code> support in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"537250738\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/34385\" data-hovercard-type=\"issue\" data-hovercard-url=\"/angular/angular/issues/34385/hovercard\" href=\"https://github.com/angular/angular/issues/34385\">#34385</a></p>", "createdAt": "2020-05-08T14:11:24Z", "publishedAt": "2020-05-08T14:11:24Z", "lastEditedAt": null, "updatedAt": "2020-05-08T14:11:24Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61531, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For the record, we are tracking all issues related to ?", "sentSegmented": ["for", "the", "record", "we", "are", "tracking", "all", "issues", "related", "to"], "sentSegmentedWithoutStops": ["record", "tracking", "issues", "related"], "sentSegmentedWithoutStopsStemmed": ["record", "track", "issu", "relat"]}, {"number": 61532, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "support in #34385", "sentSegmented": ["support", "in", "34385"], "sentSegmentedWithoutStops": ["support", "34385"], "sentSegmentedWithoutStopsStemmed": ["support", "34385"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYyNTkyNjk2OQ==", "author": {"login": "craftmaster2190"}, "body": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:\r\nIn TypeScript: `foo?.bar?.[0]?.quxx`\r\nIn Angular Templates: `foo?.bar[0]?.quxx`\r\nSee https://github.com/angular/angular/issues/13254\r\nand https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e\r\n\r\nHowever, it is not possible to safely navigate only one level:\r\nIn TypeScript: `foo?.[0]` is valid.\r\nIn Angular Templates: `foo?.[0]` is invalid.\r\n\r\nIn TypeScript: `foo?.bar?.[0]` is valid and safely navigates the expression.\r\nIn Angular Templates: `foo?.bar[0]` is valid and safely navigates the expression.", "bodyText": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:\nIn TypeScript: foo?.bar?.[0]?.quxx\nIn Angular Templates: foo?.bar[0]?.quxx\nSee #13254\nand f31c947\nHowever, it is not possible to safely navigate only one level:\nIn TypeScript: foo?.[0] is valid.\nIn Angular Templates: foo?.[0] is invalid.\nIn TypeScript: foo?.bar?.[0] is valid and safely navigates the expression.\nIn Angular Templates: foo?.bar[0] is valid and safely navigates the expression.", "bodyHTML": "<p>Arrays/Indexes are safely navigated in templates but not in the way one would expect:<br>\nIn TypeScript: <code>foo?.bar?.[0]?.quxx</code><br>\nIn Angular Templates: <code>foo?.bar[0]?.quxx</code><br>\nSee <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"193614412\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/13254\" data-hovercard-type=\"issue\" data-hovercard-url=\"/angular/angular/issues/13254/hovercard\" href=\"https://github.com/angular/angular/issues/13254\">#13254</a><br>\nand <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e/hovercard\" href=\"https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e\"><tt>f31c947</tt></a></p>\n<p>However, it is not possible to safely navigate only one level:<br>\nIn TypeScript: <code>foo?.[0]</code> is valid.<br>\nIn Angular Templates: <code>foo?.[0]</code> is invalid.</p>\n<p>In TypeScript: <code>foo?.bar?.[0]</code> is valid and safely navigates the expression.<br>\nIn Angular Templates: <code>foo?.bar[0]</code> is valid and safely navigates the expression.</p>", "createdAt": "2020-05-08T17:25:48Z", "publishedAt": "2020-05-08T17:25:48Z", "lastEditedAt": "2020-05-08T17:56:51Z", "updatedAt": "2020-05-08T17:56:51Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61533, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:", "sentSegmented": ["arrays/indexes", "are", "safely", "navigated", "in", "templates", "but", "not", "in", "the", "way", "one", "would", "expect"], "sentSegmentedWithoutStops": ["arrays/indexes", "safely", "navigated", "templates", "way", "one", "would", "expect"], "sentSegmentedWithoutStopsStemmed": ["arrays/index", "safe", "navig", "templat", "way", "one", "would", "expect"]}, {"number": 61534, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In TypeScript: foo?.bar?.", "sentSegmented": ["in", "typescript", "foo", ".bar"], "sentSegmentedWithoutStops": ["typescript", "foo", ".bar"], "sentSegmentedWithoutStopsStemmed": ["typescript", "foo", ".bar"]}, {"number": 61535, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0]?.quxx", "sentSegmented": ["0", ".quxx"], "sentSegmentedWithoutStops": ["0", ".quxx"], "sentSegmentedWithoutStopsStemmed": ["0", ".quxx"]}, {"number": 61536, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular Templates: foo?.bar[0]?.quxx", "sentSegmented": ["in", "angular", "templates", "foo", ".bar", "0", ".quxx"], "sentSegmentedWithoutStops": ["angular", "templates", "foo", ".bar", "0", ".quxx"], "sentSegmentedWithoutStopsStemmed": ["angular", "templat", "foo", ".bar", "0", ".quxx"]}, {"number": 61537, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "See #13254", "sentSegmented": ["see", "13254"], "sentSegmentedWithoutStops": ["see", "13254"], "sentSegmentedWithoutStopsStemmed": ["see", "13254"]}, {"number": 61538, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and f31c947", "sentSegmented": ["and", "f31c947"], "sentSegmentedWithoutStops": ["f31c947"], "sentSegmentedWithoutStopsStemmed": ["f31c947"]}, {"number": 61539, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, it is not possible to safely navigate only one level:", "sentSegmented": ["however", "it", "is", "not", "possible", "to", "safely", "navigate", "only", "one", "level"], "sentSegmentedWithoutStops": ["however", "possible", "safely", "navigate", "one", "level"], "sentSegmentedWithoutStopsStemmed": ["howev", "possibl", "safe", "navig", "one", "level"]}, {"number": 61540, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In TypeScript: foo?.", "sentSegmented": ["in", "typescript", "foo"], "sentSegmentedWithoutStops": ["typescript", "foo"], "sentSegmentedWithoutStopsStemmed": ["typescript", "foo"]}, {"number": 61541, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0] is valid.", "sentSegmented": ["0", "is", "valid"], "sentSegmentedWithoutStops": ["0", "valid"], "sentSegmentedWithoutStopsStemmed": ["0", "valid"]}, {"number": 61542, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular Templates: foo?.", "sentSegmented": ["in", "angular", "templates", "foo"], "sentSegmentedWithoutStops": ["angular", "templates", "foo"], "sentSegmentedWithoutStopsStemmed": ["angular", "templat", "foo"]}, {"number": 61543, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0] is invalid.", "sentSegmented": ["0", "is", "invalid"], "sentSegmentedWithoutStops": ["0", "invalid"], "sentSegmentedWithoutStopsStemmed": ["0", "invalid"]}, {"number": 61544, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In TypeScript: foo?.bar?.", "sentSegmented": ["in", "typescript", "foo", ".bar"], "sentSegmentedWithoutStops": ["typescript", "foo", ".bar"], "sentSegmentedWithoutStopsStemmed": ["typescript", "foo", ".bar"]}, {"number": 61545, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0] is valid and safely navigates the expression.", "sentSegmented": ["0", "is", "valid", "and", "safely", "navigates", "the", "expression"], "sentSegmentedWithoutStops": ["0", "valid", "safely", "navigates", "expression"], "sentSegmentedWithoutStopsStemmed": ["0", "valid", "safe", "navig", "express"]}, {"number": 61546, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular Templates: foo?.bar[0] is valid and safely navigates the expression.", "sentSegmented": ["in", "angular", "templates", "foo", ".bar", "0", "is", "valid", "and", "safely", "navigates", "the", "expression"], "sentSegmentedWithoutStops": ["angular", "templates", "foo", ".bar", "0", "valid", "safely", "navigates", "expression"], "sentSegmentedWithoutStopsStemmed": ["angular", "templat", "foo", ".bar", "0", "valid", "safe", "navig", "express"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYyNjc0NjAwOA==", "author": {"login": "pkozlowski-opensource"}, "body": "I'm going to close it as a duplicate of #34385 - I think that the good, longer-term strategy is to align Angular expression syntax with what is cooking on the ES side: https://github.com/tc39/proposal-optional-chaining - we don't want to maintain same syntax with the different semantics on the Angular side.", "bodyText": "I'm going to close it as a duplicate of #34385 - I think that the good, longer-term strategy is to align Angular expression syntax with what is cooking on the ES side: https://github.com/tc39/proposal-optional-chaining - we don't want to maintain same syntax with the different semantics on the Angular side.", "bodyHTML": "<p>I'm going to close it as a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"537250738\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/34385\" data-hovercard-type=\"issue\" data-hovercard-url=\"/angular/angular/issues/34385/hovercard\" href=\"https://github.com/angular/angular/issues/34385\">#34385</a> - I think that the good, longer-term strategy is to align Angular expression syntax with what is cooking on the ES side: <a href=\"https://github.com/tc39/proposal-optional-chaining\">https://github.com/tc39/proposal-optional-chaining</a> - we don't want to maintain same syntax with the different semantics on the Angular side.</p>", "createdAt": "2020-05-11T14:41:59Z", "publishedAt": "2020-05-11T14:41:59Z", "lastEditedAt": null, "updatedAt": "2020-05-11T14:41:59Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-05-11T15:29:24Z"}}]}, "bodyParsed": [{"number": 61547, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm going to close it as a duplicate of #34385 - I think that the good, longer-term strategy is to align Angular expression syntax with what is cooking on the ES side: https://github.com/tc39/proposal-optional-chaining - we don't want to maintain same syntax with the different semantics on the Angular side.", "sentSegmented": ["i", "'m", "going", "to", "close", "it", "as", "a", "duplicate", "of", "34385", "i", "think", "that", "the", "good", "longer-term", "strategy", "is", "to", "align", "angular", "expression", "syntax", "with", "what", "is", "cooking", "on", "the", "es", "side", "https", "//github.com/tc39/proposal-optional-chaining", "we", "do", "n't", "want", "to", "maintain", "same", "syntax", "with", "the", "different", "semantics", "on", "the", "angular", "side"], "sentSegmentedWithoutStops": ["'m", "going", "close", "duplicate", "34385", "think", "good", "longer-term", "strategy", "align", "angular", "expression", "syntax", "cooking", "es", "side", "https", "//github.com/tc39/proposal-optional-chaining", "n't", "want", "maintain", "syntax", "different", "semantics", "angular", "side"], "sentSegmentedWithoutStopsStemmed": ["'m", "go", "close", "duplic", "34385", "think", "good", "longer-term", "strategi", "align", "angular", "express", "syntax", "cook", "es", "side", "http", "//github.com/tc39/proposal-optional-chain", "n't", "want", "maintain", "syntax", "differ", "semant", "angular", "side"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY0Mjc3OTcwMA==", "author": {"login": "angular-automatic-lock-bot"}, "body": "This issue has been automatically locked due to inactivity.\nPlease file a new issue if you are encountering a similar or related problem.\n\nRead more about our [automatic conversation locking policy](https://github.com/angular/angular/blob/67d80f/docs/GITHUB_PROCESS.md#conversation-locking).\n\n<sub>_This action has been performed automatically by a bot._</sub>", "bodyText": "This issue has been automatically locked due to inactivity.\nPlease file a new issue if you are encountering a similar or related problem.\nRead more about our automatic conversation locking policy.\nThis action has been performed automatically by a bot.", "bodyHTML": "<p>This issue has been automatically locked due to inactivity.<br>\nPlease file a new issue if you are encountering a similar or related problem.</p>\n<p>Read more about our <a href=\"https://github.com/angular/angular/blob/67d80f/docs/GITHUB_PROCESS.md#conversation-locking\">automatic conversation locking policy</a>.</p>\n<p><sub><em>This action has been performed automatically by a bot.</em></sub></p>", "createdAt": "2020-06-11T16:10:14Z", "publishedAt": "2020-06-11T16:10:14Z", "lastEditedAt": null, "updatedAt": "2020-06-11T16:10:14Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61548, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This issue has been automatically locked due to inactivity.", "sentSegmented": ["this", "issue", "has", "been", "automatically", "locked", "due", "to", "inactivity"], "sentSegmentedWithoutStops": ["issue", "automatically", "locked", "due", "inactivity"], "sentSegmentedWithoutStopsStemmed": ["issu", "automat", "lock", "due", "inact"]}, {"number": 61549, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Please file a new issue if you are encountering a similar or related problem.", "sentSegmented": ["please", "file", "a", "new", "issue", "if", "you", "are", "encountering", "a", "similar", "or", "related", "problem"], "sentSegmentedWithoutStops": ["please", "file", "new", "issue", "encountering", "similar", "related", "problem"], "sentSegmentedWithoutStopsStemmed": ["pleas", "file", "new", "issu", "encount", "similar", "relat", "problem"]}, {"number": 61550, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Read more about our automatic conversation locking policy.", "sentSegmented": ["read", "more", "about", "our", "automatic", "conversation", "locking", "policy"], "sentSegmentedWithoutStops": ["read", "automatic", "conversation", "locking", "policy"], "sentSegmentedWithoutStopsStemmed": ["read", "automat", "convers", "lock", "polici"]}, {"number": 61551, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This action has been performed automatically by a bot.", "sentSegmented": ["this", "action", "has", "been", "performed", "automatically", "by", "a", "bot"], "sentSegmentedWithoutStops": ["action", "performed", "automatically", "bot"], "sentSegmentedWithoutStopsStemmed": ["action", "perform", "automat", "bot"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOJlAKNA==", "hasNextPage": false}}, "labels": {"edges": [{"node": {"createdAt": "2019-06-18T22:16:55Z", "name": "comp: compiler"}}, {"node": {"createdAt": "2016-05-13T04:35:11Z", "name": "comp: core"}}, {"node": {"createdAt": "2020-03-06T10:47:35Z", "name": "core: binding & interpolation"}}, {"node": {"createdAt": "2014-09-18T16:12:01Z", "name": "feature"}}]}, "milestone": {"title": "Backlog", "dueOn": null}, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-06-03T17:05:30Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-06-18T11:35:45Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-06-23T14:13:25Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-07-09T00:51:38Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-08-01T20:18:09Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-09-30T21:13:42Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-10-05T00:44:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-02-16T08:12:29Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-20T14:57:39Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-06-22T10:36:38Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-10-20T15:18:32Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-08-16T15:29:10Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-09-05T16:13:54Z"}}, {"node": {"content": "HEART", "createdAt": "2019-09-05T16:16:53Z"}}, {"node": {"content": "HOORAY", "createdAt": "2019-09-05T16:17:00Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-11-10T12:20:07Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-11-11T15:32:24Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-08T21:53:20Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-24T07:42:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-27T14:13:01Z"}}]}, "state": "CLOSED", "titleSegmented": ["feat", "add", "bracket", "access", "to", "safe", "navigation", "operator"], "titleSegmentedWithoutStops": ["feat", "add", "bracket", "access", "safe", "navigation", "operator"], "titleSegmentedWithoutStopsStemmed": ["feat", "add", "bracket", "access", "safe", "navig", "oper"], "bodyParsed": [{"number": 61492, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm submitting a ...  (check one with \"x\")", "sentSegmented": ["i", "'m", "submitting", "a", "check", "one", "with", "x"], "sentSegmentedWithoutStops": ["'m", "submitting", "check", "one", "x"], "sentSegmentedWithoutStopsStemmed": ["'m", "submit", "check", "one", "x"]}, {"number": 61493, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] bug report => search github for a similar issue or PR before submitting", "sentSegmented": ["bug", "report", "search", "github", "for", "a", "similar", "issue", "or", "pr", "before", "submitting"], "sentSegmentedWithoutStops": ["bug", "report", "search", "github", "similar", "issue", "pr", "submitting"], "sentSegmentedWithoutStopsStemmed": ["bug", "report", "search", "github", "similar", "issu", "pr", "submit"]}, {"number": 61494, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[x] feature request", "sentSegmented": ["x", "feature", "request"], "sentSegmentedWithoutStops": ["x", "feature", "request"], "sentSegmentedWithoutStopsStemmed": ["x", "featur", "request"]}, {"number": 61495, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question", "sentSegmented": ["support", "request", "please", "do", "not", "submit", "support", "request", "here", "instead", "see", "https", "//github.com/angular/angular/blob/master/contributing.md", "question"], "sentSegmentedWithoutStops": ["support", "request", "please", "submit", "support", "request", "instead", "see", "https", "//github.com/angular/angular/blob/master/contributing.md", "question"], "sentSegmentedWithoutStopsStemmed": ["support", "request", "pleas", "submit", "support", "request", "instead", "see", "http", "//github.com/angular/angular/blob/master/contributing.md", "question"]}, {"number": 61496, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The safe navigation operator ?.", "sentSegmented": ["the", "safe", "navigation", "operator"], "sentSegmentedWithoutStops": ["safe", "navigation", "operator"], "sentSegmentedWithoutStopsStemmed": ["safe", "navig", "oper"]}, {"number": 61497, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "is great, but it would be even better if it also supported bracket notation, foo?[bar].", "sentSegmented": ["is", "great", "but", "it", "would", "be", "even", "better", "if", "it", "also", "supported", "bracket", "notation", "foo", "bar"], "sentSegmentedWithoutStops": ["great", "would", "even", "better", "also", "supported", "bracket", "notation", "foo", "bar"], "sentSegmentedWithoutStopsStemmed": ["great", "would", "even", "better", "also", "support", "bracket", "notat", "foo", "bar"]}, {"number": 61498, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This was first mentioned here, but didn't get any traction", "sentSegmented": ["this", "was", "first", "mentioned", "here", "but", "did", "n't", "get", "any", "traction"], "sentSegmentedWithoutStops": ["first", "mentioned", "n't", "get", "traction"], "sentSegmentedWithoutStopsStemmed": ["first", "mention", "n't", "get", "traction"]}, {"number": 61499, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "#791 (comment)", "sentSegmented": ["791", "comment"], "sentSegmentedWithoutStops": ["791", "comment"], "sentSegmentedWithoutStopsStemmed": ["791", "comment"]}]}