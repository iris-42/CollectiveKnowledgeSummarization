{"repository": {"owner": {"login": "angular"}, "name": "angular", "forkCount": 18765, "stargazerCount": 71747, "createdAt": "2014-09-18T16:12:01Z", "updatedAt": "2021-03-16T23:44:02Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "angular"}}}, {"node": {"topic": {"name": "typescript"}}}, {"node": {"topic": {"name": "web"}}}, {"node": {"topic": {"name": "javascript"}}}, {"node": {"topic": {"name": "pwa"}}}, {"node": {"topic": {"name": "web-framework"}}}, {"node": {"topic": {"name": "web-performance"}}}]}, "languages": {"edges": [{"node": {"name": "JavaScript"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Shell"}}, {"node": {"name": "TypeScript"}}, {"node": {"name": "PHP"}}, {"node": {"name": "Dockerfile"}}, {"node": {"name": "JSONiq"}}, {"node": {"name": "PowerShell"}}, {"node": {"name": "Starlark"}}, {"node": {"name": "SCSS"}}, {"node": {"name": "Less"}}]}, "primaryLanguage": {"name": "TypeScript"}}, "id": "MDU6SXNzdWU1MzcyNTA3Mzg=", "number": 34385, "author": {"login": "mgechev"}, "title": "Align with the optional chaining spec", "body": "# \ud83d\ude80 feature request\r\n\r\n### Relevant Package\r\n\r\n`@angular/compiler`\r\n\r\n### Description\r\n\r\n[Optional chaining](https://github.com/tc39/proposal-optional-chaining)[1] reached stage 4. We've been supporting similar syntax in templates for a while now, calling it the [\"safe navigation operator\"](https://angular.io/guide/template-syntax#safe-navigation-operator)[2]. For simplicity and smaller payload, we can consider aligning with the spec in future versions of the framework.\r\n\r\nThere are a couple of semantical and syntactical differences between optional chaining and safe navigation.\r\n\r\n## Syntax \r\n\r\nOptional chaining has the following syntax:\r\n\r\n```ts\r\nobj?.prop       // optional static property access\r\nobj?.[expr]     // optional dynamic property access\r\nfunc?.(...args) // optional function or method call\r\n```\r\n\r\nSafe navigation supports only direct property access. Optional chaining supports this, as well as, method calls and function calls. Function calls are particularly useful in iterators:\r\n\r\n```ts\r\niterator.return?.()\r\n```\r\n\r\n## Semantics\r\n\r\nWith optional chaining, the expression `a?.b` will be translated to `a == null ? undefined : a.b`. In Angular, the semantics of the same expression would be `null == a ? null : a.b`.\r\n\r\nIf `a` is `null` or `undefined`, the expression `typeof a?.b` would evaluate to `\"object\"` with optional chaining and `\"undefined\"` in Angular's safe navigation operator.\r\n\r\nExcept the mentioned difference above, method calls are compiled similarly:\r\n\r\n```ts\r\na?.b()\r\na == null ? undefined : a.b()\r\n```\r\n\r\nIn both, optional chaining and safe navigation in templates, stacking the operators is translated the same way: `(a?.b).c?.d` becomes `null == a ? null : null == a.b.c ? null : a.b.c.d`.\r\n\r\nAnother difference seems to be the way parentheses are handled. The optional chaining spec defines that `null==e.foo?null:e.foo.b.c` should be translated to `(a == null ? undefined : a.b).c`. In Angular the same expression translates to `null == a ? null : a.b.c`.\r\n\r\nPS: looks like the last issue is fixed by https://github.com/angular/angular/pull/34221.\r\n\r\n---\r\n\r\n[1] Optional chaining spec https://github.com/tc39/proposal-optional-chaining\r\n[2] Safe navigation https://angular.io/guide/template-syntax#safe-navigation-operator", "bodyHTML": "<h1><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> feature request</h1>\n<h3>Relevant Package</h3>\n<p><code>@angular/compiler</code></p>\n<h3>Description</h3>\n<p><a href=\"https://github.com/tc39/proposal-optional-chaining\">Optional chaining</a>[1] reached stage 4. We've been supporting similar syntax in templates for a while now, calling it the <a href=\"https://angular.io/guide/template-syntax#safe-navigation-operator\" rel=\"nofollow\">\"safe navigation operator\"</a>[2]. For simplicity and smaller payload, we can consider aligning with the spec in future versions of the framework.</p>\n<p>There are a couple of semantical and syntactical differences between optional chaining and safe navigation.</p>\n<h2>Syntax</h2>\n<p>Optional chaining has the following syntax:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">prop</span>       <span class=\"pl-c\">// optional static property access</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">?.</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">expr</span><span class=\"pl-kos\">]</span>     <span class=\"pl-c\">// optional dynamic property access</span>\n<span class=\"pl-en\">func</span><span class=\"pl-kos\">?.</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// optional function or method call</span></pre></div>\n<p>Safe navigation supports only direct property access. Optional chaining supports this, as well as, method calls and function calls. Function calls are particularly useful in iterators:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">return</span><span class=\"pl-kos\">?.</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2>Semantics</h2>\n<p>With optional chaining, the expression <code>a?.b</code> will be translated to <code>a == null ? undefined : a.b</code>. In Angular, the semantics of the same expression would be <code>null == a ? null : a.b</code>.</p>\n<p>If <code>a</code> is <code>null</code> or <code>undefined</code>, the expression <code>typeof a?.b</code> would evaluate to <code>\"object\"</code> with optional chaining and <code>\"undefined\"</code> in Angular's safe navigation operator.</p>\n<p>Except the mentioned difference above, method calls are compiled similarly:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-s1\">a</span><span class=\"pl-kos\">?.</span><span class=\"pl-en\">b</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">a</span> <span class=\"pl-c1\">==</span> <span class=\"pl-c1\">null</span> ? <span class=\"pl-c1\">undefined</span> : <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">b</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p>In both, optional chaining and safe navigation in templates, stacking the operators is translated the same way: <code>(a?.b).c?.d</code> becomes <code>null == a ? null : null == a.b.c ? null : a.b.c.d</code>.</p>\n<p>Another difference seems to be the way parentheses are handled. The optional chaining spec defines that <code>null==e.foo?null:e.foo.b.c</code> should be translated to <code>(a == null ? undefined : a.b).c</code>. In Angular the same expression translates to <code>null == a ? null : a.b.c</code>.</p>\n<p>PS: looks like the last issue is fixed by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"532351186\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/34221\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/angular/angular/pull/34221/hovercard\" href=\"https://github.com/angular/angular/pull/34221\">#34221</a>.</p>\n<hr>\n<p>[1] Optional chaining spec <a href=\"https://github.com/tc39/proposal-optional-chaining\">https://github.com/tc39/proposal-optional-chaining</a><br>\n[2] Safe navigation <a rel=\"nofollow\" href=\"https://angular.io/guide/template-syntax#safe-navigation-operator\">https://angular.io/guide/template-syntax#safe-navigation-operator</a></p>", "bodyText": "\ud83d\ude80 feature request\nRelevant Package\n@angular/compiler\nDescription\nOptional chaining[1] reached stage 4. We've been supporting similar syntax in templates for a while now, calling it the \"safe navigation operator\"[2]. For simplicity and smaller payload, we can consider aligning with the spec in future versions of the framework.\nThere are a couple of semantical and syntactical differences between optional chaining and safe navigation.\nSyntax\nOptional chaining has the following syntax:\nobj?.prop       // optional static property access\nobj?.[expr]     // optional dynamic property access\nfunc?.(...args) // optional function or method call\nSafe navigation supports only direct property access. Optional chaining supports this, as well as, method calls and function calls. Function calls are particularly useful in iterators:\niterator.return?.()\nSemantics\nWith optional chaining, the expression a?.b will be translated to a == null ? undefined : a.b. In Angular, the semantics of the same expression would be null == a ? null : a.b.\nIf a is null or undefined, the expression typeof a?.b would evaluate to \"object\" with optional chaining and \"undefined\" in Angular's safe navigation operator.\nExcept the mentioned difference above, method calls are compiled similarly:\na?.b()\na == null ? undefined : a.b()\nIn both, optional chaining and safe navigation in templates, stacking the operators is translated the same way: (a?.b).c?.d becomes null == a ? null : null == a.b.c ? null : a.b.c.d.\nAnother difference seems to be the way parentheses are handled. The optional chaining spec defines that null==e.foo?null:e.foo.b.c should be translated to (a == null ? undefined : a.b).c. In Angular the same expression translates to null == a ? null : a.b.c.\nPS: looks like the last issue is fixed by #34221.\n\n[1] Optional chaining spec https://github.com/tc39/proposal-optional-chaining\n[2] Safe navigation https://angular.io/guide/template-syntax#safe-navigation-operator", "assignees": {"edges": []}, "createdAt": "2019-12-12T22:36:42Z", "closed": false, "closedAt": null, "lastEditedAt": null, "publishedAt": "2019-12-12T22:36:42Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDU5MDM0NzE1NA==", "author": {"login": "thw0rted"}, "body": "Just to check, does this cover the case of array-index optional chaining (`arr?.[0]`) in templates? I get an error when I try to use that today, though I'm not sure if it's a problem Angular itself or just the language service.", "bodyText": "Just to check, does this cover the case of array-index optional chaining (arr?.[0]) in templates? I get an error when I try to use that today, though I'm not sure if it's a problem Angular itself or just the language service.", "bodyHTML": "<p>Just to check, does this cover the case of array-index optional chaining (<code>arr?.[0]</code>) in templates? I get an error when I try to use that today, though I'm not sure if it's a problem Angular itself or just the language service.</p>", "createdAt": "2020-02-24T14:30:15Z", "publishedAt": "2020-02-24T14:30:15Z", "lastEditedAt": null, "updatedAt": "2020-02-24T14:30:15Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-02-24T14:59:03Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-02T19:22:21Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-16T19:51:59Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-24T11:27:28Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-04-02T14:02:08Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-06-13T12:27:55Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-08-24T16:25:33Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-09-14T16:31:03Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-11-12T11:58:09Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-12-01T09:22:58Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-12-16T16:28:24Z"}}]}, "bodyParsed": [{"number": 61589, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Just to check, does this cover the case of array-index optional chaining (arr?.", "sentSegmented": ["just", "to", "check", "does", "this", "cover", "the", "case", "of", "array-index", "optional", "chaining", "arr"], "sentSegmentedWithoutStops": ["check", "cover", "case", "array-index", "optional", "chaining", "arr"], "sentSegmentedWithoutStopsStemmed": ["check", "cover", "case", "array-index", "option", "chain", "arr"]}, {"number": 61590, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0]) in templates?", "sentSegmented": ["0", "in", "templates"], "sentSegmentedWithoutStops": ["0", "templates"], "sentSegmentedWithoutStopsStemmed": ["0", "templat"]}, {"number": 61591, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I get an error when I try to use that today, though I'm not sure if it's a problem Angular itself or just the language service.", "sentSegmented": ["i", "get", "an", "error", "when", "i", "try", "to", "use", "that", "today", "though", "i", "'m", "not", "sure", "if", "it", "'s", "a", "problem", "angular", "itself", "or", "just", "the", "language", "service"], "sentSegmentedWithoutStops": ["get", "error", "try", "use", "today", "though", "'m", "sure", "'s", "problem", "angular", "language", "service"], "sentSegmentedWithoutStopsStemmed": ["get", "error", "tri", "use", "today", "though", "'m", "sure", "'s", "problem", "angular", "languag", "servic"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYwNzg2NzgwMg==", "author": {"login": "rodolfojnn"}, "body": "It would be very interesting to use optional chaining in arrays, following the TS spec:\r\n\r\nIn Angular Templates, arr?.[0] causes a:\r\n\r\nzone-evergreen.js:659 Unhandled Promise rejection: Template parse errors:\r\nParser Error: Unexpected token [, expected identifier or keyword at column 4 in [arr?.[0]] in ng:///ProdutoCadComponent/template.html@996:64", "bodyText": "It would be very interesting to use optional chaining in arrays, following the TS spec:\nIn Angular Templates, arr?.[0] causes a:\nzone-evergreen.js:659 Unhandled Promise rejection: Template parse errors:\nParser Error: Unexpected token [, expected identifier or keyword at column 4 in [arr?.[0]] in ng:///ProdutoCadComponent/template.html@996:64", "bodyHTML": "<p>It would be very interesting to use optional chaining in arrays, following the TS spec:</p>\n<p>In Angular Templates, arr?.[0] causes a:</p>\n<p>zone-evergreen.js:659 Unhandled Promise rejection: Template parse errors:<br>\nParser Error: Unexpected token [, expected identifier or keyword at column 4 in [arr?.[0]] in ng:///ProdutoCadComponent/template.html@996:64</p>", "createdAt": "2020-04-02T14:06:19Z", "publishedAt": "2020-04-02T14:06:19Z", "lastEditedAt": null, "updatedAt": "2020-04-02T14:06:19Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61592, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It would be very interesting to use optional chaining in arrays, following the TS spec:", "sentSegmented": ["it", "would", "be", "very", "interesting", "to", "use", "optional", "chaining", "in", "arrays", "following", "the", "ts", "spec"], "sentSegmentedWithoutStops": ["would", "interesting", "use", "optional", "chaining", "arrays", "following", "ts", "spec"], "sentSegmentedWithoutStopsStemmed": ["would", "interest", "use", "option", "chain", "array", "follow", "ts", "spec"]}, {"number": 61593, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular Templates, arr?.", "sentSegmented": ["in", "angular", "templates", "arr"], "sentSegmentedWithoutStops": ["angular", "templates", "arr"], "sentSegmentedWithoutStopsStemmed": ["angular", "templat", "arr"]}, {"number": 61594, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0] causes a:", "sentSegmented": ["0", "causes", "a"], "sentSegmentedWithoutStops": ["0", "causes"], "sentSegmentedWithoutStopsStemmed": ["0", "caus"]}, {"number": 61595, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "zone-evergreen.js:659 Unhandled Promise rejection: Template parse errors:", "sentSegmented": ["zone-evergreen.js:659", "unhandled", "promise", "rejection", "template", "parse", "errors"], "sentSegmentedWithoutStops": ["zone-evergreen.js:659", "unhandled", "promise", "rejection", "template", "parse", "errors"], "sentSegmentedWithoutStopsStemmed": ["zone-evergreen.js:659", "unhandl", "promis", "reject", "templat", "pars", "error"]}, {"number": 61596, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Parser Error: Unexpected token [, expected identifier or keyword at column 4 in [arr?.", "sentSegmented": ["parser", "error", "unexpected", "token", "expected", "identifier", "or", "keyword", "at", "column", "4", "in", "arr"], "sentSegmentedWithoutStops": ["parser", "error", "unexpected", "token", "expected", "identifier", "keyword", "column", "4", "arr"], "sentSegmentedWithoutStopsStemmed": ["parser", "error", "unexpect", "token", "expect", "identifi", "keyword", "column", "4", "arr"]}, {"number": 61597, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0]] in ng:///ProdutoCadComponent/template.html@996:64", "sentSegmented": ["0", "in", "ng", "///produtocadcomponent/template.html", "996:64"], "sentSegmentedWithoutStops": ["0", "ng", "///produtocadcomponent/template.html", "996:64"], "sentSegmentedWithoutStopsStemmed": ["0", "ng", "///produtocadcomponent/template.html", "996:64"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYyNTkyNzA0Mw==", "author": {"login": "craftmaster2190"}, "body": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:\r\nIn TypeScript: `foo?.bar?.[0]?.quxx`\r\nIn Angular Templates: `foo?.bar[0]?.quxx`\r\nSee https://github.com/angular/angular/issues/13254\r\nand https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e", "bodyText": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:\nIn TypeScript: foo?.bar?.[0]?.quxx\nIn Angular Templates: foo?.bar[0]?.quxx\nSee #13254\nand f31c947", "bodyHTML": "<p>Arrays/Indexes are safely navigated in templates but not in the way one would expect:<br>\nIn TypeScript: <code>foo?.bar?.[0]?.quxx</code><br>\nIn Angular Templates: <code>foo?.bar[0]?.quxx</code><br>\nSee <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"193614412\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/13254\" data-hovercard-type=\"issue\" data-hovercard-url=\"/angular/angular/issues/13254/hovercard\" href=\"https://github.com/angular/angular/issues/13254\">#13254</a><br>\nand <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e/hovercard\" href=\"https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e\"><tt>f31c947</tt></a></p>", "createdAt": "2020-05-08T17:25:56Z", "publishedAt": "2020-05-08T17:25:56Z", "lastEditedAt": null, "updatedAt": "2020-05-08T17:25:56Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 61598, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:", "sentSegmented": ["arrays/indexes", "are", "safely", "navigated", "in", "templates", "but", "not", "in", "the", "way", "one", "would", "expect"], "sentSegmentedWithoutStops": ["arrays/indexes", "safely", "navigated", "templates", "way", "one", "would", "expect"], "sentSegmentedWithoutStopsStemmed": ["arrays/index", "safe", "navig", "templat", "way", "one", "would", "expect"]}, {"number": 61599, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In TypeScript: foo?.bar?.", "sentSegmented": ["in", "typescript", "foo", ".bar"], "sentSegmentedWithoutStops": ["typescript", "foo", ".bar"], "sentSegmentedWithoutStopsStemmed": ["typescript", "foo", ".bar"]}, {"number": 61600, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0]?.quxx", "sentSegmented": ["0", ".quxx"], "sentSegmentedWithoutStops": ["0", ".quxx"], "sentSegmentedWithoutStopsStemmed": ["0", ".quxx"]}, {"number": 61601, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular Templates: foo?.bar[0]?.quxx", "sentSegmented": ["in", "angular", "templates", "foo", ".bar", "0", ".quxx"], "sentSegmentedWithoutStops": ["angular", "templates", "foo", ".bar", "0", ".quxx"], "sentSegmentedWithoutStopsStemmed": ["angular", "templat", "foo", ".bar", "0", ".quxx"]}, {"number": 61602, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "See #13254", "sentSegmented": ["see", "13254"], "sentSegmentedWithoutStops": ["see", "13254"], "sentSegmentedWithoutStopsStemmed": ["see", "13254"]}, {"number": 61603, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and f31c947", "sentSegmented": ["and", "f31c947"], "sentSegmentedWithoutStops": ["f31c947"], "sentSegmentedWithoutStopsStemmed": ["f31c947"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYyNTkzNTU3NQ==", "author": {"login": "craftmaster2190"}, "body": "TL;DR: Angular Templates resolves to `null` in safe navigation and TypeScript resolves to `undefined` in optional chaining.\r\n\r\nConsider the following:\r\n\r\nComponent Typescript\r\n```typescript\r\npublic preferences: {email: string};\r\npublic getPreferencesEmail() {\r\n    return this.preferences?.email;\r\n}\r\npublic ngOnInit() {\r\n    this.preferencesService.subscribe(preferences =>\r\n        (this.preferences = preferences));\r\n}\r\n```\r\n\r\nExample A HTML\r\n```html\r\n<div *ngIf=\"preferences?.email === undefined; else emailInput\">Loading...</div>\r\n<ng-template #emailInput>\r\n   <input id=\"email\" [value]=\"preferences.email\">\r\n</ng-template>\r\n```\r\n\r\nExample B HTML\r\n```html\r\n<div *ngIf=\"getPreferencesEmail() === undefined; else emailInput\">Loading...</div>\r\n<ng-template #emailInput>\r\n   <input id=\"email\" [value]=\"getPreferencesEmail()\">\r\n</ng-template>\r\n```\r\n\r\nIn Example A, the loading div **does not** show because Angular Templates evaluates the safe-navigation to null.\r\n\r\nIn Example B, the loading div **does** show because TypeScript evaluates the optional chaining to undefined.\r\n\r\nIf undefined means \"Loading\", null means \"Not set by user\" and anything else is \"a user-set value\"; then angular's safe navigation introduces a bug in our code.\r\n\r\nThis can be even more confusing given that `preferences` is `undefined` and the Angular's safe navigation resolves `preferences?.email` to `null`.", "bodyText": "TL;DR: Angular Templates resolves to null in safe navigation and TypeScript resolves to undefined in optional chaining.\nConsider the following:\nComponent Typescript\npublic preferences: {email: string};\npublic getPreferencesEmail() {\n    return this.preferences?.email;\n}\npublic ngOnInit() {\n    this.preferencesService.subscribe(preferences =>\n        (this.preferences = preferences));\n}\nExample A HTML\n<div *ngIf=\"preferences?.email === undefined; else emailInput\">Loading...</div>\n<ng-template #emailInput>\n   <input id=\"email\" [value]=\"preferences.email\">\n</ng-template>\nExample B HTML\n<div *ngIf=\"getPreferencesEmail() === undefined; else emailInput\">Loading...</div>\n<ng-template #emailInput>\n   <input id=\"email\" [value]=\"getPreferencesEmail()\">\n</ng-template>\nIn Example A, the loading div does not show because Angular Templates evaluates the safe-navigation to null.\nIn Example B, the loading div does show because TypeScript evaluates the optional chaining to undefined.\nIf undefined means \"Loading\", null means \"Not set by user\" and anything else is \"a user-set value\"; then angular's safe navigation introduces a bug in our code.\nThis can be even more confusing given that preferences is undefined and the Angular's safe navigation resolves preferences?.email to null.", "bodyHTML": "<p>TL;DR: Angular Templates resolves to <code>null</code> in safe navigation and TypeScript resolves to <code>undefined</code> in optional chaining.</p>\n<p>Consider the following:</p>\n<p>Component Typescript</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-k\">public</span> preferences: <span class=\"pl-kos\">{</span><span class=\"pl-c1\">email</span>: <span class=\"pl-s1\">string</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-en\">getPreferencesEmail</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">preferences</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">email</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">public</span> <span class=\"pl-s1\">ngOnInit</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">preferencesService</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">preferences</span> <span class=\"pl-c1\">=&gt;</span>\n        <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">preferences</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">preferences</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p>Example A HTML</p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span> <span class=\"pl-c1\">*ngIf</span>=\"<span class=\"pl-s\">preferences?.email === undefined; else emailInput</span>\"<span class=\"pl-kos\">&gt;</span>Loading...<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">ng-template</span> <span class=\"pl-c1\">#emailInput</span><span class=\"pl-kos\">&gt;</span>\n   <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">input</span> <span class=\"pl-c1\">id</span>=\"<span class=\"pl-s\">email</span>\" <span class=\"pl-c1\">[value]</span>=\"<span class=\"pl-s\">preferences.email</span>\"<span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">ng-template</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<p>Example B HTML</p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span> <span class=\"pl-c1\">*ngIf</span>=\"<span class=\"pl-s\">getPreferencesEmail() === undefined; else emailInput</span>\"<span class=\"pl-kos\">&gt;</span>Loading...<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">ng-template</span> <span class=\"pl-c1\">#emailInput</span><span class=\"pl-kos\">&gt;</span>\n   <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">input</span> <span class=\"pl-c1\">id</span>=\"<span class=\"pl-s\">email</span>\" <span class=\"pl-c1\">[value]</span>=\"<span class=\"pl-s\">getPreferencesEmail()</span>\"<span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">ng-template</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<p>In Example A, the loading div <strong>does not</strong> show because Angular Templates evaluates the safe-navigation to null.</p>\n<p>In Example B, the loading div <strong>does</strong> show because TypeScript evaluates the optional chaining to undefined.</p>\n<p>If undefined means \"Loading\", null means \"Not set by user\" and anything else is \"a user-set value\"; then angular's safe navigation introduces a bug in our code.</p>\n<p>This can be even more confusing given that <code>preferences</code> is <code>undefined</code> and the Angular's safe navigation resolves <code>preferences?.email</code> to <code>null</code>.</p>", "createdAt": "2020-05-08T17:46:07Z", "publishedAt": "2020-05-08T17:46:07Z", "lastEditedAt": "2020-05-08T17:49:54Z", "updatedAt": "2020-05-08T17:49:54Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-10-30T14:28:09Z"}}]}, "bodyParsed": [{"number": 61604, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "TL;DR: Angular Templates resolves to null in safe navigation and TypeScript resolves to undefined in optional chaining.", "sentSegmented": ["tl", "dr", "angular", "templates", "resolves", "to", "null", "in", "safe", "navigation", "and", "typescript", "resolves", "to", "undefined", "in", "optional", "chaining"], "sentSegmentedWithoutStops": ["tl", "dr", "angular", "templates", "resolves", "null", "safe", "navigation", "typescript", "resolves", "undefined", "optional", "chaining"], "sentSegmentedWithoutStopsStemmed": ["tl", "dr", "angular", "templat", "resolv", "null", "safe", "navig", "typescript", "resolv", "undefin", "option", "chain"]}, {"number": 61605, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Consider the following:", "sentSegmented": ["consider", "the", "following"], "sentSegmentedWithoutStops": ["consider", "following"], "sentSegmentedWithoutStopsStemmed": ["consid", "follow"]}, {"number": 61606, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Component Typescript", "sentSegmented": ["component", "typescript"], "sentSegmentedWithoutStops": ["component", "typescript"], "sentSegmentedWithoutStopsStemmed": ["compon", "typescript"]}, {"number": 61607, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public preferences: {email: string};", "sentSegmented": ["public", "preferences", "email", "string"], "sentSegmentedWithoutStops": ["preferences", "email"], "sentSegmentedWithoutStopsStemmed": ["prefer", "email"]}, {"number": 61608, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public getPreferencesEmail() {", "sentSegmented": ["public", "getpreferencesemail"], "sentSegmentedWithoutStops": ["getpreferencesemail"], "sentSegmentedWithoutStopsStemmed": ["getpreferencesemail"]}, {"number": 61609, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    return this.preferences?.email;", "sentSegmented": ["return", "this.preferences", ".email"], "sentSegmentedWithoutStops": ["this.preferences", ".email"], "sentSegmentedWithoutStopsStemmed": ["this.prefer", ".email"]}, {"number": 61610, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 61611, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public ngOnInit() {", "sentSegmented": ["public", "ngoninit"], "sentSegmentedWithoutStops": ["ngoninit"], "sentSegmentedWithoutStopsStemmed": ["ngoninit"]}, {"number": 61612, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    this.preferencesService.subscribe(preferences =>", "sentSegmented": ["this.preferencesservice.subscribe", "preferences"], "sentSegmentedWithoutStops": ["this.preferencesservice.subscribe", "preferences"], "sentSegmentedWithoutStopsStemmed": ["this.preferencesservice.subscrib", "prefer"]}, {"number": 61613, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        (this.preferences = preferences));", "sentSegmented": ["this.preferences", "preferences"], "sentSegmentedWithoutStops": ["this.preferences", "preferences"], "sentSegmentedWithoutStopsStemmed": ["this.prefer", "prefer"]}, {"number": 61614, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 61615, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Example A HTML", "sentSegmented": ["example", "a", "html"], "sentSegmentedWithoutStops": ["example", "html"], "sentSegmentedWithoutStopsStemmed": ["exampl", "html"]}, {"number": 61616, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<div *ngIf=\"preferences?.email === undefined; else emailInput\">Loading...div>", "sentSegmented": ["div", "ngif=", "preferences", ".email", "undefined", "else", "emailinput", "loading", "div"], "sentSegmentedWithoutStops": ["ngif=", "preferences", ".email", "undefined", "emailinput", "loading"], "sentSegmentedWithoutStopsStemmed": ["ngif=", "prefer", ".email", "undefin", "emailinput", "load"]}, {"number": 61617, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<ng-template #emailInput>", "sentSegmented": ["ng-template", "emailinput"], "sentSegmentedWithoutStops": ["ng-template", "emailinput"], "sentSegmentedWithoutStopsStemmed": ["ng-templat", "emailinput"]}, {"number": 61618, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   <input id=\"email\" [value]=\"preferences.email\">", "sentSegmented": ["input", "id=", "email", "value", "preferences.email"], "sentSegmentedWithoutStops": ["id=", "email", "value", "preferences.email"], "sentSegmentedWithoutStopsStemmed": ["id=", "email", "valu", "preferences.email"]}, {"number": 61619, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "ng-template>", "sentSegmented": ["ng-template"], "sentSegmentedWithoutStops": ["ng-template"], "sentSegmentedWithoutStopsStemmed": ["ng-templat"]}, {"number": 61620, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Example B HTML", "sentSegmented": ["example", "b", "html"], "sentSegmentedWithoutStops": ["example", "b", "html"], "sentSegmentedWithoutStopsStemmed": ["exampl", "b", "html"]}, {"number": 61621, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<div *ngIf=\"getPreferencesEmail() === undefined; else emailInput\">Loading...div>", "sentSegmented": ["div", "ngif=", "getpreferencesemail", "undefined", "else", "emailinput", "loading", "div"], "sentSegmentedWithoutStops": ["ngif=", "getpreferencesemail", "undefined", "emailinput", "loading"], "sentSegmentedWithoutStopsStemmed": ["ngif=", "getpreferencesemail", "undefin", "emailinput", "load"]}, {"number": 61622, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "<ng-template #emailInput>", "sentSegmented": ["ng-template", "emailinput"], "sentSegmentedWithoutStops": ["ng-template", "emailinput"], "sentSegmentedWithoutStopsStemmed": ["ng-templat", "emailinput"]}, {"number": 61623, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   <input id=\"email\" [value]=\"getPreferencesEmail()\">", "sentSegmented": ["input", "id=", "email", "value", "getpreferencesemail"], "sentSegmentedWithoutStops": ["id=", "email", "value", "getpreferencesemail"], "sentSegmentedWithoutStopsStemmed": ["id=", "email", "valu", "getpreferencesemail"]}, {"number": 61624, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "ng-template>", "sentSegmented": ["ng-template"], "sentSegmentedWithoutStops": ["ng-template"], "sentSegmentedWithoutStopsStemmed": ["ng-templat"]}, {"number": 61625, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Example A, the loading div does not show because Angular Templates evaluates the safe-navigation to null.", "sentSegmented": ["in", "example", "a", "the", "loading", "div", "does", "not", "show", "because", "angular", "templates", "evaluates", "the", "safe-navigation", "to", "null"], "sentSegmentedWithoutStops": ["example", "loading", "div", "show", "angular", "templates", "evaluates", "safe-navigation", "null"], "sentSegmentedWithoutStopsStemmed": ["exampl", "load", "div", "show", "angular", "templat", "evalu", "safe-navig", "null"]}, {"number": 61626, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Example B, the loading div does show because TypeScript evaluates the optional chaining to undefined.", "sentSegmented": ["in", "example", "b", "the", "loading", "div", "does", "show", "because", "typescript", "evaluates", "the", "optional", "chaining", "to", "undefined"], "sentSegmentedWithoutStops": ["example", "b", "loading", "div", "show", "typescript", "evaluates", "optional", "chaining", "undefined"], "sentSegmentedWithoutStopsStemmed": ["exampl", "b", "load", "div", "show", "typescript", "evalu", "option", "chain", "undefin"]}, {"number": 61627, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If undefined means \"Loading\", null means \"Not set by user\" and anything else is \"a user-set value\"; then angular's safe navigation introduces a bug in our code.", "sentSegmented": ["if", "undefined", "means", "loading", "null", "means", "not", "set", "by", "user", "and", "anything", "else", "is", "a", "user-set", "value", "then", "angular", "'s", "safe", "navigation", "introduces", "a", "bug", "in", "our", "code"], "sentSegmentedWithoutStops": ["undefined", "means", "loading", "null", "means", "set", "user", "anything", "else", "user-set", "value", "angular", "'s", "safe", "navigation", "introduces", "bug", "code"], "sentSegmentedWithoutStopsStemmed": ["undefin", "mean", "load", "null", "mean", "set", "user", "anyth", "els", "user-set", "valu", "angular", "'s", "safe", "navig", "introduc", "bug", "code"]}, {"number": 61628, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This can be even more confusing given that preferences is undefined and the Angular's safe navigation resolves preferences?.email to null.", "sentSegmented": ["this", "can", "be", "even", "more", "confusing", "given", "that", "preferences", "is", "undefined", "and", "the", "angular", "'s", "safe", "navigation", "resolves", "preferences", ".email", "to", "null"], "sentSegmentedWithoutStops": ["even", "confusing", "given", "preferences", "undefined", "angular", "'s", "safe", "navigation", "resolves", "preferences", ".email", "null"], "sentSegmentedWithoutStopsStemmed": ["even", "confus", "given", "prefer", "undefin", "angular", "'s", "safe", "navig", "resolv", "prefer", ".email", "null"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYzNjk0MDczNw==", "author": {"login": "johnwest80"}, "body": "> Arrays/Indexes are safely navigated in templates but not in the way one would expect:\r\n> In TypeScript: `foo?.bar?.[0]?.quxx`\r\n> In Angular Templates: `foo?.bar[0]?.quxx`\r\n> See #13254\r\n> and [f31c947](https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e)\r\n\r\nThe problem with angular's syntax is that there's no way to check that the array isn't undefined or null.  Yes, what you show will check to see if the array has that indexed item, but if I want to know that the property is in fact initialized, I have to do \r\n\r\n`foo?.bar && foo?.bar[0]?`\r\n\r\nIt would be much better to use optional chaining and just use\r\n\r\n`foo?.bar?.[0]?`", "bodyText": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:\nIn TypeScript: foo?.bar?.[0]?.quxx\nIn Angular Templates: foo?.bar[0]?.quxx\nSee #13254\nand f31c947\n\nThe problem with angular's syntax is that there's no way to check that the array isn't undefined or null.  Yes, what you show will check to see if the array has that indexed item, but if I want to know that the property is in fact initialized, I have to do\nfoo?.bar && foo?.bar[0]?\nIt would be much better to use optional chaining and just use\nfoo?.bar?.[0]?", "bodyHTML": "<blockquote>\n<p>Arrays/Indexes are safely navigated in templates but not in the way one would expect:<br>\nIn TypeScript: <code>foo?.bar?.[0]?.quxx</code><br>\nIn Angular Templates: <code>foo?.bar[0]?.quxx</code><br>\nSee <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"193614412\" data-permission-text=\"Title is private\" data-url=\"https://github.com/angular/angular/issues/13254\" data-hovercard-type=\"issue\" data-hovercard-url=\"/angular/angular/issues/13254/hovercard\" href=\"https://github.com/angular/angular/issues/13254\">#13254</a><br>\nand <a href=\"https://github.com/angular/angular/commit/f31c9470fae06adc69b2b665773bfc0a8a10d10e\">f31c947</a></p>\n</blockquote>\n<p>The problem with angular's syntax is that there's no way to check that the array isn't undefined or null.  Yes, what you show will check to see if the array has that indexed item, but if I want to know that the property is in fact initialized, I have to do</p>\n<p><code>foo?.bar &amp;&amp; foo?.bar[0]?</code></p>\n<p>It would be much better to use optional chaining and just use</p>\n<p><code>foo?.bar?.[0]?</code></p>", "createdAt": "2020-06-01T15:59:25Z", "publishedAt": "2020-06-01T15:59:25Z", "lastEditedAt": null, "updatedAt": "2020-06-01T15:59:25Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-06-01T16:01:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-06-01T16:19:11Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-08-10T08:51:58Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-08-27T07:29:21Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-10-07T23:19:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-12-17T15:21:49Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2021-03-16T09:21:03Z"}}]}, "bodyParsed": [{"number": 61629, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Arrays/Indexes are safely navigated in templates but not in the way one would expect:", "sentSegmented": ["arrays/indexes", "are", "safely", "navigated", "in", "templates", "but", "not", "in", "the", "way", "one", "would", "expect"], "sentSegmentedWithoutStops": ["arrays/indexes", "safely", "navigated", "templates", "way", "one", "would", "expect"], "sentSegmentedWithoutStopsStemmed": ["arrays/index", "safe", "navig", "templat", "way", "one", "would", "expect"]}, {"number": 61630, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "In TypeScript: foo?.bar?.", "sentSegmented": ["in", "typescript", "foo", ".bar"], "sentSegmentedWithoutStops": ["typescript", "foo", ".bar"], "sentSegmentedWithoutStopsStemmed": ["typescript", "foo", ".bar"]}, {"number": 61631, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "[0]?.quxx", "sentSegmented": ["0", ".quxx"], "sentSegmentedWithoutStops": ["0", ".quxx"], "sentSegmentedWithoutStopsStemmed": ["0", ".quxx"]}, {"number": 61632, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "In Angular Templates: foo?.bar[0]?.quxx", "sentSegmented": ["in", "angular", "templates", "foo", ".bar", "0", ".quxx"], "sentSegmentedWithoutStops": ["angular", "templates", "foo", ".bar", "0", ".quxx"], "sentSegmentedWithoutStopsStemmed": ["angular", "templat", "foo", ".bar", "0", ".quxx"]}, {"number": 61633, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "See #13254", "sentSegmented": ["see", "13254"], "sentSegmentedWithoutStops": ["see", "13254"], "sentSegmentedWithoutStopsStemmed": ["see", "13254"]}, {"number": 61634, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "and f31c947", "sentSegmented": ["and", "f31c947"], "sentSegmentedWithoutStops": ["f31c947"], "sentSegmentedWithoutStopsStemmed": ["f31c947"]}, {"number": 61635, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The problem with angular's syntax is that there's no way to check that the array isn't undefined or null.", "sentSegmented": ["the", "problem", "with", "angular", "'s", "syntax", "is", "that", "there", "'s", "no", "way", "to", "check", "that", "the", "array", "is", "n't", "undefined", "or", "null"], "sentSegmentedWithoutStops": ["problem", "angular", "'s", "syntax", "'s", "way", "check", "array", "n't", "undefined", "null"], "sentSegmentedWithoutStopsStemmed": ["problem", "angular", "'s", "syntax", "'s", "way", "check", "array", "n't", "undefin", "null"]}, {"number": 61636, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Yes, what you show will check to see if the array has that indexed item, but if I want to know that the property is in fact initialized, I have to do", "sentSegmented": ["yes", "what", "you", "show", "will", "check", "to", "see", "if", "the", "array", "has", "that", "indexed", "item", "but", "if", "i", "want", "to", "know", "that", "the", "property", "is", "in", "fact", "initialized", "i", "have", "to", "do"], "sentSegmentedWithoutStops": ["yes", "show", "check", "see", "array", "indexed", "item", "want", "know", "property", "fact", "initialized"], "sentSegmentedWithoutStopsStemmed": ["ye", "show", "check", "see", "array", "index", "item", "want", "know", "properti", "fact", "initi"]}, {"number": 61637, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "foo?.bar && foo?.bar[0]?", "sentSegmented": ["foo", ".bar", "foo", ".bar", "0"], "sentSegmentedWithoutStops": ["foo", ".bar", "foo", ".bar", "0"], "sentSegmentedWithoutStopsStemmed": ["foo", ".bar", "foo", ".bar", "0"]}, {"number": 61638, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It would be much better to use optional chaining and just use", "sentSegmented": ["it", "would", "be", "much", "better", "to", "use", "optional", "chaining", "and", "just", "use"], "sentSegmentedWithoutStops": ["would", "much", "better", "use", "optional", "chaining", "use"], "sentSegmentedWithoutStopsStemmed": ["would", "much", "better", "use", "option", "chain", "use"]}, {"number": 61639, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "foo?.bar?.", "sentSegmented": ["foo", ".bar"], "sentSegmentedWithoutStops": ["foo", ".bar"], "sentSegmentedWithoutStopsStemmed": ["foo", ".bar"]}, {"number": 61640, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0]?", "sentSegmented": ["0"], "sentSegmentedWithoutStops": ["0"], "sentSegmentedWithoutStopsStemmed": ["0"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY0NTMyMTgxMQ==", "author": {"login": "ajafff"}, "body": "Another thing to note: since TypeScript 3.9 non-null-assertions don't end the optional chain\r\n\r\n```ts\r\nfoo?.bar!.baz;\r\n\r\n// ts@<3.9\r\n(foo?.bar).baz; // asserts that `foo?.bar` is non-null - which obviously doesn't make sense\r\n\r\n// ts@>=3.9\r\n(foo?.bar.baz); // asserts that if `foo` is non-null, its `bar` property will also be non-null\r\n```", "bodyText": "Another thing to note: since TypeScript 3.9 non-null-assertions don't end the optional chain\nfoo?.bar!.baz;\n\n// ts@<3.9\n(foo?.bar).baz; // asserts that `foo?.bar` is non-null - which obviously doesn't make sense\n\n// ts@>=3.9\n(foo?.bar.baz); // asserts that if `foo` is non-null, its `bar` property will also be non-null", "bodyHTML": "<p>Another thing to note: since TypeScript 3.9 non-null-assertions don't end the optional chain</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">bar</span><span class=\"pl-c1\">!</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">baz</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// ts@&lt;3.9</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">bar</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">baz</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// asserts that `foo?.bar` is non-null - which obviously doesn't make sense</span>\n\n<span class=\"pl-c\">// ts@&gt;=3.9</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">bar</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">baz</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// asserts that if `foo` is non-null, its `bar` property will also be non-null</span></pre></div>", "createdAt": "2020-06-17T11:38:30Z", "publishedAt": "2020-06-17T11:38:30Z", "lastEditedAt": null, "updatedAt": "2020-06-17T11:38:30Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-06-17T12:36:44Z"}}]}, "bodyParsed": [{"number": 61641, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Another thing to note: since TypeScript 3.9 non-null-assertions don't end the optional chain", "sentSegmented": ["another", "thing", "to", "note", "since", "typescript", "3.9", "non-null-assertions", "do", "n't", "end", "the", "optional", "chain"], "sentSegmentedWithoutStops": ["another", "thing", "note", "since", "typescript", "3.9", "non-null-assertions", "n't", "end", "optional", "chain"], "sentSegmentedWithoutStopsStemmed": ["anoth", "thing", "note", "sinc", "typescript", "3.9", "non-null-assert", "n't", "end", "option", "chain"]}, {"number": 61642, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "foo?.bar!.baz;", "sentSegmented": ["foo", ".bar", ".baz"], "sentSegmentedWithoutStops": ["foo", ".bar", ".baz"], "sentSegmentedWithoutStopsStemmed": ["foo", ".bar", ".baz"]}, {"number": 61643, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// ts@<3.9", "sentSegmented": ["ts", "3.9"], "sentSegmentedWithoutStops": ["ts", "3.9"], "sentSegmentedWithoutStopsStemmed": ["ts", "3.9"]}, {"number": 61644, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(foo?.bar).baz; // asserts that `foo?.bar` is non-null - which obviously doesn't make sense", "sentSegmented": ["foo", ".bar", ".baz", "asserts", "that", "foo", ".bar", "is", "non-null", "which", "obviously", "does", "n't", "make", "sense"], "sentSegmentedWithoutStops": ["foo", ".bar", ".baz", "asserts", "foo", ".bar", "non-null", "obviously", "n't", "make", "sense"], "sentSegmentedWithoutStopsStemmed": ["foo", ".bar", ".baz", "assert", "foo", ".bar", "non-nul", "obvious", "n't", "make", "sens"]}, {"number": 61645, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// ts@>=3.9", "sentSegmented": ["ts", "=3.9"], "sentSegmentedWithoutStops": ["ts", "=3.9"], "sentSegmentedWithoutStopsStemmed": ["ts", "=3.9"]}, {"number": 61646, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(foo?.bar.baz); // asserts that if `foo` is non-null, its `bar` property will also be non-null", "sentSegmented": ["foo", ".bar.baz", "asserts", "that", "if", "foo", "is", "non-null", "its", "bar", "property", "will", "also", "be", "non-null"], "sentSegmentedWithoutStops": ["foo", ".bar.baz", "asserts", "foo", "non-null", "bar", "property", "also", "non-null"], "sentSegmentedWithoutStopsStemmed": ["foo", ".bar.baz", "assert", "foo", "non-nul", "bar", "properti", "also", "non-nul"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDcwMDExMjMwNA==", "author": {"login": "Sampath-Lokuge"}, "body": "Hi,\r\n\r\nFor me it shows this:\r\n\r\n```\r\nParser Error: Unexpected token [, expected identifier or keyword at column 33 in [\r\n\r\n                    {{userItemModel?.item?.priceList?.[0].sellerUrl}}\r\n                ] in \r\n```\r\n\r\nSOF Link: https://stackoverflow.com/questions/64104994/optional-chaining-is-not-working-cannot-read-property-0-of-undefined", "bodyText": "Hi,\nFor me it shows this:\nParser Error: Unexpected token [, expected identifier or keyword at column 33 in [\n\n                    {{userItemModel?.item?.priceList?.[0].sellerUrl}}\n                ] in \n\nSOF Link: https://stackoverflow.com/questions/64104994/optional-chaining-is-not-working-cannot-read-property-0-of-undefined", "bodyHTML": "<p>Hi,</p>\n<p>For me it shows this:</p>\n<pre><code>Parser Error: Unexpected token [, expected identifier or keyword at column 33 in [\n\n                    {{userItemModel?.item?.priceList?.[0].sellerUrl}}\n                ] in \n</code></pre>\n<p>SOF Link: <a rel=\"nofollow\" href=\"https://stackoverflow.com/questions/64104994/optional-chaining-is-not-working-cannot-read-property-0-of-undefined\">https://stackoverflow.com/questions/64104994/optional-chaining-is-not-working-cannot-read-property-0-of-undefined</a></p>", "createdAt": "2020-09-28T15:43:42Z", "publishedAt": "2020-09-28T15:43:42Z", "lastEditedAt": null, "updatedAt": "2020-09-28T15:43:42Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2020-09-28T16:00:46Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-12-26T06:47:45Z"}}]}, "bodyParsed": [{"number": 61647, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi,", "sentSegmented": ["hi"], "sentSegmentedWithoutStops": ["hi"], "sentSegmentedWithoutStopsStemmed": ["hi"]}, {"number": 61648, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For me it shows this:", "sentSegmented": ["for", "me", "it", "shows", "this"], "sentSegmentedWithoutStops": ["shows"], "sentSegmentedWithoutStopsStemmed": ["show"]}, {"number": 61649, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Parser Error: Unexpected token [, expected identifier or keyword at column 33 in [", "sentSegmented": ["parser", "error", "unexpected", "token", "expected", "identifier", "or", "keyword", "at", "column", "33", "in"], "sentSegmentedWithoutStops": ["parser", "error", "unexpected", "token", "expected", "identifier", "keyword", "column", "33"], "sentSegmentedWithoutStopsStemmed": ["parser", "error", "unexpect", "token", "expect", "identifi", "keyword", "column", "33"]}, {"number": 61650, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    {{userItemModel?.item?.priceList?.[0].sellerUrl}}", "sentSegmented": ["useritemmodel", ".item", ".pricelist", "0", ".sellerurl"], "sentSegmentedWithoutStops": ["useritemmodel", ".item", ".pricelist", "0", ".sellerurl"], "sentSegmentedWithoutStopsStemmed": ["useritemmodel", ".item", ".pricelist", "0", ".sellerurl"]}, {"number": 61651, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                ] in", "sentSegmented": ["in"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 61652, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "SOF Link: https://stackoverflow.com/questions/64104994/optional-chaining-is-not-working-cannot-read-property-0-of-undefined", "sentSegmented": ["sof", "link", "https", "//stackoverflow.com/questions/64104994/optional-chaining-is-not-working-", "can", "not", "-read-property-0-of-undefined"], "sentSegmentedWithoutStops": ["sof", "link", "https", "//stackoverflow.com/questions/64104994/optional-chaining-is-not-working-", "-read-property-0-of-undefined"], "sentSegmentedWithoutStopsStemmed": ["sof", "link", "http", "//stackoverflow.com/questions/64104994/optional-chaining-is-not-working-", "-read-property-0-of-undefin"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDc1MTMyNjgzMg==", "author": {"login": "adeel55"}, "body": "In my case \r\n\r\n`this.property?.UserProperties?.[0].id`\r\n\r\nDisplay error:\r\n\r\nTemplate parse errors:\r\n**Parser Error: Unexpected token [, expected identifier or keyword at column 32 in [this.property?.UserProperties?.[0].id] in bmp.component.html@219:84**\r\n", "bodyText": "In my case\nthis.property?.UserProperties?.[0].id\nDisplay error:\nTemplate parse errors:\nParser Error: Unexpected token [, expected identifier or keyword at column 32 in [this.property?.UserProperties?.[0].id] in bmp.component.html@219:84", "bodyHTML": "<p>In my case</p>\n<p><code>this.property?.UserProperties?.[0].id</code></p>\n<p>Display error:</p>\n<p>Template parse errors:<br>\n<strong>Parser Error: Unexpected token [, expected identifier or keyword at column 32 in [this.property?.UserProperties?.[0].id] in bmp.component.html@219:84</strong></p>", "createdAt": "2020-12-26T06:51:38Z", "publishedAt": "2020-12-26T06:51:38Z", "lastEditedAt": null, "updatedAt": "2020-12-26T06:51:38Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2021-01-13T20:49:34Z"}}]}, "bodyParsed": [{"number": 61653, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In my case", "sentSegmented": ["in", "my", "case"], "sentSegmentedWithoutStops": ["case"], "sentSegmentedWithoutStopsStemmed": ["case"]}, {"number": 61654, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "this.property?.UserProperties?.", "sentSegmented": ["this.property", ".userproperties"], "sentSegmentedWithoutStops": ["this.property", ".userproperties"], "sentSegmentedWithoutStopsStemmed": ["this.properti", ".userproperti"]}, {"number": 61655, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0].id", "sentSegmented": ["0", ".id"], "sentSegmentedWithoutStops": ["0", ".id"], "sentSegmentedWithoutStopsStemmed": ["0", ".id"]}, {"number": 61656, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Display error:", "sentSegmented": ["display", "error"], "sentSegmentedWithoutStops": ["display", "error"], "sentSegmentedWithoutStopsStemmed": ["display", "error"]}, {"number": 61657, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Template parse errors:", "sentSegmented": ["template", "parse", "errors"], "sentSegmentedWithoutStops": ["template", "parse", "errors"], "sentSegmentedWithoutStopsStemmed": ["templat", "pars", "error"]}, {"number": 61658, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Parser Error: Unexpected token [, expected identifier or keyword at column 32 in [this.property?.UserProperties?.", "sentSegmented": ["parser", "error", "unexpected", "token", "expected", "identifier", "or", "keyword", "at", "column", "32", "in", "this.property", ".userproperties"], "sentSegmentedWithoutStops": ["parser", "error", "unexpected", "token", "expected", "identifier", "keyword", "column", "32", "this.property", ".userproperties"], "sentSegmentedWithoutStopsStemmed": ["parser", "error", "unexpect", "token", "expect", "identifi", "keyword", "column", "32", "this.properti", ".userproperti"]}, {"number": 61659, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[0].id] in bmp.component.html@219:84", "sentSegmented": ["0", ".id", "in", "bmp.component.html", "219:84"], "sentSegmentedWithoutStops": ["0", ".id", "bmp.component.html", "219:84"], "sentSegmentedWithoutStopsStemmed": ["0", ".id", "bmp.component.html", "219:84"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOLMhWcA==", "hasNextPage": false}, "totalCount": 8}, "labels": {"edges": [{"node": {"createdAt": "2019-06-18T22:16:55Z", "name": "comp: compiler"}}, {"node": {"createdAt": "2016-05-13T04:35:11Z", "name": "comp: core"}}, {"node": {"createdAt": "2020-03-06T10:47:35Z", "name": "core: binding & interpolation"}}, {"node": {"createdAt": "2014-09-18T16:12:01Z", "name": "feature"}}]}, "milestone": {"title": "Backlog", "dueOn": null}, "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-12-13T00:48:29Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-13T06:12:33Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-13T06:40:14Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-13T08:21:34Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-13T12:36:37Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-14T18:55:53Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-16T00:26:20Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-16T10:41:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-12-17T19:42:42Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-05T10:19:42Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-05T13:04:31Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-01-18T09:18:43Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-02-04T06:30:01Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-02-12T06:24:36Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-02-21T16:22:43Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-02-27T13:50:32Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-03-25T13:19:25Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-04-15T15:51:53Z"}}, {"node": {"content": "HEART", "createdAt": "2020-04-15T15:51:57Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-04-21T07:14:34Z"}}]}, "state": "OPEN", "titleSegmented": ["align", "with", "the", "optional", "chaining", "spec"], "titleSegmentedWithoutStops": ["align", "optional", "chaining", "spec"], "titleSegmentedWithoutStopsStemmed": ["align", "option", "chain", "spec"], "bodyParsed": [{"number": 61552, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\ud83d\ude80 feature request", "sentSegmented": ["feature", "request"], "sentSegmentedWithoutStops": ["feature", "request"], "sentSegmentedWithoutStopsStemmed": ["featur", "request"]}, {"number": 61553, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Relevant Package", "sentSegmented": ["relevant", "package"], "sentSegmentedWithoutStops": ["relevant", "package"], "sentSegmentedWithoutStopsStemmed": ["relev", "packag"]}, {"number": 61554, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@angular/compiler", "sentSegmented": ["angular/compiler"], "sentSegmentedWithoutStops": ["angular/compiler"], "sentSegmentedWithoutStopsStemmed": ["angular/compil"]}, {"number": 61555, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Description", "sentSegmented": ["description"], "sentSegmentedWithoutStops": ["description"], "sentSegmentedWithoutStopsStemmed": ["descript"]}, {"number": 61556, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Optional chaining[1] reached stage 4.", "sentSegmented": ["optional", "chaining", "1", "reached", "stage", "4"], "sentSegmentedWithoutStops": ["optional", "chaining", "1", "reached", "stage", "4"], "sentSegmentedWithoutStopsStemmed": ["option", "chain", "1", "reach", "stage", "4"]}, {"number": 61557, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We've been supporting similar syntax in templates for a while now, calling it the \"safe navigation operator\"[2].", "sentSegmented": ["we", "'ve", "been", "supporting", "similar", "syntax", "in", "templates", "for", "a", "while", "now", "calling", "it", "the", "safe", "navigation", "operator", "2"], "sentSegmentedWithoutStops": ["'ve", "supporting", "similar", "syntax", "templates", "calling", "safe", "navigation", "operator", "2"], "sentSegmentedWithoutStopsStemmed": ["'ve", "support", "similar", "syntax", "templat", "call", "safe", "navig", "oper", "2"]}, {"number": 61558, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For simplicity and smaller payload, we can consider aligning with the spec in future versions of the framework.", "sentSegmented": ["for", "simplicity", "and", "smaller", "payload", "we", "can", "consider", "aligning", "with", "the", "spec", "in", "future", "versions", "of", "the", "framework"], "sentSegmentedWithoutStops": ["simplicity", "smaller", "payload", "consider", "aligning", "spec", "future", "versions", "framework"], "sentSegmentedWithoutStopsStemmed": ["simplic", "smaller", "payload", "consid", "align", "spec", "futur", "version", "framework"]}, {"number": 61559, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There are a couple of semantical and syntactical differences between optional chaining and safe navigation.", "sentSegmented": ["there", "are", "a", "couple", "of", "semantical", "and", "syntactical", "differences", "between", "optional", "chaining", "and", "safe", "navigation"], "sentSegmentedWithoutStops": ["couple", "semantical", "syntactical", "differences", "optional", "chaining", "safe", "navigation"], "sentSegmentedWithoutStopsStemmed": ["coupl", "semant", "syntact", "differ", "option", "chain", "safe", "navig"]}, {"number": 61560, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Syntax", "sentSegmented": ["syntax"], "sentSegmentedWithoutStops": ["syntax"], "sentSegmentedWithoutStopsStemmed": ["syntax"]}, {"number": 61561, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Optional chaining has the following syntax:", "sentSegmented": ["optional", "chaining", "has", "the", "following", "syntax"], "sentSegmentedWithoutStops": ["optional", "chaining", "following", "syntax"], "sentSegmentedWithoutStopsStemmed": ["option", "chain", "follow", "syntax"]}, {"number": 61562, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "obj?.prop       // optional static property access", "sentSegmented": ["obj", ".prop", "optional", "static", "property", "access"], "sentSegmentedWithoutStops": ["obj", ".prop", "optional", "property", "access"], "sentSegmentedWithoutStopsStemmed": ["obj", ".prop", "option", "properti", "access"]}, {"number": 61563, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "obj?.[expr]     // optional dynamic property access", "sentSegmented": ["obj", "expr", "optional", "dynamic", "property", "access"], "sentSegmentedWithoutStops": ["obj", "expr", "optional", "dynamic", "property", "access"], "sentSegmentedWithoutStopsStemmed": ["obj", "expr", "option", "dynam", "properti", "access"]}, {"number": 61564, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "func?.(...args) // optional function or method call", "sentSegmented": ["func", "args", "optional", "function", "or", "method", "call"], "sentSegmentedWithoutStops": ["func", "args", "optional", "method", "call"], "sentSegmentedWithoutStopsStemmed": ["func", "arg", "option", "method", "call"]}, {"number": 61565, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Safe navigation supports only direct property access.", "sentSegmented": ["safe", "navigation", "supports", "only", "direct", "property", "access"], "sentSegmentedWithoutStops": ["safe", "navigation", "supports", "direct", "property", "access"], "sentSegmentedWithoutStopsStemmed": ["safe", "navig", "support", "direct", "properti", "access"]}, {"number": 61566, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Optional chaining supports this, as well as, method calls and function calls.", "sentSegmented": ["optional", "chaining", "supports", "this", "as", "well", "as", "method", "calls", "and", "function", "calls"], "sentSegmentedWithoutStops": ["optional", "chaining", "supports", "well", "method", "calls", "function", "calls"], "sentSegmentedWithoutStopsStemmed": ["option", "chain", "support", "well", "method", "call", "function", "call"]}, {"number": 61567, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Function calls are particularly useful in iterators:", "sentSegmented": ["function", "calls", "are", "particularly", "useful", "in", "iterators"], "sentSegmentedWithoutStops": ["function", "calls", "particularly", "useful", "iterators"], "sentSegmentedWithoutStopsStemmed": ["function", "call", "particularli", "use", "iter"]}, {"number": 61568, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "iterator.return?.()", "sentSegmented": ["iterator.return"], "sentSegmentedWithoutStops": ["iterator.return"], "sentSegmentedWithoutStopsStemmed": ["iterator.return"]}, {"number": 61569, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Semantics", "sentSegmented": ["semantics"], "sentSegmentedWithoutStops": ["semantics"], "sentSegmentedWithoutStopsStemmed": ["semant"]}, {"number": 61570, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "With optional chaining, the expression a?.b will be translated to a == null ?", "sentSegmented": ["with", "optional", "chaining", "the", "expression", "a", ".b", "will", "be", "translated", "to", "a", "null"], "sentSegmentedWithoutStops": ["optional", "chaining", "expression", ".b", "translated", "null"], "sentSegmentedWithoutStopsStemmed": ["option", "chain", "express", ".b", "translat", "null"]}, {"number": 61571, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "undefined : a.b.", "sentSegmented": ["undefined", "a.b"], "sentSegmentedWithoutStops": ["undefined", "a.b"], "sentSegmentedWithoutStopsStemmed": ["undefin", "a.b"]}, {"number": 61572, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular, the semantics of the same expression would be null == a ?", "sentSegmented": ["in", "angular", "the", "semantics", "of", "the", "same", "expression", "would", "be", "null", "a"], "sentSegmentedWithoutStops": ["angular", "semantics", "expression", "would", "null"], "sentSegmentedWithoutStopsStemmed": ["angular", "semant", "express", "would", "null"]}, {"number": 61573, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "null : a.b.", "sentSegmented": ["null", "a.b"], "sentSegmentedWithoutStops": ["null", "a.b"], "sentSegmentedWithoutStopsStemmed": ["null", "a.b"]}, {"number": 61574, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If a is null or undefined, the expression typeof a?.b would evaluate to \"object\" with optional chaining and \"undefined\" in Angular's safe navigation operator.", "sentSegmented": ["if", "a", "is", "null", "or", "undefined", "the", "expression", "typeof", "a", ".b", "would", "evaluate", "to", "object", "with", "optional", "chaining", "and", "undefined", "in", "angular", "'s", "safe", "navigation", "operator"], "sentSegmentedWithoutStops": ["null", "undefined", "expression", "typeof", ".b", "would", "evaluate", "object", "optional", "chaining", "undefined", "angular", "'s", "safe", "navigation", "operator"], "sentSegmentedWithoutStopsStemmed": ["null", "undefin", "express", "typeof", ".b", "would", "evalu", "object", "option", "chain", "undefin", "angular", "'s", "safe", "navig", "oper"]}, {"number": 61575, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Except the mentioned difference above, method calls are compiled similarly:", "sentSegmented": ["except", "the", "mentioned", "difference", "above", "method", "calls", "are", "compiled", "similarly"], "sentSegmentedWithoutStops": ["except", "mentioned", "difference", "method", "calls", "compiled", "similarly"], "sentSegmentedWithoutStopsStemmed": ["except", "mention", "differ", "method", "call", "compil", "similarli"]}, {"number": 61576, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "a?.b()", "sentSegmented": ["a", ".b"], "sentSegmentedWithoutStops": [".b"], "sentSegmentedWithoutStopsStemmed": [".b"]}, {"number": 61577, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "a == null ? undefined : a.b()", "sentSegmented": ["a", "null", "undefined", "a.b"], "sentSegmentedWithoutStops": ["undefined", "a.b"], "sentSegmentedWithoutStopsStemmed": ["undefin", "a.b"]}, {"number": 61578, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In both, optional chaining and safe navigation in templates, stacking the operators is translated the same way: (a?.b).c?.d becomes null == a ?", "sentSegmented": ["in", "both", "optional", "chaining", "and", "safe", "navigation", "in", "templates", "stacking", "the", "operators", "is", "translated", "the", "same", "way", "a", ".b", ".c", ".d", "becomes", "null", "a"], "sentSegmentedWithoutStops": ["optional", "chaining", "safe", "navigation", "templates", "stacking", "operators", "translated", "way", ".b", ".c", ".d", "becomes", "null"], "sentSegmentedWithoutStopsStemmed": ["option", "chain", "safe", "navig", "templat", "stack", "oper", "translat", "way", ".b", ".c", ".d", "becom", "null"]}, {"number": 61579, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "null : null == a.b.c ?", "sentSegmented": ["null", "null", "a.b.c"], "sentSegmentedWithoutStops": ["null", "null", "a.b.c"], "sentSegmentedWithoutStopsStemmed": ["null", "null", "a.b.c"]}, {"number": 61580, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "null : a.b.c.d.", "sentSegmented": ["null", "a.b.c.d"], "sentSegmentedWithoutStops": ["null", "a.b.c.d"], "sentSegmentedWithoutStopsStemmed": ["null", "a.b.c.d"]}, {"number": 61581, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Another difference seems to be the way parentheses are handled.", "sentSegmented": ["another", "difference", "seems", "to", "be", "the", "way", "parentheses", "are", "handled"], "sentSegmentedWithoutStops": ["another", "difference", "seems", "way", "parentheses", "handled"], "sentSegmentedWithoutStopsStemmed": ["anoth", "differ", "seem", "way", "parenthes", "handl"]}, {"number": 61582, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The optional chaining spec defines that null==e.foo?null:e.foo.b.c should be translated to (a == null ?", "sentSegmented": ["the", "optional", "chaining", "spec", "defines", "that", "null==e.foo", "null", "e.foo.b.c", "should", "be", "translated", "to", "a", "null"], "sentSegmentedWithoutStops": ["optional", "chaining", "spec", "defines", "null==e.foo", "null", "e.foo.b.c", "translated", "null"], "sentSegmentedWithoutStopsStemmed": ["option", "chain", "spec", "defin", "null==e.foo", "null", "e.foo.b.c", "translat", "null"]}, {"number": 61583, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "undefined : a.b).c.", "sentSegmented": ["undefined", "a.b", ".c"], "sentSegmentedWithoutStops": ["undefined", "a.b", ".c"], "sentSegmentedWithoutStopsStemmed": ["undefin", "a.b", ".c"]}, {"number": 61584, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In Angular the same expression translates to null == a ?", "sentSegmented": ["in", "angular", "the", "same", "expression", "translates", "to", "null", "a"], "sentSegmentedWithoutStops": ["angular", "expression", "translates", "null"], "sentSegmentedWithoutStopsStemmed": ["angular", "express", "translat", "null"]}, {"number": 61585, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "null : a.b.c.", "sentSegmented": ["null", "a.b.c"], "sentSegmentedWithoutStops": ["null", "a.b.c"], "sentSegmentedWithoutStopsStemmed": ["null", "a.b.c"]}, {"number": 61586, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "PS: looks like the last issue is fixed by #34221.", "sentSegmented": ["ps", "looks", "like", "the", "last", "issue", "is", "fixed", "by", "34221"], "sentSegmentedWithoutStops": ["ps", "looks", "like", "last", "issue", "fixed", "34221"], "sentSegmentedWithoutStopsStemmed": ["ps", "look", "like", "last", "issu", "fix", "34221"]}, {"number": 61587, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[1] Optional chaining spec https://github.com/tc39/proposal-optional-chaining", "sentSegmented": ["1", "optional", "chaining", "spec", "https", "//github.com/tc39/proposal-optional-chaining"], "sentSegmentedWithoutStops": ["1", "optional", "chaining", "spec", "https", "//github.com/tc39/proposal-optional-chaining"], "sentSegmentedWithoutStopsStemmed": ["1", "option", "chain", "spec", "http", "//github.com/tc39/proposal-optional-chain"]}, {"number": 61588, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[2] Safe navigation https://angular.io/guide/template-syntax#safe-navigation-operator", "sentSegmented": ["2", "safe", "navigation", "https", "//angular.io/guide/template-syntax", "safe-navigation-operator"], "sentSegmentedWithoutStops": ["2", "safe", "navigation", "https", "//angular.io/guide/template-syntax", "safe-navigation-operator"], "sentSegmentedWithoutStopsStemmed": ["2", "safe", "navig", "http", "//angular.io/guide/template-syntax", "safe-navigation-oper"]}]}