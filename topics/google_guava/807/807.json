{"repository": {"owner": {"login": "google"}, "name": "guava", "forkCount": 9076, "stargazerCount": 40615, "createdAt": "2014-05-29T16:23:17Z", "updatedAt": "2021-03-18T06:45:20Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "guava"}}}, {"node": {"topic": {"name": "java"}}}]}, "languages": {"edges": [{"node": {"name": "Java"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Shell"}}, {"node": {"name": "JavaScript"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWU0NzQyMTEwOQ==", "number": 807, "author": {"login": "gissuebot"}, "title": "WeakEventBus that uses a weak reference to registered objects", "body": "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=807) created by **goo...@sa.me.uk** on 2011-11-29 at 10:27 PM_\n\n---\n\nEventBus maintains a strong reference to registered objects, and objects can't easily be wrapped in a WeakReference because that would need to @\ufeffSubscribe to the same events.\n\nWeakEventBus would use a WeakReference to refer to registered objects and unregister them automatically using a ReferenceQueue.\n", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807\" rel=\"nofollow\">Original issue</a> created by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-29 at 10:27 PM</em></p>\n<hr>\n<p>EventBus maintains a strong reference to registered objects, and objects can't easily be wrapped in a WeakReference because that would need to @\ufeffSubscribe to the same events.</p>\n<p>WeakEventBus would use a WeakReference to refer to registered objects and unregister them automatically using a ReferenceQueue.</p>", "bodyText": "Original issue created by goo...@sa.me.uk on 2011-11-29 at 10:27 PM\n\nEventBus maintains a strong reference to registered objects, and objects can't easily be wrapped in a WeakReference because that would need to @\ufeffSubscribe to the same events.\nWeakEventBus would use a WeakReference to refer to registered objects and unregister them automatically using a ReferenceQueue.", "assignees": {"edges": []}, "createdAt": "2014-10-31T17:24:51Z", "closed": true, "closedAt": "2019-08-12T16:00:13Z", "lastEditedAt": "2017-01-26T19:41:30Z", "publishedAt": "2014-10-31T17:24:51Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMDEx", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c1) posted by **wasserman.louis** on 2011-11-30 at 05:03 AM_\n\n---\n\nCould you explain an actual real-world use case?\n", "bodyText": "Original comment posted by wasserman.louis on 2011-11-30 at 05:03 AM\n\nCould you explain an actual real-world use case?", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c1\" rel=\"nofollow\">Original comment</a> posted by <strong>wasserman.louis</strong> on 2011-11-30 at 05:03 AM</em></p>\n<hr>\n<p>Could you explain an actual real-world use case?</p>", "createdAt": "2014-10-31T20:07:21Z", "publishedAt": "2014-10-31T20:07:21Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:07:21Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1772, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by wasserman.louis on 2011-11-30 at 05:03 AM", "sentSegmented": ["original", "comment", "posted", "by", "wasserman.louis", "on", "2011-11-30", "at", "05:03", "am"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "wasserman.louis", "2011-11-30", "05:03"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "wasserman.loui", "2011-11-30", "05:03"]}, {"number": 1773, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Could you explain an actual real-world use case?", "sentSegmented": ["could", "you", "explain", "an", "actual", "real-world", "use", "case"], "sentSegmentedWithoutStops": ["could", "explain", "actual", "real-world", "use", "case"], "sentSegmentedWithoutStopsStemmed": ["could", "explain", "actual", "real-world", "use", "case"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMDM5", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c2) posted by **goo...@sa.me.uk** on 2011-11-30 at 07:35 AM_\n\n---\n\nI'm using an EventBus to handle locale changes at runtime. If I subscribe every new Action object (so that its name can be changed automatically) then they stay referenced by the EventBus forever.\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 07:35 AM\n\nI'm using an EventBus to handle locale changes at runtime. If I subscribe every new Action object (so that its name can be changed automatically) then they stay referenced by the EventBus forever.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c2\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 07:35 AM</em></p>\n<hr>\n<p>I'm using an EventBus to handle locale changes at runtime. If I subscribe every new Action object (so that its name can be changed automatically) then they stay referenced by the EventBus forever.</p>", "createdAt": "2014-10-31T20:07:29Z", "publishedAt": "2014-10-31T20:07:29Z", "lastEditedAt": "2017-01-26T19:41:31Z", "updatedAt": "2017-01-26T19:41:31Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1774, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 07:35 AM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "07:35", "am"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "07:35"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "07:35"]}, {"number": 1775, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm using an EventBus to handle locale changes at runtime.", "sentSegmented": ["i", "'m", "using", "an", "eventbus", "to", "handle", "locale", "changes", "at", "runtime"], "sentSegmentedWithoutStops": ["'m", "using", "eventbus", "handle", "locale", "changes", "runtime"], "sentSegmentedWithoutStopsStemmed": ["'m", "use", "eventbu", "handl", "local", "chang", "runtim"]}, {"number": 1776, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If I subscribe every new Action object (so that its name can be changed automatically) then they stay referenced by the EventBus forever.", "sentSegmented": ["if", "i", "subscribe", "every", "new", "action", "object", "so", "that", "its", "name", "can", "be", "changed", "automatically", "then", "they", "stay", "referenced", "by", "the", "eventbus", "forever"], "sentSegmentedWithoutStops": ["subscribe", "every", "new", "action", "object", "name", "changed", "automatically", "stay", "referenced", "eventbus", "forever"], "sentSegmentedWithoutStopsStemmed": ["subscrib", "everi", "new", "action", "object", "name", "chang", "automat", "stay", "referenc", "eventbu", "forev"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMDc2", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c3) posted by **wasserman.louis** on 2011-11-30 at 08:49 PM_\n\n---\n\nIs there a point where you can explicitly use the unregister() method of EventBus?\n", "bodyText": "Original comment posted by wasserman.louis on 2011-11-30 at 08:49 PM\n\nIs there a point where you can explicitly use the unregister() method of EventBus?", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c3\" rel=\"nofollow\">Original comment</a> posted by <strong>wasserman.louis</strong> on 2011-11-30 at 08:49 PM</em></p>\n<hr>\n<p>Is there a point where you can explicitly use the unregister() method of EventBus?</p>", "createdAt": "2014-10-31T20:07:43Z", "publishedAt": "2014-10-31T20:07:43Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:07:43Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1777, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by wasserman.louis on 2011-11-30 at 08:49 PM", "sentSegmented": ["original", "comment", "posted", "by", "wasserman.louis", "on", "2011-11-30", "at", "08:49", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "wasserman.louis", "2011-11-30", "08:49", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "wasserman.loui", "2011-11-30", "08:49", "pm"]}, {"number": 1778, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is there a point where you can explicitly use the unregister() method of EventBus?", "sentSegmented": ["is", "there", "a", "point", "where", "you", "can", "explicitly", "use", "the", "unregister", "method", "of", "eventbus"], "sentSegmentedWithoutStops": ["point", "explicitly", "use", "unregister", "method", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["point", "explicitli", "use", "unregist", "method", "eventbu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMDky", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c4) posted by **goo...@sa.me.uk** on 2011-11-30 at 09:04 PM_\n\n---\n\nThey're added to a temporary JPopupMenu. Every Action has a strong reference to JPopupItem via the PropertyChangeListener so it never calls removePropertyChangeListener(). I could try having the Action use FinalizableWeakReferences to its listeners.\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:04 PM\n\nThey're added to a temporary JPopupMenu. Every Action has a strong reference to JPopupItem via the PropertyChangeListener so it never calls removePropertyChangeListener(). I could try having the Action use FinalizableWeakReferences to its listeners.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c4\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 09:04 PM</em></p>\n<hr>\n<p>They're added to a temporary JPopupMenu. Every Action has a strong reference to JPopupItem via the PropertyChangeListener so it never calls removePropertyChangeListener(). I could try having the Action use FinalizableWeakReferences to its listeners.</p>", "createdAt": "2014-10-31T20:07:49Z", "publishedAt": "2014-10-31T20:07:49Z", "lastEditedAt": "2017-01-26T19:41:31Z", "updatedAt": "2017-01-26T19:41:31Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1779, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:04 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "09:04", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "09:04", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "09:04", "pm"]}, {"number": 1780, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "They're added to a temporary JPopupMenu.", "sentSegmented": ["they", "'re", "added", "to", "a", "temporary", "jpopupmenu"], "sentSegmentedWithoutStops": ["'re", "added", "temporary", "jpopupmenu"], "sentSegmentedWithoutStopsStemmed": ["'re", "ad", "temporari", "jpopupmenu"]}, {"number": 1781, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Every Action has a strong reference to JPopupItem via the PropertyChangeListener so it never calls removePropertyChangeListener().", "sentSegmented": ["every", "action", "has", "a", "strong", "reference", "to", "jpopupitem", "via", "the", "propertychangelistener", "so", "it", "never", "calls", "removepropertychangelistener"], "sentSegmentedWithoutStops": ["every", "action", "strong", "reference", "jpopupitem", "via", "propertychangelistener", "never", "calls", "removepropertychangelistener"], "sentSegmentedWithoutStopsStemmed": ["everi", "action", "strong", "refer", "jpopupitem", "via", "propertychangelisten", "never", "call", "removepropertychangelisten"]}, {"number": 1782, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I could try having the Action use FinalizableWeakReferences to its listeners.", "sentSegmented": ["i", "could", "try", "having", "the", "action", "use", "finalizableweakreferences", "to", "its", "listeners"], "sentSegmentedWithoutStops": ["could", "try", "action", "use", "finalizableweakreferences", "listeners"], "sentSegmentedWithoutStopsStemmed": ["could", "tri", "action", "use", "finalizableweakrefer", "listen"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMDk5", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c5) posted by **goo...@sa.me.uk** on 2011-11-30 at 09:38 PM_\n\n---\n\nThis isn't very practical as PropertyChangeSupport makes a distinction between PropertyChangeListener and PropertyChangeListenerProxy. I'd need to have two versions of the weak references as the implementation of PropertyChangeListenerProxy relies on PropertyChangeSupport filtering the events.\n\nI've tried implementing a WeakEventBus but it's not currently working (although a proxy listening object with a WeakReference to the original listening object worked).\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:38 PM\n\nThis isn't very practical as PropertyChangeSupport makes a distinction between PropertyChangeListener and PropertyChangeListenerProxy. I'd need to have two versions of the weak references as the implementation of PropertyChangeListenerProxy relies on PropertyChangeSupport filtering the events.\nI've tried implementing a WeakEventBus but it's not currently working (although a proxy listening object with a WeakReference to the original listening object worked).", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c5\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 09:38 PM</em></p>\n<hr>\n<p>This isn't very practical as PropertyChangeSupport makes a distinction between PropertyChangeListener and PropertyChangeListenerProxy. I'd need to have two versions of the weak references as the implementation of PropertyChangeListenerProxy relies on PropertyChangeSupport filtering the events.</p>\n<p>I've tried implementing a WeakEventBus but it's not currently working (although a proxy listening object with a WeakReference to the original listening object worked).</p>", "createdAt": "2014-10-31T20:07:53Z", "publishedAt": "2014-10-31T20:07:53Z", "lastEditedAt": "2017-01-26T19:41:32Z", "updatedAt": "2017-01-26T19:41:32Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1783, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:38 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "09:38", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "09:38", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "09:38", "pm"]}, {"number": 1784, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This isn't very practical as PropertyChangeSupport makes a distinction between PropertyChangeListener and PropertyChangeListenerProxy.", "sentSegmented": ["this", "is", "n't", "very", "practical", "as", "propertychangesupport", "makes", "a", "distinction", "between", "propertychangelistener", "and", "propertychangelistenerproxy"], "sentSegmentedWithoutStops": ["n't", "practical", "propertychangesupport", "makes", "distinction", "propertychangelistener", "propertychangelistenerproxy"], "sentSegmentedWithoutStopsStemmed": ["n't", "practic", "propertychangesupport", "make", "distinct", "propertychangelisten", "propertychangelistenerproxi"]}, {"number": 1785, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'd need to have two versions of the weak references as the implementation of PropertyChangeListenerProxy relies on PropertyChangeSupport filtering the events.", "sentSegmented": ["i", "'d", "need", "to", "have", "two", "versions", "of", "the", "weak", "references", "as", "the", "implementation", "of", "propertychangelistenerproxy", "relies", "on", "propertychangesupport", "filtering", "the", "events"], "sentSegmentedWithoutStops": ["'d", "need", "two", "versions", "weak", "references", "implementation", "propertychangelistenerproxy", "relies", "propertychangesupport", "filtering", "events"], "sentSegmentedWithoutStopsStemmed": ["'d", "need", "two", "version", "weak", "refer", "implement", "propertychangelistenerproxi", "reli", "propertychangesupport", "filter", "event"]}, {"number": 1786, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I've tried implementing a WeakEventBus but it's not currently working (although a proxy listening object with a WeakReference to the original listening object worked).", "sentSegmented": ["i", "'ve", "tried", "implementing", "a", "weakeventbus", "but", "it", "'s", "not", "currently", "working", "although", "a", "proxy", "listening", "object", "with", "a", "weakreference", "to", "the", "original", "listening", "object", "worked"], "sentSegmentedWithoutStops": ["'ve", "tried", "implementing", "weakeventbus", "'s", "currently", "working", "although", "proxy", "listening", "object", "weakreference", "original", "listening", "object", "worked"], "sentSegmentedWithoutStopsStemmed": ["'ve", "tri", "implement", "weakeventbu", "'s", "current", "work", "although", "proxi", "listen", "object", "weakrefer", "origin", "listen", "object", "work"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMTA5", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c6) posted by **goo...@sa.me.uk** on 2011-11-30 at 09:48 PM_\n\n---\n\nThe implementation of AbstractButton is careful not to maintain a strong reference to the Action when adding itself as a PropertyChangeListener of the Action.\n\nIt uses a proxy object that only has a strong reference to the AbstractButton (JMenuItem). If I weakly reference that object from the Action then nothing will have a strong reference to it and it could disappear while it should still exist.\n\nGC Root -> EventBus -> Action -> ButtonActionPropertyChangeListener -> JMenuItem\nGC Root -> JPopupMenu -> JMenuItem -> Action\n\nIf I use a weak reference for Action -> ButtonActionPropertyChangeListener then it could drop the ButtonActionPropertyChangeListener while the JPopupMenu still exists:\nGC Root -> EventBus -> Action\nGC Root -> JPopupMenu -> JMenuItem -> Action\n\nThere's then no way for the Action to call the JMenuItem when its properties are changed and it would mistakenly assume it has no listeners so unregister itself from the EventBus.\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:48 PM\n\nThe implementation of AbstractButton is careful not to maintain a strong reference to the Action when adding itself as a PropertyChangeListener of the Action.\nIt uses a proxy object that only has a strong reference to the AbstractButton (JMenuItem). If I weakly reference that object from the Action then nothing will have a strong reference to it and it could disappear while it should still exist.\nGC Root -> EventBus -> Action -> ButtonActionPropertyChangeListener -> JMenuItem\nGC Root -> JPopupMenu -> JMenuItem -> Action\nIf I use a weak reference for Action -> ButtonActionPropertyChangeListener then it could drop the ButtonActionPropertyChangeListener while the JPopupMenu still exists:\nGC Root -> EventBus -> Action\nGC Root -> JPopupMenu -> JMenuItem -> Action\nThere's then no way for the Action to call the JMenuItem when its properties are changed and it would mistakenly assume it has no listeners so unregister itself from the EventBus.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c6\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 09:48 PM</em></p>\n<hr>\n<p>The implementation of AbstractButton is careful not to maintain a strong reference to the Action when adding itself as a PropertyChangeListener of the Action.</p>\n<p>It uses a proxy object that only has a strong reference to the AbstractButton (JMenuItem). If I weakly reference that object from the Action then nothing will have a strong reference to it and it could disappear while it should still exist.</p>\n<p>GC Root -&gt; EventBus -&gt; Action -&gt; ButtonActionPropertyChangeListener -&gt; JMenuItem<br>\nGC Root -&gt; JPopupMenu -&gt; JMenuItem -&gt; Action</p>\n<p>If I use a weak reference for Action -&gt; ButtonActionPropertyChangeListener then it could drop the ButtonActionPropertyChangeListener while the JPopupMenu still exists:<br>\nGC Root -&gt; EventBus -&gt; Action<br>\nGC Root -&gt; JPopupMenu -&gt; JMenuItem -&gt; Action</p>\n<p>There's then no way for the Action to call the JMenuItem when its properties are changed and it would mistakenly assume it has no listeners so unregister itself from the EventBus.</p>", "createdAt": "2014-10-31T20:07:55Z", "publishedAt": "2014-10-31T20:07:55Z", "lastEditedAt": "2017-01-26T19:41:32Z", "updatedAt": "2017-01-26T19:41:32Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1787, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:48 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "09:48", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "09:48", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "09:48", "pm"]}, {"number": 1788, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The implementation of AbstractButton is careful not to maintain a strong reference to the Action when adding itself as a PropertyChangeListener of the Action.", "sentSegmented": ["the", "implementation", "of", "abstractbutton", "is", "careful", "not", "to", "maintain", "a", "strong", "reference", "to", "the", "action", "when", "adding", "itself", "as", "a", "propertychangelistener", "of", "the", "action"], "sentSegmentedWithoutStops": ["implementation", "abstractbutton", "careful", "maintain", "strong", "reference", "action", "adding", "propertychangelistener", "action"], "sentSegmentedWithoutStopsStemmed": ["implement", "abstractbutton", "care", "maintain", "strong", "refer", "action", "ad", "propertychangelisten", "action"]}, {"number": 1789, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It uses a proxy object that only has a strong reference to the AbstractButton (JMenuItem).", "sentSegmented": ["it", "uses", "a", "proxy", "object", "that", "only", "has", "a", "strong", "reference", "to", "the", "abstractbutton", "jmenuitem"], "sentSegmentedWithoutStops": ["uses", "proxy", "object", "strong", "reference", "abstractbutton", "jmenuitem"], "sentSegmentedWithoutStopsStemmed": ["use", "proxi", "object", "strong", "refer", "abstractbutton", "jmenuitem"]}, {"number": 1790, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If I weakly reference that object from the Action then nothing will have a strong reference to it and it could disappear while it should still exist.", "sentSegmented": ["if", "i", "weakly", "reference", "that", "object", "from", "the", "action", "then", "nothing", "will", "have", "a", "strong", "reference", "to", "it", "and", "it", "could", "disappear", "while", "it", "should", "still", "exist"], "sentSegmentedWithoutStops": ["weakly", "reference", "object", "action", "nothing", "strong", "reference", "could", "disappear", "still", "exist"], "sentSegmentedWithoutStopsStemmed": ["weakli", "refer", "object", "action", "noth", "strong", "refer", "could", "disappear", "still", "exist"]}, {"number": 1791, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "GC Root -> EventBus -> Action -> ButtonActionPropertyChangeListener -> JMenuItem", "sentSegmented": ["gc", "root", "eventbus", "action", "buttonactionpropertychangelistener", "jmenuitem"], "sentSegmentedWithoutStops": ["gc", "root", "eventbus", "action", "buttonactionpropertychangelistener", "jmenuitem"], "sentSegmentedWithoutStopsStemmed": ["gc", "root", "eventbu", "action", "buttonactionpropertychangelisten", "jmenuitem"]}, {"number": 1792, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "GC Root -> JPopupMenu -> JMenuItem -> Action", "sentSegmented": ["gc", "root", "jpopupmenu", "jmenuitem", "action"], "sentSegmentedWithoutStops": ["gc", "root", "jpopupmenu", "jmenuitem", "action"], "sentSegmentedWithoutStopsStemmed": ["gc", "root", "jpopupmenu", "jmenuitem", "action"]}, {"number": 1793, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If I use a weak reference for Action -> ButtonActionPropertyChangeListener then it could drop the ButtonActionPropertyChangeListener while the JPopupMenu still exists:", "sentSegmented": ["if", "i", "use", "a", "weak", "reference", "for", "action", "buttonactionpropertychangelistener", "then", "it", "could", "drop", "the", "buttonactionpropertychangelistener", "while", "the", "jpopupmenu", "still", "exists"], "sentSegmentedWithoutStops": ["use", "weak", "reference", "action", "buttonactionpropertychangelistener", "could", "drop", "buttonactionpropertychangelistener", "jpopupmenu", "still", "exists"], "sentSegmentedWithoutStopsStemmed": ["use", "weak", "refer", "action", "buttonactionpropertychangelisten", "could", "drop", "buttonactionpropertychangelisten", "jpopupmenu", "still", "exist"]}, {"number": 1794, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "GC Root -> EventBus -> Action", "sentSegmented": ["gc", "root", "eventbus", "action"], "sentSegmentedWithoutStops": ["gc", "root", "eventbus", "action"], "sentSegmentedWithoutStopsStemmed": ["gc", "root", "eventbu", "action"]}, {"number": 1795, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "GC Root -> JPopupMenu -> JMenuItem -> Action", "sentSegmented": ["gc", "root", "jpopupmenu", "jmenuitem", "action"], "sentSegmentedWithoutStops": ["gc", "root", "jpopupmenu", "jmenuitem", "action"], "sentSegmentedWithoutStopsStemmed": ["gc", "root", "jpopupmenu", "jmenuitem", "action"]}, {"number": 1796, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There's then no way for the Action to call the JMenuItem when its properties are changed and it would mistakenly assume it has no listeners so unregister itself from the EventBus.", "sentSegmented": ["there", "'s", "then", "no", "way", "for", "the", "action", "to", "call", "the", "jmenuitem", "when", "its", "properties", "are", "changed", "and", "it", "would", "mistakenly", "assume", "it", "has", "no", "listeners", "so", "unregister", "itself", "from", "the", "eventbus"], "sentSegmentedWithoutStops": ["'s", "way", "action", "call", "jmenuitem", "properties", "changed", "would", "mistakenly", "assume", "listeners", "unregister", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["'s", "way", "action", "call", "jmenuitem", "properti", "chang", "would", "mistakenli", "assum", "listen", "unregist", "eventbu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMTE1", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c7) posted by **goo...@sa.me.uk** on 2011-11-30 at 09:55 PM_\n\n---\n\n(My WeakEventBus is working, I just didn't have the right log level to see it doing the cleanup)\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:55 PM\n\n(My WeakEventBus is working, I just didn't have the right log level to see it doing the cleanup)", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c7\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 09:55 PM</em></p>\n<hr>\n<p>(My WeakEventBus is working, I just didn't have the right log level to see it doing the cleanup)</p>", "createdAt": "2014-10-31T20:07:57Z", "publishedAt": "2014-10-31T20:07:57Z", "lastEditedAt": "2017-01-26T19:41:32Z", "updatedAt": "2017-01-26T19:41:32Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1797, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 09:55 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "09:55", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "09:55", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "09:55", "pm"]}, {"number": 1798, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(My WeakEventBus is working, I just didn't have the right log level to see it doing the cleanup)", "sentSegmented": ["my", "weakeventbus", "is", "working", "i", "just", "did", "n't", "have", "the", "right", "log", "level", "to", "see", "it", "doing", "the", "cleanup"], "sentSegmentedWithoutStops": ["weakeventbus", "working", "n't", "right", "log", "level", "see", "cleanup"], "sentSegmentedWithoutStopsStemmed": ["weakeventbu", "work", "n't", "right", "log", "level", "see", "cleanup"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMTE3", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c8) posted by **goo...@sa.me.uk** on 2011-11-30 at 10:26 PM_\n\n---\n\nActually, ButtonActionPropertyChangeListener doesn't do what its comments imply it is supposed to do because AbstractButton maintains a reference to it. There's a lot of \"don't use an anonymous subclass\" comments in the source but then it stores a reference to \"this\".\n\nFor AbstractButton (JMenuItem) <-> Action they need strong references to each other in order to be able to call their respective listener events.\n\nJPopupMenu doesn't clear out its items when the menu is hidden because it's reusable, so the reference from the EventBus becomes a problem as it keeps these two components alive.\n\nI can't use PopupMenuListener from the Action to detect when the menu is visible/invisible because it never sees the JPopupMenu, only the proxy object for JMenuItem.\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 10:26 PM\n\nActually, ButtonActionPropertyChangeListener doesn't do what its comments imply it is supposed to do because AbstractButton maintains a reference to it. There's a lot of \"don't use an anonymous subclass\" comments in the source but then it stores a reference to \"this\".\nFor AbstractButton (JMenuItem) <-> Action they need strong references to each other in order to be able to call their respective listener events.\nJPopupMenu doesn't clear out its items when the menu is hidden because it's reusable, so the reference from the EventBus becomes a problem as it keeps these two components alive.\nI can't use PopupMenuListener from the Action to detect when the menu is visible/invisible because it never sees the JPopupMenu, only the proxy object for JMenuItem.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c8\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 10:26 PM</em></p>\n<hr>\n<p>Actually, ButtonActionPropertyChangeListener doesn't do what its comments imply it is supposed to do because AbstractButton maintains a reference to it. There's a lot of \"don't use an anonymous subclass\" comments in the source but then it stores a reference to \"this\".</p>\n<p>For AbstractButton (JMenuItem) &lt;-&gt; Action they need strong references to each other in order to be able to call their respective listener events.</p>\n<p>JPopupMenu doesn't clear out its items when the menu is hidden because it's reusable, so the reference from the EventBus becomes a problem as it keeps these two components alive.</p>\n<p>I can't use PopupMenuListener from the Action to detect when the menu is visible/invisible because it never sees the JPopupMenu, only the proxy object for JMenuItem.</p>", "createdAt": "2014-10-31T20:07:59Z", "publishedAt": "2014-10-31T20:07:59Z", "lastEditedAt": "2017-01-26T19:41:33Z", "updatedAt": "2017-01-26T19:41:33Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1799, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 10:26 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "10:26", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "10:26", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "10:26", "pm"]}, {"number": 1800, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Actually, ButtonActionPropertyChangeListener doesn't do what its comments imply it is supposed to do because AbstractButton maintains a reference to it.", "sentSegmented": ["actually", "buttonactionpropertychangelistener", "does", "n't", "do", "what", "its", "comments", "imply", "it", "is", "supposed", "to", "do", "because", "abstractbutton", "maintains", "a", "reference", "to", "it"], "sentSegmentedWithoutStops": ["actually", "buttonactionpropertychangelistener", "n't", "comments", "imply", "supposed", "abstractbutton", "maintains", "reference"], "sentSegmentedWithoutStopsStemmed": ["actual", "buttonactionpropertychangelisten", "n't", "comment", "impli", "suppos", "abstractbutton", "maintain", "refer"]}, {"number": 1801, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There's a lot of \"don't use an anonymous subclass\" comments in the source but then it stores a reference to \"this\".", "sentSegmented": ["there", "'s", "a", "lot", "of", "do", "n't", "use", "an", "anonymous", "subclass", "comments", "in", "the", "source", "but", "then", "it", "stores", "a", "reference", "to", "this"], "sentSegmentedWithoutStops": ["'s", "lot", "n't", "use", "anonymous", "subclass", "comments", "source", "stores", "reference"], "sentSegmentedWithoutStopsStemmed": ["'s", "lot", "n't", "use", "anonym", "subclass", "comment", "sourc", "store", "refer"]}, {"number": 1802, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For AbstractButton (JMenuItem) <-> Action they need strong references to each other in order to be able to call their respective listener events.", "sentSegmented": ["for", "abstractbutton", "jmenuitem", "action", "they", "need", "strong", "references", "to", "each", "other", "in", "order", "to", "be", "able", "to", "call", "their", "respective", "listener", "events"], "sentSegmentedWithoutStops": ["abstractbutton", "jmenuitem", "action", "need", "strong", "references", "order", "able", "call", "respective", "listener", "events"], "sentSegmentedWithoutStopsStemmed": ["abstractbutton", "jmenuitem", "action", "need", "strong", "refer", "order", "abl", "call", "respect", "listen", "event"]}, {"number": 1803, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "JPopupMenu doesn't clear out its items when the menu is hidden because it's reusable, so the reference from the EventBus becomes a problem as it keeps these two components alive.", "sentSegmented": ["jpopupmenu", "does", "n't", "clear", "out", "its", "items", "when", "the", "menu", "is", "hidden", "because", "it", "'s", "reusable", "so", "the", "reference", "from", "the", "eventbus", "becomes", "a", "problem", "as", "it", "keeps", "these", "two", "components", "alive"], "sentSegmentedWithoutStops": ["jpopupmenu", "n't", "clear", "items", "menu", "hidden", "'s", "reusable", "reference", "eventbus", "becomes", "problem", "keeps", "two", "components", "alive"], "sentSegmentedWithoutStopsStemmed": ["jpopupmenu", "n't", "clear", "item", "menu", "hidden", "'s", "reusabl", "refer", "eventbu", "becom", "problem", "keep", "two", "compon", "aliv"]}, {"number": 1804, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can't use PopupMenuListener from the Action to detect when the menu is visible/invisible because it never sees the JPopupMenu, only the proxy object for JMenuItem.", "sentSegmented": ["i", "ca", "n't", "use", "popupmenulistener", "from", "the", "action", "to", "detect", "when", "the", "menu", "is", "visible/invisible", "because", "it", "never", "sees", "the", "jpopupmenu", "only", "the", "proxy", "object", "for", "jmenuitem"], "sentSegmentedWithoutStops": ["ca", "n't", "use", "popupmenulistener", "action", "detect", "menu", "visible/invisible", "never", "sees", "jpopupmenu", "proxy", "object", "jmenuitem"], "sentSegmentedWithoutStopsStemmed": ["ca", "n't", "use", "popupmenulisten", "action", "detect", "menu", "visible/invis", "never", "see", "jpopupmenu", "proxi", "object", "jmenuitem"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMTE4", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c9) posted by **goo...@sa.me.uk** on 2011-11-30 at 11:33 PM_\n\n---\n\nIf I handle PopupMenuListener.popupMenuWillBecomeInvisible() I can set the Action to null on all the AbstractButtons and then have the Action detect when there are no PropertyChangeListeners, but that's very messy and it relies on the JPopupMenu clearing out the references from all its components when it's hidden.\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 11:33 PM\n\nIf I handle PopupMenuListener.popupMenuWillBecomeInvisible() I can set the Action to null on all the AbstractButtons and then have the Action detect when there are no PropertyChangeListeners, but that's very messy and it relies on the JPopupMenu clearing out the references from all its components when it's hidden.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c9\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2011-11-30 at 11:33 PM</em></p>\n<hr>\n<p>If I handle PopupMenuListener.popupMenuWillBecomeInvisible() I can set the Action to null on all the AbstractButtons and then have the Action detect when there are no PropertyChangeListeners, but that's very messy and it relies on the JPopupMenu clearing out the references from all its components when it's hidden.</p>", "createdAt": "2014-10-31T20:08:02Z", "publishedAt": "2014-10-31T20:08:02Z", "lastEditedAt": "2017-01-26T19:41:33Z", "updatedAt": "2017-01-26T19:41:33Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1805, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2011-11-30 at 11:33 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2011-11-30", "at", "11:33", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2011-11-30", "11:33", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2011-11-30", "11:33", "pm"]}, {"number": 1806, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If I handle PopupMenuListener.popupMenuWillBecomeInvisible() I can set the Action to null on all the AbstractButtons and then have the Action detect when there are no PropertyChangeListeners, but that's very messy and it relies on the JPopupMenu clearing out the references from all its components when it's hidden.", "sentSegmented": ["if", "i", "handle", "popupmenulistener.popupmenuwillbecomeinvisible", "i", "can", "set", "the", "action", "to", "null", "on", "all", "the", "abstractbuttons", "and", "then", "have", "the", "action", "detect", "when", "there", "are", "no", "propertychangelisteners", "but", "that", "'s", "very", "messy", "and", "it", "relies", "on", "the", "jpopupmenu", "clearing", "out", "the", "references", "from", "all", "its", "components", "when", "it", "'s", "hidden"], "sentSegmentedWithoutStops": ["handle", "popupmenulistener.popupmenuwillbecomeinvisible", "set", "action", "null", "abstractbuttons", "action", "detect", "propertychangelisteners", "'s", "messy", "relies", "jpopupmenu", "clearing", "references", "components", "'s", "hidden"], "sentSegmentedWithoutStopsStemmed": ["handl", "popupmenulistener.popupmenuwillbecomeinvis", "set", "action", "null", "abstractbutton", "action", "detect", "propertychangelisten", "'s", "messi", "reli", "jpopupmenu", "clear", "refer", "compon", "'s", "hidden"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMTQ4", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c10) posted by **wasserman.louis** on 2011-12-02 at 06:20 PM_\n\n---\n\nI agree that this is not a use case that EventBus currently handles, but I'm not yet sure that weak references are the only way, or the best way, to address this use case.\n\n---\n\n**Status:** `Triaged`\n", "bodyText": "Original comment posted by wasserman.louis on 2011-12-02 at 06:20 PM\n\nI agree that this is not a use case that EventBus currently handles, but I'm not yet sure that weak references are the only way, or the best way, to address this use case.\n\nStatus: Triaged", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c10\" rel=\"nofollow\">Original comment</a> posted by <strong>wasserman.louis</strong> on 2011-12-02 at 06:20 PM</em></p>\n<hr>\n<p>I agree that this is not a use case that EventBus currently handles, but I'm not yet sure that weak references are the only way, or the best way, to address this use case.</p>\n<hr>\n<p><strong>Status:</strong> <code>Triaged</code></p>", "createdAt": "2014-10-31T20:08:14Z", "publishedAt": "2014-10-31T20:08:14Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:08:14Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1807, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by wasserman.louis on 2011-12-02 at 06:20 PM", "sentSegmented": ["original", "comment", "posted", "by", "wasserman.louis", "on", "2011-12-02", "at", "06:20", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "wasserman.louis", "2011-12-02", "06:20", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "wasserman.loui", "2011-12-02", "06:20", "pm"]}, {"number": 1808, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I agree that this is not a use case that EventBus currently handles, but I'm not yet sure that weak references are the only way, or the best way, to address this use case.", "sentSegmented": ["i", "agree", "that", "this", "is", "not", "a", "use", "case", "that", "eventbus", "currently", "handles", "but", "i", "'m", "not", "yet", "sure", "that", "weak", "references", "are", "the", "only", "way", "or", "the", "best", "way", "to", "address", "this", "use", "case"], "sentSegmentedWithoutStops": ["agree", "use", "case", "eventbus", "currently", "handles", "'m", "yet", "sure", "weak", "references", "way", "best", "way", "address", "use", "case"], "sentSegmentedWithoutStopsStemmed": ["agre", "use", "case", "eventbu", "current", "handl", "'m", "yet", "sure", "weak", "refer", "way", "best", "way", "address", "use", "case"]}, {"number": 1809, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Status: Triaged", "sentSegmented": ["status", "triaged"], "sentSegmentedWithoutStops": ["status", "triaged"], "sentSegmentedWithoutStopsStemmed": ["statu", "triag"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzMzg3", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c11) posted by **fry@google.com** on 2011-12-05 at 07:00 PM_\n\n---\n\n_(No comment entered for this change.)_\n\n---\n\n**Labels:** `Type-Enhancement`\n", "bodyText": "Original comment posted by fry@google.com on 2011-12-05 at 07:00 PM\n\n(No comment entered for this change.)\n\nLabels: Type-Enhancement", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c11\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:fry@google.com\">fry@google.com</a></strong> on 2011-12-05 at 07:00 PM</em></p>\n<hr>\n<p><em>(No comment entered for this change.)</em></p>\n<hr>\n<p><strong>Labels:</strong> <code>Type-Enhancement</code></p>", "createdAt": "2014-10-31T20:09:55Z", "publishedAt": "2014-10-31T20:09:55Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:09:55Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1810, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by fry@google.com on 2011-12-05 at 07:00 PM", "sentSegmented": ["original", "comment", "posted", "by", "fry", "google.com", "on", "2011-12-05", "at", "07:00", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "fry", "google.com", "2011-12-05", "07:00", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "fri", "google.com", "2011-12-05", "07:00", "pm"]}, {"number": 1811, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(No comment entered for this change.)", "sentSegmented": ["no", "comment", "entered", "for", "this", "change"], "sentSegmentedWithoutStops": ["comment", "entered", "change"], "sentSegmentedWithoutStopsStemmed": ["comment", "enter", "chang"]}, {"number": 1812, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Labels: Type-Enhancement", "sentSegmented": ["labels", "type-enhancement"], "sentSegmentedWithoutStops": ["labels", "type-enhancement"], "sentSegmentedWithoutStopsStemmed": ["label", "type-enhanc"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzIzODIy", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c12) posted by **cbiffle@google.com** on 2011-12-09 at 06:14 PM_\n\n---\n\nThis reminds me of NSNotificationCenter in Cocoa, which has always used weak references (and recently switched to proper zeroing weak references, rather than crashing weak references).  NSNotificationCenter influenced the design of EventBus from my previous experience in Objective-C.  EventBus probably would have used weak references from the start, except that the application I built it for wound up with data processing objects that were _only_ retained by the bus.\n\nI'm not sure a bus-wide weak reference policy is the right approach, though it would work.  Perhaps the right thing would be to have object-by-object control at the register level?\n", "bodyText": "Original comment posted by cbiffle@google.com on 2011-12-09 at 06:14 PM\n\nThis reminds me of NSNotificationCenter in Cocoa, which has always used weak references (and recently switched to proper zeroing weak references, rather than crashing weak references).  NSNotificationCenter influenced the design of EventBus from my previous experience in Objective-C.  EventBus probably would have used weak references from the start, except that the application I built it for wound up with data processing objects that were only retained by the bus.\nI'm not sure a bus-wide weak reference policy is the right approach, though it would work.  Perhaps the right thing would be to have object-by-object control at the register level?", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c12\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:cbiffle@google.com\">cbiffle@google.com</a></strong> on 2011-12-09 at 06:14 PM</em></p>\n<hr>\n<p>This reminds me of NSNotificationCenter in Cocoa, which has always used weak references (and recently switched to proper zeroing weak references, rather than crashing weak references).  NSNotificationCenter influenced the design of EventBus from my previous experience in Objective-C.  EventBus probably would have used weak references from the start, except that the application I built it for wound up with data processing objects that were <em>only</em> retained by the bus.</p>\n<p>I'm not sure a bus-wide weak reference policy is the right approach, though it would work.  Perhaps the right thing would be to have object-by-object control at the register level?</p>", "createdAt": "2014-10-31T20:13:03Z", "publishedAt": "2014-10-31T20:13:03Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:13:03Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1813, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by cbiffle@google.com on 2011-12-09 at 06:14 PM", "sentSegmented": ["original", "comment", "posted", "by", "cbiffle", "google.com", "on", "2011-12-09", "at", "06:14", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "cbiffle", "google.com", "2011-12-09", "06:14", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "cbiffl", "google.com", "2011-12-09", "06:14", "pm"]}, {"number": 1814, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This reminds me of NSNotificationCenter in Cocoa, which has always used weak references (and recently switched to proper zeroing weak references, rather than crashing weak references).", "sentSegmented": ["this", "reminds", "me", "of", "nsnotificationcenter", "in", "cocoa", "which", "has", "always", "used", "weak", "references", "and", "recently", "switched", "to", "proper", "zeroing", "weak", "references", "rather", "than", "crashing", "weak", "references"], "sentSegmentedWithoutStops": ["reminds", "nsnotificationcenter", "cocoa", "always", "used", "weak", "references", "recently", "switched", "proper", "zeroing", "weak", "references", "rather", "crashing", "weak", "references"], "sentSegmentedWithoutStopsStemmed": ["remind", "nsnotificationcent", "cocoa", "alway", "use", "weak", "refer", "recent", "switch", "proper", "zero", "weak", "refer", "rather", "crash", "weak", "refer"]}, {"number": 1815, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "NSNotificationCenter influenced the design of EventBus from my previous experience in Objective-C.  EventBus probably would have used weak references from the start, except that the application I built it for wound up with data processing objects that were only retained by the bus.", "sentSegmented": ["nsnotificationcenter", "influenced", "the", "design", "of", "eventbus", "from", "my", "previous", "experience", "in", "objective-c.", "eventbus", "probably", "would", "have", "used", "weak", "references", "from", "the", "start", "except", "that", "the", "application", "i", "built", "it", "for", "wound", "up", "with", "data", "processing", "objects", "that", "were", "only", "retained", "by", "the", "bus"], "sentSegmentedWithoutStops": ["nsnotificationcenter", "influenced", "design", "eventbus", "previous", "experience", "objective-c.", "eventbus", "probably", "would", "used", "weak", "references", "start", "except", "application", "built", "wound", "data", "processing", "objects", "retained", "bus"], "sentSegmentedWithoutStopsStemmed": ["nsnotificationcent", "influenc", "design", "eventbu", "previou", "experi", "objective-c.", "eventbu", "probabl", "would", "use", "weak", "refer", "start", "except", "applic", "built", "wound", "data", "process", "object", "retain", "bu"]}, {"number": 1816, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm not sure a bus-wide weak reference policy is the right approach, though it would work.", "sentSegmented": ["i", "'m", "not", "sure", "a", "bus-wide", "weak", "reference", "policy", "is", "the", "right", "approach", "though", "it", "would", "work"], "sentSegmentedWithoutStops": ["'m", "sure", "bus-wide", "weak", "reference", "policy", "right", "approach", "though", "would", "work"], "sentSegmentedWithoutStopsStemmed": ["'m", "sure", "bus-wid", "weak", "refer", "polici", "right", "approach", "though", "would", "work"]}, {"number": 1817, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Perhaps the right thing would be to have object-by-object control at the register level?", "sentSegmented": ["perhaps", "the", "right", "thing", "would", "be", "to", "have", "object-by-object", "control", "at", "the", "register", "level"], "sentSegmentedWithoutStops": ["perhaps", "right", "thing", "would", "object-by-object", "control", "register", "level"], "sentSegmentedWithoutStopsStemmed": ["perhap", "right", "thing", "would", "object-by-object", "control", "regist", "level"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzI0NjMz", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c13) posted by **fry@google.com** on 2011-12-10 at 04:24 PM_\n\n---\n\n_(No comment entered for this change.)_\n\n---\n\n**Labels:** `Package-EventBus`\n", "bodyText": "Original comment posted by fry@google.com on 2011-12-10 at 04:24 PM\n\n(No comment entered for this change.)\n\nLabels: Package-EventBus", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c13\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:fry@google.com\">fry@google.com</a></strong> on 2011-12-10 at 04:24 PM</em></p>\n<hr>\n<p><em>(No comment entered for this change.)</em></p>\n<hr>\n<p><strong>Labels:</strong> <code>Package-EventBus</code></p>", "createdAt": "2014-10-31T20:18:39Z", "publishedAt": "2014-10-31T20:18:39Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:18:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1818, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by fry@google.com on 2011-12-10 at 04:24 PM", "sentSegmented": ["original", "comment", "posted", "by", "fry", "google.com", "on", "2011-12-10", "at", "04:24", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "fry", "google.com", "2011-12-10", "04:24", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "fri", "google.com", "2011-12-10", "04:24", "pm"]}, {"number": 1819, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(No comment entered for this change.)", "sentSegmented": ["no", "comment", "entered", "for", "this", "change"], "sentSegmentedWithoutStops": ["comment", "entered", "change"], "sentSegmentedWithoutStopsStemmed": ["comment", "enter", "chang"]}, {"number": 1820, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Labels: Package-EventBus", "sentSegmented": ["labels", "package-eventbus"], "sentSegmentedWithoutStops": ["labels", "package-eventbus"], "sentSegmentedWithoutStopsStemmed": ["label", "package-eventbu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzI4MTg4", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c14) posted by **limpbizkit** on 2012-01-31 at 07:58 PM_\n\n---\n\nOne solution is to create your own subscriber class that takes care of the weak reference:\n\npublic class WeakExample {\n&nbsp;&nbsp;&nbsp;&nbsp;public static class HeavyListener {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void receiveEvent(Object event) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(event);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n```\npublic static class WeakEventDispatcher {\n    private final WeakReference<HeavyListener> ref;\n    private final EventBus eventBus;\n    WeakEventDispatcher(HeavyListener listener, EventBus eventBus) {\n        this.ref = new WeakReference<HeavyListener>(listener);\n        this.eventBus = eventBus;\n    }\n    @Subscribe public void subscribe(Object event) {\n        HeavyListener l = ref.get();\n        if (l == null) {\n            eventBus.unregister(this);\n        } else {\n            l.receiveEvent(event);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    HeavyListener heavyListener = new HeavyListener();\n    EventBus eventBus = new EventBus();\n    eventBus.register(new WeakEventDispatcher(heavyListener, eventBus));\n    eventBus.post(\"hello\");\n}\n```\n\n}\n\nThis is simple and predictable. And if you're willing, it allows you to use a ReferenceQueue to deregister the listener eagerly.\n\n---\n\n**Status:** `Fixed`\n", "bodyText": "Original comment posted by limpbizkit on 2012-01-31 at 07:58 PM\n\nOne solution is to create your own subscriber class that takes care of the weak reference:\npublic class WeakExample {\n\u00a0\u00a0\u00a0\u00a0public static class HeavyListener {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void receiveEvent(Object event) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(event);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\npublic static class WeakEventDispatcher {\n    private final WeakReference<HeavyListener> ref;\n    private final EventBus eventBus;\n    WeakEventDispatcher(HeavyListener listener, EventBus eventBus) {\n        this.ref = new WeakReference<HeavyListener>(listener);\n        this.eventBus = eventBus;\n    }\n    @Subscribe public void subscribe(Object event) {\n        HeavyListener l = ref.get();\n        if (l == null) {\n            eventBus.unregister(this);\n        } else {\n            l.receiveEvent(event);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    HeavyListener heavyListener = new HeavyListener();\n    EventBus eventBus = new EventBus();\n    eventBus.register(new WeakEventDispatcher(heavyListener, eventBus));\n    eventBus.post(\"hello\");\n}\n\n}\nThis is simple and predictable. And if you're willing, it allows you to use a ReferenceQueue to deregister the listener eagerly.\n\nStatus: Fixed", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c14\" rel=\"nofollow\">Original comment</a> posted by <strong>limpbizkit</strong> on 2012-01-31 at 07:58 PM</em></p>\n<hr>\n<p>One solution is to create your own subscriber class that takes care of the weak reference:</p>\n<p>public class WeakExample {<br>\n\u00a0\u00a0\u00a0\u00a0public static class HeavyListener {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void receiveEvent(Object event) {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(event);<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br>\n\u00a0\u00a0\u00a0\u00a0}</p>\n<pre><code>public static class WeakEventDispatcher {\n    private final WeakReference&lt;HeavyListener&gt; ref;\n    private final EventBus eventBus;\n    WeakEventDispatcher(HeavyListener listener, EventBus eventBus) {\n        this.ref = new WeakReference&lt;HeavyListener&gt;(listener);\n        this.eventBus = eventBus;\n    }\n    @Subscribe public void subscribe(Object event) {\n        HeavyListener l = ref.get();\n        if (l == null) {\n            eventBus.unregister(this);\n        } else {\n            l.receiveEvent(event);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    HeavyListener heavyListener = new HeavyListener();\n    EventBus eventBus = new EventBus();\n    eventBus.register(new WeakEventDispatcher(heavyListener, eventBus));\n    eventBus.post(\"hello\");\n}\n</code></pre>\n<p>}</p>\n<p>This is simple and predictable. And if you're willing, it allows you to use a ReferenceQueue to deregister the listener eagerly.</p>\n<hr>\n<p><strong>Status:</strong> <code>Fixed</code></p>", "createdAt": "2014-10-31T20:42:32Z", "publishedAt": "2014-10-31T20:42:32Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:42:32Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1821, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by limpbizkit on 2012-01-31 at 07:58 PM", "sentSegmented": ["original", "comment", "posted", "by", "limpbizkit", "on", "2012-01-31", "at", "07:58", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "limpbizkit", "2012-01-31", "07:58", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "limpbizkit", "2012-01-31", "07:58", "pm"]}, {"number": 1822, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "One solution is to create your own subscriber class that takes care of the weak reference:", "sentSegmented": ["one", "solution", "is", "to", "create", "your", "own", "subscriber", "class", "that", "takes", "care", "of", "the", "weak", "reference"], "sentSegmentedWithoutStops": ["one", "solution", "create", "subscriber", "class", "takes", "care", "weak", "reference"], "sentSegmentedWithoutStopsStemmed": ["one", "solut", "creat", "subscrib", "class", "take", "care", "weak", "refer"]}, {"number": 1823, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public class WeakExample {", "sentSegmented": ["public", "class", "weakexample"], "sentSegmentedWithoutStops": ["public", "class", "weakexample"], "sentSegmentedWithoutStopsStemmed": ["public", "class", "weakexampl"]}, {"number": 1824, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0public static class HeavyListener {", "sentSegmented": ["public", "static", "class", "heavylistener"], "sentSegmentedWithoutStops": ["public", "static", "class", "heavylistener"], "sentSegmentedWithoutStopsStemmed": ["public", "static", "class", "heavylisten"]}, {"number": 1825, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void receiveEvent(Object event) {", "sentSegmented": ["public", "void", "receiveevent", "object", "event"], "sentSegmentedWithoutStops": ["public", "void", "receiveevent", "object", "event"], "sentSegmentedWithoutStopsStemmed": ["public", "void", "receiveev", "object", "event"]}, {"number": 1826, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(event);", "sentSegmented": ["system.out.println", "event"], "sentSegmentedWithoutStops": ["system.out.println", "event"], "sentSegmentedWithoutStopsStemmed": ["system.out.println", "event"]}, {"number": 1827, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1828, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1829, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public static class WeakEventDispatcher {", "sentSegmented": ["public", "static", "class", "weakeventdispatcher"], "sentSegmentedWithoutStops": ["weakeventdispatcher"], "sentSegmentedWithoutStopsStemmed": ["weakeventdispatch"]}, {"number": 1830, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private final WeakReference ref;", "sentSegmented": ["private", "final", "weakreference", "ref"], "sentSegmentedWithoutStops": ["weakreference", "ref"], "sentSegmentedWithoutStopsStemmed": ["weakrefer", "ref"]}, {"number": 1831, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private final EventBus eventBus;", "sentSegmented": ["private", "final", "eventbus", "eventbus"], "sentSegmentedWithoutStops": ["eventbus", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["eventbu", "eventbu"]}, {"number": 1832, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    WeakEventDispatcher(HeavyListener listener, EventBus eventBus) {", "sentSegmented": ["weakeventdispatcher", "heavylistener", "listener", "eventbus", "eventbus"], "sentSegmentedWithoutStops": ["weakeventdispatcher", "heavylistener", "listener", "eventbus", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["weakeventdispatch", "heavylisten", "listen", "eventbu", "eventbu"]}, {"number": 1833, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.ref = new WeakReference(listener);", "sentSegmented": ["this.ref", "new", "weakreference", "listener"], "sentSegmentedWithoutStops": ["this.ref", "weakreference", "listener"], "sentSegmentedWithoutStopsStemmed": ["this.ref", "weakrefer", "listen"]}, {"number": 1834, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.eventBus = eventBus;", "sentSegmented": ["this.eventbus", "eventbus"], "sentSegmentedWithoutStops": ["this.eventbus", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["this.eventbu", "eventbu"]}, {"number": 1835, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1836, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Subscribe public void subscribe(Object event) {", "sentSegmented": ["subscribe", "public", "void", "subscribe", "object", "event"], "sentSegmentedWithoutStops": ["subscribe", "subscribe", "event"], "sentSegmentedWithoutStopsStemmed": ["subscrib", "subscrib", "event"]}, {"number": 1837, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        HeavyListener l = ref.get();", "sentSegmented": ["heavylistener", "l", "ref.get"], "sentSegmentedWithoutStops": ["heavylistener", "l", "ref.get"], "sentSegmentedWithoutStopsStemmed": ["heavylisten", "l", "ref.get"]}, {"number": 1838, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (l == null) {", "sentSegmented": ["if", "l", "null"], "sentSegmentedWithoutStops": ["l"], "sentSegmentedWithoutStopsStemmed": ["l"]}, {"number": 1839, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            eventBus.unregister(this);", "sentSegmented": ["eventbus.unregister", "this"], "sentSegmentedWithoutStops": ["eventbus.unregister"], "sentSegmentedWithoutStopsStemmed": ["eventbus.unregist"]}, {"number": 1840, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        } else {", "sentSegmented": ["else"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1841, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            l.receiveEvent(event);", "sentSegmented": ["l.receiveevent", "event"], "sentSegmentedWithoutStops": ["l.receiveevent", "event"], "sentSegmentedWithoutStopsStemmed": ["l.receiveev", "event"]}, {"number": 1842, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1843, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1844, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1845, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public static void main(String[] args) {", "sentSegmented": ["public", "static", "void", "main", "string", "args"], "sentSegmentedWithoutStops": ["string", "args"], "sentSegmentedWithoutStopsStemmed": ["string", "arg"]}, {"number": 1846, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    HeavyListener heavyListener = new HeavyListener();", "sentSegmented": ["heavylistener", "heavylistener", "new", "heavylistener"], "sentSegmentedWithoutStops": ["heavylistener", "heavylistener", "heavylistener"], "sentSegmentedWithoutStopsStemmed": ["heavylisten", "heavylisten", "heavylisten"]}, {"number": 1847, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    EventBus eventBus = new EventBus();", "sentSegmented": ["eventbus", "eventbus", "new", "eventbus"], "sentSegmentedWithoutStops": ["eventbus", "eventbus", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["eventbu", "eventbu", "eventbu"]}, {"number": 1848, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    eventBus.register(new WeakEventDispatcher(heavyListener, eventBus));", "sentSegmented": ["eventbus.register", "new", "weakeventdispatcher", "heavylistener", "eventbus"], "sentSegmentedWithoutStops": ["eventbus.register", "weakeventdispatcher", "heavylistener", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["eventbus.regist", "weakeventdispatch", "heavylisten", "eventbu"]}, {"number": 1849, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    eventBus.post(\"hello\");", "sentSegmented": ["eventbus.post", "hello"], "sentSegmentedWithoutStops": ["eventbus.post", "hello"], "sentSegmentedWithoutStopsStemmed": ["eventbus.post", "hello"]}, {"number": 1850, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1851, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1852, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is simple and predictable.", "sentSegmented": ["this", "is", "simple", "and", "predictable"], "sentSegmentedWithoutStops": ["simple", "predictable"], "sentSegmentedWithoutStopsStemmed": ["simpl", "predict"]}, {"number": 1853, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And if you're willing, it allows you to use a ReferenceQueue to deregister the listener eagerly.", "sentSegmented": ["and", "if", "you", "'re", "willing", "it", "allows", "you", "to", "use", "a", "referencequeue", "to", "deregister", "the", "listener", "eagerly"], "sentSegmentedWithoutStops": ["'re", "willing", "allows", "use", "referencequeue", "deregister", "listener", "eagerly"], "sentSegmentedWithoutStopsStemmed": ["'re", "will", "allow", "use", "referencequeu", "deregist", "listen", "eagerli"]}, {"number": 1854, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Status: Fixed", "sentSegmented": ["status", "fixed"], "sentSegmentedWithoutStops": ["status", "fixed"], "sentSegmentedWithoutStopsStemmed": ["statu", "fix"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzI4MTk2", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c15) posted by **goo...@sa.me.uk** on 2012-01-31 at 08:04 PM_\n\n---\n\nI don't see how this fixes the issue because you're assuming that I want to subscribe to Object and not arbitrary event types (for which I'd need a separate dispatcher).\n", "bodyText": "Original comment posted by goo...@sa.me.uk on 2012-01-31 at 08:04 PM\n\nI don't see how this fixes the issue because you're assuming that I want to subscribe to Object and not arbitrary event types (for which I'd need a separate dispatcher).", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c15\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:goo...@sa.me.uk\">goo...@sa.me.uk</a></strong> on 2012-01-31 at 08:04 PM</em></p>\n<hr>\n<p>I don't see how this fixes the issue because you're assuming that I want to subscribe to Object and not arbitrary event types (for which I'd need a separate dispatcher).</p>", "createdAt": "2014-10-31T20:42:34Z", "publishedAt": "2014-10-31T20:42:34Z", "lastEditedAt": "2017-01-26T19:41:34Z", "updatedAt": "2017-01-26T19:41:34Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1855, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by goo...@sa.me.uk on 2012-01-31 at 08:04 PM", "sentSegmented": ["original", "comment", "posted", "by", "goo", "sa.me.uk", "on", "2012-01-31", "at", "08:04", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "goo", "sa.me.uk", "2012-01-31", "08:04", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "goo", "sa.me.uk", "2012-01-31", "08:04", "pm"]}, {"number": 1856, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I don't see how this fixes the issue because you're assuming that I want to subscribe to Object and not arbitrary event types (for which I'd need a separate dispatcher).", "sentSegmented": ["i", "do", "n't", "see", "how", "this", "fixes", "the", "issue", "because", "you", "'re", "assuming", "that", "i", "want", "to", "subscribe", "to", "object", "and", "not", "arbitrary", "event", "types", "for", "which", "i", "'d", "need", "a", "separate", "dispatcher"], "sentSegmentedWithoutStops": ["n't", "see", "fixes", "issue", "'re", "assuming", "want", "subscribe", "object", "arbitrary", "event", "types", "'d", "need", "separate", "dispatcher"], "sentSegmentedWithoutStopsStemmed": ["n't", "see", "fix", "issu", "'re", "assum", "want", "subscrib", "object", "arbitrari", "event", "type", "'d", "need", "separ", "dispatch"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzI4MjE2", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c16) posted by **kevinb@google.com** on 2012-02-01 at 06:29 AM_\n\n---\n\nI actually agree it was a misfire to mark it \"fixed\", Jesse.\n\nI really want to know if this is something that a _lot_ of users would find themselves wanting to do, and am still receptive to adding something like an EventBus.weakRegister() if so.\n\n---\n\n**Status:** `Triaged`\n", "bodyText": "Original comment posted by kevinb@google.com on 2012-02-01 at 06:29 AM\n\nI actually agree it was a misfire to mark it \"fixed\", Jesse.\nI really want to know if this is something that a lot of users would find themselves wanting to do, and am still receptive to adding something like an EventBus.weakRegister() if so.\n\nStatus: Triaged", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c16\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:kevinb@google.com\">kevinb@google.com</a></strong> on 2012-02-01 at 06:29 AM</em></p>\n<hr>\n<p>I actually agree it was a misfire to mark it \"fixed\", Jesse.</p>\n<p>I really want to know if this is something that a <em>lot</em> of users would find themselves wanting to do, and am still receptive to adding something like an EventBus.weakRegister() if so.</p>\n<hr>\n<p><strong>Status:</strong> <code>Triaged</code></p>", "createdAt": "2014-10-31T20:42:45Z", "publishedAt": "2014-10-31T20:42:45Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:42:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1857, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by kevinb@google.com on 2012-02-01 at 06:29 AM", "sentSegmented": ["original", "comment", "posted", "by", "kevinb", "google.com", "on", "2012-02-01", "at", "06:29", "am"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "kevinb", "google.com", "2012-02-01", "06:29"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "kevinb", "google.com", "2012-02-01", "06:29"]}, {"number": 1858, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I actually agree it was a misfire to mark it \"fixed\", Jesse.", "sentSegmented": ["i", "actually", "agree", "it", "was", "a", "misfire", "to", "mark", "it", "fixed", "jesse"], "sentSegmentedWithoutStops": ["actually", "agree", "misfire", "mark", "fixed", "jesse"], "sentSegmentedWithoutStopsStemmed": ["actual", "agre", "misfir", "mark", "fix", "jess"]}, {"number": 1859, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I really want to know if this is something that a lot of users would find themselves wanting to do, and am still receptive to adding something like an EventBus.weakRegister() if so.", "sentSegmented": ["i", "really", "want", "to", "know", "if", "this", "is", "something", "that", "a", "lot", "of", "users", "would", "find", "themselves", "wanting", "to", "do", "and", "am", "still", "receptive", "to", "adding", "something", "like", "an", "eventbus.weakregister", "if", "so"], "sentSegmentedWithoutStops": ["really", "want", "know", "something", "lot", "users", "would", "find", "wanting", "still", "receptive", "adding", "something", "like", "eventbus.weakregister"], "sentSegmentedWithoutStopsStemmed": ["realli", "want", "know", "someth", "lot", "user", "would", "find", "want", "still", "recept", "ad", "someth", "like", "eventbus.weakregist"]}, {"number": 1860, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Status: Triaged", "sentSegmented": ["status", "triaged"], "sentSegmentedWithoutStops": ["status", "triaged"], "sentSegmentedWithoutStopsStemmed": ["statu", "triag"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzI4NTg5", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c17) posted by **b.diedrichsen** on 2012-02-09 at 01:06 PM_\n\n---\n\nI have been working on an implementation of a similar mechanism before I stumbled upon the guava one. Basically it does the same thing but uses weak references to the registered objects. The motivation behind it was that in a spring environment I wanted to use bean post processor to register the listening beans. Since a bean might have a different scope and might be short living I don't want to end up having all the objects prevented from being garbage collected. And I do not want to leave the burden of unregistering objects to other developers. I like the idea of the contract: Add the listener and as long as it exists it will receive events. If the listening objects dies then it will be removed from bus. It seems that this is kindof easy to handle from a user perspective (but a little tricky to implement, especially in concurrent environment).\n", "bodyText": "Original comment posted by b.diedrichsen on 2012-02-09 at 01:06 PM\n\nI have been working on an implementation of a similar mechanism before I stumbled upon the guava one. Basically it does the same thing but uses weak references to the registered objects. The motivation behind it was that in a spring environment I wanted to use bean post processor to register the listening beans. Since a bean might have a different scope and might be short living I don't want to end up having all the objects prevented from being garbage collected. And I do not want to leave the burden of unregistering objects to other developers. I like the idea of the contract: Add the listener and as long as it exists it will receive events. If the listening objects dies then it will be removed from bus. It seems that this is kindof easy to handle from a user perspective (but a little tricky to implement, especially in concurrent environment).", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c17\" rel=\"nofollow\">Original comment</a> posted by <strong>b.diedrichsen</strong> on 2012-02-09 at 01:06 PM</em></p>\n<hr>\n<p>I have been working on an implementation of a similar mechanism before I stumbled upon the guava one. Basically it does the same thing but uses weak references to the registered objects. The motivation behind it was that in a spring environment I wanted to use bean post processor to register the listening beans. Since a bean might have a different scope and might be short living I don't want to end up having all the objects prevented from being garbage collected. And I do not want to leave the burden of unregistering objects to other developers. I like the idea of the contract: Add the listener and as long as it exists it will receive events. If the listening objects dies then it will be removed from bus. It seems that this is kindof easy to handle from a user perspective (but a little tricky to implement, especially in concurrent environment).</p>", "createdAt": "2014-10-31T20:45:28Z", "publishedAt": "2014-10-31T20:45:28Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:45:28Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1861, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by b.diedrichsen on 2012-02-09 at 01:06 PM", "sentSegmented": ["original", "comment", "posted", "by", "b.diedrichsen", "on", "2012-02-09", "at", "01:06", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "b.diedrichsen", "2012-02-09", "01:06", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "b.diedrichsen", "2012-02-09", "01:06", "pm"]}, {"number": 1862, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I have been working on an implementation of a similar mechanism before I stumbled upon the guava one.", "sentSegmented": ["i", "have", "been", "working", "on", "an", "implementation", "of", "a", "similar", "mechanism", "before", "i", "stumbled", "upon", "the", "guava", "one"], "sentSegmentedWithoutStops": ["working", "implementation", "similar", "mechanism", "stumbled", "upon", "guava", "one"], "sentSegmentedWithoutStopsStemmed": ["work", "implement", "similar", "mechan", "stumbl", "upon", "guava", "one"]}, {"number": 1863, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Basically it does the same thing but uses weak references to the registered objects.", "sentSegmented": ["basically", "it", "does", "the", "same", "thing", "but", "uses", "weak", "references", "to", "the", "registered", "objects"], "sentSegmentedWithoutStops": ["basically", "thing", "uses", "weak", "references", "registered", "objects"], "sentSegmentedWithoutStopsStemmed": ["basic", "thing", "use", "weak", "refer", "regist", "object"]}, {"number": 1864, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The motivation behind it was that in a spring environment I wanted to use bean post processor to register the listening beans.", "sentSegmented": ["the", "motivation", "behind", "it", "was", "that", "in", "a", "spring", "environment", "i", "wanted", "to", "use", "bean", "post", "processor", "to", "register", "the", "listening", "beans"], "sentSegmentedWithoutStops": ["motivation", "behind", "spring", "environment", "wanted", "use", "bean", "post", "processor", "register", "listening", "beans"], "sentSegmentedWithoutStopsStemmed": ["motiv", "behind", "spring", "environ", "want", "use", "bean", "post", "processor", "regist", "listen", "bean"]}, {"number": 1865, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Since a bean might have a different scope and might be short living I don't want to end up having all the objects prevented from being garbage collected.", "sentSegmented": ["since", "a", "bean", "might", "have", "a", "different", "scope", "and", "might", "be", "short", "living", "i", "do", "n't", "want", "to", "end", "up", "having", "all", "the", "objects", "prevented", "from", "being", "garbage", "collected"], "sentSegmentedWithoutStops": ["since", "bean", "might", "different", "scope", "might", "short", "living", "n't", "want", "end", "objects", "prevented", "garbage", "collected"], "sentSegmentedWithoutStopsStemmed": ["sinc", "bean", "might", "differ", "scope", "might", "short", "live", "n't", "want", "end", "object", "prevent", "garbag", "collect"]}, {"number": 1866, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And I do not want to leave the burden of unregistering objects to other developers.", "sentSegmented": ["and", "i", "do", "not", "want", "to", "leave", "the", "burden", "of", "unregistering", "objects", "to", "other", "developers"], "sentSegmentedWithoutStops": ["want", "leave", "burden", "unregistering", "objects", "developers"], "sentSegmentedWithoutStopsStemmed": ["want", "leav", "burden", "unregist", "object", "develop"]}, {"number": 1867, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I like the idea of the contract: Add the listener and as long as it exists it will receive events.", "sentSegmented": ["i", "like", "the", "idea", "of", "the", "contract", "add", "the", "listener", "and", "as", "long", "as", "it", "exists", "it", "will", "receive", "events"], "sentSegmentedWithoutStops": ["like", "idea", "contract", "add", "listener", "long", "exists", "receive", "events"], "sentSegmentedWithoutStopsStemmed": ["like", "idea", "contract", "add", "listen", "long", "exist", "receiv", "event"]}, {"number": 1868, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If the listening objects dies then it will be removed from bus.", "sentSegmented": ["if", "the", "listening", "objects", "dies", "then", "it", "will", "be", "removed", "from", "bus"], "sentSegmentedWithoutStops": ["listening", "objects", "dies", "removed", "bus"], "sentSegmentedWithoutStopsStemmed": ["listen", "object", "die", "remov", "bu"]}, {"number": 1869, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It seems that this is kindof easy to handle from a user perspective (but a little tricky to implement, especially in concurrent environment).", "sentSegmented": ["it", "seems", "that", "this", "is", "kindof", "easy", "to", "handle", "from", "a", "user", "perspective", "but", "a", "little", "tricky", "to", "implement", "especially", "in", "concurrent", "environment"], "sentSegmentedWithoutStops": ["seems", "kindof", "easy", "handle", "user", "perspective", "little", "tricky", "implement", "especially", "concurrent", "environment"], "sentSegmentedWithoutStopsStemmed": ["seem", "kindof", "easi", "handl", "user", "perspect", "littl", "tricki", "implement", "especi", "concurr", "environ"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzI5NTUx", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c18) posted by **fry@google.com** on 2012-02-16 at 07:17 PM_\n\n---\n\n_(No comment entered for this change.)_\n\n---\n\n**Status:** `Acknowledged`\n", "bodyText": "Original comment posted by fry@google.com on 2012-02-16 at 07:17 PM\n\n(No comment entered for this change.)\n\nStatus: Acknowledged", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c18\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:fry@google.com\">fry@google.com</a></strong> on 2012-02-16 at 07:17 PM</em></p>\n<hr>\n<p><em>(No comment entered for this change.)</em></p>\n<hr>\n<p><strong>Status:</strong> <code>Acknowledged</code></p>", "createdAt": "2014-10-31T20:51:49Z", "publishedAt": "2014-10-31T20:51:49Z", "lastEditedAt": null, "updatedAt": "2014-10-31T20:51:49Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1870, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by fry@google.com on 2012-02-16 at 07:17 PM", "sentSegmented": ["original", "comment", "posted", "by", "fry", "google.com", "on", "2012-02-16", "at", "07:17", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "fry", "google.com", "2012-02-16", "07:17", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "fri", "google.com", "2012-02-16", "07:17", "pm"]}, {"number": 1871, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(No comment entered for this change.)", "sentSegmented": ["no", "comment", "entered", "for", "this", "change"], "sentSegmentedWithoutStops": ["comment", "entered", "change"], "sentSegmentedWithoutStopsStemmed": ["comment", "enter", "chang"]}, {"number": 1872, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Status: Acknowledged", "sentSegmented": ["status", "acknowledged"], "sentSegmentedWithoutStops": ["status", "acknowledged"], "sentSegmentedWithoutStopsStemmed": ["statu", "acknowledg"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzQzMjYy", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c19) posted by **jborden** on 2012-04-04 at 07:00 PM_\n\n---\n\nThe issue I'm facing is a case I have an instance of a Cache that is Session Scoped using Guice that needs to handle events fired by a Singleton Scoped mechanism.\n\nIt seems that Guice does not provide a mechanism through which I can handle the event of the Session Scoped instance becoming unbound ( http://code.google.com/p/google-guice/issues/detail?id=62 ).  Consequentially, I cannot explicitly unregister my Session Scoped listener from the event bus.\n\nIt seems that I should be able to get by using the workaround presented in Comment 14 but it seems that adding something like an EventBus.weakRegister(...) method would be ideal for this scenario. \n", "bodyText": "Original comment posted by jborden on 2012-04-04 at 07:00 PM\n\nThe issue I'm facing is a case I have an instance of a Cache that is Session Scoped using Guice that needs to handle events fired by a Singleton Scoped mechanism.\nIt seems that Guice does not provide a mechanism through which I can handle the event of the Session Scoped instance becoming unbound ( http://code.google.com/p/google-guice/issues/detail?id=62 ).  Consequentially, I cannot explicitly unregister my Session Scoped listener from the event bus.\nIt seems that I should be able to get by using the workaround presented in Comment 14 but it seems that adding something like an EventBus.weakRegister(...) method would be ideal for this scenario.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c19\" rel=\"nofollow\">Original comment</a> posted by <strong>jborden</strong> on 2012-04-04 at 07:00 PM</em></p>\n<hr>\n<p>The issue I'm facing is a case I have an instance of a Cache that is Session Scoped using Guice that needs to handle events fired by a Singleton Scoped mechanism.</p>\n<p>It seems that Guice does not provide a mechanism through which I can handle the event of the Session Scoped instance becoming unbound ( <a rel=\"nofollow\" href=\"http://code.google.com/p/google-guice/issues/detail?id=62\">http://code.google.com/p/google-guice/issues/detail?id=62</a> ).  Consequentially, I cannot explicitly unregister my Session Scoped listener from the event bus.</p>\n<p>It seems that I should be able to get by using the workaround presented in Comment 14 but it seems that adding something like an EventBus.weakRegister(...) method would be ideal for this scenario.</p>", "createdAt": "2014-10-31T23:16:02Z", "publishedAt": "2014-10-31T23:16:02Z", "lastEditedAt": null, "updatedAt": "2014-10-31T23:16:02Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1873, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by jborden on 2012-04-04 at 07:00 PM", "sentSegmented": ["original", "comment", "posted", "by", "jborden", "on", "2012-04-04", "at", "07:00", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "jborden", "2012-04-04", "07:00", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "jborden", "2012-04-04", "07:00", "pm"]}, {"number": 1874, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The issue I'm facing is a case I have an instance of a Cache that is Session Scoped using Guice that needs to handle events fired by a Singleton Scoped mechanism.", "sentSegmented": ["the", "issue", "i", "'m", "facing", "is", "a", "case", "i", "have", "an", "instance", "of", "a", "cache", "that", "is", "session", "scoped", "using", "guice", "that", "needs", "to", "handle", "events", "fired", "by", "a", "singleton", "scoped", "mechanism"], "sentSegmentedWithoutStops": ["issue", "'m", "facing", "case", "instance", "cache", "session", "scoped", "using", "guice", "needs", "handle", "events", "fired", "singleton", "scoped", "mechanism"], "sentSegmentedWithoutStopsStemmed": ["issu", "'m", "face", "case", "instanc", "cach", "session", "scope", "use", "guic", "need", "handl", "event", "fire", "singleton", "scope", "mechan"]}, {"number": 1875, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It seems that Guice does not provide a mechanism through which I can handle the event of the Session Scoped instance becoming unbound ( http://code.google.com/p/google-guice/issues/detail?id=62 ).", "sentSegmented": ["it", "seems", "that", "guice", "does", "not", "provide", "a", "mechanism", "through", "which", "i", "can", "handle", "the", "event", "of", "the", "session", "scoped", "instance", "becoming", "unbound", "http", "//code.google.com/p/google-guice/issues/detail", "id=62"], "sentSegmentedWithoutStops": ["seems", "guice", "provide", "mechanism", "handle", "event", "session", "scoped", "instance", "becoming", "unbound", "http", "//code.google.com/p/google-guice/issues/detail", "id=62"], "sentSegmentedWithoutStopsStemmed": ["seem", "guic", "provid", "mechan", "handl", "event", "session", "scope", "instanc", "becom", "unbound", "http", "//code.google.com/p/google-guice/issues/detail", "id=62"]}, {"number": 1876, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Consequentially, I cannot explicitly unregister my Session Scoped listener from the event bus.", "sentSegmented": ["consequentially", "i", "can", "not", "explicitly", "unregister", "my", "session", "scoped", "listener", "from", "the", "event", "bus"], "sentSegmentedWithoutStops": ["consequentially", "explicitly", "unregister", "session", "scoped", "listener", "event", "bus"], "sentSegmentedWithoutStopsStemmed": ["consequenti", "explicitli", "unregist", "session", "scope", "listen", "event", "bu"]}, {"number": 1877, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It seems that I should be able to get by using the workaround presented in Comment 14 but it seems that adding something like an EventBus.weakRegister(...) method would be ideal for this scenario.", "sentSegmented": ["it", "seems", "that", "i", "should", "be", "able", "to", "get", "by", "using", "the", "workaround", "presented", "in", "comment", "14", "but", "it", "seems", "that", "adding", "something", "like", "an", "eventbus.weakregister", "method", "would", "be", "ideal", "for", "this", "scenario"], "sentSegmentedWithoutStops": ["seems", "able", "get", "using", "workaround", "presented", "comment", "14", "seems", "adding", "something", "like", "eventbus.weakregister", "method", "would", "ideal", "scenario"], "sentSegmentedWithoutStopsStemmed": ["seem", "abl", "get", "use", "workaround", "present", "comment", "14", "seem", "ad", "someth", "like", "eventbus.weakregist", "method", "would", "ideal", "scenario"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzQ1MDM1", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c20) posted by **kevinb@google.com** on 2012-05-30 at 07:43 PM_\n\n---\n\n_(No comment entered for this change.)_\n\n---\n\n**Labels:** -`Type-Enhancement`, `Type-Addition`\n", "bodyText": "Original comment posted by kevinb@google.com on 2012-05-30 at 07:43 PM\n\n(No comment entered for this change.)\n\nLabels: -Type-Enhancement, Type-Addition", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c20\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:kevinb@google.com\">kevinb@google.com</a></strong> on 2012-05-30 at 07:43 PM</em></p>\n<hr>\n<p><em>(No comment entered for this change.)</em></p>\n<hr>\n<p><strong>Labels:</strong> -<code>Type-Enhancement</code>, <code>Type-Addition</code></p>", "createdAt": "2014-10-31T23:36:59Z", "publishedAt": "2014-10-31T23:36:59Z", "lastEditedAt": null, "updatedAt": "2014-10-31T23:36:59Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1878, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by kevinb@google.com on 2012-05-30 at 07:43 PM", "sentSegmented": ["original", "comment", "posted", "by", "kevinb", "google.com", "on", "2012-05-30", "at", "07:43", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "kevinb", "google.com", "2012-05-30", "07:43", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "kevinb", "google.com", "2012-05-30", "07:43", "pm"]}, {"number": 1879, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(No comment entered for this change.)", "sentSegmented": ["no", "comment", "entered", "for", "this", "change"], "sentSegmentedWithoutStops": ["comment", "entered", "change"], "sentSegmentedWithoutStopsStemmed": ["comment", "enter", "chang"]}, {"number": 1880, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Labels: -Type-Enhancement, Type-Addition", "sentSegmented": ["labels", "-type-enhancement", "type-addition"], "sentSegmentedWithoutStops": ["labels", "-type-enhancement", "type-addition"], "sentSegmentedWithoutStopsStemmed": ["label", "-type-enhanc", "type-addit"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzQ2OTI2", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c21) posted by **kevinb@google.com** on 2012-06-22 at 06:16 PM_\n\n---\n\n_(No comment entered for this change.)_\n\n---\n\n**Status:** `Research`\n", "bodyText": "Original comment posted by kevinb@google.com on 2012-06-22 at 06:16 PM\n\n(No comment entered for this change.)\n\nStatus: Research", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c21\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:kevinb@google.com\">kevinb@google.com</a></strong> on 2012-06-22 at 06:16 PM</em></p>\n<hr>\n<p><em>(No comment entered for this change.)</em></p>\n<hr>\n<p><strong>Status:</strong> <code>Research</code></p>", "createdAt": "2014-11-01T00:05:09Z", "publishedAt": "2014-11-01T00:05:09Z", "lastEditedAt": null, "updatedAt": "2014-11-01T00:05:09Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1881, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by kevinb@google.com on 2012-06-22 at 06:16 PM", "sentSegmented": ["original", "comment", "posted", "by", "kevinb", "google.com", "on", "2012-06-22", "at", "06:16", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "kevinb", "google.com", "2012-06-22", "06:16", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "kevinb", "google.com", "2012-06-22", "06:16", "pm"]}, {"number": 1882, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(No comment entered for this change.)", "sentSegmented": ["no", "comment", "entered", "for", "this", "change"], "sentSegmentedWithoutStops": ["comment", "entered", "change"], "sentSegmentedWithoutStopsStemmed": ["comment", "enter", "chang"]}, {"number": 1883, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Status: Research", "sentSegmented": ["status", "research"], "sentSegmentedWithoutStops": ["status", "research"], "sentSegmentedWithoutStopsStemmed": ["statu", "research"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzQ3ODg5", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c22) posted by **tadas.subonis** on 2012-07-22 at 10:05 AM_\n\n---\n\nIs any work is being done for this feature?\n", "bodyText": "Original comment posted by tadas.subonis on 2012-07-22 at 10:05 AM\n\nIs any work is being done for this feature?", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c22\" rel=\"nofollow\">Original comment</a> posted by <strong>tadas.subonis</strong> on 2012-07-22 at 10:05 AM</em></p>\n<hr>\n<p>Is any work is being done for this feature?</p>", "createdAt": "2014-11-01T00:17:45Z", "publishedAt": "2014-11-01T00:17:45Z", "lastEditedAt": null, "updatedAt": "2014-11-01T00:17:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1884, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by tadas.subonis on 2012-07-22 at 10:05 AM", "sentSegmented": ["original", "comment", "posted", "by", "tadas.subonis", "on", "2012-07-22", "at", "10:05", "am"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "tadas.subonis", "2012-07-22", "10:05"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "tadas.suboni", "2012-07-22", "10:05"]}, {"number": 1885, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is any work is being done for this feature?", "sentSegmented": ["is", "any", "work", "is", "being", "done", "for", "this", "feature"], "sentSegmentedWithoutStops": ["work", "done", "feature"], "sentSegmentedWithoutStopsStemmed": ["work", "done", "featur"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzQ5NTA4", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c23) posted by **b.diedrichsen** on 2012-10-23 at 08:50 AM_\n\n---\n\nIt has been a while since nothing happened here regarding that feature. Since I was in desperate need for a solution that uses weak references I created my own. We have been using it in production for half a year now and it works perfectly. It is well documented and works very similar to guavas event bus (although its a bit faster).\n\nYou can check it out here: https://github.com/bennidi/mbassador\n\nSorry, for that \"cross marketing\" here but I see that other people have the same needs as I do and are thus not able to use the guava version of event bus. Besides, I love the guava library and have been using it in production for a while now.\n", "bodyText": "Original comment posted by b.diedrichsen on 2012-10-23 at 08:50 AM\n\nIt has been a while since nothing happened here regarding that feature. Since I was in desperate need for a solution that uses weak references I created my own. We have been using it in production for half a year now and it works perfectly. It is well documented and works very similar to guavas event bus (although its a bit faster).\nYou can check it out here: https://github.com/bennidi/mbassador\nSorry, for that \"cross marketing\" here but I see that other people have the same needs as I do and are thus not able to use the guava version of event bus. Besides, I love the guava library and have been using it in production for a while now.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c23\" rel=\"nofollow\">Original comment</a> posted by <strong>b.diedrichsen</strong> on 2012-10-23 at 08:50 AM</em></p>\n<hr>\n<p>It has been a while since nothing happened here regarding that feature. Since I was in desperate need for a solution that uses weak references I created my own. We have been using it in production for half a year now and it works perfectly. It is well documented and works very similar to guavas event bus (although its a bit faster).</p>\n<p>You can check it out here: <a href=\"https://github.com/bennidi/mbassador\">https://github.com/bennidi/mbassador</a></p>\n<p>Sorry, for that \"cross marketing\" here but I see that other people have the same needs as I do and are thus not able to use the guava version of event bus. Besides, I love the guava library and have been using it in production for a while now.</p>", "createdAt": "2014-11-01T00:41:32Z", "publishedAt": "2014-11-01T00:41:32Z", "lastEditedAt": null, "updatedAt": "2014-11-01T00:41:32Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-01-12T11:55:15Z"}}]}, "bodyParsed": [{"number": 1886, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by b.diedrichsen on 2012-10-23 at 08:50 AM", "sentSegmented": ["original", "comment", "posted", "by", "b.diedrichsen", "on", "2012-10-23", "at", "08:50", "am"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "b.diedrichsen", "2012-10-23", "08:50"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "b.diedrichsen", "2012-10-23", "08:50"]}, {"number": 1887, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It has been a while since nothing happened here regarding that feature.", "sentSegmented": ["it", "has", "been", "a", "while", "since", "nothing", "happened", "here", "regarding", "that", "feature"], "sentSegmentedWithoutStops": ["since", "nothing", "happened", "regarding", "feature"], "sentSegmentedWithoutStopsStemmed": ["sinc", "noth", "happen", "regard", "featur"]}, {"number": 1888, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Since I was in desperate need for a solution that uses weak references I created my own.", "sentSegmented": ["since", "i", "was", "in", "desperate", "need", "for", "a", "solution", "that", "uses", "weak", "references", "i", "created", "my", "own"], "sentSegmentedWithoutStops": ["since", "desperate", "need", "solution", "uses", "weak", "references", "created"], "sentSegmentedWithoutStopsStemmed": ["sinc", "desper", "need", "solut", "use", "weak", "refer", "creat"]}, {"number": 1889, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We have been using it in production for half a year now and it works perfectly.", "sentSegmented": ["we", "have", "been", "using", "it", "in", "production", "for", "half", "a", "year", "now", "and", "it", "works", "perfectly"], "sentSegmentedWithoutStops": ["using", "production", "half", "year", "works", "perfectly"], "sentSegmentedWithoutStopsStemmed": ["use", "product", "half", "year", "work", "perfectli"]}, {"number": 1890, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It is well documented and works very similar to guavas event bus (although its a bit faster).", "sentSegmented": ["it", "is", "well", "documented", "and", "works", "very", "similar", "to", "guavas", "event", "bus", "although", "its", "a", "bit", "faster"], "sentSegmentedWithoutStops": ["well", "documented", "works", "similar", "guavas", "event", "bus", "although", "bit", "faster"], "sentSegmentedWithoutStopsStemmed": ["well", "document", "work", "similar", "guava", "event", "bu", "although", "bit", "faster"]}, {"number": 1891, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You can check it out here: https://github.com/bennidi/mbassador", "sentSegmented": ["you", "can", "check", "it", "out", "here", "https", "//github.com/bennidi/mbassador"], "sentSegmentedWithoutStops": ["check", "https", "//github.com/bennidi/mbassador"], "sentSegmentedWithoutStopsStemmed": ["check", "http", "//github.com/bennidi/mbassador"]}, {"number": 1892, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Sorry, for that \"cross marketing\" here but I see that other people have the same needs as I do and are thus not able to use the guava version of event bus.", "sentSegmented": ["sorry", "for", "that", "cross", "marketing", "here", "but", "i", "see", "that", "other", "people", "have", "the", "same", "needs", "as", "i", "do", "and", "are", "thus", "not", "able", "to", "use", "the", "guava", "version", "of", "event", "bus"], "sentSegmentedWithoutStops": ["sorry", "cross", "marketing", "see", "people", "needs", "thus", "able", "use", "guava", "version", "event", "bus"], "sentSegmentedWithoutStopsStemmed": ["sorri", "cross", "market", "see", "peopl", "need", "thu", "abl", "use", "guava", "version", "event", "bu"]}, {"number": 1893, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Besides, I love the guava library and have been using it in production for a while now.", "sentSegmented": ["besides", "i", "love", "the", "guava", "library", "and", "have", "been", "using", "it", "in", "production", "for", "a", "while", "now"], "sentSegmentedWithoutStops": ["besides", "love", "guava", "library", "using", "production"], "sentSegmentedWithoutStopsStemmed": ["besid", "love", "guava", "librari", "use", "product"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzUwMDgz", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c24) posted by **vojtek44** on 2012-12-10 at 04:07 PM_\n\n---\n\nWell, I find myself to need this feature too - I register new beans from Spring IoC automatically in event bus and it would be great if EventBus would not consider them when they are out of their scope. In my case the solution from #\ufeff14 is good enough, however a weakRegister() method would be much better.\n", "bodyText": "Original comment posted by vojtek44 on 2012-12-10 at 04:07 PM\n\nWell, I find myself to need this feature too - I register new beans from Spring IoC automatically in event bus and it would be great if EventBus would not consider them when they are out of their scope. In my case the solution from #\ufeff14 is good enough, however a weakRegister() method would be much better.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c24\" rel=\"nofollow\">Original comment</a> posted by <strong>vojtek44</strong> on 2012-12-10 at 04:07 PM</em></p>\n<hr>\n<p>Well, I find myself to need this feature too - I register new beans from Spring IoC automatically in event bus and it would be great if EventBus would not consider them when they are out of their scope. In my case the solution from #\ufeff14 is good enough, however a weakRegister() method would be much better.</p>", "createdAt": "2014-11-01T00:50:45Z", "publishedAt": "2014-11-01T00:50:45Z", "lastEditedAt": null, "updatedAt": "2014-11-01T00:50:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1894, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by vojtek44 on 2012-12-10 at 04:07 PM", "sentSegmented": ["original", "comment", "posted", "by", "vojtek44", "on", "2012-12-10", "at", "04:07", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "vojtek44", "2012-12-10", "04:07", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "vojtek44", "2012-12-10", "04:07", "pm"]}, {"number": 1895, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Well, I find myself to need this feature too - I register new beans from Spring IoC automatically in event bus and it would be great if EventBus would not consider them when they are out of their scope.", "sentSegmented": ["well", "i", "find", "myself", "to", "need", "this", "feature", "too", "i", "register", "new", "beans", "from", "spring", "ioc", "automatically", "in", "event", "bus", "and", "it", "would", "be", "great", "if", "eventbus", "would", "not", "consider", "them", "when", "they", "are", "out", "of", "their", "scope"], "sentSegmentedWithoutStops": ["well", "find", "need", "feature", "register", "new", "beans", "spring", "ioc", "automatically", "event", "bus", "would", "great", "eventbus", "would", "consider", "scope"], "sentSegmentedWithoutStopsStemmed": ["well", "find", "need", "featur", "regist", "new", "bean", "spring", "ioc", "automat", "event", "bu", "would", "great", "eventbu", "would", "consid", "scope"]}, {"number": 1896, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "In my case the solution from #\ufeff14 is good enough, however a weakRegister() method would be much better.", "sentSegmented": ["in", "my", "case", "the", "solution", "from", "\ufeff14", "is", "good", "enough", "however", "a", "weakregister", "method", "would", "be", "much", "better"], "sentSegmentedWithoutStops": ["case", "solution", "\ufeff14", "good", "enough", "however", "weakregister", "method", "would", "much", "better"], "sentSegmentedWithoutStopsStemmed": ["case", "solut", "\ufeff14", "good", "enough", "howev", "weakregist", "method", "would", "much", "better"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzUxMTc3", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c25) posted by **r...@bogocorp.com** on 2013-03-02 at 12:05 AM_\n\n---\n\nThe solution in #\ufeff14 is interesting, but to truly be awesome the WeakEventDispatcher class would take a plain Object as the heavy listener, inspect it for @\ufeffSubscribe methods and dispatch events as appropriate. And yes, a ReferenceQueue for quicker cleanup would be nice.\n\nBut, having the WeakEventDispatcher @\ufeffSubscribe to Object events and then potentially ignore them means that DeadEvents won't work.\n\nThat, I think, can only be solved by building weak subscriptions directly into EventBus.\n", "bodyText": "Original comment posted by r...@bogocorp.com on 2013-03-02 at 12:05 AM\n\nThe solution in #\ufeff14 is interesting, but to truly be awesome the WeakEventDispatcher class would take a plain Object as the heavy listener, inspect it for @\ufeffSubscribe methods and dispatch events as appropriate. And yes, a ReferenceQueue for quicker cleanup would be nice.\nBut, having the WeakEventDispatcher @\ufeffSubscribe to Object events and then potentially ignore them means that DeadEvents won't work.\nThat, I think, can only be solved by building weak subscriptions directly into EventBus.", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c25\" rel=\"nofollow\">Original comment</a> posted by <strong><a href=\"mailto:r...@bogocorp.com\">r...@bogocorp.com</a></strong> on 2013-03-02 at 12:05 AM</em></p>\n<hr>\n<p>The solution in #\ufeff14 is interesting, but to truly be awesome the WeakEventDispatcher class would take a plain Object as the heavy listener, inspect it for @\ufeffSubscribe methods and dispatch events as appropriate. And yes, a ReferenceQueue for quicker cleanup would be nice.</p>\n<p>But, having the WeakEventDispatcher @\ufeffSubscribe to Object events and then potentially ignore them means that DeadEvents won't work.</p>\n<p>That, I think, can only be solved by building weak subscriptions directly into EventBus.</p>", "createdAt": "2014-11-01T01:08:20Z", "publishedAt": "2014-11-01T01:08:20Z", "lastEditedAt": "2017-01-26T19:41:34Z", "updatedAt": "2017-01-26T19:41:34Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1897, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by r...@bogocorp.com on 2013-03-02 at 12:05 AM", "sentSegmented": ["original", "comment", "posted", "by", "r", "bogocorp.com", "on", "2013-03-02", "at", "12:05", "am"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "r", "bogocorp.com", "2013-03-02", "12:05"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "r", "bogocorp.com", "2013-03-02", "12:05"]}, {"number": 1898, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The solution in #\ufeff14 is interesting, but to truly be awesome the WeakEventDispatcher class would take a plain Object as the heavy listener, inspect it for @\ufeffSubscribe methods and dispatch events as appropriate.", "sentSegmented": ["the", "solution", "in", "\ufeff14", "is", "interesting", "but", "to", "truly", "be", "awesome", "the", "weakeventdispatcher", "class", "would", "take", "a", "plain", "object", "as", "the", "heavy", "listener", "inspect", "it", "for", "\ufeffsubscribe", "methods", "and", "dispatch", "events", "as", "appropriate"], "sentSegmentedWithoutStops": ["solution", "\ufeff14", "interesting", "truly", "awesome", "weakeventdispatcher", "class", "would", "take", "plain", "object", "heavy", "listener", "inspect", "\ufeffsubscribe", "methods", "dispatch", "events", "appropriate"], "sentSegmentedWithoutStopsStemmed": ["solut", "\ufeff14", "interest", "truli", "awesom", "weakeventdispatch", "class", "would", "take", "plain", "object", "heavi", "listen", "inspect", "\ufeffsubscrib", "method", "dispatch", "event", "appropri"]}, {"number": 1899, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "And yes, a ReferenceQueue for quicker cleanup would be nice.", "sentSegmented": ["and", "yes", "a", "referencequeue", "for", "quicker", "cleanup", "would", "be", "nice"], "sentSegmentedWithoutStops": ["yes", "referencequeue", "quicker", "cleanup", "would", "nice"], "sentSegmentedWithoutStopsStemmed": ["ye", "referencequeu", "quicker", "cleanup", "would", "nice"]}, {"number": 1900, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But, having the WeakEventDispatcher @\ufeffSubscribe to Object events and then potentially ignore them means that DeadEvents won't work.", "sentSegmented": ["but", "having", "the", "weakeventdispatcher", "\ufeffsubscribe", "to", "object", "events", "and", "then", "potentially", "ignore", "them", "means", "that", "deadevents", "wo", "n't", "work"], "sentSegmentedWithoutStops": ["weakeventdispatcher", "\ufeffsubscribe", "object", "events", "potentially", "ignore", "means", "deadevents", "wo", "n't", "work"], "sentSegmentedWithoutStopsStemmed": ["weakeventdispatch", "\ufeffsubscrib", "object", "event", "potenti", "ignor", "mean", "deadev", "wo", "n't", "work"]}, {"number": 1901, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That, I think, can only be solved by building weak subscriptions directly into EventBus.", "sentSegmented": ["that", "i", "think", "can", "only", "be", "solved", "by", "building", "weak", "subscriptions", "directly", "into", "eventbus"], "sentSegmentedWithoutStops": ["think", "solved", "building", "weak", "subscriptions", "directly", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["think", "solv", "build", "weak", "subscript", "directli", "eventbu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDYxMzUyODUy", "author": {"login": "gissuebot"}, "body": "_[Original comment](https://code.google.com/p/guava-libraries/issues/detail?id=807#c26) posted by **progoth** on 2013-08-28 at 04:28 PM_\n\n---\n\nI'm using Guice to register all my injections with the eventbus, and using Providers to create (swing) dialogs that communicate with a database controller using guava eventbus. For dialogs to not need eventbus cleanup I'd have to write and maintain reset methods for each to go back to their default state, and every dialog (or opened dialog, if using lazy vals with Providers) would stay in memory for the life of the application.\n\nSince my dialogs are confined to a few controllers, it's not out of the question to wrap their usages in something like\n\ndef using[T](prov: Provider[T])(f: T => Unit) {\n&nbsp;&nbsp;&nbsp;&nbsp;val t = prov.get\n&nbsp;&nbsp;&nbsp;&nbsp;ultimately(eventBus.unregister(t))(f(t))\n}\n\nwhich I may do. I'll probably take a look at MBassador, at least for some projects where there are few classes that need strong references and those can be specified with class annotations (adding weakRegister to eventbus would require guice to register everything weakly and then I'd have to maintain references to some classes manually).\n", "bodyText": "Original comment posted by progoth on 2013-08-28 at 04:28 PM\n\nI'm using Guice to register all my injections with the eventbus, and using Providers to create (swing) dialogs that communicate with a database controller using guava eventbus. For dialogs to not need eventbus cleanup I'd have to write and maintain reset methods for each to go back to their default state, and every dialog (or opened dialog, if using lazy vals with Providers) would stay in memory for the life of the application.\nSince my dialogs are confined to a few controllers, it's not out of the question to wrap their usages in something like\ndef using[T](prov: Provider[T])(f: T => Unit) {\n\u00a0\u00a0\u00a0\u00a0val t = prov.get\n\u00a0\u00a0\u00a0\u00a0ultimately(eventBus.unregister(t))(f(t))\n}\nwhich I may do. I'll probably take a look at MBassador, at least for some projects where there are few classes that need strong references and those can be specified with class annotations (adding weakRegister to eventbus would require guice to register everything weakly and then I'd have to maintain references to some classes manually).", "bodyHTML": "<p><em><a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=807#c26\" rel=\"nofollow\">Original comment</a> posted by <strong>progoth</strong> on 2013-08-28 at 04:28 PM</em></p>\n<hr>\n<p>I'm using Guice to register all my injections with the eventbus, and using Providers to create (swing) dialogs that communicate with a database controller using guava eventbus. For dialogs to not need eventbus cleanup I'd have to write and maintain reset methods for each to go back to their default state, and every dialog (or opened dialog, if using lazy vals with Providers) would stay in memory for the life of the application.</p>\n<p>Since my dialogs are confined to a few controllers, it's not out of the question to wrap their usages in something like</p>\n<p>def using[T](prov: Provider[T])(f: T =&gt; Unit) {<br>\n\u00a0\u00a0\u00a0\u00a0val t = prov.get<br>\n\u00a0\u00a0\u00a0\u00a0ultimately(eventBus.unregister(t))(f(t))<br>\n}</p>\n<p>which I may do. I'll probably take a look at MBassador, at least for some projects where there are few classes that need strong references and those can be specified with class annotations (adding weakRegister to eventbus would require guice to register everything weakly and then I'd have to maintain references to some classes manually).</p>", "createdAt": "2014-11-01T01:39:04Z", "publishedAt": "2014-11-01T01:39:04Z", "lastEditedAt": null, "updatedAt": "2014-11-01T01:39:04Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1902, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original comment posted by progoth on 2013-08-28 at 04:28 PM", "sentSegmented": ["original", "comment", "posted", "by", "progoth", "on", "2013-08-28", "at", "04:28", "pm"], "sentSegmentedWithoutStops": ["original", "comment", "posted", "progoth", "2013-08-28", "04:28", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "comment", "post", "progoth", "2013-08-28", "04:28", "pm"]}, {"number": 1903, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm using Guice to register all my injections with the eventbus, and using Providers to create (swing) dialogs that communicate with a database controller using guava eventbus.", "sentSegmented": ["i", "'m", "using", "guice", "to", "register", "all", "my", "injections", "with", "the", "eventbus", "and", "using", "providers", "to", "create", "swing", "dialogs", "that", "communicate", "with", "a", "database", "controller", "using", "guava", "eventbus"], "sentSegmentedWithoutStops": ["'m", "using", "guice", "register", "injections", "eventbus", "using", "providers", "create", "swing", "dialogs", "communicate", "database", "controller", "using", "guava", "eventbus"], "sentSegmentedWithoutStopsStemmed": ["'m", "use", "guic", "regist", "inject", "eventbu", "use", "provid", "creat", "swing", "dialog", "commun", "databas", "control", "use", "guava", "eventbu"]}, {"number": 1904, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For dialogs to not need eventbus cleanup I'd have to write and maintain reset methods for each to go back to their default state, and every dialog (or opened dialog, if using lazy vals with Providers) would stay in memory for the life of the application.", "sentSegmented": ["for", "dialogs", "to", "not", "need", "eventbus", "cleanup", "i", "'d", "have", "to", "write", "and", "maintain", "reset", "methods", "for", "each", "to", "go", "back", "to", "their", "default", "state", "and", "every", "dialog", "or", "opened", "dialog", "if", "using", "lazy", "vals", "with", "providers", "would", "stay", "in", "memory", "for", "the", "life", "of", "the", "application"], "sentSegmentedWithoutStops": ["dialogs", "need", "eventbus", "cleanup", "'d", "write", "maintain", "reset", "methods", "go", "back", "default", "state", "every", "dialog", "opened", "dialog", "using", "lazy", "vals", "providers", "would", "stay", "memory", "life", "application"], "sentSegmentedWithoutStopsStemmed": ["dialog", "need", "eventbu", "cleanup", "'d", "write", "maintain", "reset", "method", "go", "back", "default", "state", "everi", "dialog", "open", "dialog", "use", "lazi", "val", "provid", "would", "stay", "memori", "life", "applic"]}, {"number": 1905, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Since my dialogs are confined to a few controllers, it's not out of the question to wrap their usages in something like", "sentSegmented": ["since", "my", "dialogs", "are", "confined", "to", "a", "few", "controllers", "it", "'s", "not", "out", "of", "the", "question", "to", "wrap", "their", "usages", "in", "something", "like"], "sentSegmentedWithoutStops": ["since", "dialogs", "confined", "controllers", "'s", "question", "wrap", "usages", "something", "like"], "sentSegmentedWithoutStopsStemmed": ["sinc", "dialog", "confin", "control", "'s", "question", "wrap", "usag", "someth", "like"]}, {"number": 1906, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "def using[T](prov: Provider[T])(f: T => Unit) {", "sentSegmented": ["def", "using", "t", "prov", "provider", "t", "f", "t", "unit"], "sentSegmentedWithoutStops": ["def", "using", "prov", "provider", "f", "unit"], "sentSegmentedWithoutStopsStemmed": ["def", "use", "prov", "provid", "f", "unit"]}, {"number": 1907, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0val t = prov.get", "sentSegmented": ["val", "t", "prov.get"], "sentSegmentedWithoutStops": ["val", "prov.get"], "sentSegmentedWithoutStopsStemmed": ["val", "prov.get"]}, {"number": 1908, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "\u00a0\u00a0\u00a0\u00a0ultimately(eventBus.unregister(t))(f(t))", "sentSegmented": ["ultimately", "eventbus.unregister", "t", "f", "t"], "sentSegmentedWithoutStops": ["ultimately", "eventbus.unregister", "f"], "sentSegmentedWithoutStopsStemmed": ["ultim", "eventbus.unregist", "f"]}, {"number": 1909, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 1910, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "which I may do.", "sentSegmented": ["which", "i", "may", "do"], "sentSegmentedWithoutStops": ["may"], "sentSegmentedWithoutStopsStemmed": ["may"]}, {"number": 1911, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'll probably take a look at MBassador, at least for some projects where there are few classes that need strong references and those can be specified with class annotations (adding weakRegister to eventbus would require guice to register everything weakly and then I'd have to maintain references to some classes manually).", "sentSegmented": ["i", "'ll", "probably", "take", "a", "look", "at", "mbassador", "at", "least", "for", "some", "projects", "where", "there", "are", "few", "classes", "that", "need", "strong", "references", "and", "those", "can", "be", "specified", "with", "class", "annotations", "adding", "weakregister", "to", "eventbus", "would", "require", "guice", "to", "register", "everything", "weakly", "and", "then", "i", "'d", "have", "to", "maintain", "references", "to", "some", "classes", "manually"], "sentSegmentedWithoutStops": ["'ll", "probably", "take", "look", "mbassador", "least", "projects", "classes", "need", "strong", "references", "specified", "class", "annotations", "adding", "weakregister", "eventbus", "would", "require", "guice", "register", "everything", "weakly", "'d", "maintain", "references", "classes", "manually"], "sentSegmentedWithoutStopsStemmed": ["'ll", "probabl", "take", "look", "mbassador", "least", "project", "class", "need", "strong", "refer", "specifi", "class", "annot", "ad", "weakregist", "eventbu", "would", "requir", "guic", "regist", "everyth", "weakli", "'d", "maintain", "refer", "class", "manual"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDUyMDQ4NjcyMQ==", "author": {"login": "netdpb"}, "body": "We are not actively working on EventBus anymore. There are modern alternatives, including [RxJava](https://github.com/ReactiveX/RxJava), that are more actively maintained.", "bodyText": "We are not actively working on EventBus anymore. There are modern alternatives, including RxJava, that are more actively maintained.", "bodyHTML": "<p>We are not actively working on EventBus anymore. There are modern alternatives, including <a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a>, that are more actively maintained.</p>", "createdAt": "2019-08-12T16:00:13Z", "publishedAt": "2019-08-12T16:00:13Z", "lastEditedAt": null, "updatedAt": "2019-08-12T16:00:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 1912, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "We are not actively working on EventBus anymore.", "sentSegmented": ["we", "are", "not", "actively", "working", "on", "eventbus", "anymore"], "sentSegmentedWithoutStops": ["actively", "working", "eventbus", "anymore"], "sentSegmentedWithoutStopsStemmed": ["activ", "work", "eventbu", "anymor"]}, {"number": 1913, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There are modern alternatives, including RxJava, that are more actively maintained.", "sentSegmented": ["there", "are", "modern", "alternatives", "including", "rxjava", "that", "are", "more", "actively", "maintained"], "sentSegmentedWithoutStops": ["modern", "alternatives", "including", "rxjava", "actively", "maintained"], "sentSegmentedWithoutStopsStemmed": ["modern", "altern", "includ", "rxjava", "activ", "maintain"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOA6gNCw==", "hasNextPage": true}, "totalCount": 27}, "labels": {"edges": [{"node": {"createdAt": "2017-09-13T23:24:10Z", "name": "P3"}}, {"node": {"createdAt": "2014-10-31T17:57:27Z", "name": "package=eventbus"}}, {"node": {"createdAt": "2014-10-31T17:42:50Z", "name": "status=research"}}, {"node": {"createdAt": "2014-10-31T17:41:59Z", "name": "type=addition"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["weakeventbus", "that", "uses", "a", "weak", "reference", "to", "registered", "objects"], "titleSegmentedWithoutStops": ["weakeventbus", "uses", "weak", "reference", "registered", "objects"], "titleSegmentedWithoutStopsStemmed": ["weakeventbu", "use", "weak", "refer", "regist", "object"], "bodyParsed": [{"number": 1769, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Original issue created by goo...@sa.me.uk on 2011-11-29 at 10:27 PM", "sentSegmented": ["original", "issue", "created", "by", "goo", "sa.me.uk", "on", "2011-11-29", "at", "10:27", "pm"], "sentSegmentedWithoutStops": ["original", "issue", "created", "goo", "sa.me.uk", "2011-11-29", "10:27", "pm"], "sentSegmentedWithoutStopsStemmed": ["origin", "issu", "creat", "goo", "sa.me.uk", "2011-11-29", "10:27", "pm"]}, {"number": 1770, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "EventBus maintains a strong reference to registered objects, and objects can't easily be wrapped in a WeakReference because that would need to @\ufeffSubscribe to the same events.", "sentSegmented": ["eventbus", "maintains", "a", "strong", "reference", "to", "registered", "objects", "and", "objects", "ca", "n't", "easily", "be", "wrapped", "in", "a", "weakreference", "because", "that", "would", "need", "to", "\ufeffsubscribe", "to", "the", "same", "events"], "sentSegmentedWithoutStops": ["eventbus", "maintains", "strong", "reference", "registered", "objects", "objects", "ca", "n't", "easily", "wrapped", "weakreference", "would", "need", "\ufeffsubscribe", "events"], "sentSegmentedWithoutStopsStemmed": ["eventbu", "maintain", "strong", "refer", "regist", "object", "object", "ca", "n't", "easili", "wrap", "weakrefer", "would", "need", "\ufeffsubscrib", "event"]}, {"number": 1771, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "WeakEventBus would use a WeakReference to refer to registered objects and unregister them automatically using a ReferenceQueue.", "sentSegmented": ["weakeventbus", "would", "use", "a", "weakreference", "to", "refer", "to", "registered", "objects", "and", "unregister", "them", "automatically", "using", "a", "referencequeue"], "sentSegmentedWithoutStops": ["weakeventbus", "would", "use", "weakreference", "refer", "registered", "objects", "unregister", "automatically", "using", "referencequeue"], "sentSegmentedWithoutStopsStemmed": ["weakeventbu", "would", "use", "weakrefer", "refer", "regist", "object", "unregist", "automat", "use", "referencequeu"]}]}