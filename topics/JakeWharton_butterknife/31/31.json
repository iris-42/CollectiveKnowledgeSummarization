{"repository": {"owner": {"login": "JakeWharton"}, "name": "butterknife", "forkCount": 4745, "stargazerCount": 25651, "createdAt": "2013-03-05T08:18:59Z", "updatedAt": "2021-03-17T17:45:30Z", "repositoryTopics": {"edges": []}, "languages": {"edges": [{"node": {"name": "Shell"}}, {"node": {"name": "Java"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}, {"node": {"name": "Kotlin"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWUxMzg4MjEyMw==", "number": 31, "author": {"login": "oniekrenz"}, "title": "Superclass injection gets removed", "body": "I'm using IDEA12.\nSetup is: class B extends A, both classes have some @InjectView fields.\nA \"Rebuild Project\" creates:\nA$$ViewInjector and B$$ViewInjector, the latter with a call to A$$ViewInjector.inject(finder, target, source)\nI edit B and deploy to my device. Compiling starts and the call to A$$ViewInjector.inject() gets removed -> App crashes because my injected fields in B are now null.\n", "bodyHTML": "<p>I'm using IDEA12.<br>\nSetup is: class B extends A, both classes have some @InjectView fields.<br>\nA \"Rebuild Project\" creates:<br>\nA$$ViewInjector and B$$ViewInjector, the latter with a call to A$$ViewInjector.inject(finder, target, source)<br>\nI edit B and deploy to my device. Compiling starts and the call to A$$ViewInjector.inject() gets removed -&gt; App crashes because my injected fields in B are now null.</p>", "bodyText": "I'm using IDEA12.\nSetup is: class B extends A, both classes have some @InjectView fields.\nA \"Rebuild Project\" creates:\nA$$ViewInjector and B$$ViewInjector, the latter with a call to A$$ViewInjector.inject(finder, target, source)\nI edit B and deploy to my device. Compiling starts and the call to A$$ViewInjector.inject() gets removed -> App crashes because my injected fields in B are now null.", "assignees": {"edges": []}, "createdAt": "2013-05-02T08:48:55Z", "closed": false, "closedAt": null, "lastEditedAt": null, "publishedAt": "2013-05-02T08:48:55Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDE3MzI2OTYx", "author": {"login": "JakeWharton"}, "body": "I'll have to try and reproduce. It might simple be a problem with how IDEA does incremental compilation that requires me to jump through many more hoops.\n\nIf you do a full clean build it probably still works though, right?\n", "bodyText": "I'll have to try and reproduce. It might simple be a problem with how IDEA does incremental compilation that requires me to jump through many more hoops.\nIf you do a full clean build it probably still works though, right?", "bodyHTML": "<p>I'll have to try and reproduce. It might simple be a problem with how IDEA does incremental compilation that requires me to jump through many more hoops.</p>\n<p>If you do a full clean build it probably still works though, right?</p>", "createdAt": "2013-05-02T08:51:25Z", "publishedAt": "2013-05-02T08:51:25Z", "lastEditedAt": null, "updatedAt": "2013-05-02T08:51:25Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 137, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'll have to try and reproduce.", "sentSegmented": ["i", "'ll", "have", "to", "try", "and", "reproduce"], "sentSegmentedWithoutStops": ["'ll", "try", "reproduce"], "sentSegmentedWithoutStopsStemmed": ["'ll", "tri", "reproduc"]}, {"number": 138, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It might simple be a problem with how IDEA does incremental compilation that requires me to jump through many more hoops.", "sentSegmented": ["it", "might", "simple", "be", "a", "problem", "with", "how", "idea", "does", "incremental", "compilation", "that", "requires", "me", "to", "jump", "through", "many", "more", "hoops"], "sentSegmentedWithoutStops": ["might", "simple", "problem", "idea", "incremental", "compilation", "requires", "jump", "many", "hoops"], "sentSegmentedWithoutStopsStemmed": ["might", "simpl", "problem", "idea", "increment", "compil", "requir", "jump", "mani", "hoop"]}, {"number": 139, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you do a full clean build it probably still works though, right?", "sentSegmented": ["if", "you", "do", "a", "full", "clean", "build", "it", "probably", "still", "works", "though", "right"], "sentSegmentedWithoutStops": ["full", "clean", "build", "probably", "still", "works", "though", "right"], "sentSegmentedWithoutStopsStemmed": ["full", "clean", "build", "probabl", "still", "work", "though", "right"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDE3MzI3MTU5", "author": {"login": "oniekrenz"}, "body": "Correct\n", "bodyText": "Correct", "bodyHTML": "<p>Correct</p>", "createdAt": "2013-05-02T08:56:32Z", "publishedAt": "2013-05-02T08:56:32Z", "lastEditedAt": null, "updatedAt": "2013-05-02T08:56:32Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 140, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Correct", "sentSegmented": ["correct"], "sentSegmentedWithoutStops": ["correct"], "sentSegmentedWithoutStopsStemmed": ["correct"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIwNzIzNzc5", "author": {"login": "JakeWharton"}, "body": "I think this is just a fundamental flaw in annotation processing-based code generation. Changing a class should cause the processor to run again for it but changing the hierarchy is too-complex a task for an incremental generation. Hopefully this doesn't happen too much. It's just something we are going to have to deal with.\n", "bodyText": "I think this is just a fundamental flaw in annotation processing-based code generation. Changing a class should cause the processor to run again for it but changing the hierarchy is too-complex a task for an incremental generation. Hopefully this doesn't happen too much. It's just something we are going to have to deal with.", "bodyHTML": "<p>I think this is just a fundamental flaw in annotation processing-based code generation. Changing a class should cause the processor to run again for it but changing the hierarchy is too-complex a task for an incremental generation. Hopefully this doesn't happen too much. It's just something we are going to have to deal with.</p>", "createdAt": "2013-07-10T06:24:13Z", "publishedAt": "2013-07-10T06:24:13Z", "lastEditedAt": null, "updatedAt": "2013-07-10T06:24:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 141, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I think this is just a fundamental flaw in annotation processing-based code generation.", "sentSegmented": ["i", "think", "this", "is", "just", "a", "fundamental", "flaw", "in", "annotation", "processing-based", "code", "generation"], "sentSegmentedWithoutStops": ["think", "fundamental", "flaw", "annotation", "processing-based", "code", "generation"], "sentSegmentedWithoutStopsStemmed": ["think", "fundament", "flaw", "annot", "processing-bas", "code", "gener"]}, {"number": 142, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Changing a class should cause the processor to run again for it but changing the hierarchy is too-complex a task for an incremental generation.", "sentSegmented": ["changing", "a", "class", "should", "cause", "the", "processor", "to", "run", "again", "for", "it", "but", "changing", "the", "hierarchy", "is", "too-complex", "a", "task", "for", "an", "incremental", "generation"], "sentSegmentedWithoutStops": ["changing", "class", "cause", "processor", "run", "changing", "hierarchy", "too-complex", "task", "incremental", "generation"], "sentSegmentedWithoutStopsStemmed": ["chang", "class", "caus", "processor", "run", "chang", "hierarchi", "too-complex", "task", "increment", "gener"]}, {"number": 143, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hopefully this doesn't happen too much.", "sentSegmented": ["hopefully", "this", "does", "n't", "happen", "too", "much"], "sentSegmentedWithoutStops": ["hopefully", "n't", "happen", "much"], "sentSegmentedWithoutStopsStemmed": ["hope", "n't", "happen", "much"]}, {"number": 144, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It's just something we are going to have to deal with.", "sentSegmented": ["it", "'s", "just", "something", "we", "are", "going", "to", "have", "to", "deal", "with"], "sentSegmentedWithoutStops": ["'s", "something", "going", "deal"], "sentSegmentedWithoutStopsStemmed": ["'s", "someth", "go", "deal"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIwNzI0Nzkw", "author": {"login": "SimonVT"}, "body": "I believe it happens any time you make changes to the subclass tho, not (just) when you change the class hierarchy.\n", "bodyText": "I believe it happens any time you make changes to the subclass tho, not (just) when you change the class hierarchy.", "bodyHTML": "<p>I believe it happens any time you make changes to the subclass tho, not (just) when you change the class hierarchy.</p>", "createdAt": "2013-07-10T07:00:04Z", "publishedAt": "2013-07-10T07:00:04Z", "lastEditedAt": null, "updatedAt": "2013-07-10T07:00:04Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 145, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I believe it happens any time you make changes to the subclass tho, not (just) when you change the class hierarchy.", "sentSegmented": ["i", "believe", "it", "happens", "any", "time", "you", "make", "changes", "to", "the", "subclass", "tho", "not", "just", "when", "you", "change", "the", "class", "hierarchy"], "sentSegmentedWithoutStops": ["believe", "happens", "time", "make", "changes", "subclass", "tho", "change", "class", "hierarchy"], "sentSegmentedWithoutStopsStemmed": ["believ", "happen", "time", "make", "chang", "subclass", "tho", "chang", "class", "hierarchi"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIwNzI0OTc2", "author": {"login": "oniekrenz"}, "body": "Right, it happens on any change.\n", "bodyText": "Right, it happens on any change.", "bodyHTML": "<p>Right, it happens on any change.</p>", "createdAt": "2013-07-10T07:06:35Z", "publishedAt": "2013-07-10T07:06:35Z", "lastEditedAt": null, "updatedAt": "2013-07-10T07:06:35Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 146, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Right, it happens on any change.", "sentSegmented": ["right", "it", "happens", "on", "any", "change"], "sentSegmentedWithoutStops": ["right", "happens", "change"], "sentSegmentedWithoutStopsStemmed": ["right", "happen", "chang"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIxNTMzNTIz", "author": {"login": "JakeWharton"}, "body": "I can re-open, but I'm not really going to be working toward fixing this unless something obvious and easy presents itself.\n", "bodyText": "I can re-open, but I'm not really going to be working toward fixing this unless something obvious and easy presents itself.", "bodyHTML": "<p>I can re-open, but I'm not really going to be working toward fixing this unless something obvious and easy presents itself.</p>", "createdAt": "2013-07-25T05:08:39Z", "publishedAt": "2013-07-25T05:08:39Z", "lastEditedAt": null, "updatedAt": "2013-07-25T05:08:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 147, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can re-open, but I'm not really going to be working toward fixing this unless something obvious and easy presents itself.", "sentSegmented": ["i", "can", "re-open", "but", "i", "'m", "not", "really", "going", "to", "be", "working", "toward", "fixing", "this", "unless", "something", "obvious", "and", "easy", "presents", "itself"], "sentSegmentedWithoutStops": ["re-open", "'m", "really", "going", "working", "toward", "fixing", "unless", "something", "obvious", "easy", "presents"], "sentSegmentedWithoutStopsStemmed": ["re-open", "'m", "realli", "go", "work", "toward", "fix", "unless", "someth", "obviou", "easi", "present"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIyNTMzMjk2", "author": {"login": "donnfelker"}, "body": "Just as an added note: I've also noticed this happening on multiple projects of mine. \n", "bodyText": "Just as an added note: I've also noticed this happening on multiple projects of mine.", "bodyHTML": "<p>Just as an added note: I've also noticed this happening on multiple projects of mine.</p>", "createdAt": "2013-08-12T23:22:15Z", "publishedAt": "2013-08-12T23:22:15Z", "lastEditedAt": null, "updatedAt": "2013-08-12T23:22:15Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 148, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Just as an added note: I've also noticed this happening on multiple projects of mine.", "sentSegmented": ["just", "as", "an", "added", "note", "i", "'ve", "also", "noticed", "this", "happening", "on", "multiple", "projects", "of", "mine"], "sentSegmentedWithoutStops": ["added", "note", "'ve", "also", "noticed", "happening", "multiple", "projects", "mine"], "sentSegmentedWithoutStopsStemmed": ["ad", "note", "'ve", "also", "notic", "happen", "multipl", "project", "mine"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIyNjU3NDU4", "author": {"login": "SimonVT"}, "body": "Haven't had this happen since I moved to Gradle.\n", "bodyText": "Haven't had this happen since I moved to Gradle.", "bodyHTML": "<p>Haven't had this happen since I moved to Gradle.</p>", "createdAt": "2013-08-14T18:41:52Z", "publishedAt": "2013-08-14T18:41:52Z", "lastEditedAt": null, "updatedAt": "2013-08-14T18:41:52Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 149, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Haven't had this happen since I moved to Gradle.", "sentSegmented": ["have", "n't", "had", "this", "happen", "since", "i", "moved", "to", "gradle"], "sentSegmentedWithoutStops": ["n't", "happen", "since", "moved", "gradle"], "sentSegmentedWithoutStopsStemmed": ["n't", "happen", "sinc", "move", "gradl"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI2ODI5NzE0", "author": {"login": "ultimate-deej"}, "body": "I came across the same problem. Anyone know the reason of this behaviour? Is there a solution aside from using gradle or rebuilding the whole project?\n", "bodyText": "I came across the same problem. Anyone know the reason of this behaviour? Is there a solution aside from using gradle or rebuilding the whole project?", "bodyHTML": "<p>I came across the same problem. Anyone know the reason of this behaviour? Is there a solution aside from using gradle or rebuilding the whole project?</p>", "createdAt": "2013-10-22T18:38:13Z", "publishedAt": "2013-10-22T18:38:13Z", "lastEditedAt": null, "updatedAt": "2013-10-22T18:38:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 150, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I came across the same problem.", "sentSegmented": ["i", "came", "across", "the", "same", "problem"], "sentSegmentedWithoutStops": ["came", "across", "problem"], "sentSegmentedWithoutStopsStemmed": ["came", "across", "problem"]}, {"number": 151, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Anyone know the reason of this behaviour?", "sentSegmented": ["anyone", "know", "the", "reason", "of", "this", "behaviour"], "sentSegmentedWithoutStops": ["anyone", "know", "reason", "behaviour"], "sentSegmentedWithoutStopsStemmed": ["anyon", "know", "reason", "behaviour"]}, {"number": 152, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is there a solution aside from using gradle or rebuilding the whole project?", "sentSegmented": ["is", "there", "a", "solution", "aside", "from", "using", "gradle", "or", "rebuilding", "the", "whole", "project"], "sentSegmentedWithoutStops": ["solution", "aside", "using", "gradle", "rebuilding", "whole", "project"], "sentSegmentedWithoutStopsStemmed": ["solut", "asid", "use", "gradl", "rebuild", "whole", "project"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDMwOTczOTMz", "author": {"login": "gte619n"}, "body": "FWIW, I have come across this. The issue I was trying to solve was a way to abstract out a universal sliding menu for the entire application. My Activities extended an abstract BaseMenuActivity, which handed all the building of the Drawer and event listeners. \n\nBaseMenuActivity.onCreate would call getViewId(), which was an abstract method implemented by the subclass. It would then do the view injection. It would work if there was a full rebuild, but not if there was a change in either class. I guess I will just have to rework it.\n\nThanks for such a nice library.\n", "bodyText": "FWIW, I have come across this. The issue I was trying to solve was a way to abstract out a universal sliding menu for the entire application. My Activities extended an abstract BaseMenuActivity, which handed all the building of the Drawer and event listeners.\nBaseMenuActivity.onCreate would call getViewId(), which was an abstract method implemented by the subclass. It would then do the view injection. It would work if there was a full rebuild, but not if there was a change in either class. I guess I will just have to rework it.\nThanks for such a nice library.", "bodyHTML": "<p>FWIW, I have come across this. The issue I was trying to solve was a way to abstract out a universal sliding menu for the entire application. My Activities extended an abstract BaseMenuActivity, which handed all the building of the Drawer and event listeners.</p>\n<p>BaseMenuActivity.onCreate would call getViewId(), which was an abstract method implemented by the subclass. It would then do the view injection. It would work if there was a full rebuild, but not if there was a change in either class. I guess I will just have to rework it.</p>\n<p>Thanks for such a nice library.</p>", "createdAt": "2013-12-19T22:43:45Z", "publishedAt": "2013-12-19T22:43:45Z", "lastEditedAt": null, "updatedAt": "2013-12-19T22:43:45Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 153, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "FWIW, I have come across this.", "sentSegmented": ["fwiw", "i", "have", "come", "across", "this"], "sentSegmentedWithoutStops": ["fwiw", "come", "across"], "sentSegmentedWithoutStopsStemmed": ["fwiw", "come", "across"]}, {"number": 154, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The issue I was trying to solve was a way to abstract out a universal sliding menu for the entire application.", "sentSegmented": ["the", "issue", "i", "was", "trying", "to", "solve", "was", "a", "way", "to", "abstract", "out", "a", "universal", "sliding", "menu", "for", "the", "entire", "application"], "sentSegmentedWithoutStops": ["issue", "trying", "solve", "way", "abstract", "universal", "sliding", "menu", "entire", "application"], "sentSegmentedWithoutStopsStemmed": ["issu", "tri", "solv", "way", "abstract", "univers", "slide", "menu", "entir", "applic"]}, {"number": 155, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "My Activities extended an abstract BaseMenuActivity, which handed all the building of the Drawer and event listeners.", "sentSegmented": ["my", "activities", "extended", "an", "abstract", "basemenuactivity", "which", "handed", "all", "the", "building", "of", "the", "drawer", "and", "event", "listeners"], "sentSegmentedWithoutStops": ["activities", "extended", "abstract", "basemenuactivity", "handed", "building", "drawer", "event", "listeners"], "sentSegmentedWithoutStopsStemmed": ["activ", "extend", "abstract", "basemenuact", "hand", "build", "drawer", "event", "listen"]}, {"number": 156, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "BaseMenuActivity.onCreate would call getViewId(), which was an abstract method implemented by the subclass.", "sentSegmented": ["basemenuactivity.oncreate", "would", "call", "getviewid", "which", "was", "an", "abstract", "method", "implemented", "by", "the", "subclass"], "sentSegmentedWithoutStops": ["basemenuactivity.oncreate", "would", "call", "getviewid", "abstract", "method", "implemented", "subclass"], "sentSegmentedWithoutStopsStemmed": ["basemenuactivity.oncr", "would", "call", "getviewid", "abstract", "method", "implement", "subclass"]}, {"number": 157, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It would then do the view injection.", "sentSegmented": ["it", "would", "then", "do", "the", "view", "injection"], "sentSegmentedWithoutStops": ["would", "view", "injection"], "sentSegmentedWithoutStopsStemmed": ["would", "view", "inject"]}, {"number": 158, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It would work if there was a full rebuild, but not if there was a change in either class.", "sentSegmented": ["it", "would", "work", "if", "there", "was", "a", "full", "rebuild", "but", "not", "if", "there", "was", "a", "change", "in", "either", "class"], "sentSegmentedWithoutStops": ["would", "work", "full", "rebuild", "change", "either", "class"], "sentSegmentedWithoutStopsStemmed": ["would", "work", "full", "rebuild", "chang", "either", "class"]}, {"number": 159, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I guess I will just have to rework it.", "sentSegmented": ["i", "guess", "i", "will", "just", "have", "to", "rework", "it"], "sentSegmentedWithoutStops": ["guess", "rework"], "sentSegmentedWithoutStopsStemmed": ["guess", "rework"]}, {"number": 160, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks for such a nice library.", "sentSegmented": ["thanks", "for", "such", "a", "nice", "library"], "sentSegmentedWithoutStops": ["thanks", "nice", "library"], "sentSegmentedWithoutStopsStemmed": ["thank", "nice", "librari"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDM1MjkxNDQ0", "author": {"login": "melug"}, "body": "Moved to maven, works like charm.\n", "bodyText": "Moved to maven, works like charm.", "bodyHTML": "<p>Moved to maven, works like charm.</p>", "createdAt": "2014-02-17T15:30:17Z", "publishedAt": "2014-02-17T15:30:17Z", "lastEditedAt": null, "updatedAt": "2014-02-17T15:30:17Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 161, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Moved to maven, works like charm.", "sentSegmented": ["moved", "to", "maven", "works", "like", "charm"], "sentSegmentedWithoutStops": ["moved", "maven", "works", "like", "charm"], "sentSegmentedWithoutStopsStemmed": ["move", "maven", "work", "like", "charm"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwMjcwMDk5", "author": {"login": "nguyentruongtho"}, "body": "I'm using IntelliJ & maven, it is still happening for me.\n", "bodyText": "I'm using IntelliJ & maven, it is still happening for me.", "bodyHTML": "<p>I'm using IntelliJ &amp; maven, it is still happening for me.</p>", "createdAt": "2014-04-12T03:02:04Z", "publishedAt": "2014-04-12T03:02:04Z", "lastEditedAt": null, "updatedAt": "2014-04-12T03:02:04Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 162, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm using IntelliJ & maven, it is still happening for me.", "sentSegmented": ["i", "'m", "using", "intellij", "maven", "it", "is", "still", "happening", "for", "me"], "sentSegmentedWithoutStops": ["'m", "using", "intellij", "maven", "still", "happening"], "sentSegmentedWithoutStopsStemmed": ["'m", "use", "intellij", "maven", "still", "happen"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQwNjQ1MDA2", "author": {"login": "ultimate-deej"}, "body": "Moved to Android Studio, and all the problems are gone\n", "bodyText": "Moved to Android Studio, and all the problems are gone", "bodyHTML": "<p>Moved to Android Studio, and all the problems are gone</p>", "createdAt": "2014-04-16T20:00:55Z", "publishedAt": "2014-04-16T20:00:55Z", "lastEditedAt": null, "updatedAt": "2014-04-16T20:00:55Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 163, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Moved to Android Studio, and all the problems are gone", "sentSegmented": ["moved", "to", "android", "studio", "and", "all", "the", "problems", "are", "gone"], "sentSegmentedWithoutStops": ["moved", "android", "studio", "problems", "gone"], "sentSegmentedWithoutStopsStemmed": ["move", "android", "studio", "problem", "gone"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1Njk2OTUx", "author": {"login": "lhunath"}, "body": "This is untrue.  The issue persists and is insanely annoying.  Whenever I change a class that has a superclass with injected views or a class which has a subclass with injected views, I build apps that compile perfectly fine and run into random nullpointerexceptions at runtime.  This is not something you should just shrug away.\n", "bodyText": "This is untrue.  The issue persists and is insanely annoying.  Whenever I change a class that has a superclass with injected views or a class which has a subclass with injected views, I build apps that compile perfectly fine and run into random nullpointerexceptions at runtime.  This is not something you should just shrug away.", "bodyHTML": "<p>This is untrue.  The issue persists and is insanely annoying.  Whenever I change a class that has a superclass with injected views or a class which has a subclass with injected views, I build apps that compile perfectly fine and run into random nullpointerexceptions at runtime.  This is not something you should just shrug away.</p>", "createdAt": "2014-12-04T20:21:53Z", "publishedAt": "2014-12-04T20:21:53Z", "lastEditedAt": null, "updatedAt": "2014-12-04T20:21:53Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 164, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is untrue.", "sentSegmented": ["this", "is", "untrue"], "sentSegmentedWithoutStops": ["untrue"], "sentSegmentedWithoutStopsStemmed": ["untru"]}, {"number": 165, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The issue persists and is insanely annoying.", "sentSegmented": ["the", "issue", "persists", "and", "is", "insanely", "annoying"], "sentSegmentedWithoutStops": ["issue", "persists", "insanely", "annoying"], "sentSegmentedWithoutStopsStemmed": ["issu", "persist", "insan", "annoy"]}, {"number": 166, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Whenever I change a class that has a superclass with injected views or a class which has a subclass with injected views, I build apps that compile perfectly fine and run into random nullpointerexceptions at runtime.", "sentSegmented": ["whenever", "i", "change", "a", "class", "that", "has", "a", "superclass", "with", "injected", "views", "or", "a", "class", "which", "has", "a", "subclass", "with", "injected", "views", "i", "build", "apps", "that", "compile", "perfectly", "fine", "and", "run", "into", "random", "nullpointerexceptions", "at", "runtime"], "sentSegmentedWithoutStops": ["whenever", "change", "class", "superclass", "injected", "views", "class", "subclass", "injected", "views", "build", "apps", "compile", "perfectly", "fine", "run", "random", "nullpointerexceptions", "runtime"], "sentSegmentedWithoutStopsStemmed": ["whenev", "chang", "class", "superclass", "inject", "view", "class", "subclass", "inject", "view", "build", "app", "compil", "perfectli", "fine", "run", "random", "nullpointerexcept", "runtim"]}, {"number": 167, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is not something you should just shrug away.", "sentSegmented": ["this", "is", "not", "something", "you", "should", "just", "shrug", "away"], "sentSegmentedWithoutStops": ["something", "shrug", "away"], "sentSegmentedWithoutStopsStemmed": ["someth", "shrug", "away"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1NzAyMTQw", "author": {"login": "JakeWharton"}, "body": "The issue is open. Also pull requests welcome!\n", "bodyText": "The issue is open. Also pull requests welcome!", "bodyHTML": "<p>The issue is open. Also pull requests welcome!</p>", "createdAt": "2014-12-04T20:56:15Z", "publishedAt": "2014-12-04T20:56:15Z", "lastEditedAt": null, "updatedAt": "2014-12-04T20:56:15Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 168, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The issue is open.", "sentSegmented": ["the", "issue", "is", "open"], "sentSegmentedWithoutStops": ["issue", "open"], "sentSegmentedWithoutStopsStemmed": ["issu", "open"]}, {"number": 169, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Also pull requests welcome!", "sentSegmented": ["also", "pull", "requests", "welcome"], "sentSegmentedWithoutStops": ["also", "pull", "requests", "welcome"], "sentSegmentedWithoutStopsStemmed": ["also", "pull", "request", "welcom"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY5NDQ4Mjk4", "author": {"login": "xu6148152"}, "body": "great content\n", "bodyText": "great content", "bodyHTML": "<p>great content</p>", "createdAt": "2015-01-10T08:20:09Z", "publishedAt": "2015-01-10T08:20:09Z", "lastEditedAt": null, "updatedAt": "2015-01-10T08:20:09Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 170, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "great content", "sentSegmented": ["great", "content"], "sentSegmentedWithoutStops": ["great", "content"], "sentSegmentedWithoutStopsStemmed": ["great", "content"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIyODU4MDA3MQ==", "author": {"login": "jaredsburrows"}, "body": "@JakeWharton Can we close this now? I have been using Butterknife for a long time. I can inject views such as the `NavigationDrawer` in a `BaseClass` and subclass it in `SubCass`. This is how I inherit the NavigationDrawer to all my Activities and Fragments.\n\n@gte619n if you are still having this problem:\n\n```\n/**\n * @author <a href=\"mailto:jaredsburrows@gmail.com\">Jared Burrows</a>\n */\n@SuppressWarnings(\"checkstyle:visibilitymodifier\")\npublic abstract class BaseActivity extends AppCompatActivity implements OnNavigationItemSelectedListener {\n\n    protected DrawerLayout drawerLayout;\n    protected NavigationView navigationView;\n    protected AppBarLayout appBar;\n    protected Toolbar toolbar;\n    private static final int NAV_DRAWER_LAUNCH_DELAY = 250;\n    private final Handler handler = new Handler();\n    private ActionBarDrawerToggle drawerToggle;\n\n    /**\n     * @return Layout Id for the Activity.\n     */\n    public abstract int getLayoutResId();\n\n    @Override\n    public boolean onNavigationItemSelected(final MenuItem menuItem) {\n        final int itemId = menuItem.getItemId();\n        this.onNavDrawerItemClicked(itemId);\n        this.navigationView.setCheckedItem(itemId);\n        this.closeNavDrawer();\n        return true;\n    }\n\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.setContentView(this.getLayoutResId());\n\n        this.drawerLayout = (DrawerLayout) this.findViewById(R.id.drawer_layout);\n        this.appBar = (AppBarLayout) this.findViewById(R.id.app_bar_layout);\n        this.toolbar = (Toolbar) this.findViewById(R.id.tool_bar);\n        this.navigationView = (NavigationView) this.findViewById(R.id.navigation_view);\n    }\n\n    // Must call this for drawer toggle to work correctly\n    @Override\n    protected void onPostCreate(final Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        // Setup Toolbar\n        try {\n            if (this.toolbar != null) {\n                this.setToolbarNavigationIcon(R.drawable.ic_menu_white_24dp);\n                this.setSupportActionBar(this.toolbar);\n            }\n        } catch (final Throwable e) {\n            LogUtils.logE(TAG, \"Sadly, Robolectric blows up when this method is called.\", e);\n        }\n\n        // Setup DrawerLayout\n        if (this.drawerLayout != null && this.toolbar != null) {\n            this.drawerToggle = new ActionBarDrawerToggle(this, this.drawerLayout, this.toolbar, R.string.nav_open,\n                    R.string.nav_close);\n            this.drawerLayout.addDrawerListener(this.drawerToggle);\n            // Sync the toggle state after onRestoreInstanceState has occurred.\n            this.drawerToggle.syncState();\n        }\n\n        // Setup NavigationView\n        if (this.navigationView != null) {\n            this.navigationView.setNavigationItemSelectedListener(this);\n            this.navigationView.setCheckedItem(R.id.menu_nav_home);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        this.handler.removeCallbacksAndMessages(null);\n    }\n\n    @Override\n    public void onConfigurationChanged(final Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        this.drawerToggle.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n        this.getMenuInflater().inflate(R.menu.menu_activity_main, menu);\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(final MenuItem item) {\n        // Pass the event to ActionBarDrawerToggle, if it returns\n        // true, then it has handled the app icon touch event\n        if (this.drawerLayout != null && this.drawerToggle.onOptionsItemSelected(item)) {\n            return true;\n        }\n\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                if (this.drawerLayout != null) {\n                    this.drawerLayout.openDrawer(GravityCompat.START);\n                } else {\n                    this.finish();\n                }\n                return true;\n\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (this.isNavDrawerOpen()) {\n            this.closeNavDrawer();\n        } else {\n            super.onBackPressed();\n        }\n    }\n\n    public void setToolbarTitle(final CharSequence title) {\n        if (this.toolbar != null) {\n            this.toolbar.setTitle(title);\n        }\n    }\n\n    public void setToolbarSubtitle(final CharSequence subtitle) {\n        if (this.toolbar != null) {\n            this.toolbar.setSubtitle(subtitle);\n        }\n    }\n\n    public void setToolbarNavigationIcon(final int resId) {\n        if (this.toolbar != null) {\n            this.toolbar.setNavigationIcon(resId);\n        }\n    }\n\n    protected boolean isNavDrawerOpen() {\n        return this.drawerLayout != null && this.drawerLayout.isDrawerOpen(GravityCompat.START);\n    }\n\n    protected void openNavDrawer() {\n        if (this.drawerLayout != null) {\n            this.drawerLayout.openDrawer(GravityCompat.START);\n        }\n    }\n\n    protected void closeNavDrawer() {\n        if (this.drawerLayout != null) {\n            this.drawerLayout.closeDrawer(GravityCompat.START);\n        }\n    }\n\n    private void onNavDrawerItemClicked(final int id) {\n        this.handler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                goToNavDrawerItem(id);\n            }\n        }, NAV_DRAWER_LAUNCH_DELAY);\n    }\n\n    private void goToNavDrawerItem(final int id) {\n        if (id == R.id.menu_app_settings) {\n            this.startActivity(new Intent(this, SettingsActivity.class));\n        } else {\n            this.closeNavDrawer();\n        }\n    }\n}\n```\n", "bodyText": "@JakeWharton Can we close this now? I have been using Butterknife for a long time. I can inject views such as the NavigationDrawer in a BaseClass and subclass it in SubCass. This is how I inherit the NavigationDrawer to all my Activities and Fragments.\n@gte619n if you are still having this problem:\n/**\n * @author <a href=\"mailto:jaredsburrows@gmail.com\">Jared Burrows</a>\n */\n@SuppressWarnings(\"checkstyle:visibilitymodifier\")\npublic abstract class BaseActivity extends AppCompatActivity implements OnNavigationItemSelectedListener {\n\n    protected DrawerLayout drawerLayout;\n    protected NavigationView navigationView;\n    protected AppBarLayout appBar;\n    protected Toolbar toolbar;\n    private static final int NAV_DRAWER_LAUNCH_DELAY = 250;\n    private final Handler handler = new Handler();\n    private ActionBarDrawerToggle drawerToggle;\n\n    /**\n     * @return Layout Id for the Activity.\n     */\n    public abstract int getLayoutResId();\n\n    @Override\n    public boolean onNavigationItemSelected(final MenuItem menuItem) {\n        final int itemId = menuItem.getItemId();\n        this.onNavDrawerItemClicked(itemId);\n        this.navigationView.setCheckedItem(itemId);\n        this.closeNavDrawer();\n        return true;\n    }\n\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.setContentView(this.getLayoutResId());\n\n        this.drawerLayout = (DrawerLayout) this.findViewById(R.id.drawer_layout);\n        this.appBar = (AppBarLayout) this.findViewById(R.id.app_bar_layout);\n        this.toolbar = (Toolbar) this.findViewById(R.id.tool_bar);\n        this.navigationView = (NavigationView) this.findViewById(R.id.navigation_view);\n    }\n\n    // Must call this for drawer toggle to work correctly\n    @Override\n    protected void onPostCreate(final Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        // Setup Toolbar\n        try {\n            if (this.toolbar != null) {\n                this.setToolbarNavigationIcon(R.drawable.ic_menu_white_24dp);\n                this.setSupportActionBar(this.toolbar);\n            }\n        } catch (final Throwable e) {\n            LogUtils.logE(TAG, \"Sadly, Robolectric blows up when this method is called.\", e);\n        }\n\n        // Setup DrawerLayout\n        if (this.drawerLayout != null && this.toolbar != null) {\n            this.drawerToggle = new ActionBarDrawerToggle(this, this.drawerLayout, this.toolbar, R.string.nav_open,\n                    R.string.nav_close);\n            this.drawerLayout.addDrawerListener(this.drawerToggle);\n            // Sync the toggle state after onRestoreInstanceState has occurred.\n            this.drawerToggle.syncState();\n        }\n\n        // Setup NavigationView\n        if (this.navigationView != null) {\n            this.navigationView.setNavigationItemSelectedListener(this);\n            this.navigationView.setCheckedItem(R.id.menu_nav_home);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        this.handler.removeCallbacksAndMessages(null);\n    }\n\n    @Override\n    public void onConfigurationChanged(final Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        this.drawerToggle.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n        this.getMenuInflater().inflate(R.menu.menu_activity_main, menu);\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(final MenuItem item) {\n        // Pass the event to ActionBarDrawerToggle, if it returns\n        // true, then it has handled the app icon touch event\n        if (this.drawerLayout != null && this.drawerToggle.onOptionsItemSelected(item)) {\n            return true;\n        }\n\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                if (this.drawerLayout != null) {\n                    this.drawerLayout.openDrawer(GravityCompat.START);\n                } else {\n                    this.finish();\n                }\n                return true;\n\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (this.isNavDrawerOpen()) {\n            this.closeNavDrawer();\n        } else {\n            super.onBackPressed();\n        }\n    }\n\n    public void setToolbarTitle(final CharSequence title) {\n        if (this.toolbar != null) {\n            this.toolbar.setTitle(title);\n        }\n    }\n\n    public void setToolbarSubtitle(final CharSequence subtitle) {\n        if (this.toolbar != null) {\n            this.toolbar.setSubtitle(subtitle);\n        }\n    }\n\n    public void setToolbarNavigationIcon(final int resId) {\n        if (this.toolbar != null) {\n            this.toolbar.setNavigationIcon(resId);\n        }\n    }\n\n    protected boolean isNavDrawerOpen() {\n        return this.drawerLayout != null && this.drawerLayout.isDrawerOpen(GravityCompat.START);\n    }\n\n    protected void openNavDrawer() {\n        if (this.drawerLayout != null) {\n            this.drawerLayout.openDrawer(GravityCompat.START);\n        }\n    }\n\n    protected void closeNavDrawer() {\n        if (this.drawerLayout != null) {\n            this.drawerLayout.closeDrawer(GravityCompat.START);\n        }\n    }\n\n    private void onNavDrawerItemClicked(final int id) {\n        this.handler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                goToNavDrawerItem(id);\n            }\n        }, NAV_DRAWER_LAUNCH_DELAY);\n    }\n\n    private void goToNavDrawerItem(final int id) {\n        if (id == R.id.menu_app_settings) {\n            this.startActivity(new Intent(this, SettingsActivity.class));\n        } else {\n            this.closeNavDrawer();\n        }\n    }\n}", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JakeWharton/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JakeWharton\">@JakeWharton</a> Can we close this now? I have been using Butterknife for a long time. I can inject views such as the <code>NavigationDrawer</code> in a <code>BaseClass</code> and subclass it in <code>SubCass</code>. This is how I inherit the NavigationDrawer to all my Activities and Fragments.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gte619n/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gte619n\">@gte619n</a> if you are still having this problem:</p>\n<pre><code>/**\n * @author &lt;a href=\"mailto:jaredsburrows@gmail.com\"&gt;Jared Burrows&lt;/a&gt;\n */\n@SuppressWarnings(\"checkstyle:visibilitymodifier\")\npublic abstract class BaseActivity extends AppCompatActivity implements OnNavigationItemSelectedListener {\n\n    protected DrawerLayout drawerLayout;\n    protected NavigationView navigationView;\n    protected AppBarLayout appBar;\n    protected Toolbar toolbar;\n    private static final int NAV_DRAWER_LAUNCH_DELAY = 250;\n    private final Handler handler = new Handler();\n    private ActionBarDrawerToggle drawerToggle;\n\n    /**\n     * @return Layout Id for the Activity.\n     */\n    public abstract int getLayoutResId();\n\n    @Override\n    public boolean onNavigationItemSelected(final MenuItem menuItem) {\n        final int itemId = menuItem.getItemId();\n        this.onNavDrawerItemClicked(itemId);\n        this.navigationView.setCheckedItem(itemId);\n        this.closeNavDrawer();\n        return true;\n    }\n\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.setContentView(this.getLayoutResId());\n\n        this.drawerLayout = (DrawerLayout) this.findViewById(R.id.drawer_layout);\n        this.appBar = (AppBarLayout) this.findViewById(R.id.app_bar_layout);\n        this.toolbar = (Toolbar) this.findViewById(R.id.tool_bar);\n        this.navigationView = (NavigationView) this.findViewById(R.id.navigation_view);\n    }\n\n    // Must call this for drawer toggle to work correctly\n    @Override\n    protected void onPostCreate(final Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        // Setup Toolbar\n        try {\n            if (this.toolbar != null) {\n                this.setToolbarNavigationIcon(R.drawable.ic_menu_white_24dp);\n                this.setSupportActionBar(this.toolbar);\n            }\n        } catch (final Throwable e) {\n            LogUtils.logE(TAG, \"Sadly, Robolectric blows up when this method is called.\", e);\n        }\n\n        // Setup DrawerLayout\n        if (this.drawerLayout != null &amp;&amp; this.toolbar != null) {\n            this.drawerToggle = new ActionBarDrawerToggle(this, this.drawerLayout, this.toolbar, R.string.nav_open,\n                    R.string.nav_close);\n            this.drawerLayout.addDrawerListener(this.drawerToggle);\n            // Sync the toggle state after onRestoreInstanceState has occurred.\n            this.drawerToggle.syncState();\n        }\n\n        // Setup NavigationView\n        if (this.navigationView != null) {\n            this.navigationView.setNavigationItemSelectedListener(this);\n            this.navigationView.setCheckedItem(R.id.menu_nav_home);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        this.handler.removeCallbacksAndMessages(null);\n    }\n\n    @Override\n    public void onConfigurationChanged(final Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        this.drawerToggle.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n        this.getMenuInflater().inflate(R.menu.menu_activity_main, menu);\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(final MenuItem item) {\n        // Pass the event to ActionBarDrawerToggle, if it returns\n        // true, then it has handled the app icon touch event\n        if (this.drawerLayout != null &amp;&amp; this.drawerToggle.onOptionsItemSelected(item)) {\n            return true;\n        }\n\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                if (this.drawerLayout != null) {\n                    this.drawerLayout.openDrawer(GravityCompat.START);\n                } else {\n                    this.finish();\n                }\n                return true;\n\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (this.isNavDrawerOpen()) {\n            this.closeNavDrawer();\n        } else {\n            super.onBackPressed();\n        }\n    }\n\n    public void setToolbarTitle(final CharSequence title) {\n        if (this.toolbar != null) {\n            this.toolbar.setTitle(title);\n        }\n    }\n\n    public void setToolbarSubtitle(final CharSequence subtitle) {\n        if (this.toolbar != null) {\n            this.toolbar.setSubtitle(subtitle);\n        }\n    }\n\n    public void setToolbarNavigationIcon(final int resId) {\n        if (this.toolbar != null) {\n            this.toolbar.setNavigationIcon(resId);\n        }\n    }\n\n    protected boolean isNavDrawerOpen() {\n        return this.drawerLayout != null &amp;&amp; this.drawerLayout.isDrawerOpen(GravityCompat.START);\n    }\n\n    protected void openNavDrawer() {\n        if (this.drawerLayout != null) {\n            this.drawerLayout.openDrawer(GravityCompat.START);\n        }\n    }\n\n    protected void closeNavDrawer() {\n        if (this.drawerLayout != null) {\n            this.drawerLayout.closeDrawer(GravityCompat.START);\n        }\n    }\n\n    private void onNavDrawerItemClicked(final int id) {\n        this.handler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                goToNavDrawerItem(id);\n            }\n        }, NAV_DRAWER_LAUNCH_DELAY);\n    }\n\n    private void goToNavDrawerItem(final int id) {\n        if (id == R.id.menu_app_settings) {\n            this.startActivity(new Intent(this, SettingsActivity.class));\n        } else {\n            this.closeNavDrawer();\n        }\n    }\n}\n</code></pre>", "createdAt": "2016-06-26T02:02:54Z", "publishedAt": "2016-06-26T02:02:54Z", "lastEditedAt": null, "updatedAt": "2016-06-26T02:02:54Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 171, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@JakeWharton Can we close this now?", "sentSegmented": ["jakewharton", "can", "we", "close", "this", "now"], "sentSegmentedWithoutStops": ["jakewharton", "close"], "sentSegmentedWithoutStopsStemmed": ["jakewharton", "close"]}, {"number": 172, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I have been using Butterknife for a long time.", "sentSegmented": ["i", "have", "been", "using", "butterknife", "for", "a", "long", "time"], "sentSegmentedWithoutStops": ["using", "butterknife", "long", "time"], "sentSegmentedWithoutStopsStemmed": ["use", "butterknif", "long", "time"]}, {"number": 173, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can inject views such as the NavigationDrawer in a BaseClass and subclass it in SubCass.", "sentSegmented": ["i", "can", "inject", "views", "such", "as", "the", "navigationdrawer", "in", "a", "baseclass", "and", "subclass", "it", "in", "subcass"], "sentSegmentedWithoutStops": ["inject", "views", "navigationdrawer", "baseclass", "subclass", "subcass"], "sentSegmentedWithoutStopsStemmed": ["inject", "view", "navigationdraw", "baseclass", "subclass", "subcass"]}, {"number": 174, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is how I inherit the NavigationDrawer to all my Activities and Fragments.", "sentSegmented": ["this", "is", "how", "i", "inherit", "the", "navigationdrawer", "to", "all", "my", "activities", "and", "fragments"], "sentSegmentedWithoutStops": ["inherit", "navigationdrawer", "activities", "fragments"], "sentSegmentedWithoutStopsStemmed": ["inherit", "navigationdraw", "activ", "fragment"]}, {"number": 175, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@gte619n if you are still having this problem:", "sentSegmented": ["gte619n", "if", "you", "are", "still", "having", "this", "problem"], "sentSegmentedWithoutStops": ["gte619n", "still", "problem"], "sentSegmentedWithoutStopsStemmed": ["gte619n", "still", "problem"]}, {"number": 176, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "/**", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 177, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": " * @author Jared Burrows", "sentSegmented": ["author", "jared", "burrows"], "sentSegmentedWithoutStops": ["author", "jared", "burrows"], "sentSegmentedWithoutStopsStemmed": ["author", "jare", "burrow"]}, {"number": 178, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": " */", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 179, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@SuppressWarnings(\"checkstyle:visibilitymodifier\")", "sentSegmented": ["suppresswarnings", "checkstyle", "visibilitymodifier"], "sentSegmentedWithoutStops": ["suppresswarnings", "checkstyle", "visibilitymodifier"], "sentSegmentedWithoutStopsStemmed": ["suppresswarn", "checkstyl", "visibilitymodifi"]}, {"number": 180, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "public abstract class BaseActivity extends AppCompatActivity implements OnNavigationItemSelectedListener {", "sentSegmented": ["public", "abstract", "class", "baseactivity", "extends", "appcompatactivity", "implements", "onnavigationitemselectedlistener"], "sentSegmentedWithoutStops": ["baseactivity", "appcompatactivity", "implements", "onnavigationitemselectedlistener"], "sentSegmentedWithoutStopsStemmed": ["baseact", "appcompatact", "implement", "onnavigationitemselectedlisten"]}, {"number": 181, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected DrawerLayout drawerLayout;", "sentSegmented": ["protected", "drawerlayout", "drawerlayout"], "sentSegmentedWithoutStops": ["drawerlayout", "drawerlayout"], "sentSegmentedWithoutStopsStemmed": ["drawerlayout", "drawerlayout"]}, {"number": 182, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected NavigationView navigationView;", "sentSegmented": ["protected", "navigationview", "navigationview"], "sentSegmentedWithoutStops": ["navigationview", "navigationview"], "sentSegmentedWithoutStopsStemmed": ["navigationview", "navigationview"]}, {"number": 183, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected AppBarLayout appBar;", "sentSegmented": ["protected", "appbarlayout", "appbar"], "sentSegmentedWithoutStops": ["appbarlayout", "appbar"], "sentSegmentedWithoutStopsStemmed": ["appbarlayout", "appbar"]}, {"number": 184, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected Toolbar toolbar;", "sentSegmented": ["protected", "toolbar", "toolbar"], "sentSegmentedWithoutStops": ["toolbar", "toolbar"], "sentSegmentedWithoutStopsStemmed": ["toolbar", "toolbar"]}, {"number": 185, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private static final int NAV_DRAWER_LAUNCH_DELAY = 250;", "sentSegmented": ["private", "static", "final", "int", "nav_drawer_launch_delay", "250"], "sentSegmentedWithoutStops": ["nav_drawer_launch_delay", "250"], "sentSegmentedWithoutStopsStemmed": ["nav_drawer_launch_delay", "250"]}, {"number": 186, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private final Handler handler = new Handler();", "sentSegmented": ["private", "final", "handler", "handler", "new", "handler"], "sentSegmentedWithoutStops": ["handler", "handler", "handler"], "sentSegmentedWithoutStopsStemmed": ["handler", "handler", "handler"]}, {"number": 187, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private ActionBarDrawerToggle drawerToggle;", "sentSegmented": ["private", "actionbardrawertoggle", "drawertoggle"], "sentSegmentedWithoutStops": ["actionbardrawertoggle", "drawertoggle"], "sentSegmentedWithoutStopsStemmed": ["actionbardrawertoggl", "drawertoggl"]}, {"number": 188, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    /**", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 189, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "     * @return Layout Id for the Activity.", "sentSegmented": ["return", "layout", "id", "for", "the", "activity"], "sentSegmentedWithoutStops": ["layout", "id", "activity"], "sentSegmentedWithoutStopsStemmed": ["layout", "id", "activ"]}, {"number": 190, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "     */", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 191, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public abstract int getLayoutResId();", "sentSegmented": ["public", "abstract", "int", "getlayoutresid"], "sentSegmentedWithoutStops": ["getlayoutresid"], "sentSegmentedWithoutStopsStemmed": ["getlayoutresid"]}, {"number": 192, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 193, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public boolean onNavigationItemSelected(final MenuItem menuItem) {", "sentSegmented": ["public", "boolean", "onnavigationitemselected", "final", "menuitem", "menuitem"], "sentSegmentedWithoutStops": ["onnavigationitemselected", "menuitem", "menuitem"], "sentSegmentedWithoutStopsStemmed": ["onnavigationitemselect", "menuitem", "menuitem"]}, {"number": 194, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        final int itemId = menuItem.getItemId();", "sentSegmented": ["final", "int", "itemid", "menuitem.getitemid"], "sentSegmentedWithoutStops": ["itemid", "menuitem.getitemid"], "sentSegmentedWithoutStopsStemmed": ["itemid", "menuitem.getitemid"]}, {"number": 195, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.onNavDrawerItemClicked(itemId);", "sentSegmented": ["this.onnavdraweritemclicked", "itemid"], "sentSegmentedWithoutStops": ["this.onnavdraweritemclicked", "itemid"], "sentSegmentedWithoutStopsStemmed": ["this.onnavdraweritemclick", "itemid"]}, {"number": 196, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.navigationView.setCheckedItem(itemId);", "sentSegmented": ["this.navigationview.setcheckeditem", "itemid"], "sentSegmentedWithoutStops": ["this.navigationview.setcheckeditem", "itemid"], "sentSegmentedWithoutStopsStemmed": ["this.navigationview.setcheckeditem", "itemid"]}, {"number": 197, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.closeNavDrawer();", "sentSegmented": ["this.closenavdrawer"], "sentSegmentedWithoutStops": ["this.closenavdrawer"], "sentSegmentedWithoutStopsStemmed": ["this.closenavdraw"]}, {"number": 198, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        return true;", "sentSegmented": ["return", "true"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 199, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 200, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 201, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected void onCreate(final Bundle savedInstanceState) {", "sentSegmented": ["protected", "void", "oncreate", "final", "bundle", "savedinstancestate"], "sentSegmentedWithoutStops": ["oncreate", "bundle", "savedinstancestate"], "sentSegmentedWithoutStopsStemmed": ["oncreat", "bundl", "savedinstancest"]}, {"number": 202, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        super.onCreate(savedInstanceState);", "sentSegmented": ["super.oncreate", "savedinstancestate"], "sentSegmentedWithoutStops": ["super.oncreate", "savedinstancestate"], "sentSegmentedWithoutStopsStemmed": ["super.oncr", "savedinstancest"]}, {"number": 203, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.setContentView(this.getLayoutResId());", "sentSegmented": ["this.setcontentview", "this.getlayoutresid"], "sentSegmentedWithoutStops": ["this.setcontentview", "this.getlayoutresid"], "sentSegmentedWithoutStopsStemmed": ["this.setcontentview", "this.getlayoutresid"]}, {"number": 204, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.drawerLayout = (DrawerLayout) this.findViewById(R.id.drawer_layout);", "sentSegmented": ["this.drawerlayout", "drawerlayout", "this.findviewbyid", "r.id.drawer_layout"], "sentSegmentedWithoutStops": ["this.drawerlayout", "drawerlayout", "this.findviewbyid", "r.id.drawer_layout"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout", "drawerlayout", "this.findviewbyid", "r.id.drawer_layout"]}, {"number": 205, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.appBar = (AppBarLayout) this.findViewById(R.id.app_bar_layout);", "sentSegmented": ["this.appbar", "appbarlayout", "this.findviewbyid", "r.id.app_bar_layout"], "sentSegmentedWithoutStops": ["this.appbar", "appbarlayout", "this.findviewbyid", "r.id.app_bar_layout"], "sentSegmentedWithoutStopsStemmed": ["this.appbar", "appbarlayout", "this.findviewbyid", "r.id.app_bar_layout"]}, {"number": 206, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.toolbar = (Toolbar) this.findViewById(R.id.tool_bar);", "sentSegmented": ["this.toolbar", "toolbar", "this.findviewbyid", "r.id.tool_bar"], "sentSegmentedWithoutStops": ["this.toolbar", "toolbar", "this.findviewbyid", "r.id.tool_bar"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar", "toolbar", "this.findviewbyid", "r.id.tool_bar"]}, {"number": 207, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.navigationView = (NavigationView) this.findViewById(R.id.navigation_view);", "sentSegmented": ["this.navigationview", "navigationview", "this.findviewbyid", "r.id.navigation_view"], "sentSegmentedWithoutStops": ["this.navigationview", "navigationview", "this.findviewbyid", "r.id.navigation_view"], "sentSegmentedWithoutStopsStemmed": ["this.navigationview", "navigationview", "this.findviewbyid", "r.id.navigation_view"]}, {"number": 208, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 209, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    // Must call this for drawer toggle to work correctly", "sentSegmented": ["must", "call", "this", "for", "drawer", "toggle", "to", "work", "correctly"], "sentSegmentedWithoutStops": ["must", "call", "drawer", "toggle", "work", "correctly"], "sentSegmentedWithoutStopsStemmed": ["must", "call", "drawer", "toggl", "work", "correctli"]}, {"number": 210, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 211, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected void onPostCreate(final Bundle savedInstanceState) {", "sentSegmented": ["protected", "void", "onpostcreate", "final", "bundle", "savedinstancestate"], "sentSegmentedWithoutStops": ["onpostcreate", "bundle", "savedinstancestate"], "sentSegmentedWithoutStopsStemmed": ["onpostcr", "bundl", "savedinstancest"]}, {"number": 212, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        super.onPostCreate(savedInstanceState);", "sentSegmented": ["super.onpostcreate", "savedinstancestate"], "sentSegmentedWithoutStops": ["super.onpostcreate", "savedinstancestate"], "sentSegmentedWithoutStopsStemmed": ["super.onpostcr", "savedinstancest"]}, {"number": 213, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        // Setup Toolbar", "sentSegmented": ["setup", "toolbar"], "sentSegmentedWithoutStops": ["setup", "toolbar"], "sentSegmentedWithoutStopsStemmed": ["setup", "toolbar"]}, {"number": 214, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        try {", "sentSegmented": ["try"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 215, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            if (this.toolbar != null) {", "sentSegmented": ["if", "this.toolbar", "null"], "sentSegmentedWithoutStops": ["this.toolbar"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar"]}, {"number": 216, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                this.setToolbarNavigationIcon(R.drawable.ic_menu_white_24dp);", "sentSegmented": ["this.settoolbarnavigationicon", "r.drawable.ic_menu_white_24dp"], "sentSegmentedWithoutStops": ["this.settoolbarnavigationicon", "r.drawable.ic_menu_white_24dp"], "sentSegmentedWithoutStopsStemmed": ["this.settoolbarnavigationicon", "r.drawable.ic_menu_white_24dp"]}, {"number": 217, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                this.setSupportActionBar(this.toolbar);", "sentSegmented": ["this.setsupportactionbar", "this.toolbar"], "sentSegmentedWithoutStops": ["this.setsupportactionbar", "this.toolbar"], "sentSegmentedWithoutStopsStemmed": ["this.setsupportactionbar", "this.toolbar"]}, {"number": 218, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 219, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        } catch (final Throwable e) {", "sentSegmented": ["catch", "final", "throwable", "e"], "sentSegmentedWithoutStops": ["throwable", "e"], "sentSegmentedWithoutStopsStemmed": ["throwabl", "e"]}, {"number": 220, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            LogUtils.logE(TAG, \"Sadly, Robolectric blows up when this method is called.\", e);", "sentSegmented": ["logutils.loge", "tag", "sadly", "robolectric", "blows", "up", "when", "this", "method", "is", "called", "e"], "sentSegmentedWithoutStops": ["logutils.loge", "tag", "sadly", "robolectric", "blows", "method", "called", "e"], "sentSegmentedWithoutStopsStemmed": ["logutils.log", "tag", "sadli", "robolectr", "blow", "method", "call", "e"]}, {"number": 221, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 222, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        // Setup DrawerLayout", "sentSegmented": ["setup", "drawerlayout"], "sentSegmentedWithoutStops": ["setup", "drawerlayout"], "sentSegmentedWithoutStopsStemmed": ["setup", "drawerlayout"]}, {"number": 223, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.drawerLayout != null && this.toolbar != null) {", "sentSegmented": ["if", "this.drawerlayout", "null", "this.toolbar", "null"], "sentSegmentedWithoutStops": ["this.drawerlayout", "this.toolbar"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout", "this.toolbar"]}, {"number": 224, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.drawerToggle = new ActionBarDrawerToggle(this, this.drawerLayout, this.toolbar, R.string.nav_open,", "sentSegmented": ["this.drawertoggle", "new", "actionbardrawertoggle", "this", "this.drawerlayout", "this.toolbar", "r.string.nav_open"], "sentSegmentedWithoutStops": ["this.drawertoggle", "actionbardrawertoggle", "this.drawerlayout", "this.toolbar", "r.string.nav_open"], "sentSegmentedWithoutStopsStemmed": ["this.drawertoggl", "actionbardrawertoggl", "this.drawerlayout", "this.toolbar", "r.string.nav_open"]}, {"number": 225, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    R.string.nav_close);", "sentSegmented": ["r.string.nav_close"], "sentSegmentedWithoutStops": ["r.string.nav_close"], "sentSegmentedWithoutStopsStemmed": ["r.string.nav_clos"]}, {"number": 226, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.drawerLayout.addDrawerListener(this.drawerToggle);", "sentSegmented": ["this.drawerlayout.adddrawerlistener", "this.drawertoggle"], "sentSegmentedWithoutStops": ["this.drawerlayout.adddrawerlistener", "this.drawertoggle"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout.adddrawerlisten", "this.drawertoggl"]}, {"number": 227, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            // Sync the toggle state after onRestoreInstanceState has occurred.", "sentSegmented": ["sync", "the", "toggle", "state", "after", "onrestoreinstancestate", "has", "occurred"], "sentSegmentedWithoutStops": ["sync", "toggle", "state", "onrestoreinstancestate", "occurred"], "sentSegmentedWithoutStopsStemmed": ["sync", "toggl", "state", "onrestoreinstancest", "occur"]}, {"number": 228, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.drawerToggle.syncState();", "sentSegmented": ["this.drawertoggle.syncstate"], "sentSegmentedWithoutStops": ["this.drawertoggle.syncstate"], "sentSegmentedWithoutStopsStemmed": ["this.drawertoggle.syncst"]}, {"number": 229, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 230, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        // Setup NavigationView", "sentSegmented": ["setup", "navigationview"], "sentSegmentedWithoutStops": ["setup", "navigationview"], "sentSegmentedWithoutStopsStemmed": ["setup", "navigationview"]}, {"number": 231, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.navigationView != null) {", "sentSegmented": ["if", "this.navigationview", "null"], "sentSegmentedWithoutStops": ["this.navigationview"], "sentSegmentedWithoutStopsStemmed": ["this.navigationview"]}, {"number": 232, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.navigationView.setNavigationItemSelectedListener(this);", "sentSegmented": ["this.navigationview.setnavigationitemselectedlistener", "this"], "sentSegmentedWithoutStops": ["this.navigationview.setnavigationitemselectedlistener"], "sentSegmentedWithoutStopsStemmed": ["this.navigationview.setnavigationitemselectedlisten"]}, {"number": 233, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.navigationView.setCheckedItem(R.id.menu_nav_home);", "sentSegmented": ["this.navigationview.setcheckeditem", "r.id.menu_nav_home"], "sentSegmentedWithoutStops": ["this.navigationview.setcheckeditem", "r.id.menu_nav_home"], "sentSegmentedWithoutStopsStemmed": ["this.navigationview.setcheckeditem", "r.id.menu_nav_hom"]}, {"number": 234, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 235, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 236, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 237, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected void onDestroy() {", "sentSegmented": ["protected", "void", "ondestroy"], "sentSegmentedWithoutStops": ["ondestroy"], "sentSegmentedWithoutStopsStemmed": ["ondestroy"]}, {"number": 238, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        super.onDestroy();", "sentSegmented": ["super.ondestroy"], "sentSegmentedWithoutStops": ["super.ondestroy"], "sentSegmentedWithoutStopsStemmed": ["super.ondestroy"]}, {"number": 239, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.handler.removeCallbacksAndMessages(null);", "sentSegmented": ["this.handler.removecallbacksandmessages", "null"], "sentSegmentedWithoutStops": ["this.handler.removecallbacksandmessages"], "sentSegmentedWithoutStopsStemmed": ["this.handler.removecallbacksandmessag"]}, {"number": 240, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 241, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 242, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public void onConfigurationChanged(final Configuration newConfig) {", "sentSegmented": ["public", "void", "onconfigurationchanged", "final", "configuration", "newconfig"], "sentSegmentedWithoutStops": ["onconfigurationchanged", "configuration", "newconfig"], "sentSegmentedWithoutStopsStemmed": ["onconfigurationchang", "configur", "newconfig"]}, {"number": 243, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        super.onConfigurationChanged(newConfig);", "sentSegmented": ["super.onconfigurationchanged", "newconfig"], "sentSegmentedWithoutStops": ["super.onconfigurationchanged", "newconfig"], "sentSegmentedWithoutStopsStemmed": ["super.onconfigurationchang", "newconfig"]}, {"number": 244, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.drawerToggle.onConfigurationChanged(newConfig);", "sentSegmented": ["this.drawertoggle.onconfigurationchanged", "newconfig"], "sentSegmentedWithoutStops": ["this.drawertoggle.onconfigurationchanged", "newconfig"], "sentSegmentedWithoutStopsStemmed": ["this.drawertoggle.onconfigurationchang", "newconfig"]}, {"number": 245, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 246, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 247, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public boolean onCreateOptionsMenu(final Menu menu) {", "sentSegmented": ["public", "boolean", "oncreateoptionsmenu", "final", "menu", "menu"], "sentSegmentedWithoutStops": ["oncreateoptionsmenu", "menu", "menu"], "sentSegmentedWithoutStopsStemmed": ["oncreateoptionsmenu", "menu", "menu"]}, {"number": 248, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.getMenuInflater().inflate(R.menu.menu_activity_main, menu);", "sentSegmented": ["this.getmenuinflater", ".inflate", "r.menu.menu_activity_main", "menu"], "sentSegmentedWithoutStops": ["this.getmenuinflater", ".inflate", "r.menu.menu_activity_main", "menu"], "sentSegmentedWithoutStopsStemmed": ["this.getmenuinflat", ".inflat", "r.menu.menu_activity_main", "menu"]}, {"number": 249, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        return super.onCreateOptionsMenu(menu);", "sentSegmented": ["return", "super.oncreateoptionsmenu", "menu"], "sentSegmentedWithoutStops": ["super.oncreateoptionsmenu", "menu"], "sentSegmentedWithoutStopsStemmed": ["super.oncreateoptionsmenu", "menu"]}, {"number": 250, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 251, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 252, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public boolean onOptionsItemSelected(final MenuItem item) {", "sentSegmented": ["public", "boolean", "onoptionsitemselected", "final", "menuitem", "item"], "sentSegmentedWithoutStops": ["onoptionsitemselected", "menuitem", "item"], "sentSegmentedWithoutStopsStemmed": ["onoptionsitemselect", "menuitem", "item"]}, {"number": 253, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        // Pass the event to ActionBarDrawerToggle, if it returns", "sentSegmented": ["pass", "the", "event", "to", "actionbardrawertoggle", "if", "it", "returns"], "sentSegmentedWithoutStops": ["pass", "event", "actionbardrawertoggle", "returns"], "sentSegmentedWithoutStopsStemmed": ["pass", "event", "actionbardrawertoggl", "return"]}, {"number": 254, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        // true, then it has handled the app icon touch event", "sentSegmented": ["true", "then", "it", "has", "handled", "the", "app", "icon", "touch", "event"], "sentSegmentedWithoutStops": ["handled", "app", "icon", "touch", "event"], "sentSegmentedWithoutStopsStemmed": ["handl", "app", "icon", "touch", "event"]}, {"number": 255, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.drawerLayout != null && this.drawerToggle.onOptionsItemSelected(item)) {", "sentSegmented": ["if", "this.drawerlayout", "null", "this.drawertoggle.onoptionsitemselected", "item"], "sentSegmentedWithoutStops": ["this.drawerlayout", "this.drawertoggle.onoptionsitemselected", "item"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout", "this.drawertoggle.onoptionsitemselect", "item"]}, {"number": 256, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            return true;", "sentSegmented": ["return", "true"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 257, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 258, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        switch (item.getItemId()) {", "sentSegmented": ["switch", "item.getitemid"], "sentSegmentedWithoutStops": ["item.getitemid"], "sentSegmentedWithoutStopsStemmed": ["item.getitemid"]}, {"number": 259, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            case android.R.id.home:", "sentSegmented": ["case", "android.r.id.home"], "sentSegmentedWithoutStops": ["android.r.id.home"], "sentSegmentedWithoutStopsStemmed": ["android.r.id.hom"]}, {"number": 260, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                if (this.drawerLayout != null) {", "sentSegmented": ["if", "this.drawerlayout", "null"], "sentSegmentedWithoutStops": ["this.drawerlayout"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout"]}, {"number": 261, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    this.drawerLayout.openDrawer(GravityCompat.START);", "sentSegmented": ["this.drawerlayout.opendrawer", "gravitycompat.start"], "sentSegmentedWithoutStops": ["this.drawerlayout.opendrawer", "gravitycompat.start"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout.opendraw", "gravitycompat.start"]}, {"number": 262, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                } else {", "sentSegmented": ["else"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 263, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    this.finish();", "sentSegmented": ["this.finish"], "sentSegmentedWithoutStops": ["this.finish"], "sentSegmentedWithoutStopsStemmed": ["this.finish"]}, {"number": 264, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 265, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                return true;", "sentSegmented": ["return", "true"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 266, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            default:", "sentSegmented": ["default"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 267, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                return super.onOptionsItemSelected(item);", "sentSegmented": ["return", "super.onoptionsitemselected", "item"], "sentSegmentedWithoutStops": ["super.onoptionsitemselected", "item"], "sentSegmentedWithoutStopsStemmed": ["super.onoptionsitemselect", "item"]}, {"number": 268, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 269, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 270, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 271, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public void onBackPressed() {", "sentSegmented": ["public", "void", "onbackpressed"], "sentSegmentedWithoutStops": ["onbackpressed"], "sentSegmentedWithoutStopsStemmed": ["onbackpress"]}, {"number": 272, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.isNavDrawerOpen()) {", "sentSegmented": ["if", "this.isnavdraweropen"], "sentSegmentedWithoutStops": ["this.isnavdraweropen"], "sentSegmentedWithoutStopsStemmed": ["this.isnavdraweropen"]}, {"number": 273, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.closeNavDrawer();", "sentSegmented": ["this.closenavdrawer"], "sentSegmentedWithoutStops": ["this.closenavdrawer"], "sentSegmentedWithoutStopsStemmed": ["this.closenavdraw"]}, {"number": 274, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        } else {", "sentSegmented": ["else"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 275, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            super.onBackPressed();", "sentSegmented": ["super.onbackpressed"], "sentSegmentedWithoutStops": ["super.onbackpressed"], "sentSegmentedWithoutStopsStemmed": ["super.onbackpress"]}, {"number": 276, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 277, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 278, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public void setToolbarTitle(final CharSequence title) {", "sentSegmented": ["public", "void", "settoolbartitle", "final", "charsequence", "title"], "sentSegmentedWithoutStops": ["settoolbartitle", "charsequence"], "sentSegmentedWithoutStopsStemmed": ["settoolbartitl", "charsequ"]}, {"number": 279, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.toolbar != null) {", "sentSegmented": ["if", "this.toolbar", "null"], "sentSegmentedWithoutStops": ["this.toolbar"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar"]}, {"number": 280, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.toolbar.setTitle(title);", "sentSegmented": ["this.toolbar.settitle", "title"], "sentSegmentedWithoutStops": ["this.toolbar.settitle"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar.settitl"]}, {"number": 281, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 282, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 283, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public void setToolbarSubtitle(final CharSequence subtitle) {", "sentSegmented": ["public", "void", "settoolbarsubtitle", "final", "charsequence", "subtitle"], "sentSegmentedWithoutStops": ["settoolbarsubtitle", "charsequence", "subtitle"], "sentSegmentedWithoutStopsStemmed": ["settoolbarsubtitl", "charsequ", "subtitl"]}, {"number": 284, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.toolbar != null) {", "sentSegmented": ["if", "this.toolbar", "null"], "sentSegmentedWithoutStops": ["this.toolbar"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar"]}, {"number": 285, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.toolbar.setSubtitle(subtitle);", "sentSegmented": ["this.toolbar.setsubtitle", "subtitle"], "sentSegmentedWithoutStops": ["this.toolbar.setsubtitle", "subtitle"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar.setsubtitl", "subtitl"]}, {"number": 286, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 287, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 288, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    public void setToolbarNavigationIcon(final int resId) {", "sentSegmented": ["public", "void", "settoolbarnavigationicon", "final", "int", "resid"], "sentSegmentedWithoutStops": ["settoolbarnavigationicon", "resid"], "sentSegmentedWithoutStopsStemmed": ["settoolbarnavigationicon", "resid"]}, {"number": 289, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.toolbar != null) {", "sentSegmented": ["if", "this.toolbar", "null"], "sentSegmentedWithoutStops": ["this.toolbar"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar"]}, {"number": 290, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.toolbar.setNavigationIcon(resId);", "sentSegmented": ["this.toolbar.setnavigationicon", "resid"], "sentSegmentedWithoutStops": ["this.toolbar.setnavigationicon", "resid"], "sentSegmentedWithoutStopsStemmed": ["this.toolbar.setnavigationicon", "resid"]}, {"number": 291, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 292, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 293, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected boolean isNavDrawerOpen() {", "sentSegmented": ["protected", "boolean", "isnavdraweropen"], "sentSegmentedWithoutStops": ["isnavdraweropen"], "sentSegmentedWithoutStopsStemmed": ["isnavdraweropen"]}, {"number": 294, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        return this.drawerLayout != null && this.drawerLayout.isDrawerOpen(GravityCompat.START);", "sentSegmented": ["return", "this.drawerlayout", "null", "this.drawerlayout.isdraweropen", "gravitycompat.start"], "sentSegmentedWithoutStops": ["this.drawerlayout", "this.drawerlayout.isdraweropen", "gravitycompat.start"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout", "this.drawerlayout.isdraweropen", "gravitycompat.start"]}, {"number": 295, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 296, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected void openNavDrawer() {", "sentSegmented": ["protected", "void", "opennavdrawer"], "sentSegmentedWithoutStops": ["opennavdrawer"], "sentSegmentedWithoutStopsStemmed": ["opennavdraw"]}, {"number": 297, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.drawerLayout != null) {", "sentSegmented": ["if", "this.drawerlayout", "null"], "sentSegmentedWithoutStops": ["this.drawerlayout"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout"]}, {"number": 298, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.drawerLayout.openDrawer(GravityCompat.START);", "sentSegmented": ["this.drawerlayout.opendrawer", "gravitycompat.start"], "sentSegmentedWithoutStops": ["this.drawerlayout.opendrawer", "gravitycompat.start"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout.opendraw", "gravitycompat.start"]}, {"number": 299, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 300, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 301, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    protected void closeNavDrawer() {", "sentSegmented": ["protected", "void", "closenavdrawer"], "sentSegmentedWithoutStops": ["closenavdrawer"], "sentSegmentedWithoutStopsStemmed": ["closenavdraw"]}, {"number": 302, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (this.drawerLayout != null) {", "sentSegmented": ["if", "this.drawerlayout", "null"], "sentSegmentedWithoutStops": ["this.drawerlayout"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout"]}, {"number": 303, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.drawerLayout.closeDrawer(GravityCompat.START);", "sentSegmented": ["this.drawerlayout.closedrawer", "gravitycompat.start"], "sentSegmentedWithoutStops": ["this.drawerlayout.closedrawer", "gravitycompat.start"], "sentSegmentedWithoutStopsStemmed": ["this.drawerlayout.closedraw", "gravitycompat.start"]}, {"number": 304, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 305, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 306, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private void onNavDrawerItemClicked(final int id) {", "sentSegmented": ["private", "void", "onnavdraweritemclicked", "final", "int", "id"], "sentSegmentedWithoutStops": ["onnavdraweritemclicked", "id"], "sentSegmentedWithoutStopsStemmed": ["onnavdraweritemclick", "id"]}, {"number": 307, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        this.handler.postDelayed(new Runnable() {", "sentSegmented": ["this.handler.postdelayed", "new", "runnable"], "sentSegmentedWithoutStops": ["this.handler.postdelayed", "runnable"], "sentSegmentedWithoutStopsStemmed": ["this.handler.postdelay", "runnabl"]}, {"number": 308, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 309, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            public void run() {", "sentSegmented": ["public", "void", "run"], "sentSegmentedWithoutStops": ["run"], "sentSegmentedWithoutStopsStemmed": ["run"]}, {"number": 310, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                goToNavDrawerItem(id);", "sentSegmented": ["gotonavdraweritem", "id"], "sentSegmentedWithoutStops": ["gotonavdraweritem", "id"], "sentSegmentedWithoutStopsStemmed": ["gotonavdraweritem", "id"]}, {"number": 311, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 312, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }, NAV_DRAWER_LAUNCH_DELAY);", "sentSegmented": ["nav_drawer_launch_delay"], "sentSegmentedWithoutStops": ["nav_drawer_launch_delay"], "sentSegmentedWithoutStopsStemmed": ["nav_drawer_launch_delay"]}, {"number": 313, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 314, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    private void goToNavDrawerItem(final int id) {", "sentSegmented": ["private", "void", "gotonavdraweritem", "final", "int", "id"], "sentSegmentedWithoutStops": ["gotonavdraweritem", "id"], "sentSegmentedWithoutStopsStemmed": ["gotonavdraweritem", "id"]}, {"number": 315, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        if (id == R.id.menu_app_settings) {", "sentSegmented": ["if", "id", "r.id.menu_app_settings"], "sentSegmentedWithoutStops": ["id", "r.id.menu_app_settings"], "sentSegmentedWithoutStopsStemmed": ["id", "r.id.menu_app_set"]}, {"number": 316, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.startActivity(new Intent(this, SettingsActivity.class));", "sentSegmented": ["this.startactivity", "new", "intent", "this", "settingsactivity.class"], "sentSegmentedWithoutStops": ["this.startactivity", "intent", "settingsactivity.class"], "sentSegmentedWithoutStopsStemmed": ["this.startact", "intent", "settingsactivity.class"]}, {"number": 317, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        } else {", "sentSegmented": ["else"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 318, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            this.closeNavDrawer();", "sentSegmented": ["this.closenavdrawer"], "sentSegmentedWithoutStops": ["this.closenavdrawer"], "sentSegmentedWithoutStopsStemmed": ["this.closenavdraw"]}, {"number": 319, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 320, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 321, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMDg5NjQ3OA==", "author": {"login": "cypressf"}, "body": "How does this issue relate to https://code.google.com/p/android/issues/detail?id=200043? If google fixes that bug, will it also fix this issue?\n", "bodyText": "How does this issue relate to https://code.google.com/p/android/issues/detail?id=200043? If google fixes that bug, will it also fix this issue?", "bodyHTML": "<p>How does this issue relate to <a rel=\"nofollow\" href=\"https://code.google.com/p/android/issues/detail?id=200043\">https://code.google.com/p/android/issues/detail?id=200043</a>? If google fixes that bug, will it also fix this issue?</p>", "createdAt": "2016-07-06T20:29:34Z", "publishedAt": "2016-07-06T20:29:34Z", "lastEditedAt": null, "updatedAt": "2016-07-06T20:29:34Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 322, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "How does this issue relate to https://code.google.com/p/android/issues/detail?id=200043?", "sentSegmented": ["how", "does", "this", "issue", "relate", "to", "https", "//code.google.com/p/android/issues/detail", "id=200043"], "sentSegmentedWithoutStops": ["issue", "relate", "https", "//code.google.com/p/android/issues/detail", "id=200043"], "sentSegmentedWithoutStopsStemmed": ["issu", "relat", "http", "//code.google.com/p/android/issues/detail", "id=200043"]}, {"number": 323, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If google fixes that bug, will it also fix this issue?", "sentSegmented": ["if", "google", "fixes", "that", "bug", "will", "it", "also", "fix", "this", "issue"], "sentSegmentedWithoutStops": ["google", "fixes", "bug", "also", "fix", "issue"], "sentSegmentedWithoutStopsStemmed": ["googl", "fix", "bug", "also", "fix", "issu"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMDkwMzk3NA==", "author": {"login": "JakeWharton"}, "body": "No idea. Maybe. It depends on what information is given to the processor in\nthe incremental compilation.\n\nOn Wed, Jul 6, 2016 at 4:29 PM Cypress Frankenfeld notifications@github.com\nwrote:\n\n> How does this issue relate to\n> https://code.google.com/p/android/issues/detail?id=200043? If google\n> fixes that bug, will it also fix this issue?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/JakeWharton/butterknife/issues/31#issuecomment-230896478,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAEEEUG3d8zRfhtBSEpxy8Ahgd88RKCBks5qTBAvgaJpZM4An8m2\n> .\n", "bodyText": "No idea. Maybe. It depends on what information is given to the processor in\nthe incremental compilation.\nOn Wed, Jul 6, 2016 at 4:29 PM Cypress Frankenfeld notifications@github.com\nwrote:\n\nHow does this issue relate to\nhttps://code.google.com/p/android/issues/detail?id=200043? If google\nfixes that bug, will it also fix this issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n#31 (comment),\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAEEEUG3d8zRfhtBSEpxy8Ahgd88RKCBks5qTBAvgaJpZM4An8m2\n.", "bodyHTML": "<p>No idea. Maybe. It depends on what information is given to the processor in<br>\nthe incremental compilation.</p>\n<p>On Wed, Jul 6, 2016 at 4:29 PM Cypress Frankenfeld <a href=\"mailto:notifications@github.com\">notifications@github.com</a><br>\nwrote:</p>\n<blockquote>\n<p>How does this issue relate to<br>\n<a href=\"https://code.google.com/p/android/issues/detail?id=200043\" rel=\"nofollow\">https://code.google.com/p/android/issues/detail?id=200043</a>? If google<br>\nfixes that bug, will it also fix this issue?</p>\n<p>\u2014<br>\nYou are receiving this because you were mentioned.<br>\nReply to this email directly, view it on GitHub<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"13882123\" data-permission-text=\"Title is private\" data-url=\"https://github.com/JakeWharton/butterknife/issues/31\" data-hovercard-type=\"issue\" data-hovercard-url=\"/JakeWharton/butterknife/issues/31/hovercard?comment_id=230896478&amp;comment_type=issue_comment\" href=\"https://github.com/JakeWharton/butterknife/issues/31#issuecomment-230896478\">#31 (comment)</a>,<br>\nor mute the thread<br>\n<a href=\"https://github.com/notifications/unsubscribe/AAEEEUG3d8zRfhtBSEpxy8Ahgd88RKCBks5qTBAvgaJpZM4An8m2\">https://github.com/notifications/unsubscribe/AAEEEUG3d8zRfhtBSEpxy8Ahgd88RKCBks5qTBAvgaJpZM4An8m2</a><br>\n.</p>\n</blockquote>", "createdAt": "2016-07-06T20:56:38Z", "publishedAt": "2016-07-06T20:56:38Z", "lastEditedAt": null, "updatedAt": "2016-07-06T20:56:38Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 324, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "No idea.", "sentSegmented": ["no", "idea"], "sentSegmentedWithoutStops": ["idea"], "sentSegmentedWithoutStopsStemmed": ["idea"]}, {"number": 325, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Maybe.", "sentSegmented": ["maybe"], "sentSegmentedWithoutStops": ["maybe"], "sentSegmentedWithoutStopsStemmed": ["mayb"]}, {"number": 326, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It depends on what information is given to the processor in", "sentSegmented": ["it", "depends", "on", "what", "information", "is", "given", "to", "the", "processor", "in"], "sentSegmentedWithoutStops": ["depends", "information", "given", "processor"], "sentSegmentedWithoutStopsStemmed": ["depend", "inform", "given", "processor"]}, {"number": 327, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "the incremental compilation.", "sentSegmented": ["the", "incremental", "compilation"], "sentSegmentedWithoutStops": ["incremental", "compilation"], "sentSegmentedWithoutStopsStemmed": ["increment", "compil"]}, {"number": 328, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "On Wed, Jul 6, 2016 at 4:29 PM Cypress Frankenfeld notifications@github.com", "sentSegmented": ["on", "wed", "jul", "6", "2016", "at", "4:29", "pm", "cypress", "frankenfeld", "notifications", "github.com"], "sentSegmentedWithoutStops": ["wed", "jul", "6", "2016", "4:29", "pm", "cypress", "frankenfeld", "notifications", "github.com"], "sentSegmentedWithoutStopsStemmed": ["wed", "jul", "6", "2016", "4:29", "pm", "cypress", "frankenfeld", "notif", "github.com"]}, {"number": 329, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "wrote:", "sentSegmented": ["wrote"], "sentSegmentedWithoutStops": ["wrote"], "sentSegmentedWithoutStopsStemmed": ["wrote"]}, {"number": 330, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "How does this issue relate to", "sentSegmented": ["how", "does", "this", "issue", "relate", "to"], "sentSegmentedWithoutStops": ["issue", "relate"], "sentSegmentedWithoutStopsStemmed": ["issu", "relat"]}, {"number": 331, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "https://code.google.com/p/android/issues/detail?id=200043?", "sentSegmented": ["https", "//code.google.com/p/android/issues/detail", "id=200043"], "sentSegmentedWithoutStops": ["https", "//code.google.com/p/android/issues/detail", "id=200043"], "sentSegmentedWithoutStopsStemmed": ["http", "//code.google.com/p/android/issues/detail", "id=200043"]}, {"number": 332, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "If google", "sentSegmented": ["if", "google"], "sentSegmentedWithoutStops": ["google"], "sentSegmentedWithoutStopsStemmed": ["googl"]}, {"number": 333, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "fixes that bug, will it also fix this issue?", "sentSegmented": ["fixes", "that", "bug", "will", "it", "also", "fix", "this", "issue"], "sentSegmentedWithoutStops": ["fixes", "bug", "also", "fix", "issue"], "sentSegmentedWithoutStopsStemmed": ["fix", "bug", "also", "fix", "issu"]}, {"number": 334, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "\u2014", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 335, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "You are receiving this because you were mentioned.", "sentSegmented": ["you", "are", "receiving", "this", "because", "you", "were", "mentioned"], "sentSegmentedWithoutStops": ["receiving", "mentioned"], "sentSegmentedWithoutStopsStemmed": ["receiv", "mention"]}, {"number": 336, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "Reply to this email directly, view it on GitHub", "sentSegmented": ["reply", "to", "this", "email", "directly", "view", "it", "on", "github"], "sentSegmentedWithoutStops": ["reply", "email", "directly", "view", "github"], "sentSegmentedWithoutStopsStemmed": ["repli", "email", "directli", "view", "github"]}, {"number": 337, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "#31 (comment),", "sentSegmented": ["31", "comment"], "sentSegmentedWithoutStops": ["31", "comment"], "sentSegmentedWithoutStopsStemmed": ["31", "comment"]}, {"number": 338, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "or mute the thread", "sentSegmented": ["or", "mute", "the", "thread"], "sentSegmentedWithoutStops": ["mute", "thread"], "sentSegmentedWithoutStopsStemmed": ["mute", "thread"]}, {"number": 339, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": "https://github.com/notifications/unsubscribe/AAEEEUG3d8zRfhtBSEpxy8Ahgd88RKCBks5qTBAvgaJpZM4An8m2", "sentSegmented": ["https", "//github.com/notifications/unsubscribe/aaeeeug3d8zrfhtbsepxy8ahgd88rkcbks5qtbavgajpzm4an8m2"], "sentSegmentedWithoutStops": ["https", "//github.com/notifications/unsubscribe/aaeeeug3d8zrfhtbsepxy8ahgd88rkcbks5qtbavgajpzm4an8m2"], "sentSegmentedWithoutStopsStemmed": ["http", "//github.com/notifications/unsubscribe/aaeeeug3d8zrfhtbsepxy8ahgd88rkcbks5qtbavgajpzm4an8m2"]}, {"number": 340, "isCode": false, "isBlockQuote": true, "blockQuoteDepth": 1, "sent": ".", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHODcNQpg==", "hasNextPage": false}, "totalCount": 19}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "OPEN", "titleSegmented": ["superclass", "injection", "gets", "removed"], "titleSegmentedWithoutStops": ["superclass", "injection", "gets", "removed"], "titleSegmentedWithoutStopsStemmed": ["superclass", "inject", "get", "remov"], "bodyParsed": [{"number": 131, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm using IDEA12.", "sentSegmented": ["i", "'m", "using", "idea12"], "sentSegmentedWithoutStops": ["'m", "using", "idea12"], "sentSegmentedWithoutStopsStemmed": ["'m", "use", "idea12"]}, {"number": 132, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Setup is: class B extends A, both classes have some @InjectView fields.", "sentSegmented": ["setup", "is", "class", "b", "extends", "a", "both", "classes", "have", "some", "injectview", "fields"], "sentSegmentedWithoutStops": ["setup", "class", "b", "extends", "classes", "injectview", "fields"], "sentSegmentedWithoutStopsStemmed": ["setup", "class", "b", "extend", "class", "injectview", "field"]}, {"number": 133, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A \"Rebuild Project\" creates:", "sentSegmented": ["a", "rebuild", "project", "creates"], "sentSegmentedWithoutStops": ["rebuild", "project", "creates"], "sentSegmentedWithoutStopsStemmed": ["rebuild", "project", "creat"]}, {"number": 134, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "A$$ViewInjector and B$$ViewInjector, the latter with a call to A$$ViewInjector.inject(finder, target, source)", "sentSegmented": ["a", "viewinjector", "and", "b", "viewinjector", "the", "latter", "with", "a", "call", "to", "a", "viewinjector.inject", "finder", "target", "source"], "sentSegmentedWithoutStops": ["viewinjector", "b", "viewinjector", "latter", "call", "viewinjector.inject", "finder", "target", "source"], "sentSegmentedWithoutStopsStemmed": ["viewinjector", "b", "viewinjector", "latter", "call", "viewinjector.inject", "finder", "target", "sourc"]}, {"number": 135, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I edit B and deploy to my device.", "sentSegmented": ["i", "edit", "b", "and", "deploy", "to", "my", "device"], "sentSegmentedWithoutStops": ["edit", "b", "deploy", "device"], "sentSegmentedWithoutStopsStemmed": ["edit", "b", "deploy", "devic"]}, {"number": 136, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Compiling starts and the call to A$$ViewInjector.inject() gets removed -> App crashes because my injected fields in B are now null.", "sentSegmented": ["compiling", "starts", "and", "the", "call", "to", "a", "viewinjector.inject", "gets", "removed", "app", "crashes", "because", "my", "injected", "fields", "in", "b", "are", "now", "null"], "sentSegmentedWithoutStops": ["compiling", "starts", "call", "viewinjector.inject", "gets", "removed", "app", "crashes", "injected", "fields", "b", "null"], "sentSegmentedWithoutStopsStemmed": ["compil", "start", "call", "viewinjector.inject", "get", "remov", "app", "crash", "inject", "field", "b", "null"]}]}