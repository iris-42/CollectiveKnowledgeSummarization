{"repository": {"owner": {"login": "PhilJay"}, "name": "MPAndroidChart", "forkCount": 8313, "stargazerCount": 32959, "createdAt": "2014-04-25T14:29:47Z", "updatedAt": "2021-03-18T07:57:03Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "java"}}}, {"node": {"topic": {"name": "chart"}}}, {"node": {"topic": {"name": "graph"}}}, {"node": {"topic": {"name": "android"}}}, {"node": {"topic": {"name": "mpandroidchart"}}}]}, "languages": {"edges": [{"node": {"name": "Java"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWU0NDkwODYzNA==", "number": 133, "author": {"login": "kenaiX"}, "title": "Time chart support", "body": "i used AChartEngine and your jar , if you can support time chart like AChartEngine , i think may be very useful !!\n", "bodyHTML": "<p>i used AChartEngine and your jar , if you can support time chart like AChartEngine , i think may be very useful !!</p>", "bodyText": "i used AChartEngine and your jar , if you can support time chart like AChartEngine , i think may be very useful !!", "assignees": {"edges": []}, "createdAt": "2014-10-05T08:28:49Z", "closed": true, "closedAt": "2016-07-02T14:04:04Z", "lastEditedAt": null, "publishedAt": "2014-10-05T08:28:49Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDU3OTk3NTQ4", "author": {"login": "Praveen2106"}, "body": "MPChart supports String for XLables. You can easily format the time to String using SimpleDateFormatter. \n", "bodyText": "MPChart supports String for XLables. You can easily format the time to String using SimpleDateFormatter.", "bodyHTML": "<p>MPChart supports String for XLables. You can easily format the time to String using SimpleDateFormatter.</p>", "createdAt": "2014-10-06T10:11:28Z", "publishedAt": "2014-10-06T10:11:28Z", "lastEditedAt": null, "updatedAt": "2014-10-06T10:11:28Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 3, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "MPChart supports String for XLables.", "sentSegmented": ["mpchart", "supports", "string", "for", "xlables"], "sentSegmentedWithoutStops": ["mpchart", "supports", "string", "xlables"], "sentSegmentedWithoutStopsStemmed": ["mpchart", "support", "string", "xlabl"]}, {"number": 4, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You can easily format the time to String using SimpleDateFormatter.", "sentSegmented": ["you", "can", "easily", "format", "the", "time", "to", "string", "using", "simpledateformatter"], "sentSegmentedWithoutStops": ["easily", "format", "time", "string", "using", "simpledateformatter"], "sentSegmentedWithoutStopsStemmed": ["easili", "format", "time", "string", "use", "simpledateformatt"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY3Mjk5MDA1", "author": {"login": "tsengvn"}, "body": "@Praveen2106 it's a nice approach too, but when we zoom out the chart , I think we need to show Month (or Year) text only, currently we can't do it right ? \n", "bodyText": "@Praveen2106 it's a nice approach too, but when we zoom out the chart , I think we need to show Month (or Year) text only, currently we can't do it right ?", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Praveen2106/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Praveen2106\">@Praveen2106</a> it's a nice approach too, but when we zoom out the chart , I think we need to show Month (or Year) text only, currently we can't do it right ?</p>", "createdAt": "2014-12-17T09:47:17Z", "publishedAt": "2014-12-17T09:47:17Z", "lastEditedAt": null, "updatedAt": "2014-12-17T09:47:17Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 5, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@Praveen2106 it's a nice approach too, but when we zoom out the chart , I think we need to show Month (or Year) text only, currently we can't do it right ?", "sentSegmented": ["praveen2106", "it", "'s", "a", "nice", "approach", "too", "but", "when", "we", "zoom", "out", "the", "chart", "i", "think", "we", "need", "to", "show", "month", "or", "year", "text", "only", "currently", "we", "ca", "n't", "do", "it", "right"], "sentSegmentedWithoutStops": ["praveen2106", "'s", "nice", "approach", "zoom", "chart", "think", "need", "show", "month", "year", "text", "currently", "ca", "n't", "right"], "sentSegmentedWithoutStopsStemmed": ["praveen2106", "'s", "nice", "approach", "zoom", "chart", "think", "need", "show", "month", "year", "text", "current", "ca", "n't", "right"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDk4MzgyMDk3", "author": {"login": "danielgindi"}, "body": "@tsengvn well of course you can! Just make your formatter query for the current scale, so you can decide what to show. \n", "bodyText": "@tsengvn well of course you can! Just make your formatter query for the current scale, so you can decide what to show.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/tsengvn/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tsengvn\">@tsengvn</a> well of course you can! Just make your formatter query for the current scale, so you can decide what to show.</p>", "createdAt": "2015-05-02T17:41:16Z", "publishedAt": "2015-05-02T17:41:16Z", "lastEditedAt": null, "updatedAt": "2015-05-02T17:41:16Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 6, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@tsengvn well of course you can!", "sentSegmented": ["tsengvn", "well", "of", "course", "you", "can"], "sentSegmentedWithoutStops": ["tsengvn", "well", "course"], "sentSegmentedWithoutStopsStemmed": ["tsengvn", "well", "cours"]}, {"number": 7, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Just make your formatter query for the current scale, so you can decide what to show.", "sentSegmented": ["just", "make", "your", "formatter", "query", "for", "the", "current", "scale", "so", "you", "can", "decide", "what", "to", "show"], "sentSegmentedWithoutStops": ["make", "formatter", "query", "current", "scale", "decide", "show"], "sentSegmentedWithoutStopsStemmed": ["make", "formatt", "queri", "current", "scale", "decid", "show"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwMDEyOTEwNA==", "author": {"login": "danielgindi"}, "body": "That's actually how it's always done in charts. You do not create a \"time specific chart\". You format the X labels based on visibility.\n", "bodyText": "That's actually how it's always done in charts. You do not create a \"time specific chart\". You format the X labels based on visibility.", "bodyHTML": "<p>That's actually how it's always done in charts. You do not create a \"time specific chart\". You format the X labels based on visibility.</p>", "createdAt": "2015-05-08T07:11:01Z", "publishedAt": "2015-05-08T07:11:01Z", "lastEditedAt": null, "updatedAt": "2015-05-08T07:11:01Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 8, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That's actually how it's always done in charts.", "sentSegmented": ["that", "'s", "actually", "how", "it", "'s", "always", "done", "in", "charts"], "sentSegmentedWithoutStops": ["'s", "actually", "'s", "always", "done", "charts"], "sentSegmentedWithoutStopsStemmed": ["'s", "actual", "'s", "alway", "done", "chart"]}, {"number": 9, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You do not create a \"time specific chart\".", "sentSegmented": ["you", "do", "not", "create", "a", "time", "specific", "chart"], "sentSegmentedWithoutStops": ["create", "time", "specific", "chart"], "sentSegmentedWithoutStopsStemmed": ["creat", "time", "specif", "chart"]}, {"number": 10, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "You format the X labels based on visibility.", "sentSegmented": ["you", "format", "the", "x", "labels", "based", "on", "visibility"], "sentSegmentedWithoutStops": ["format", "x", "labels", "based", "visibility"], "sentSegmentedWithoutStopsStemmed": ["format", "x", "label", "base", "visibl"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEwNDkwNDI0MA==", "author": {"login": "klassm"}, "body": "Hi @danielgindi \n\nOf course you can format x labels, but this is not always the only usecase. Having graph entries stemming from different time intervals (i.e. one entry after an hour, the next one 5 minutes later and the next one 20 minutes later) will result in three datapoints shown in the graph. This is correct. However, this looks ugly, because MPAndroidChart will position all three datapoints with the same distance between each other - which is wrong. Of course, MPAndroidChart cannot decided whether we got strings or dates as x labels.\n\nStill, in my opinion, this is exactly what this issue is about.\n\nMatthias\n", "bodyText": "Hi @danielgindi\nOf course you can format x labels, but this is not always the only usecase. Having graph entries stemming from different time intervals (i.e. one entry after an hour, the next one 5 minutes later and the next one 20 minutes later) will result in three datapoints shown in the graph. This is correct. However, this looks ugly, because MPAndroidChart will position all three datapoints with the same distance between each other - which is wrong. Of course, MPAndroidChart cannot decided whether we got strings or dates as x labels.\nStill, in my opinion, this is exactly what this issue is about.\nMatthias", "bodyHTML": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/danielgindi/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/danielgindi\">@danielgindi</a></p>\n<p>Of course you can format x labels, but this is not always the only usecase. Having graph entries stemming from different time intervals (i.e. one entry after an hour, the next one 5 minutes later and the next one 20 minutes later) will result in three datapoints shown in the graph. This is correct. However, this looks ugly, because MPAndroidChart will position all three datapoints with the same distance between each other - which is wrong. Of course, MPAndroidChart cannot decided whether we got strings or dates as x labels.</p>\n<p>Still, in my opinion, this is exactly what this issue is about.</p>\n<p>Matthias</p>", "createdAt": "2015-05-23T14:47:57Z", "publishedAt": "2015-05-23T14:47:57Z", "lastEditedAt": null, "updatedAt": "2015-05-23T14:47:57Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2018-02-10T04:15:14Z"}}]}, "bodyParsed": [{"number": 11, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi @danielgindi", "sentSegmented": ["hi", "danielgindi"], "sentSegmentedWithoutStops": ["hi", "danielgindi"], "sentSegmentedWithoutStopsStemmed": ["hi", "danielgindi"]}, {"number": 12, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Of course you can format x labels, but this is not always the only usecase.", "sentSegmented": ["of", "course", "you", "can", "format", "x", "labels", "but", "this", "is", "not", "always", "the", "only", "usecase"], "sentSegmentedWithoutStops": ["course", "format", "x", "labels", "always", "usecase"], "sentSegmentedWithoutStopsStemmed": ["cours", "format", "x", "label", "alway", "usecas"]}, {"number": 13, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Having graph entries stemming from different time intervals (i.e.", "sentSegmented": ["having", "graph", "entries", "stemming", "from", "different", "time", "intervals", "i.e"], "sentSegmentedWithoutStops": ["graph", "entries", "stemming", "different", "time", "intervals", "i.e"], "sentSegmentedWithoutStopsStemmed": ["graph", "entri", "stem", "differ", "time", "interv", "i.e"]}, {"number": 14, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "one entry after an hour, the next one 5 minutes later and the next one 20 minutes later) will result in three datapoints shown in the graph.", "sentSegmented": ["one", "entry", "after", "an", "hour", "the", "next", "one", "5", "minutes", "later", "and", "the", "next", "one", "20", "minutes", "later", "will", "result", "in", "three", "datapoints", "shown", "in", "the", "graph"], "sentSegmentedWithoutStops": ["one", "entry", "hour", "next", "one", "5", "minutes", "later", "next", "one", "20", "minutes", "later", "result", "three", "datapoints", "shown", "graph"], "sentSegmentedWithoutStopsStemmed": ["one", "entri", "hour", "next", "one", "5", "minut", "later", "next", "one", "20", "minut", "later", "result", "three", "datapoint", "shown", "graph"]}, {"number": 15, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "This is correct.", "sentSegmented": ["this", "is", "correct"], "sentSegmentedWithoutStops": ["correct"], "sentSegmentedWithoutStopsStemmed": ["correct"]}, {"number": 16, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "However, this looks ugly, because MPAndroidChart will position all three datapoints with the same distance between each other - which is wrong.", "sentSegmented": ["however", "this", "looks", "ugly", "because", "mpandroidchart", "will", "position", "all", "three", "datapoints", "with", "the", "same", "distance", "between", "each", "other", "which", "is", "wrong"], "sentSegmentedWithoutStops": ["however", "looks", "ugly", "mpandroidchart", "position", "three", "datapoints", "distance", "wrong"], "sentSegmentedWithoutStopsStemmed": ["howev", "look", "ugli", "mpandroidchart", "posit", "three", "datapoint", "distanc", "wrong"]}, {"number": 17, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Of course, MPAndroidChart cannot decided whether we got strings or dates as x labels.", "sentSegmented": ["of", "course", "mpandroidchart", "can", "not", "decided", "whether", "we", "got", "strings", "or", "dates", "as", "x", "labels"], "sentSegmentedWithoutStops": ["course", "mpandroidchart", "decided", "whether", "got", "strings", "dates", "x", "labels"], "sentSegmentedWithoutStopsStemmed": ["cours", "mpandroidchart", "decid", "whether", "got", "string", "date", "x", "label"]}, {"number": 18, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Still, in my opinion, this is exactly what this issue is about.", "sentSegmented": ["still", "in", "my", "opinion", "this", "is", "exactly", "what", "this", "issue", "is", "about"], "sentSegmentedWithoutStops": ["still", "opinion", "exactly", "issue"], "sentSegmentedWithoutStopsStemmed": ["still", "opinion", "exactli", "issu"]}, {"number": 19, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Matthias", "sentSegmented": ["matthias"], "sentSegmentedWithoutStops": ["matthias"], "sentSegmentedWithoutStopsStemmed": ["matthia"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDExMjk0ODA0Mw==", "author": {"login": "Lir10"}, "body": "+1 for time chart support\n", "bodyText": "+1 for time chart support", "bodyHTML": "<p>+1 for time chart support</p>", "createdAt": "2015-06-17T20:57:44Z", "publishedAt": "2015-06-17T20:57:44Z", "lastEditedAt": null, "updatedAt": "2015-06-17T20:57:44Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 20, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1 for time chart support", "sentSegmented": ["+1", "for", "time", "chart", "support"], "sentSegmentedWithoutStops": ["+1", "time", "chart", "support"], "sentSegmentedWithoutStopsStemmed": ["+1", "time", "chart", "support"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDExMzkzMjk1MQ==", "author": {"login": "rascheC"}, "body": "+1\n", "bodyText": "+1", "bodyHTML": "<p>+1</p>", "createdAt": "2015-06-21T17:19:16Z", "publishedAt": "2015-06-21T17:19:16Z", "lastEditedAt": null, "updatedAt": "2015-06-21T17:19:16Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 21, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1", "sentSegmented": ["+1"], "sentSegmentedWithoutStops": ["+1"], "sentSegmentedWithoutStopsStemmed": ["+1"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEyMDYwNTE5NA==", "author": {"login": "Jambetito"}, "body": "+1\n", "bodyText": "+1", "bodyHTML": "<p>+1</p>", "createdAt": "2015-07-11T11:15:06Z", "publishedAt": "2015-07-11T11:15:06Z", "lastEditedAt": null, "updatedAt": "2015-07-11T11:15:06Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 22, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1", "sentSegmented": ["+1"], "sentSegmentedWithoutStops": ["+1"], "sentSegmentedWithoutStopsStemmed": ["+1"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDEyMDYwNTUyMQ==", "author": {"login": "klassm"}, "body": "Well, how many votes do you need :-)\n", "bodyText": "Well, how many votes do you need :-)", "bodyHTML": "<p>Well, how many votes do you need :-)</p>", "createdAt": "2015-07-11T11:23:17Z", "publishedAt": "2015-07-11T11:23:17Z", "lastEditedAt": null, "updatedAt": "2015-10-30T08:15:13Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 23, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Well, how many votes do you need :-)", "sentSegmented": ["well", "how", "many", "votes", "do", "you", "need"], "sentSegmentedWithoutStops": ["well", "many", "votes", "need"], "sentSegmentedWithoutStopsStemmed": ["well", "mani", "vote", "need"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDE1MDg1MjU5MA==", "author": {"login": "Zainulabdeen"}, "body": "Looking to make this. If anyone have sample code then help :) Thanks \n", "bodyText": "Looking to make this. If anyone have sample code then help :) Thanks", "bodyHTML": "<p>Looking to make this. If anyone have sample code then help :) Thanks</p>", "createdAt": "2015-10-24T21:27:39Z", "publishedAt": "2015-10-24T21:27:39Z", "lastEditedAt": null, "updatedAt": "2015-10-24T21:27:39Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 24, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Looking to make this.", "sentSegmented": ["looking", "to", "make", "this"], "sentSegmentedWithoutStops": ["looking", "make"], "sentSegmentedWithoutStopsStemmed": ["look", "make"]}, {"number": 25, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If anyone have sample code then help :) Thanks", "sentSegmented": ["if", "anyone", "have", "sample", "code", "then", "help", "thanks"], "sentSegmentedWithoutStops": ["anyone", "sample", "code", "help", "thanks"], "sentSegmentedWithoutStopsStemmed": ["anyon", "sampl", "code", "help", "thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDE2NTU5MDM0Nw==", "author": {"login": "mohitagrawal"}, "body": "+1\n", "bodyText": "+1", "bodyHTML": "<p>+1</p>", "createdAt": "2015-12-17T21:41:44Z", "publishedAt": "2015-12-17T21:41:44Z", "lastEditedAt": null, "updatedAt": "2015-12-17T21:41:44Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 26, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1", "sentSegmented": ["+1"], "sentSegmentedWithoutStops": ["+1"], "sentSegmentedWithoutStopsStemmed": ["+1"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDE5MjU2NjM4NQ==", "author": {"login": "davidstosik"}, "body": "+1\n", "bodyText": "+1", "bodyHTML": "<p>+1</p>", "createdAt": "2016-03-05T04:17:42Z", "publishedAt": "2016-03-05T04:17:42Z", "lastEditedAt": null, "updatedAt": "2016-03-05T04:17:42Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 27, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1", "sentSegmented": ["+1"], "sentSegmentedWithoutStops": ["+1"], "sentSegmentedWithoutStopsStemmed": ["+1"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDE5ODE2ODg4Nw==", "author": {"login": "firebear"}, "body": "+1\n", "bodyText": "+1", "bodyHTML": "<p>+1</p>", "createdAt": "2016-03-18T02:34:10Z", "publishedAt": "2016-03-18T02:34:10Z", "lastEditedAt": null, "updatedAt": "2016-03-18T02:34:10Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 28, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "+1", "sentSegmented": ["+1"], "sentSegmentedWithoutStops": ["+1"], "sentSegmentedWithoutStopsStemmed": ["+1"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMTUzNjk2Nw==", "author": {"login": "klassm"}, "body": "Hi @PhilJay \nDoes \"closed\" mean that time chart support is now available or does it mean you won't add support for time charts any time soon?\nThanks,\nMatthias\n", "bodyText": "Hi @PhilJay\nDoes \"closed\" mean that time chart support is now available or does it mean you won't add support for time charts any time soon?\nThanks,\nMatthias", "bodyHTML": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/PhilJay/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/PhilJay\">@PhilJay</a><br>\nDoes \"closed\" mean that time chart support is now available or does it mean you won't add support for time charts any time soon?<br>\nThanks,<br>\nMatthias</p>", "createdAt": "2016-07-09T14:28:58Z", "publishedAt": "2016-07-09T14:28:58Z", "lastEditedAt": null, "updatedAt": "2016-07-09T14:28:58Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 29, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi @PhilJay", "sentSegmented": ["hi", "philjay"], "sentSegmentedWithoutStops": ["hi", "philjay"], "sentSegmentedWithoutStopsStemmed": ["hi", "philjay"]}, {"number": 30, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Does \"closed\" mean that time chart support is now available or does it mean you won't add support for time charts any time soon?", "sentSegmented": ["does", "closed", "mean", "that", "time", "chart", "support", "is", "now", "available", "or", "does", "it", "mean", "you", "wo", "n't", "add", "support", "for", "time", "charts", "any", "time", "soon"], "sentSegmentedWithoutStops": ["closed", "mean", "time", "chart", "support", "available", "mean", "wo", "n't", "add", "support", "time", "charts", "time", "soon"], "sentSegmentedWithoutStopsStemmed": ["close", "mean", "time", "chart", "support", "avail", "mean", "wo", "n't", "add", "support", "time", "chart", "time", "soon"]}, {"number": 31, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks,", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 32, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Matthias", "sentSegmented": ["matthias"], "sentSegmentedWithoutStops": ["matthias"], "sentSegmentedWithoutStopsStemmed": ["matthia"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMTUzODY2MA==", "author": {"login": "PhilJay"}, "body": "Now supported!\n", "bodyText": "Now supported!", "bodyHTML": "<p>Now supported!</p>", "createdAt": "2016-07-09T15:03:17Z", "publishedAt": "2016-07-09T15:03:17Z", "lastEditedAt": null, "updatedAt": "2016-07-09T15:03:17Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 33, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Now supported!", "sentSegmented": ["now", "supported"], "sentSegmentedWithoutStops": ["supported"], "sentSegmentedWithoutStopsStemmed": ["support"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMTU4NDMxNA==", "author": {"login": "klassm"}, "body": "Wow cool :-). Can you add some hint on how to achieve time axis? Thanks, Matthias\n", "bodyText": "Wow cool :-). Can you add some hint on how to achieve time axis? Thanks, Matthias", "bodyHTML": "<p>Wow cool :-). Can you add some hint on how to achieve time axis? Thanks, Matthias</p>", "createdAt": "2016-07-10T11:32:50Z", "publishedAt": "2016-07-10T11:32:50Z", "lastEditedAt": null, "updatedAt": "2016-07-10T11:32:50Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 34, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Wow cool :-).", "sentSegmented": ["wow", "cool"], "sentSegmentedWithoutStops": ["wow", "cool"], "sentSegmentedWithoutStopsStemmed": ["wow", "cool"]}, {"number": 35, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Can you add some hint on how to achieve time axis?", "sentSegmented": ["can", "you", "add", "some", "hint", "on", "how", "to", "achieve", "time", "axis"], "sentSegmentedWithoutStops": ["add", "hint", "achieve", "time", "axis"], "sentSegmentedWithoutStopsStemmed": ["add", "hint", "achiev", "time", "axi"]}, {"number": 36, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks, Matthias", "sentSegmented": ["thanks", "matthias"], "sentSegmentedWithoutStops": ["thanks", "matthias"], "sentSegmentedWithoutStopsStemmed": ["thank", "matthia"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDIzMTU5OTc1Mg==", "author": {"login": "literakl"}, "body": "Hi, I am eager for this feature as well .. and some tutorial. \n\nI am googling around a while how to represent a date. I tried to pass a unix timestamp but it was not good idea. It seems that I need to integer indexes since the first date and then somehow map it to real dates. Real date support would be great. Is it 3.0 feature?\n", "bodyText": "Hi, I am eager for this feature as well .. and some tutorial.\nI am googling around a while how to represent a date. I tried to pass a unix timestamp but it was not good idea. It seems that I need to integer indexes since the first date and then somehow map it to real dates. Real date support would be great. Is it 3.0 feature?", "bodyHTML": "<p>Hi, I am eager for this feature as well .. and some tutorial.</p>\n<p>I am googling around a while how to represent a date. I tried to pass a unix timestamp but it was not good idea. It seems that I need to integer indexes since the first date and then somehow map it to real dates. Real date support would be great. Is it 3.0 feature?</p>", "createdAt": "2016-07-10T17:13:17Z", "publishedAt": "2016-07-10T17:13:17Z", "lastEditedAt": null, "updatedAt": "2016-07-10T17:13:17Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 37, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Hi, I am eager for this feature as well .. and some tutorial.", "sentSegmented": ["hi", "i", "am", "eager", "for", "this", "feature", "as", "well", "and", "some", "tutorial"], "sentSegmentedWithoutStops": ["hi", "eager", "feature", "well", "tutorial"], "sentSegmentedWithoutStopsStemmed": ["hi", "eager", "featur", "well", "tutori"]}, {"number": 38, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I am googling around a while how to represent a date.", "sentSegmented": ["i", "am", "googling", "around", "a", "while", "how", "to", "represent", "a", "date"], "sentSegmentedWithoutStops": ["googling", "around", "represent", "date"], "sentSegmentedWithoutStopsStemmed": ["googl", "around", "repres", "date"]}, {"number": 39, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I tried to pass a unix timestamp but it was not good idea.", "sentSegmented": ["i", "tried", "to", "pass", "a", "unix", "timestamp", "but", "it", "was", "not", "good", "idea"], "sentSegmentedWithoutStops": ["tried", "pass", "unix", "timestamp", "good", "idea"], "sentSegmentedWithoutStopsStemmed": ["tri", "pass", "unix", "timestamp", "good", "idea"]}, {"number": 40, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It seems that I need to integer indexes since the first date and then somehow map it to real dates.", "sentSegmented": ["it", "seems", "that", "i", "need", "to", "integer", "indexes", "since", "the", "first", "date", "and", "then", "somehow", "map", "it", "to", "real", "dates"], "sentSegmentedWithoutStops": ["seems", "need", "integer", "indexes", "since", "first", "date", "somehow", "map", "real", "dates"], "sentSegmentedWithoutStopsStemmed": ["seem", "need", "integ", "index", "sinc", "first", "date", "somehow", "map", "real", "date"]}, {"number": 41, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Real date support would be great.", "sentSegmented": ["real", "date", "support", "would", "be", "great"], "sentSegmentedWithoutStops": ["real", "date", "support", "would", "great"], "sentSegmentedWithoutStopsStemmed": ["real", "date", "support", "would", "great"]}, {"number": 42, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Is it 3.0 feature?", "sentSegmented": ["is", "it", "3.0", "feature"], "sentSegmentedWithoutStops": ["3.0", "feature"], "sentSegmentedWithoutStopsStemmed": ["3.0", "featur"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI0NDg0OTI4Mw==", "author": {"login": "Yasir-Ghunaim"}, "body": "@klassm and @literakl,\nCheck my comment to know how to use timestamps with MPAndroidChart: https://github.com/PhilJay/MPAndroidChart/issues/789#issuecomment-241507904\n", "bodyText": "@klassm and @literakl,\nCheck my comment to know how to use timestamps with MPAndroidChart: #789 (comment)", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/klassm/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/klassm\">@klassm</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/literakl/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/literakl\">@literakl</a>,<br>\nCheck my comment to know how to use timestamps with MPAndroidChart: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"89888876\" data-permission-text=\"Title is private\" data-url=\"https://github.com/PhilJay/MPAndroidChart/issues/789\" data-hovercard-type=\"issue\" data-hovercard-url=\"/PhilJay/MPAndroidChart/issues/789/hovercard?comment_id=241507904&amp;comment_type=issue_comment\" href=\"https://github.com/PhilJay/MPAndroidChart/issues/789#issuecomment-241507904\">#789 (comment)</a></p>", "createdAt": "2016-09-06T04:51:38Z", "publishedAt": "2016-09-06T04:51:38Z", "lastEditedAt": null, "updatedAt": "2016-09-06T04:51:38Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 43, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@klassm and @literakl,", "sentSegmented": ["klassm", "and", "literakl"], "sentSegmentedWithoutStops": ["klassm", "literakl"], "sentSegmentedWithoutStopsStemmed": ["klassm", "literakl"]}, {"number": 44, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Check my comment to know how to use timestamps with MPAndroidChart: #789 (comment)", "sentSegmented": ["check", "my", "comment", "to", "know", "how", "to", "use", "timestamps", "with", "mpandroidchart", "789", "comment"], "sentSegmentedWithoutStops": ["check", "comment", "know", "use", "timestamps", "mpandroidchart", "789", "comment"], "sentSegmentedWithoutStopsStemmed": ["check", "comment", "know", "use", "timestamp", "mpandroidchart", "789", "comment"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI0NjA3MjczMg==", "author": {"login": "tasosno1"}, "body": "@Yasir-Ghunaim  -- Hi, I saw your solution and guide, looks exactly what i need but i just started to use this nice Chart library and i appreciate if you could do a proper demo on how to display time at the bottom of the chat. I'm struggling to show the time in (HH:MM) at the bottom of the chart.\n\nIf you are familiar with Volley you could do the following as i do for the Demo\n\n```\nprivate Handler handler = new Handler(Looper.getMainLooper());\n\nmakeChart();\n\nprivate void makeChart() {\n\n        url = \"http://chartapi.finance.yahoo.com/instrument/1.0/AAPL/chartdata;type=quote;range=1d/json\";\n\n        StringRequest strReq = new StringRequest(Request.Method.GET,\n                url, new Response.Listener<String>() {\n\n            @Override\n            public void onResponse(String response) {\n\n              String data =  response.toString().substring(response.toString().lastIndexOf(\"\\\"series\\\" : [\") + 1);\n\n              String  newdata = data.replace(\"series\\\" : \", \"\");\n                String  result = newdata.replace(\"\\n\" +\n                        \"} )\", \"\");\n\n                try {\n                    JSONArray json = new JSONArray(result);\n\n                    for (int i = 0; i <= json.length(); i++) {\n\n                        JSONObject objv = json.getJSONObject(i);\n\n                        time = objv.getString(\"Timestamp\");\n                        open = objv.getString(\"open\");\n\n                        float open = Float.parseFloat(time);\n                        float val  = Float.parseFloat(open);\n\n                        ///// Insert to Chart Array\n\n                    }\n\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n\n                    }\n\n\n        }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                VolleyLog.d(TAG, \"Error: \" + error.getMessage());\n\n\n            }\n        });\n\n        AppController.getInstance().addToRequestQueue(strReq);\n\n         handler = new Handler();\n         handler.postDelayed(new Runnable() {\n            public void run() {\n\n\n            //// Setup Chart and Display\n\n                     }\n        }, 1000);\n    }\n\n```\n\nThe Above fetches Json from Yahoo charts, as a string and cleans it up a bit with the final data looking like this\n\n```\n[\n { \"Timestamp\" :1473341400,\"close\" :107.1600,\"high\" :107.2500,\"low\" :107.1000,\"open\" :107.2500,\"volume\" :1354400 } \n, { \"Timestamp\" :1473341519,\"close\" :106.7900,\"high\" :107.1800,\"low\" :106.6300,\"open\" :107.1600,\"volume\" :819100 } \n, { \"Timestamp\" :1473341520,\"close\" :106.9200,\"high\" :106.9600,\"low\" :106.7400,\"open\" :106.7900,\"volume\" :460600 } \n, { \"Timestamp\" :1473341639,\"close\" :106.9700,\"high\" :106.9900,\"low\" :106.8100,\"open\" :106.9000,\"volume\" :302000 } \n, { \"Timestamp\" :1473341699,\"close\" :106.9050,\"high\" :107.0800,\"low\" :106.9000,\"open\" :106.9865,\"volume\" :386300 }\n.\n.\n. ]\n\n```\n\nSo at the moment the chart Displays fine inserting data like this `yVals1.add(new Entry(i, val));` following the Linechart Demo. But As i mentioned above i'm stuck with the time to show below the chart following your instructions.\n\n![untitled-1](https://cloud.githubusercontent.com/assets/9547308/18406284/c386f9b8-7703-11e6-9a9a-95df367df524.jpg)\n\nI created a Demo App on github, so all it needs is your Additions to display the time https://github.com/tasosno1/MPAndroidChart-StockChart\n\nThanks\n", "bodyText": "@Yasir-Ghunaim  -- Hi, I saw your solution and guide, looks exactly what i need but i just started to use this nice Chart library and i appreciate if you could do a proper demo on how to display time at the bottom of the chat. I'm struggling to show the time in (HH:MM) at the bottom of the chart.\nIf you are familiar with Volley you could do the following as i do for the Demo\nprivate Handler handler = new Handler(Looper.getMainLooper());\n\nmakeChart();\n\nprivate void makeChart() {\n\n        url = \"http://chartapi.finance.yahoo.com/instrument/1.0/AAPL/chartdata;type=quote;range=1d/json\";\n\n        StringRequest strReq = new StringRequest(Request.Method.GET,\n                url, new Response.Listener<String>() {\n\n            @Override\n            public void onResponse(String response) {\n\n              String data =  response.toString().substring(response.toString().lastIndexOf(\"\\\"series\\\" : [\") + 1);\n\n              String  newdata = data.replace(\"series\\\" : \", \"\");\n                String  result = newdata.replace(\"\\n\" +\n                        \"} )\", \"\");\n\n                try {\n                    JSONArray json = new JSONArray(result);\n\n                    for (int i = 0; i <= json.length(); i++) {\n\n                        JSONObject objv = json.getJSONObject(i);\n\n                        time = objv.getString(\"Timestamp\");\n                        open = objv.getString(\"open\");\n\n                        float open = Float.parseFloat(time);\n                        float val  = Float.parseFloat(open);\n\n                        ///// Insert to Chart Array\n\n                    }\n\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n\n                    }\n\n\n        }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                VolleyLog.d(TAG, \"Error: \" + error.getMessage());\n\n\n            }\n        });\n\n        AppController.getInstance().addToRequestQueue(strReq);\n\n         handler = new Handler();\n         handler.postDelayed(new Runnable() {\n            public void run() {\n\n\n            //// Setup Chart and Display\n\n                     }\n        }, 1000);\n    }\n\n\nThe Above fetches Json from Yahoo charts, as a string and cleans it up a bit with the final data looking like this\n[\n { \"Timestamp\" :1473341400,\"close\" :107.1600,\"high\" :107.2500,\"low\" :107.1000,\"open\" :107.2500,\"volume\" :1354400 } \n, { \"Timestamp\" :1473341519,\"close\" :106.7900,\"high\" :107.1800,\"low\" :106.6300,\"open\" :107.1600,\"volume\" :819100 } \n, { \"Timestamp\" :1473341520,\"close\" :106.9200,\"high\" :106.9600,\"low\" :106.7400,\"open\" :106.7900,\"volume\" :460600 } \n, { \"Timestamp\" :1473341639,\"close\" :106.9700,\"high\" :106.9900,\"low\" :106.8100,\"open\" :106.9000,\"volume\" :302000 } \n, { \"Timestamp\" :1473341699,\"close\" :106.9050,\"high\" :107.0800,\"low\" :106.9000,\"open\" :106.9865,\"volume\" :386300 }\n.\n.\n. ]\n\n\nSo at the moment the chart Displays fine inserting data like this yVals1.add(new Entry(i, val)); following the Linechart Demo. But As i mentioned above i'm stuck with the time to show below the chart following your instructions.\n\nI created a Demo App on github, so all it needs is your Additions to display the time https://github.com/tasosno1/MPAndroidChart-StockChart\nThanks", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Yasir-Ghunaim/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Yasir-Ghunaim\">@Yasir-Ghunaim</a>  -- Hi, I saw your solution and guide, looks exactly what i need but i just started to use this nice Chart library and i appreciate if you could do a proper demo on how to display time at the bottom of the chat. I'm struggling to show the time in (HH:MM) at the bottom of the chart.</p>\n<p>If you are familiar with Volley you could do the following as i do for the Demo</p>\n<pre><code>private Handler handler = new Handler(Looper.getMainLooper());\n\nmakeChart();\n\nprivate void makeChart() {\n\n        url = \"http://chartapi.finance.yahoo.com/instrument/1.0/AAPL/chartdata;type=quote;range=1d/json\";\n\n        StringRequest strReq = new StringRequest(Request.Method.GET,\n                url, new Response.Listener&lt;String&gt;() {\n\n            @Override\n            public void onResponse(String response) {\n\n              String data =  response.toString().substring(response.toString().lastIndexOf(\"\\\"series\\\" : [\") + 1);\n\n              String  newdata = data.replace(\"series\\\" : \", \"\");\n                String  result = newdata.replace(\"\\n\" +\n                        \"} )\", \"\");\n\n                try {\n                    JSONArray json = new JSONArray(result);\n\n                    for (int i = 0; i &lt;= json.length(); i++) {\n\n                        JSONObject objv = json.getJSONObject(i);\n\n                        time = objv.getString(\"Timestamp\");\n                        open = objv.getString(\"open\");\n\n                        float open = Float.parseFloat(time);\n                        float val  = Float.parseFloat(open);\n\n                        ///// Insert to Chart Array\n\n                    }\n\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n\n                    }\n\n\n        }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                VolleyLog.d(TAG, \"Error: \" + error.getMessage());\n\n\n            }\n        });\n\n        AppController.getInstance().addToRequestQueue(strReq);\n\n         handler = new Handler();\n         handler.postDelayed(new Runnable() {\n            public void run() {\n\n\n            //// Setup Chart and Display\n\n                     }\n        }, 1000);\n    }\n\n</code></pre>\n<p>The Above fetches Json from Yahoo charts, as a string and cleans it up a bit with the final data looking like this</p>\n<pre><code>[\n { \"Timestamp\" :1473341400,\"close\" :107.1600,\"high\" :107.2500,\"low\" :107.1000,\"open\" :107.2500,\"volume\" :1354400 } \n, { \"Timestamp\" :1473341519,\"close\" :106.7900,\"high\" :107.1800,\"low\" :106.6300,\"open\" :107.1600,\"volume\" :819100 } \n, { \"Timestamp\" :1473341520,\"close\" :106.9200,\"high\" :106.9600,\"low\" :106.7400,\"open\" :106.7900,\"volume\" :460600 } \n, { \"Timestamp\" :1473341639,\"close\" :106.9700,\"high\" :106.9900,\"low\" :106.8100,\"open\" :106.9000,\"volume\" :302000 } \n, { \"Timestamp\" :1473341699,\"close\" :106.9050,\"high\" :107.0800,\"low\" :106.9000,\"open\" :106.9865,\"volume\" :386300 }\n.\n.\n. ]\n\n</code></pre>\n<p>So at the moment the chart Displays fine inserting data like this <code>yVals1.add(new Entry(i, val));</code> following the Linechart Demo. But As i mentioned above i'm stuck with the time to show below the chart following your instructions.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/9547308/18406284/c386f9b8-7703-11e6-9a9a-95df367df524.jpg\"><img src=\"https://cloud.githubusercontent.com/assets/9547308/18406284/c386f9b8-7703-11e6-9a9a-95df367df524.jpg\" alt=\"untitled-1\" style=\"max-width:100%;\"></a></p>\n<p>I created a Demo App on github, so all it needs is your Additions to display the time <a href=\"https://github.com/tasosno1/MPAndroidChart-StockChart\">https://github.com/tasosno1/MPAndroidChart-StockChart</a></p>\n<p>Thanks</p>", "createdAt": "2016-09-10T00:09:54Z", "publishedAt": "2016-09-10T00:09:54Z", "lastEditedAt": "2016-09-10T02:29:38Z", "updatedAt": "2016-09-10T02:29:38Z", "reactions": {"edges": [{"node": {"content": "HEART", "createdAt": "2016-12-15T08:15:22Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-06-25T16:23:23Z"}}]}, "bodyParsed": [{"number": 45, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@Yasir-Ghunaim  -- Hi, I saw your solution and guide, looks exactly what i need but i just started to use this nice Chart library and i appreciate if you could do a proper demo on how to display time at the bottom of the chat.", "sentSegmented": ["yasir-ghunaim", "hi", "i", "saw", "your", "solution", "and", "guide", "looks", "exactly", "what", "i", "need", "but", "i", "just", "started", "to", "use", "this", "nice", "chart", "library", "and", "i", "appreciate", "if", "you", "could", "do", "a", "proper", "demo", "on", "how", "to", "display", "time", "at", "the", "bottom", "of", "the", "chat"], "sentSegmentedWithoutStops": ["yasir-ghunaim", "hi", "saw", "solution", "guide", "looks", "exactly", "need", "started", "use", "nice", "chart", "library", "appreciate", "could", "proper", "demo", "display", "time", "bottom", "chat"], "sentSegmentedWithoutStopsStemmed": ["yasir-ghunaim", "hi", "saw", "solut", "guid", "look", "exactli", "need", "start", "use", "nice", "chart", "librari", "appreci", "could", "proper", "demo", "display", "time", "bottom", "chat"]}, {"number": 46, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I'm struggling to show the time in (HH:MM) at the bottom of the chart.", "sentSegmented": ["i", "'m", "struggling", "to", "show", "the", "time", "in", "hh", "mm", "at", "the", "bottom", "of", "the", "chart"], "sentSegmentedWithoutStops": ["'m", "struggling", "show", "time", "hh", "mm", "bottom", "chart"], "sentSegmentedWithoutStopsStemmed": ["'m", "struggl", "show", "time", "hh", "mm", "bottom", "chart"]}, {"number": 47, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "If you are familiar with Volley you could do the following as i do for the Demo", "sentSegmented": ["if", "you", "are", "familiar", "with", "volley", "you", "could", "do", "the", "following", "as", "i", "do", "for", "the", "demo"], "sentSegmentedWithoutStops": ["familiar", "volley", "could", "following", "demo"], "sentSegmentedWithoutStopsStemmed": ["familiar", "volley", "could", "follow", "demo"]}, {"number": 48, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "private Handler handler = new Handler(Looper.getMainLooper());", "sentSegmented": ["private", "handler", "handler", "new", "handler", "looper.getmainlooper"], "sentSegmentedWithoutStops": ["handler", "handler", "handler", "looper.getmainlooper"], "sentSegmentedWithoutStopsStemmed": ["handler", "handler", "handler", "looper.getmainloop"]}, {"number": 49, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "makeChart();", "sentSegmented": ["makechart"], "sentSegmentedWithoutStops": ["makechart"], "sentSegmentedWithoutStopsStemmed": ["makechart"]}, {"number": 50, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "private void makeChart() {", "sentSegmented": ["private", "void", "makechart"], "sentSegmentedWithoutStops": ["makechart"], "sentSegmentedWithoutStopsStemmed": ["makechart"]}, {"number": 51, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        url = \"http://chartapi.finance.yahoo.com/instrument/1.0/AAPL/chartdata;type=quote;range=1d/json\";", "sentSegmented": ["url", "http", "//chartapi.finance.yahoo.com/instrument/1.0/aapl/chartdata", "type=quote", "range=1d/json"], "sentSegmentedWithoutStops": ["url", "http", "//chartapi.finance.yahoo.com/instrument/1.0/aapl/chartdata", "type=quote", "range=1d/json"], "sentSegmentedWithoutStopsStemmed": ["url", "http", "//chartapi.finance.yahoo.com/instrument/1.0/aapl/chartdata", "type=quot", "range=1d/json"]}, {"number": 52, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        StringRequest strReq = new StringRequest(Request.Method.GET,", "sentSegmented": ["stringrequest", "strreq", "new", "stringrequest", "request.method.get"], "sentSegmentedWithoutStops": ["stringrequest", "strreq", "stringrequest", "request.method.get"], "sentSegmentedWithoutStopsStemmed": ["stringrequest", "strreq", "stringrequest", "request.method.get"]}, {"number": 53, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                url, new Response.Listener() {", "sentSegmented": ["url", "new", "response.listener"], "sentSegmentedWithoutStops": ["url", "response.listener"], "sentSegmentedWithoutStopsStemmed": ["url", "response.listen"]}, {"number": 54, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": ["override"], "sentSegmentedWithoutStopsStemmed": ["overrid"]}, {"number": 55, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            public void onResponse(String response) {", "sentSegmented": ["public", "void", "onresponse", "string", "response"], "sentSegmentedWithoutStops": ["onresponse", "string", "response"], "sentSegmentedWithoutStopsStemmed": ["onrespons", "string", "respons"]}, {"number": 56, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "              String data =  response.toString().substring(response.toString().lastIndexOf(\"\\\"series\\\" : [\") + 1);", "sentSegmented": ["string", "data", "response.tostring", ".substring", "response.tostring", ".lastindexof", "series\\", "1"], "sentSegmentedWithoutStops": ["string", "data", "response.tostring", ".substring", "response.tostring", ".lastindexof", "series\\", "1"], "sentSegmentedWithoutStopsStemmed": ["string", "data", "response.tostr", ".substr", "response.tostr", ".lastindexof", "series\\", "1"]}, {"number": 57, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "              String  newdata = data.replace(\"series\\\" : \", \"\");", "sentSegmented": ["string", "newdata", "data.replace", "series\\"], "sentSegmentedWithoutStops": ["string", "newdata", "data.replace", "series\\"], "sentSegmentedWithoutStopsStemmed": ["string", "newdata", "data.replac", "series\\"]}, {"number": 58, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                String  result = newdata.replace(\"\\n\" +", "sentSegmented": ["string", "result", "newdata.replace", "\\n"], "sentSegmentedWithoutStops": ["string", "result", "newdata.replace", "\\n"], "sentSegmentedWithoutStopsStemmed": ["string", "result", "newdata.replac", "\\n"]}, {"number": 59, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        \"} )\", \"\");", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 60, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                try {", "sentSegmented": ["try"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 61, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    JSONArray json = new JSONArray(result);", "sentSegmented": ["jsonarray", "json", "new", "jsonarray", "result"], "sentSegmentedWithoutStops": ["jsonarray", "json", "jsonarray", "result"], "sentSegmentedWithoutStopsStemmed": ["jsonarray", "json", "jsonarray", "result"]}, {"number": 62, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    for (int i = 0; i <= json.length(); i++) {", "sentSegmented": ["for", "int", "i", "0", "i", "json.length", "i++"], "sentSegmentedWithoutStops": ["0", "json.length", "i++"], "sentSegmentedWithoutStopsStemmed": ["0", "json.length", "i++"]}, {"number": 63, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        JSONObject objv = json.getJSONObject(i);", "sentSegmented": ["jsonobject", "objv", "json.getjsonobject", "i"], "sentSegmentedWithoutStops": ["jsonobject", "objv", "json.getjsonobject"], "sentSegmentedWithoutStopsStemmed": ["jsonobject", "objv", "json.getjsonobject"]}, {"number": 64, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        time = objv.getString(\"Timestamp\");", "sentSegmented": ["time", "objv.getstring", "timestamp"], "sentSegmentedWithoutStops": ["time", "objv.getstring", "timestamp"], "sentSegmentedWithoutStopsStemmed": ["time", "objv.getstr", "timestamp"]}, {"number": 65, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        open = objv.getString(\"open\");", "sentSegmented": ["open", "objv.getstring", "open"], "sentSegmentedWithoutStops": ["open", "objv.getstring", "open"], "sentSegmentedWithoutStopsStemmed": ["open", "objv.getstr", "open"]}, {"number": 66, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        float open = Float.parseFloat(time);", "sentSegmented": ["float", "open", "float.parsefloat", "time"], "sentSegmentedWithoutStops": ["open", "float.parsefloat", "time"], "sentSegmentedWithoutStopsStemmed": ["open", "float.parsefloat", "time"]}, {"number": 67, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        float val  = Float.parseFloat(open);", "sentSegmented": ["float", "val", "float.parsefloat", "open"], "sentSegmentedWithoutStops": ["val", "float.parsefloat", "open"], "sentSegmentedWithoutStopsStemmed": ["val", "float.parsefloat", "open"]}, {"number": 68, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        ///// Insert to Chart Array", "sentSegmented": ["insert", "to", "chart", "array"], "sentSegmentedWithoutStops": ["insert", "chart", "array"], "sentSegmentedWithoutStopsStemmed": ["insert", "chart", "array"]}, {"number": 69, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 70, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                } catch (JSONException e) {", "sentSegmented": ["catch", "jsonexception", "e"], "sentSegmentedWithoutStops": ["jsonexception", "e"], "sentSegmentedWithoutStopsStemmed": ["jsonexcept", "e"]}, {"number": 71, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    e.printStackTrace();", "sentSegmented": ["e.printstacktrace"], "sentSegmentedWithoutStops": ["e.printstacktrace"], "sentSegmentedWithoutStopsStemmed": ["e.printstacktrac"]}, {"number": 72, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 73, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 74, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }, new Response.ErrorListener() {", "sentSegmented": ["new", "response.errorlistener"], "sentSegmentedWithoutStops": ["response.errorlistener"], "sentSegmentedWithoutStopsStemmed": ["response.errorlisten"]}, {"number": 75, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": ["override"], "sentSegmentedWithoutStopsStemmed": ["overrid"]}, {"number": 76, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            public void onErrorResponse(VolleyError error) {", "sentSegmented": ["public", "void", "onerrorresponse", "volleyerror", "error"], "sentSegmentedWithoutStops": ["onerrorresponse", "volleyerror", "error"], "sentSegmentedWithoutStopsStemmed": ["onerrorrespons", "volleyerror", "error"]}, {"number": 77, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                VolleyLog.d(TAG, \"Error: \" + error.getMessage());", "sentSegmented": ["volleylog.d", "tag", "error", "error.getmessage"], "sentSegmentedWithoutStops": ["volleylog.d", "tag", "error", "error.getmessage"], "sentSegmentedWithoutStopsStemmed": ["volleylog.d", "tag", "error", "error.getmessag"]}, {"number": 78, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 79, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        });", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 80, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        AppController.getInstance().addToRequestQueue(strReq);", "sentSegmented": ["appcontroller.getinstance", ".addtorequestqueue", "strreq"], "sentSegmentedWithoutStops": ["appcontroller.getinstance", ".addtorequestqueue", "strreq"], "sentSegmentedWithoutStopsStemmed": ["appcontroller.getinst", ".addtorequestqueu", "strreq"]}, {"number": 81, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "         handler = new Handler();", "sentSegmented": ["handler", "new", "handler"], "sentSegmentedWithoutStops": ["handler", "handler"], "sentSegmentedWithoutStopsStemmed": ["handler", "handler"]}, {"number": 82, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "         handler.postDelayed(new Runnable() {", "sentSegmented": ["handler.postdelayed", "new", "runnable"], "sentSegmentedWithoutStops": ["handler.postdelayed", "runnable"], "sentSegmentedWithoutStopsStemmed": ["handler.postdelay", "runnabl"]}, {"number": 83, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            public void run() {", "sentSegmented": ["public", "void", "run"], "sentSegmentedWithoutStops": ["run"], "sentSegmentedWithoutStopsStemmed": ["run"]}, {"number": 84, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "            //// Setup Chart and Display", "sentSegmented": ["setup", "chart", "and", "display"], "sentSegmentedWithoutStops": ["setup", "chart", "display"], "sentSegmentedWithoutStopsStemmed": ["setup", "chart", "display"]}, {"number": 85, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                     }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 86, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "        }, 1000);", "sentSegmented": ["1000"], "sentSegmentedWithoutStops": ["1000"], "sentSegmentedWithoutStopsStemmed": ["1000"]}, {"number": 87, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 88, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The Above fetches Json from Yahoo charts, as a string and cleans it up a bit with the final data looking like this", "sentSegmented": ["the", "above", "fetches", "json", "from", "yahoo", "charts", "as", "a", "string", "and", "cleans", "it", "up", "a", "bit", "with", "the", "final", "data", "looking", "like", "this"], "sentSegmentedWithoutStops": ["fetches", "json", "yahoo", "charts", "string", "cleans", "bit", "final", "data", "looking", "like"], "sentSegmentedWithoutStopsStemmed": ["fetch", "json", "yahoo", "chart", "string", "clean", "bit", "final", "data", "look", "like"]}, {"number": 89, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "[", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 90, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": " { \"Timestamp\" :1473341400,\"close\" :107.1600,\"high\" :107.2500,\"low\" :107.1000,\"open\" :107.2500,\"volume\" :1354400 } ", "sentSegmented": ["timestamp", ":1473341400", "close", ":107.1600", "high", ":107.2500", "low", ":107.1000", "open", ":107.2500", "volume", ":1354400"], "sentSegmentedWithoutStops": ["timestamp", ":1473341400", "close", ":107.1600", "high", ":107.2500", "low", ":107.1000", "open", ":107.2500", "volume", ":1354400"], "sentSegmentedWithoutStopsStemmed": ["timestamp", ":1473341400", "close", ":107.1600", "high", ":107.2500", "low", ":107.1000", "open", ":107.2500", "volum", ":1354400"]}, {"number": 91, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ", { \"Timestamp\" :1473341519,\"close\" :106.7900,\"high\" :107.1800,\"low\" :106.6300,\"open\" :107.1600,\"volume\" :819100 } ", "sentSegmented": ["timestamp", ":1473341519", "close", ":106.7900", "high", ":107.1800", "low", ":106.6300", "open", ":107.1600", "volume", ":819100"], "sentSegmentedWithoutStops": ["timestamp", ":1473341519", "close", ":106.7900", "high", ":107.1800", "low", ":106.6300", "open", ":107.1600", "volume", ":819100"], "sentSegmentedWithoutStopsStemmed": ["timestamp", ":1473341519", "close", ":106.7900", "high", ":107.1800", "low", ":106.6300", "open", ":107.1600", "volum", ":819100"]}, {"number": 92, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ", { \"Timestamp\" :1473341520,\"close\" :106.9200,\"high\" :106.9600,\"low\" :106.7400,\"open\" :106.7900,\"volume\" :460600 } ", "sentSegmented": ["timestamp", ":1473341520", "close", ":106.9200", "high", ":106.9600", "low", ":106.7400", "open", ":106.7900", "volume", ":460600"], "sentSegmentedWithoutStops": ["timestamp", ":1473341520", "close", ":106.9200", "high", ":106.9600", "low", ":106.7400", "open", ":106.7900", "volume", ":460600"], "sentSegmentedWithoutStopsStemmed": ["timestamp", ":1473341520", "close", ":106.9200", "high", ":106.9600", "low", ":106.7400", "open", ":106.7900", "volum", ":460600"]}, {"number": 93, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ", { \"Timestamp\" :1473341639,\"close\" :106.9700,\"high\" :106.9900,\"low\" :106.8100,\"open\" :106.9000,\"volume\" :302000 } ", "sentSegmented": ["timestamp", ":1473341639", "close", ":106.9700", "high", ":106.9900", "low", ":106.8100", "open", ":106.9000", "volume", ":302000"], "sentSegmentedWithoutStops": ["timestamp", ":1473341639", "close", ":106.9700", "high", ":106.9900", "low", ":106.8100", "open", ":106.9000", "volume", ":302000"], "sentSegmentedWithoutStopsStemmed": ["timestamp", ":1473341639", "close", ":106.9700", "high", ":106.9900", "low", ":106.8100", "open", ":106.9000", "volum", ":302000"]}, {"number": 94, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ", { \"Timestamp\" :1473341699,\"close\" :106.9050,\"high\" :107.0800,\"low\" :106.9000,\"open\" :106.9865,\"volume\" :386300 }", "sentSegmented": ["timestamp", ":1473341699", "close", ":106.9050", "high", ":107.0800", "low", ":106.9000", "open", ":106.9865", "volume", ":386300"], "sentSegmentedWithoutStops": ["timestamp", ":1473341699", "close", ":106.9050", "high", ":107.0800", "low", ":106.9000", "open", ":106.9865", "volume", ":386300"], "sentSegmentedWithoutStopsStemmed": ["timestamp", ":1473341699", "close", ":106.9050", "high", ":107.0800", "low", ":106.9000", "open", ":106.9865", "volum", ":386300"]}, {"number": 95, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 96, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 97, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ". ]", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 98, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "So at the moment the chart Displays fine inserting data like this yVals1.add(new Entry(i, val)); following the Linechart Demo.", "sentSegmented": ["so", "at", "the", "moment", "the", "chart", "displays", "fine", "inserting", "data", "like", "this", "yvals1.add", "new", "entry", "i", "val", "following", "the", "linechart", "demo"], "sentSegmentedWithoutStops": ["moment", "chart", "displays", "fine", "inserting", "data", "like", "yvals1.add", "new", "entry", "val", "following", "linechart", "demo"], "sentSegmentedWithoutStopsStemmed": ["moment", "chart", "display", "fine", "insert", "data", "like", "yvals1.add", "new", "entri", "val", "follow", "linechart", "demo"]}, {"number": 99, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "But As i mentioned above i'm stuck with the time to show below the chart following your instructions.", "sentSegmented": ["but", "as", "i", "mentioned", "above", "i", "'m", "stuck", "with", "the", "time", "to", "show", "below", "the", "chart", "following", "your", "instructions"], "sentSegmentedWithoutStops": ["mentioned", "'m", "stuck", "time", "show", "chart", "following", "instructions"], "sentSegmentedWithoutStopsStemmed": ["mention", "'m", "stuck", "time", "show", "chart", "follow", "instruct"]}, {"number": 100, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I created a Demo App on github, so all it needs is your Additions to display the time https://github.com/tasosno1/MPAndroidChart-StockChart", "sentSegmented": ["i", "created", "a", "demo", "app", "on", "github", "so", "all", "it", "needs", "is", "your", "additions", "to", "display", "the", "time", "https", "//github.com/tasosno1/mpandroidchart-stockchart"], "sentSegmentedWithoutStops": ["created", "demo", "app", "github", "needs", "additions", "display", "time", "https", "//github.com/tasosno1/mpandroidchart-stockchart"], "sentSegmentedWithoutStopsStemmed": ["creat", "demo", "app", "github", "need", "addit", "display", "time", "http", "//github.com/tasosno1/mpandroidchart-stockchart"]}, {"number": 101, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDI0NjA5NTA5OQ==", "author": {"login": "tasosno1"}, "body": "@Yasir-Ghunaim -- I manged to add the time by doing the following but i would still like know how to implement your method.\n\nThanks\n\n```\n//set up array\n ArrayList<String> xValues = new ArrayList<String>();  \n\n                        //convert unix time to date time and add to array\n                        long unixSeconds = Long.parseLong(time);\n                        Date date = new Date(unixSeconds*1000L); \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\"); \n                        sdf.setTimeZone(TimeZone.getTimeZone(\"America/New_York\")); \n                        String formattedDate = sdf.format(date);\n\n                        xValues.add(formattedDate);\n\n\n\n         / /add the Times to the Xaxis\n   xAxis.setValueFormatter(new AxisValueFormatter() {\n                    @Override\n                    public String getFormattedValue(float value, AxisBase axis) {\n                        return xValues.get((int) value % xValues.size());\n                    }\n\n                    @Override\n                    public int getDecimalDigits() {\n                        return 0;\n                    }\n                });\n```\n\n![img](https://cloud.githubusercontent.com/assets/9547308/18408796/9b82cd86-7742-11e6-8cde-2cef2de5ccbe.jpg)\n", "bodyText": "@Yasir-Ghunaim -- I manged to add the time by doing the following but i would still like know how to implement your method.\nThanks\n//set up array\n ArrayList<String> xValues = new ArrayList<String>();  \n\n                        //convert unix time to date time and add to array\n                        long unixSeconds = Long.parseLong(time);\n                        Date date = new Date(unixSeconds*1000L); \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\"); \n                        sdf.setTimeZone(TimeZone.getTimeZone(\"America/New_York\")); \n                        String formattedDate = sdf.format(date);\n\n                        xValues.add(formattedDate);\n\n\n\n         / /add the Times to the Xaxis\n   xAxis.setValueFormatter(new AxisValueFormatter() {\n                    @Override\n                    public String getFormattedValue(float value, AxisBase axis) {\n                        return xValues.get((int) value % xValues.size());\n                    }\n\n                    @Override\n                    public int getDecimalDigits() {\n                        return 0;\n                    }\n                });", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Yasir-Ghunaim/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Yasir-Ghunaim\">@Yasir-Ghunaim</a> -- I manged to add the time by doing the following but i would still like know how to implement your method.</p>\n<p>Thanks</p>\n<pre><code>//set up array\n ArrayList&lt;String&gt; xValues = new ArrayList&lt;String&gt;();  \n\n                        //convert unix time to date time and add to array\n                        long unixSeconds = Long.parseLong(time);\n                        Date date = new Date(unixSeconds*1000L); \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\"); \n                        sdf.setTimeZone(TimeZone.getTimeZone(\"America/New_York\")); \n                        String formattedDate = sdf.format(date);\n\n                        xValues.add(formattedDate);\n\n\n\n         / /add the Times to the Xaxis\n   xAxis.setValueFormatter(new AxisValueFormatter() {\n                    @Override\n                    public String getFormattedValue(float value, AxisBase axis) {\n                        return xValues.get((int) value % xValues.size());\n                    }\n\n                    @Override\n                    public int getDecimalDigits() {\n                        return 0;\n                    }\n                });\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/9547308/18408796/9b82cd86-7742-11e6-8cde-2cef2de5ccbe.jpg\"><img src=\"https://cloud.githubusercontent.com/assets/9547308/18408796/9b82cd86-7742-11e6-8cde-2cef2de5ccbe.jpg\" alt=\"img\" style=\"max-width:100%;\"></a></p>", "createdAt": "2016-09-10T06:49:56Z", "publishedAt": "2016-09-10T06:49:56Z", "lastEditedAt": "2016-09-10T07:37:53Z", "updatedAt": "2016-09-10T07:37:53Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2017-09-21T06:34:34Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2017-12-01T09:11:24Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2018-04-16T21:04:40Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-06-25T16:24:02Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2020-05-01T05:55:02Z"}}]}, "bodyParsed": [{"number": 102, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@Yasir-Ghunaim -- I manged to add the time by doing the following but i would still like know how to implement your method.", "sentSegmented": ["yasir-ghunaim", "i", "manged", "to", "add", "the", "time", "by", "doing", "the", "following", "but", "i", "would", "still", "like", "know", "how", "to", "implement", "your", "method"], "sentSegmentedWithoutStops": ["yasir-ghunaim", "manged", "add", "time", "following", "would", "still", "like", "know", "implement", "method"], "sentSegmentedWithoutStopsStemmed": ["yasir-ghunaim", "mang", "add", "time", "follow", "would", "still", "like", "know", "implement", "method"]}, {"number": 103, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}, {"number": 104, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "//set up array", "sentSegmented": ["//set", "up", "array"], "sentSegmentedWithoutStops": ["//set", "array"], "sentSegmentedWithoutStopsStemmed": ["//set", "array"]}, {"number": 105, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": " ArrayList xValues = new ArrayList();  ", "sentSegmented": ["arraylist", "xvalues", "new", "arraylist"], "sentSegmentedWithoutStops": ["arraylist", "xvalues", "arraylist"], "sentSegmentedWithoutStopsStemmed": ["arraylist", "xvalu", "arraylist"]}, {"number": 106, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        //convert unix time to date time and add to array", "sentSegmented": ["//convert", "unix", "time", "to", "date", "time", "and", "add", "to", "array"], "sentSegmentedWithoutStops": ["//convert", "unix", "time", "date", "time", "add", "array"], "sentSegmentedWithoutStopsStemmed": ["//convert", "unix", "time", "date", "time", "add", "array"]}, {"number": 107, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        long unixSeconds = Long.parseLong(time);", "sentSegmented": ["long", "unixseconds", "long.parselong", "time"], "sentSegmentedWithoutStops": ["unixseconds", "long.parselong", "time"], "sentSegmentedWithoutStopsStemmed": ["unixsecond", "long.parselong", "time"]}, {"number": 108, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        Date date = new Date(unixSeconds*1000L); ", "sentSegmented": ["date", "date", "new", "date", "unixseconds", "1000l"], "sentSegmentedWithoutStops": ["date", "date", "date", "unixseconds", "1000l"], "sentSegmentedWithoutStopsStemmed": ["date", "date", "date", "unixsecond", "1000l"]}, {"number": 109, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\"); ", "sentSegmented": ["simpledateformat", "sdf", "new", "simpledateformat", "hh", "mm"], "sentSegmentedWithoutStops": ["simpledateformat", "sdf", "simpledateformat", "hh", "mm"], "sentSegmentedWithoutStopsStemmed": ["simpledateformat", "sdf", "simpledateformat", "hh", "mm"]}, {"number": 110, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        sdf.setTimeZone(TimeZone.getTimeZone(\"America/New_York\")); ", "sentSegmented": ["sdf.settimezone", "timezone.gettimezone", "america/new_york"], "sentSegmentedWithoutStops": ["sdf.settimezone", "timezone.gettimezone", "america/new_york"], "sentSegmentedWithoutStopsStemmed": ["sdf.settimezon", "timezone.gettimezon", "america/new_york"]}, {"number": 111, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        String formattedDate = sdf.format(date);", "sentSegmented": ["string", "formatteddate", "sdf.format", "date"], "sentSegmentedWithoutStops": ["string", "formatteddate", "sdf.format", "date"], "sentSegmentedWithoutStopsStemmed": ["string", "formattedd", "sdf.format", "date"]}, {"number": 112, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        xValues.add(formattedDate);", "sentSegmented": ["xvalues.add", "formatteddate"], "sentSegmentedWithoutStops": ["xvalues.add", "formatteddate"], "sentSegmentedWithoutStopsStemmed": ["xvalues.add", "formattedd"]}, {"number": 113, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "         / /add the Times to the Xaxis", "sentSegmented": ["/add", "the", "times", "to", "the", "xaxis"], "sentSegmentedWithoutStops": ["/add", "times", "xaxis"], "sentSegmentedWithoutStopsStemmed": ["/add", "time", "xaxi"]}, {"number": 114, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "   xAxis.setValueFormatter(new AxisValueFormatter() {", "sentSegmented": ["xaxis.setvalueformatter", "new", "axisvalueformatter"], "sentSegmentedWithoutStops": ["xaxis.setvalueformatter", "axisvalueformatter"], "sentSegmentedWithoutStopsStemmed": ["xaxis.setvalueformatt", "axisvalueformatt"]}, {"number": 115, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": ["override"], "sentSegmentedWithoutStopsStemmed": ["overrid"]}, {"number": 116, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    public String getFormattedValue(float value, AxisBase axis) {", "sentSegmented": ["public", "string", "getformattedvalue", "float", "value", "axisbase", "axis"], "sentSegmentedWithoutStops": ["string", "getformattedvalue", "value", "axisbase", "axis"], "sentSegmentedWithoutStopsStemmed": ["string", "getformattedvalu", "valu", "axisbas", "axi"]}, {"number": 117, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        return xValues.get((int) value % xValues.size());", "sentSegmented": ["return", "xvalues.get", "int", "value", "xvalues.size"], "sentSegmentedWithoutStops": ["xvalues.get", "value", "xvalues.size"], "sentSegmentedWithoutStopsStemmed": ["xvalues.get", "valu", "xvalues.s"]}, {"number": 118, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 119, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    @Override", "sentSegmented": ["override"], "sentSegmentedWithoutStops": ["override"], "sentSegmentedWithoutStopsStemmed": ["overrid"]}, {"number": 120, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    public int getDecimalDigits() {", "sentSegmented": ["public", "int", "getdecimaldigits"], "sentSegmentedWithoutStops": ["getdecimaldigits"], "sentSegmentedWithoutStopsStemmed": ["getdecimaldigit"]}, {"number": 121, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                        return 0;", "sentSegmented": ["return", "0"], "sentSegmentedWithoutStops": ["0"], "sentSegmentedWithoutStopsStemmed": ["0"]}, {"number": 122, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                    }", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 123, "isCode": true, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "                });", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDQxNzIwNDgwNQ==", "author": {"login": "timusus"}, "body": "Heads up, If you're using a unix timestamp, when it gets converted to Float, it loses precision, so lots of timestamps that actually represent different times end up being rounded and represented as the same x value. See #2891", "bodyText": "Heads up, If you're using a unix timestamp, when it gets converted to Float, it loses precision, so lots of timestamps that actually represent different times end up being rounded and represented as the same x value. See #2891", "bodyHTML": "<p>Heads up, If you're using a unix timestamp, when it gets converted to Float, it loses precision, so lots of timestamps that actually represent different times end up being rounded and represented as the same x value. See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"212341095\" data-permission-text=\"Title is private\" data-url=\"https://github.com/PhilJay/MPAndroidChart/issues/2891\" data-hovercard-type=\"issue\" data-hovercard-url=\"/PhilJay/MPAndroidChart/issues/2891/hovercard\" href=\"https://github.com/PhilJay/MPAndroidChart/issues/2891\">#2891</a></p>", "createdAt": "2018-08-30T06:30:20Z", "publishedAt": "2018-08-30T06:30:20Z", "lastEditedAt": null, "updatedAt": "2018-08-30T06:30:20Z", "reactions": {"edges": [{"node": {"content": "THUMBS_UP", "createdAt": "2019-01-04T23:21:54Z"}}, {"node": {"content": "THUMBS_UP", "createdAt": "2019-06-10T09:05:24Z"}}]}, "bodyParsed": [{"number": 124, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Heads up, If you're using a unix timestamp, when it gets converted to Float, it loses precision, so lots of timestamps that actually represent different times end up being rounded and represented as the same x value.", "sentSegmented": ["heads", "up", "if", "you", "'re", "using", "a", "unix", "timestamp", "when", "it", "gets", "converted", "to", "float", "it", "loses", "precision", "so", "lots", "of", "timestamps", "that", "actually", "represent", "different", "times", "end", "up", "being", "rounded", "and", "represented", "as", "the", "same", "x", "value"], "sentSegmentedWithoutStops": ["heads", "'re", "using", "unix", "timestamp", "gets", "converted", "float", "loses", "precision", "lots", "timestamps", "actually", "represent", "different", "times", "end", "rounded", "represented", "x", "value"], "sentSegmentedWithoutStopsStemmed": ["head", "'re", "use", "unix", "timestamp", "get", "convert", "float", "lose", "precis", "lot", "timestamp", "actual", "repres", "differ", "time", "end", "round", "repres", "x", "valu"]}, {"number": 125, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "See #2891", "sentSegmented": ["see", "2891"], "sentSegmentedWithoutStops": ["see", "2891"], "sentSegmentedWithoutStopsStemmed": ["see", "2891"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHODqsc-w==", "hasNextPage": true}, "totalCount": 21}, "labels": {"edges": [{"node": {"createdAt": "2014-04-25T14:29:47Z", "name": "enhancement"}}]}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["time", "chart", "support"], "titleSegmentedWithoutStops": ["time", "chart", "support"], "titleSegmentedWithoutStopsStemmed": ["time", "chart", "support"], "bodyParsed": [{"number": 1, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "i used AChartEngine and your jar , if you can support time chart like AChartEngine , i think may be very useful !", "sentSegmented": ["i", "used", "achartengine", "and", "your", "jar", "if", "you", "can", "support", "time", "chart", "like", "achartengine", "i", "think", "may", "be", "very", "useful"], "sentSegmentedWithoutStops": ["used", "achartengine", "jar", "support", "time", "chart", "like", "achartengine", "think", "may", "useful"], "sentSegmentedWithoutStopsStemmed": ["use", "achartengin", "jar", "support", "time", "chart", "like", "achartengin", "think", "may", "use"]}, {"number": 2, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "!", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}]}