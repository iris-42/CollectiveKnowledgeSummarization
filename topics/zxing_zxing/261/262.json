{"repository": {"owner": {"login": "zxing"}, "name": "zxing", "forkCount": 8966, "stargazerCount": 27366, "createdAt": "2011-10-12T14:07:27Z", "updatedAt": "2021-03-18T07:11:39Z", "repositoryTopics": {"edges": [{"node": {"topic": {"name": "java"}}}, {"node": {"topic": {"name": "android"}}}, {"node": {"topic": {"name": "barcode"}}}, {"node": {"topic": {"name": "barcode-scanner"}}}, {"node": {"topic": {"name": "zxing"}}}, {"node": {"topic": {"name": "qr-code"}}}, {"node": {"topic": {"name": "datamatrix"}}}, {"node": {"topic": {"name": "upc"}}}]}, "languages": {"edges": [{"node": {"name": "Java"}}, {"node": {"name": "HTML"}}, {"node": {"name": "CSS"}}]}, "primaryLanguage": {"name": "Java"}}, "id": "MDU6SXNzdWU1MDUzNzI4OA==", "number": 262, "author": {"login": "ychtioui"}, "title": "Any DataMatrix barcode 144x144 not read", "body": "I integrated Zxing to read DataMatrix barcodes. I have a database of over 2000 images. all barcodes are read, but 144x144 barcodes.\n I attached an image. The image encodes a few digits in a 144x144 barcode.\n has the datamatrix 144x144 reading fixed? is this a known issue?\n\nthis barcode has 10 datablocks. The reader decides that each datablocks has errors, and this is not the case. When I save and review the bitmatrix, it does match 100% the input image.\n![barcode_144_144](https://cloud.githubusercontent.com/assets/9968625/5248103/2e913efc-7946-11e4-9f19-f177d458e959.jpg)\n\nthanks\n", "bodyHTML": "<p>I integrated Zxing to read DataMatrix barcodes. I have a database of over 2000 images. all barcodes are read, but 144x144 barcodes.<br>\nI attached an image. The image encodes a few digits in a 144x144 barcode.<br>\nhas the datamatrix 144x144 reading fixed? is this a known issue?</p>\n<p>this barcode has 10 datablocks. The reader decides that each datablocks has errors, and this is not the case. When I save and review the bitmatrix, it does match 100% the input image.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/9968625/5248103/2e913efc-7946-11e4-9f19-f177d458e959.jpg\"><img src=\"https://cloud.githubusercontent.com/assets/9968625/5248103/2e913efc-7946-11e4-9f19-f177d458e959.jpg\" alt=\"barcode_144_144\" style=\"max-width:100%;\"></a></p>\n<p>thanks</p>", "bodyText": "I integrated Zxing to read DataMatrix barcodes. I have a database of over 2000 images. all barcodes are read, but 144x144 barcodes.\nI attached an image. The image encodes a few digits in a 144x144 barcode.\nhas the datamatrix 144x144 reading fixed? is this a known issue?\nthis barcode has 10 datablocks. The reader decides that each datablocks has errors, and this is not the case. When I save and review the bitmatrix, it does match 100% the input image.\n\nthanks", "assignees": {"edges": []}, "createdAt": "2014-12-01T15:38:32Z", "closed": true, "closedAt": "2014-12-04T22:46:03Z", "lastEditedAt": null, "publishedAt": "2014-12-01T15:38:32Z", "comments": {"edges": [{"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1MzA4NDE3", "author": {"login": "ychtioui"}, "body": "Bug Fixed:\nWhen parsing from raw codewords to datablocks. For the 144x144 barcodes only, the parsing of the Error-Correction (EC) codewords for each datablocks is wrong. It has an offset that was not taken into account.\nThe parsing for all the other barcodes (from 10x10 to 132x132, and for all the rectangular barcodes) has been correct.\n\nEach 144x144 barcode has 2178 raw codewords: 1558 data codewords, and 620 EC codewords.\nIt has 10 Datablocks: 8 datablocks have 156 data codewords, and 62 EC codewords. The last 2 datablocks have 155 data codewords and 62 EC codewords each.\n\nDB[i] : for Datablock i, i ranging from 0 to 9.\nRC[j]: for RawCodeword[j], j ranging from 0 to 2177.\n\nInitial wrong parsing (this works on all barcodes but the 144x144)\nDatablock Data Codewords                                    62 EC codewords\nDB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]\nDB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]\nDB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]\nDB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]\nDB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]\nDB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]\nDB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]\nDB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]\nDB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]\nDB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]\n\nCorrect parsing table (this applies only to 144x144 barcodes)\nDatablock Data Codewords                                    62 EC codewords\nDB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]\nDB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]\nDB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]\nDB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]\nDB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]\nDB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]\nDB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]\nDB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]\nDB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]\nDB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]\n\nNotice: the last 2 datablocks always have 155 codewords\n\nSoftware changes:\nDataBlock.java>function \"getDataBlocks\"\nreplace this:\n// Now add in error correction blocks\n    int max = result[0].codewords.length;\n    for (int i = longerBlocksNumDataCodewords; i < max; i++) {\n      for (int j = 0; j < numResultBlocks; j++) {\n        int iOffset = specialVersion && j > 7 ? i - 1 : i;\n        result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n      }\n    }\nwith this:\n// Now add in error correction blocks\n    int max = result[0].codewords.length;\n    for (int i = longerBlocksNumDataCodewords; i < max; i++) {\n      for (int j = 0; j < numResultBlocks; j++) {\n    int jOffset = (specialVersion)?(j+8)%numResultBlocks:j;\n        int iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n        result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n      }\n    }\n\nGood luck:\nYounes CHTIOUI\n", "bodyText": "Bug Fixed:\nWhen parsing from raw codewords to datablocks. For the 144x144 barcodes only, the parsing of the Error-Correction (EC) codewords for each datablocks is wrong. It has an offset that was not taken into account.\nThe parsing for all the other barcodes (from 10x10 to 132x132, and for all the rectangular barcodes) has been correct.\nEach 144x144 barcode has 2178 raw codewords: 1558 data codewords, and 620 EC codewords.\nIt has 10 Datablocks: 8 datablocks have 156 data codewords, and 62 EC codewords. The last 2 datablocks have 155 data codewords and 62 EC codewords each.\nDB[i] : for Datablock i, i ranging from 0 to 9.\nRC[j]: for RawCodeword[j], j ranging from 0 to 2177.\nInitial wrong parsing (this works on all barcodes but the 144x144)\nDatablock Data Codewords                                    62 EC codewords\nDB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]\nDB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]\nDB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]\nDB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]\nDB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]\nDB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]\nDB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]\nDB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]\nDB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]\nDB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]\nCorrect parsing table (this applies only to 144x144 barcodes)\nDatablock Data Codewords                                    62 EC codewords\nDB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]\nDB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]\nDB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]\nDB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]\nDB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]\nDB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]\nDB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]\nDB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]\nDB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]\nDB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]\nNotice: the last 2 datablocks always have 155 codewords\nSoftware changes:\nDataBlock.java>function \"getDataBlocks\"\nreplace this:\n// Now add in error correction blocks\nint max = result[0].codewords.length;\nfor (int i = longerBlocksNumDataCodewords; i < max; i++) {\nfor (int j = 0; j < numResultBlocks; j++) {\nint iOffset = specialVersion && j > 7 ? i - 1 : i;\nresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n}\n}\nwith this:\n// Now add in error correction blocks\nint max = result[0].codewords.length;\nfor (int i = longerBlocksNumDataCodewords; i < max; i++) {\nfor (int j = 0; j < numResultBlocks; j++) {\nint jOffset = (specialVersion)?(j+8)%numResultBlocks:j;\nint iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\nresult[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n}\n}\nGood luck:\nYounes CHTIOUI", "bodyHTML": "<p>Bug Fixed:<br>\nWhen parsing from raw codewords to datablocks. For the 144x144 barcodes only, the parsing of the Error-Correction (EC) codewords for each datablocks is wrong. It has an offset that was not taken into account.<br>\nThe parsing for all the other barcodes (from 10x10 to 132x132, and for all the rectangular barcodes) has been correct.</p>\n<p>Each 144x144 barcode has 2178 raw codewords: 1558 data codewords, and 620 EC codewords.<br>\nIt has 10 Datablocks: 8 datablocks have 156 data codewords, and 62 EC codewords. The last 2 datablocks have 155 data codewords and 62 EC codewords each.</p>\n<p>DB[i] : for Datablock i, i ranging from 0 to 9.<br>\nRC[j]: for RawCodeword[j], j ranging from 0 to 2177.</p>\n<p>Initial wrong parsing (this works on all barcodes but the 144x144)<br>\nDatablock Data Codewords                                    62 EC codewords<br>\nDB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]<br>\nDB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]<br>\nDB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]<br>\nDB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]<br>\nDB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]<br>\nDB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]<br>\nDB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]<br>\nDB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]<br>\nDB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]<br>\nDB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]</p>\n<p>Correct parsing table (this applies only to 144x144 barcodes)<br>\nDatablock Data Codewords                                    62 EC codewords<br>\nDB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]<br>\nDB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]<br>\nDB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]<br>\nDB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]<br>\nDB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]<br>\nDB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]<br>\nDB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]<br>\nDB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]<br>\nDB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]<br>\nDB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]</p>\n<p>Notice: the last 2 datablocks always have 155 codewords</p>\n<p>Software changes:<br>\nDataBlock.java&gt;function \"getDataBlocks\"<br>\nreplace this:<br>\n// Now add in error correction blocks<br>\nint max = result[0].codewords.length;<br>\nfor (int i = longerBlocksNumDataCodewords; i &lt; max; i++) {<br>\nfor (int j = 0; j &lt; numResultBlocks; j++) {<br>\nint iOffset = specialVersion &amp;&amp; j &gt; 7 ? i - 1 : i;<br>\nresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];<br>\n}<br>\n}<br>\nwith this:<br>\n// Now add in error correction blocks<br>\nint max = result[0].codewords.length;<br>\nfor (int i = longerBlocksNumDataCodewords; i &lt; max; i++) {<br>\nfor (int j = 0; j &lt; numResultBlocks; j++) {<br>\nint jOffset = (specialVersion)?(j+8)%numResultBlocks:j;<br>\nint iOffset = specialVersion &amp;&amp; jOffset &gt; 7 ? i - 1 : i;<br>\nresult[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];<br>\n}<br>\n}</p>\n<p>Good luck:<br>\nYounes CHTIOUI</p>", "createdAt": "2014-12-02T21:31:33Z", "publishedAt": "2014-12-02T21:31:33Z", "lastEditedAt": null, "updatedAt": "2014-12-02T21:31:33Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 677, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Bug Fixed:", "sentSegmented": ["bug", "fixed"], "sentSegmentedWithoutStops": ["bug", "fixed"], "sentSegmentedWithoutStopsStemmed": ["bug", "fix"]}, {"number": 678, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When parsing from raw codewords to datablocks.", "sentSegmented": ["when", "parsing", "from", "raw", "codewords", "to", "datablocks"], "sentSegmentedWithoutStops": ["parsing", "raw", "codewords", "datablocks"], "sentSegmentedWithoutStopsStemmed": ["pars", "raw", "codeword", "datablock"]}, {"number": 679, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "For the 144x144 barcodes only, the parsing of the Error-Correction (EC) codewords for each datablocks is wrong.", "sentSegmented": ["for", "the", "144x144", "barcodes", "only", "the", "parsing", "of", "the", "error-correction", "ec", "codewords", "for", "each", "datablocks", "is", "wrong"], "sentSegmentedWithoutStops": ["144x144", "barcodes", "parsing", "error-correction", "ec", "codewords", "datablocks", "wrong"], "sentSegmentedWithoutStopsStemmed": ["144x144", "barcod", "pars", "error-correct", "ec", "codeword", "datablock", "wrong"]}, {"number": 680, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It has an offset that was not taken into account.", "sentSegmented": ["it", "has", "an", "offset", "that", "was", "not", "taken", "into", "account"], "sentSegmentedWithoutStops": ["offset", "taken", "account"], "sentSegmentedWithoutStopsStemmed": ["offset", "taken", "account"]}, {"number": 681, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The parsing for all the other barcodes (from 10x10 to 132x132, and for all the rectangular barcodes) has been correct.", "sentSegmented": ["the", "parsing", "for", "all", "the", "other", "barcodes", "from", "10x10", "to", "132x132", "and", "for", "all", "the", "rectangular", "barcodes", "has", "been", "correct"], "sentSegmentedWithoutStops": ["parsing", "barcodes", "10x10", "132x132", "rectangular", "barcodes", "correct"], "sentSegmentedWithoutStopsStemmed": ["pars", "barcod", "10x10", "132x132", "rectangular", "barcod", "correct"]}, {"number": 682, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Each 144x144 barcode has 2178 raw codewords: 1558 data codewords, and 620 EC codewords.", "sentSegmented": ["each", "144x144", "barcode", "has", "2178", "raw", "codewords", "1558", "data", "codewords", "and", "620", "ec", "codewords"], "sentSegmentedWithoutStops": ["144x144", "barcode", "2178", "raw", "codewords", "1558", "data", "codewords", "620", "ec", "codewords"], "sentSegmentedWithoutStopsStemmed": ["144x144", "barcod", "2178", "raw", "codeword", "1558", "data", "codeword", "620", "ec", "codeword"]}, {"number": 683, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It has 10 Datablocks: 8 datablocks have 156 data codewords, and 62 EC codewords.", "sentSegmented": ["it", "has", "10", "datablocks", "8", "datablocks", "have", "156", "data", "codewords", "and", "62", "ec", "codewords"], "sentSegmentedWithoutStops": ["10", "datablocks", "8", "datablocks", "156", "data", "codewords", "62", "ec", "codewords"], "sentSegmentedWithoutStopsStemmed": ["10", "datablock", "8", "datablock", "156", "data", "codeword", "62", "ec", "codeword"]}, {"number": 684, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The last 2 datablocks have 155 data codewords and 62 EC codewords each.", "sentSegmented": ["the", "last", "2", "datablocks", "have", "155", "data", "codewords", "and", "62", "ec", "codewords", "each"], "sentSegmentedWithoutStops": ["last", "2", "datablocks", "155", "data", "codewords", "62", "ec", "codewords"], "sentSegmentedWithoutStopsStemmed": ["last", "2", "datablock", "155", "data", "codeword", "62", "ec", "codeword"]}, {"number": 685, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[i] : for Datablock i, i ranging from 0 to 9.", "sentSegmented": ["db", "i", "for", "datablock", "i", "i", "ranging", "from", "0", "to", "9"], "sentSegmentedWithoutStops": ["db", "datablock", "ranging", "0", "9"], "sentSegmentedWithoutStopsStemmed": ["db", "datablock", "rang", "0", "9"]}, {"number": 686, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "RC[j]: for RawCodeword[j], j ranging from 0 to 2177.", "sentSegmented": ["rc", "j", "for", "rawcodeword", "j", "j", "ranging", "from", "0", "to", "2177"], "sentSegmentedWithoutStops": ["rc", "j", "rawcodeword", "j", "j", "ranging", "0", "2177"], "sentSegmentedWithoutStopsStemmed": ["rc", "j", "rawcodeword", "j", "j", "rang", "0", "2177"]}, {"number": 687, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Initial wrong parsing (this works on all barcodes but the 144x144)", "sentSegmented": ["initial", "wrong", "parsing", "this", "works", "on", "all", "barcodes", "but", "the", "144x144"], "sentSegmentedWithoutStops": ["initial", "wrong", "parsing", "works", "barcodes", "144x144"], "sentSegmentedWithoutStopsStemmed": ["initi", "wrong", "pars", "work", "barcod", "144x144"]}, {"number": 688, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Datablock Data Codewords                                    62 EC codewords", "sentSegmented": ["datablock", "data", "codewords", "62", "ec", "codewords"], "sentSegmentedWithoutStops": ["datablock", "data", "codewords", "62", "ec", "codewords"], "sentSegmentedWithoutStopsStemmed": ["datablock", "data", "codeword", "62", "ec", "codeword"]}, {"number": 689, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]", "sentSegmented": ["db", "0", "rc", "0", "rc", "10", "rc", "20", "\u2026rc", "1550", "rc", "1558", "rc", "1568", "rc", "1578", "\u2026rc", "2168"], "sentSegmentedWithoutStops": ["db", "0", "rc", "0", "rc", "10", "rc", "20", "\u2026rc", "1550", "rc", "1558", "rc", "1568", "rc", "1578", "\u2026rc", "2168"], "sentSegmentedWithoutStopsStemmed": ["db", "0", "rc", "0", "rc", "10", "rc", "20", "\u2026rc", "1550", "rc", "1558", "rc", "1568", "rc", "1578", "\u2026rc", "2168"]}, {"number": 690, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]", "sentSegmented": ["db", "1", "rc", "1", "rc", "11", "rc", "21", "\u2026rc", "1551", "rc", "1559", "rc", "1569", "rc", "1579", "\u2026rc", "2169"], "sentSegmentedWithoutStops": ["db", "1", "rc", "1", "rc", "11", "rc", "21", "\u2026rc", "1551", "rc", "1559", "rc", "1569", "rc", "1579", "\u2026rc", "2169"], "sentSegmentedWithoutStopsStemmed": ["db", "1", "rc", "1", "rc", "11", "rc", "21", "\u2026rc", "1551", "rc", "1559", "rc", "1569", "rc", "1579", "\u2026rc", "2169"]}, {"number": 691, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]", "sentSegmented": ["db", "2", "rc", "2", "rc", "12", "rc", "22", "\u2026rc", "1552", "rc", "1560", "rc", "1570", "rc", "1580", "\u2026rc", "2170"], "sentSegmentedWithoutStops": ["db", "2", "rc", "2", "rc", "12", "rc", "22", "\u2026rc", "1552", "rc", "1560", "rc", "1570", "rc", "1580", "\u2026rc", "2170"], "sentSegmentedWithoutStopsStemmed": ["db", "2", "rc", "2", "rc", "12", "rc", "22", "\u2026rc", "1552", "rc", "1560", "rc", "1570", "rc", "1580", "\u2026rc", "2170"]}, {"number": 692, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]", "sentSegmented": ["db", "3", "rc", "3", "rc", "13", "rc", "23", "\u2026rc", "1553", "rc", "1561", "rc", "1571", "rc", "1581", "\u2026rc", "2171"], "sentSegmentedWithoutStops": ["db", "3", "rc", "3", "rc", "13", "rc", "23", "\u2026rc", "1553", "rc", "1561", "rc", "1571", "rc", "1581", "\u2026rc", "2171"], "sentSegmentedWithoutStopsStemmed": ["db", "3", "rc", "3", "rc", "13", "rc", "23", "\u2026rc", "1553", "rc", "1561", "rc", "1571", "rc", "1581", "\u2026rc", "2171"]}, {"number": 693, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]", "sentSegmented": ["db", "4", "rc", "4", "rc", "14", "rc", "24", "\u2026rc", "1554", "rc", "1562", "rc", "1572", "rc", "1582", "\u2026rc", "2172"], "sentSegmentedWithoutStops": ["db", "4", "rc", "4", "rc", "14", "rc", "24", "\u2026rc", "1554", "rc", "1562", "rc", "1572", "rc", "1582", "\u2026rc", "2172"], "sentSegmentedWithoutStopsStemmed": ["db", "4", "rc", "4", "rc", "14", "rc", "24", "\u2026rc", "1554", "rc", "1562", "rc", "1572", "rc", "1582", "\u2026rc", "2172"]}, {"number": 694, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]", "sentSegmented": ["db", "5", "rc", "5", "rc", "15", "rc", "25", "\u2026rc", "1555", "rc", "1563", "rc", "1573", "rc", "1583", "\u2026rc", "2173"], "sentSegmentedWithoutStops": ["db", "5", "rc", "5", "rc", "15", "rc", "25", "\u2026rc", "1555", "rc", "1563", "rc", "1573", "rc", "1583", "\u2026rc", "2173"], "sentSegmentedWithoutStopsStemmed": ["db", "5", "rc", "5", "rc", "15", "rc", "25", "\u2026rc", "1555", "rc", "1563", "rc", "1573", "rc", "1583", "\u2026rc", "2173"]}, {"number": 695, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]", "sentSegmented": ["db", "6", "rc", "6", "rc", "16", "rc", "26", "\u2026rc", "1556", "rc", "1564", "rc", "1574", "rc", "1584", "\u2026rc", "2174"], "sentSegmentedWithoutStops": ["db", "6", "rc", "6", "rc", "16", "rc", "26", "\u2026rc", "1556", "rc", "1564", "rc", "1574", "rc", "1584", "\u2026rc", "2174"], "sentSegmentedWithoutStopsStemmed": ["db", "6", "rc", "6", "rc", "16", "rc", "26", "\u2026rc", "1556", "rc", "1564", "rc", "1574", "rc", "1584", "\u2026rc", "2174"]}, {"number": 696, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]", "sentSegmented": ["db", "7", "rc", "7", "rc", "17", "rc", "27", "\u2026rc", "1557", "rc", "1565", "rc", "1575", "rc", "1585", "\u2026rc", "2175"], "sentSegmentedWithoutStops": ["db", "7", "rc", "7", "rc", "17", "rc", "27", "\u2026rc", "1557", "rc", "1565", "rc", "1575", "rc", "1585", "\u2026rc", "2175"], "sentSegmentedWithoutStopsStemmed": ["db", "7", "rc", "7", "rc", "17", "rc", "27", "\u2026rc", "1557", "rc", "1565", "rc", "1575", "rc", "1585", "\u2026rc", "2175"]}, {"number": 697, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]", "sentSegmented": ["db", "8", "rc", "8", "rc", "18", "rc", "28", "\u2026rc", "1548", "rc", "1566", "rc", "1576", "rc", "1586", "\u2026rc", "2176"], "sentSegmentedWithoutStops": ["db", "8", "rc", "8", "rc", "18", "rc", "28", "\u2026rc", "1548", "rc", "1566", "rc", "1576", "rc", "1586", "\u2026rc", "2176"], "sentSegmentedWithoutStopsStemmed": ["db", "8", "rc", "8", "rc", "18", "rc", "28", "\u2026rc", "1548", "rc", "1566", "rc", "1576", "rc", "1586", "\u2026rc", "2176"]}, {"number": 698, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]", "sentSegmented": ["db", "9", "rc", "9", "rc", "19", "rc", "29", "\u2026rc", "1549", "rc", "1567", "rc", "1577", "rc", "1587", "\u2026rc", "2177"], "sentSegmentedWithoutStops": ["db", "9", "rc", "9", "rc", "19", "rc", "29", "\u2026rc", "1549", "rc", "1567", "rc", "1577", "rc", "1587", "\u2026rc", "2177"], "sentSegmentedWithoutStopsStemmed": ["db", "9", "rc", "9", "rc", "19", "rc", "29", "\u2026rc", "1549", "rc", "1567", "rc", "1577", "rc", "1587", "\u2026rc", "2177"]}, {"number": 699, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Correct parsing table (this applies only to 144x144 barcodes)", "sentSegmented": ["correct", "parsing", "table", "this", "applies", "only", "to", "144x144", "barcodes"], "sentSegmentedWithoutStops": ["correct", "parsing", "table", "applies", "144x144", "barcodes"], "sentSegmentedWithoutStopsStemmed": ["correct", "pars", "tabl", "appli", "144x144", "barcod"]}, {"number": 700, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Datablock Data Codewords                                    62 EC codewords", "sentSegmented": ["datablock", "data", "codewords", "62", "ec", "codewords"], "sentSegmentedWithoutStops": ["datablock", "data", "codewords", "62", "ec", "codewords"], "sentSegmentedWithoutStopsStemmed": ["datablock", "data", "codeword", "62", "ec", "codeword"]}, {"number": 701, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[0]   RC[0], RC[10], RC[20],\u2026RC[1550]       RC[1560], RC[1570], RC [1580], \u2026RC[2170]", "sentSegmented": ["db", "0", "rc", "0", "rc", "10", "rc", "20", "\u2026rc", "1550", "rc", "1560", "rc", "1570", "rc", "1580", "\u2026rc", "2170"], "sentSegmentedWithoutStops": ["db", "0", "rc", "0", "rc", "10", "rc", "20", "\u2026rc", "1550", "rc", "1560", "rc", "1570", "rc", "1580", "\u2026rc", "2170"], "sentSegmentedWithoutStopsStemmed": ["db", "0", "rc", "0", "rc", "10", "rc", "20", "\u2026rc", "1550", "rc", "1560", "rc", "1570", "rc", "1580", "\u2026rc", "2170"]}, {"number": 702, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[1]   RC[1], RC[11], RC[21],\u2026RC[1551]       RC[1561], RC[1571], RC [1581], \u2026RC[2171]", "sentSegmented": ["db", "1", "rc", "1", "rc", "11", "rc", "21", "\u2026rc", "1551", "rc", "1561", "rc", "1571", "rc", "1581", "\u2026rc", "2171"], "sentSegmentedWithoutStops": ["db", "1", "rc", "1", "rc", "11", "rc", "21", "\u2026rc", "1551", "rc", "1561", "rc", "1571", "rc", "1581", "\u2026rc", "2171"], "sentSegmentedWithoutStopsStemmed": ["db", "1", "rc", "1", "rc", "11", "rc", "21", "\u2026rc", "1551", "rc", "1561", "rc", "1571", "rc", "1581", "\u2026rc", "2171"]}, {"number": 703, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[2]   RC[2], RC[12], RC[22],\u2026RC[1552]       RC[1562], RC[1572], RC [1582], \u2026RC[2172]", "sentSegmented": ["db", "2", "rc", "2", "rc", "12", "rc", "22", "\u2026rc", "1552", "rc", "1562", "rc", "1572", "rc", "1582", "\u2026rc", "2172"], "sentSegmentedWithoutStops": ["db", "2", "rc", "2", "rc", "12", "rc", "22", "\u2026rc", "1552", "rc", "1562", "rc", "1572", "rc", "1582", "\u2026rc", "2172"], "sentSegmentedWithoutStopsStemmed": ["db", "2", "rc", "2", "rc", "12", "rc", "22", "\u2026rc", "1552", "rc", "1562", "rc", "1572", "rc", "1582", "\u2026rc", "2172"]}, {"number": 704, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[3]   RC[3], RC[13], RC[23],\u2026RC[1553]       RC[1563], RC[1573], RC [1583], \u2026RC[2173]", "sentSegmented": ["db", "3", "rc", "3", "rc", "13", "rc", "23", "\u2026rc", "1553", "rc", "1563", "rc", "1573", "rc", "1583", "\u2026rc", "2173"], "sentSegmentedWithoutStops": ["db", "3", "rc", "3", "rc", "13", "rc", "23", "\u2026rc", "1553", "rc", "1563", "rc", "1573", "rc", "1583", "\u2026rc", "2173"], "sentSegmentedWithoutStopsStemmed": ["db", "3", "rc", "3", "rc", "13", "rc", "23", "\u2026rc", "1553", "rc", "1563", "rc", "1573", "rc", "1583", "\u2026rc", "2173"]}, {"number": 705, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[4]   RC[4], RC[14], RC[24],\u2026RC[1554]       RC[1564], RC[1574], RC [1584], \u2026RC[2174]", "sentSegmented": ["db", "4", "rc", "4", "rc", "14", "rc", "24", "\u2026rc", "1554", "rc", "1564", "rc", "1574", "rc", "1584", "\u2026rc", "2174"], "sentSegmentedWithoutStops": ["db", "4", "rc", "4", "rc", "14", "rc", "24", "\u2026rc", "1554", "rc", "1564", "rc", "1574", "rc", "1584", "\u2026rc", "2174"], "sentSegmentedWithoutStopsStemmed": ["db", "4", "rc", "4", "rc", "14", "rc", "24", "\u2026rc", "1554", "rc", "1564", "rc", "1574", "rc", "1584", "\u2026rc", "2174"]}, {"number": 706, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[5]   RC[5], RC[15], RC[25],\u2026RC[1555]       RC[1565], RC[1575], RC [1585], \u2026RC[2175]", "sentSegmented": ["db", "5", "rc", "5", "rc", "15", "rc", "25", "\u2026rc", "1555", "rc", "1565", "rc", "1575", "rc", "1585", "\u2026rc", "2175"], "sentSegmentedWithoutStops": ["db", "5", "rc", "5", "rc", "15", "rc", "25", "\u2026rc", "1555", "rc", "1565", "rc", "1575", "rc", "1585", "\u2026rc", "2175"], "sentSegmentedWithoutStopsStemmed": ["db", "5", "rc", "5", "rc", "15", "rc", "25", "\u2026rc", "1555", "rc", "1565", "rc", "1575", "rc", "1585", "\u2026rc", "2175"]}, {"number": 707, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[6]   RC[6], RC[16], RC[26],\u2026RC[1556]       RC[1566], RC[1576], RC [1586], \u2026RC[2176]", "sentSegmented": ["db", "6", "rc", "6", "rc", "16", "rc", "26", "\u2026rc", "1556", "rc", "1566", "rc", "1576", "rc", "1586", "\u2026rc", "2176"], "sentSegmentedWithoutStops": ["db", "6", "rc", "6", "rc", "16", "rc", "26", "\u2026rc", "1556", "rc", "1566", "rc", "1576", "rc", "1586", "\u2026rc", "2176"], "sentSegmentedWithoutStopsStemmed": ["db", "6", "rc", "6", "rc", "16", "rc", "26", "\u2026rc", "1556", "rc", "1566", "rc", "1576", "rc", "1586", "\u2026rc", "2176"]}, {"number": 708, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[7]   RC[7], RC[17], RC[27],\u2026RC[1557]       RC[1567], RC[1577], RC [1587], \u2026RC[2177]", "sentSegmented": ["db", "7", "rc", "7", "rc", "17", "rc", "27", "\u2026rc", "1557", "rc", "1567", "rc", "1577", "rc", "1587", "\u2026rc", "2177"], "sentSegmentedWithoutStops": ["db", "7", "rc", "7", "rc", "17", "rc", "27", "\u2026rc", "1557", "rc", "1567", "rc", "1577", "rc", "1587", "\u2026rc", "2177"], "sentSegmentedWithoutStopsStemmed": ["db", "7", "rc", "7", "rc", "17", "rc", "27", "\u2026rc", "1557", "rc", "1567", "rc", "1577", "rc", "1587", "\u2026rc", "2177"]}, {"number": 709, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[8]   RC[8], RC[18], RC[28],\u2026RC[1548]       RC[1558], RC[1568], RC [1578], \u2026RC[2168]", "sentSegmented": ["db", "8", "rc", "8", "rc", "18", "rc", "28", "\u2026rc", "1548", "rc", "1558", "rc", "1568", "rc", "1578", "\u2026rc", "2168"], "sentSegmentedWithoutStops": ["db", "8", "rc", "8", "rc", "18", "rc", "28", "\u2026rc", "1548", "rc", "1558", "rc", "1568", "rc", "1578", "\u2026rc", "2168"], "sentSegmentedWithoutStopsStemmed": ["db", "8", "rc", "8", "rc", "18", "rc", "28", "\u2026rc", "1548", "rc", "1558", "rc", "1568", "rc", "1578", "\u2026rc", "2168"]}, {"number": 710, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DB[9]   RC[9], RC[19], RC[29],\u2026RC[1549]       RC[1559], RC[1569], RC [1579], \u2026RC[2169]", "sentSegmented": ["db", "9", "rc", "9", "rc", "19", "rc", "29", "\u2026rc", "1549", "rc", "1559", "rc", "1569", "rc", "1579", "\u2026rc", "2169"], "sentSegmentedWithoutStops": ["db", "9", "rc", "9", "rc", "19", "rc", "29", "\u2026rc", "1549", "rc", "1559", "rc", "1569", "rc", "1579", "\u2026rc", "2169"], "sentSegmentedWithoutStopsStemmed": ["db", "9", "rc", "9", "rc", "19", "rc", "29", "\u2026rc", "1549", "rc", "1559", "rc", "1569", "rc", "1579", "\u2026rc", "2169"]}, {"number": 711, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Notice: the last 2 datablocks always have 155 codewords", "sentSegmented": ["notice", "the", "last", "2", "datablocks", "always", "have", "155", "codewords"], "sentSegmentedWithoutStops": ["notice", "last", "2", "datablocks", "always", "155", "codewords"], "sentSegmentedWithoutStopsStemmed": ["notic", "last", "2", "datablock", "alway", "155", "codeword"]}, {"number": 712, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Software changes:", "sentSegmented": ["software", "changes"], "sentSegmentedWithoutStops": ["software", "changes"], "sentSegmentedWithoutStopsStemmed": ["softwar", "chang"]}, {"number": 713, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "DataBlock.java>function \"getDataBlocks\"", "sentSegmented": ["datablock.java", "function", "getdatablocks"], "sentSegmentedWithoutStops": ["datablock.java", "function", "getdatablocks"], "sentSegmentedWithoutStopsStemmed": ["datablock.java", "function", "getdatablock"]}, {"number": 714, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "replace this:", "sentSegmented": ["replace", "this"], "sentSegmentedWithoutStops": ["replace"], "sentSegmentedWithoutStopsStemmed": ["replac"]}, {"number": 715, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// Now add in error correction blocks", "sentSegmented": ["now", "add", "in", "error", "correction", "blocks"], "sentSegmentedWithoutStops": ["add", "error", "correction", "blocks"], "sentSegmentedWithoutStopsStemmed": ["add", "error", "correct", "block"]}, {"number": 716, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int max = result[0].codewords.length;", "sentSegmented": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStops": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStopsStemmed": ["int", "max", "result", "0", ".codewords.length"]}, {"number": 717, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int i = longerBlocksNumDataCodewords; i < max; i++) {", "sentSegmented": ["for", "int", "i", "longerblocksnumdatacodewords", "i", "max", "i++"], "sentSegmentedWithoutStops": ["int", "longerblocksnumdatacodewords", "max", "i++"], "sentSegmentedWithoutStopsStemmed": ["int", "longerblocksnumdatacodeword", "max", "i++"]}, {"number": 718, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int j = 0; j < numResultBlocks; j++) {", "sentSegmented": ["for", "int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStops": ["int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStopsStemmed": ["int", "j", "0", "j", "numresultblock", "j++"]}, {"number": 719, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int iOffset = specialVersion && j > 7 ?", "sentSegmented": ["int", "ioffset", "specialversion", "j", "7"], "sentSegmentedWithoutStops": ["int", "ioffset", "specialversion", "j", "7"], "sentSegmentedWithoutStopsStemmed": ["int", "ioffset", "specialvers", "j", "7"]}, {"number": 720, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "i - 1 : i;", "sentSegmented": ["i", "1", "i"], "sentSegmentedWithoutStops": ["1"], "sentSegmentedWithoutStopsStemmed": ["1"]}, {"number": 721, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];", "sentSegmented": ["result", "j", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStops": ["result", "j", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStopsStemmed": ["result", "j", ".codeword", "ioffset", "rawcodeword", "rawcodewordsoffset++"]}, {"number": 722, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 723, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 724, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "with this:", "sentSegmented": ["with", "this"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 725, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// Now add in error correction blocks", "sentSegmented": ["now", "add", "in", "error", "correction", "blocks"], "sentSegmentedWithoutStops": ["add", "error", "correction", "blocks"], "sentSegmentedWithoutStopsStemmed": ["add", "error", "correct", "block"]}, {"number": 726, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int max = result[0].codewords.length;", "sentSegmented": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStops": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStopsStemmed": ["int", "max", "result", "0", ".codewords.length"]}, {"number": 727, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int i = longerBlocksNumDataCodewords; i < max; i++) {", "sentSegmented": ["for", "int", "i", "longerblocksnumdatacodewords", "i", "max", "i++"], "sentSegmentedWithoutStops": ["int", "longerblocksnumdatacodewords", "max", "i++"], "sentSegmentedWithoutStopsStemmed": ["int", "longerblocksnumdatacodeword", "max", "i++"]}, {"number": 728, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int j = 0; j < numResultBlocks; j++) {", "sentSegmented": ["for", "int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStops": ["int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStopsStemmed": ["int", "j", "0", "j", "numresultblock", "j++"]}, {"number": 729, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int jOffset = (specialVersion)?", "sentSegmented": ["int", "joffset", "specialversion"], "sentSegmentedWithoutStops": ["int", "joffset", "specialversion"], "sentSegmentedWithoutStopsStemmed": ["int", "joffset", "specialvers"]}, {"number": 730, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(j+8)%numResultBlocks:j;", "sentSegmented": ["j+8", "numresultblocks", "j"], "sentSegmentedWithoutStops": ["j+8", "numresultblocks", "j"], "sentSegmentedWithoutStopsStemmed": ["j+8", "numresultblock", "j"]}, {"number": 731, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int iOffset = specialVersion && jOffset > 7 ?", "sentSegmented": ["int", "ioffset", "specialversion", "joffset", "7"], "sentSegmentedWithoutStops": ["int", "ioffset", "specialversion", "joffset", "7"], "sentSegmentedWithoutStopsStemmed": ["int", "ioffset", "specialvers", "joffset", "7"]}, {"number": 732, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "i - 1 : i;", "sentSegmented": ["i", "1", "i"], "sentSegmentedWithoutStops": ["1"], "sentSegmentedWithoutStopsStemmed": ["1"]}, {"number": 733, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];", "sentSegmented": ["result", "joffset", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStops": ["result", "joffset", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStopsStemmed": ["result", "joffset", ".codeword", "ioffset", "rawcodeword", "rawcodewordsoffset++"]}, {"number": 734, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 735, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 736, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Good luck:", "sentSegmented": ["good", "luck"], "sentSegmentedWithoutStops": ["good", "luck"], "sentSegmentedWithoutStopsStemmed": ["good", "luck"]}, {"number": 737, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Younes CHTIOUI", "sentSegmented": ["younes", "chtioui"], "sentSegmentedWithoutStops": ["younes", "chtioui"], "sentSegmentedWithoutStopsStemmed": ["youn", "chtioui"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1MzY2MjY2", "author": {"login": "gvsharma"}, "body": "can i use zxing for OCR? my requirement is like this..\nThere is a barcode and client want to read it...here if he have my app then he will read barcode (OCR) and he will directly navigate to web page where he will directly shop for the object.\nThe other thing is if he didn't have my app then he just read the barcode and then he will go to a web page where he maually filled the object details and later he will move to object details.\nmy question is how to read both QR and OCR at a time? is it possible?\nKindly respond me\nThanks & Regards\nGV\n", "bodyText": "can i use zxing for OCR? my requirement is like this..\nThere is a barcode and client want to read it...here if he have my app then he will read barcode (OCR) and he will directly navigate to web page where he will directly shop for the object.\nThe other thing is if he didn't have my app then he just read the barcode and then he will go to a web page where he maually filled the object details and later he will move to object details.\nmy question is how to read both QR and OCR at a time? is it possible?\nKindly respond me\nThanks & Regards\nGV", "bodyHTML": "<p>can i use zxing for OCR? my requirement is like this..<br>\nThere is a barcode and client want to read it...here if he have my app then he will read barcode (OCR) and he will directly navigate to web page where he will directly shop for the object.<br>\nThe other thing is if he didn't have my app then he just read the barcode and then he will go to a web page where he maually filled the object details and later he will move to object details.<br>\nmy question is how to read both QR and OCR at a time? is it possible?<br>\nKindly respond me<br>\nThanks &amp; Regards<br>\nGV</p>", "createdAt": "2014-12-03T07:38:29Z", "publishedAt": "2014-12-03T07:38:29Z", "lastEditedAt": null, "updatedAt": "2014-12-03T07:39:44Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 738, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "can i use zxing for OCR?", "sentSegmented": ["can", "i", "use", "zxing", "for", "ocr"], "sentSegmentedWithoutStops": ["use", "zxing", "ocr"], "sentSegmentedWithoutStopsStemmed": ["use", "zxing", "ocr"]}, {"number": 739, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "my requirement is like this..", "sentSegmented": ["my", "requirement", "is", "like", "this"], "sentSegmentedWithoutStops": ["requirement", "like"], "sentSegmentedWithoutStopsStemmed": ["requir", "like"]}, {"number": 740, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "There is a barcode and client want to read it...here if he have my app then he will read barcode (OCR) and he will directly navigate to web page where he will directly shop for the object.", "sentSegmented": ["there", "is", "a", "barcode", "and", "client", "want", "to", "read", "it", "here", "if", "he", "have", "my", "app", "then", "he", "will", "read", "barcode", "ocr", "and", "he", "will", "directly", "navigate", "to", "web", "page", "where", "he", "will", "directly", "shop", "for", "the", "object"], "sentSegmentedWithoutStops": ["barcode", "client", "want", "read", "app", "read", "barcode", "ocr", "directly", "navigate", "web", "page", "directly", "shop", "object"], "sentSegmentedWithoutStopsStemmed": ["barcod", "client", "want", "read", "app", "read", "barcod", "ocr", "directli", "navig", "web", "page", "directli", "shop", "object"]}, {"number": 741, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The other thing is if he didn't have my app then he just read the barcode and then he will go to a web page where he maually filled the object details and later he will move to object details.", "sentSegmented": ["the", "other", "thing", "is", "if", "he", "did", "n't", "have", "my", "app", "then", "he", "just", "read", "the", "barcode", "and", "then", "he", "will", "go", "to", "a", "web", "page", "where", "he", "maually", "filled", "the", "object", "details", "and", "later", "he", "will", "move", "to", "object", "details"], "sentSegmentedWithoutStops": ["thing", "n't", "app", "read", "barcode", "go", "web", "page", "maually", "filled", "object", "details", "later", "move", "object", "details"], "sentSegmentedWithoutStopsStemmed": ["thing", "n't", "app", "read", "barcod", "go", "web", "page", "maualli", "fill", "object", "detail", "later", "move", "object", "detail"]}, {"number": 742, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "my question is how to read both QR and OCR at a time?", "sentSegmented": ["my", "question", "is", "how", "to", "read", "both", "qr", "and", "ocr", "at", "a", "time"], "sentSegmentedWithoutStops": ["question", "read", "qr", "ocr", "time"], "sentSegmentedWithoutStopsStemmed": ["question", "read", "qr", "ocr", "time"]}, {"number": 743, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "is it possible?", "sentSegmented": ["is", "it", "possible"], "sentSegmentedWithoutStops": ["possible"], "sentSegmentedWithoutStopsStemmed": ["possibl"]}, {"number": 744, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Kindly respond me", "sentSegmented": ["kindly", "respond", "me"], "sentSegmentedWithoutStops": ["kindly", "respond"], "sentSegmentedWithoutStopsStemmed": ["kindli", "respond"]}, {"number": 745, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Thanks & Regards", "sentSegmented": ["thanks", "regards"], "sentSegmentedWithoutStops": ["thanks", "regards"], "sentSegmentedWithoutStopsStemmed": ["thank", "regard"]}, {"number": 746, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "GV", "sentSegmented": ["gv"], "sentSegmentedWithoutStops": ["gv"], "sentSegmentedWithoutStopsStemmed": ["gv"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1NDMxODI0", "author": {"login": "srowen"}, "body": "@ychtioui Great Younes, sounds like a clear fix. Do you want to open a PR? I can do it but sometimes people like the 'credit' in the PR history. Does it pass the unit tests? It'd be great to add your image to the Data Matrix test suite.\n\n@gvsharma Please ask unrelated questions on the mailing list in a new thread.\n", "bodyText": "@ychtioui Great Younes, sounds like a clear fix. Do you want to open a PR? I can do it but sometimes people like the 'credit' in the PR history. Does it pass the unit tests? It'd be great to add your image to the Data Matrix test suite.\n@gvsharma Please ask unrelated questions on the mailing list in a new thread.", "bodyHTML": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ychtioui/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ychtioui\">@ychtioui</a> Great Younes, sounds like a clear fix. Do you want to open a PR? I can do it but sometimes people like the 'credit' in the PR history. Does it pass the unit tests? It'd be great to add your image to the Data Matrix test suite.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gvsharma/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gvsharma\">@gvsharma</a> Please ask unrelated questions on the mailing list in a new thread.</p>", "createdAt": "2014-12-03T15:52:20Z", "publishedAt": "2014-12-03T15:52:20Z", "lastEditedAt": null, "updatedAt": "2014-12-03T15:52:20Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 747, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@ychtioui Great Younes, sounds like a clear fix.", "sentSegmented": ["ychtioui", "great", "younes", "sounds", "like", "a", "clear", "fix"], "sentSegmentedWithoutStops": ["ychtioui", "great", "younes", "sounds", "like", "clear", "fix"], "sentSegmentedWithoutStopsStemmed": ["ychtioui", "great", "youn", "sound", "like", "clear", "fix"]}, {"number": 748, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Do you want to open a PR?", "sentSegmented": ["do", "you", "want", "to", "open", "a", "pr"], "sentSegmentedWithoutStops": ["want", "open", "pr"], "sentSegmentedWithoutStopsStemmed": ["want", "open", "pr"]}, {"number": 749, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I can do it but sometimes people like the 'credit' in the PR history.", "sentSegmented": ["i", "can", "do", "it", "but", "sometimes", "people", "like", "the", "'credit", "in", "the", "pr", "history"], "sentSegmentedWithoutStops": ["sometimes", "people", "like", "'credit", "pr", "history"], "sentSegmentedWithoutStopsStemmed": ["sometim", "peopl", "like", "'credit", "pr", "histori"]}, {"number": 750, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Does it pass the unit tests?", "sentSegmented": ["does", "it", "pass", "the", "unit", "tests"], "sentSegmentedWithoutStops": ["pass", "unit", "tests"], "sentSegmentedWithoutStopsStemmed": ["pass", "unit", "test"]}, {"number": 751, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "It'd be great to add your image to the Data Matrix test suite.", "sentSegmented": ["it", "'d", "be", "great", "to", "add", "your", "image", "to", "the", "data", "matrix", "test", "suite"], "sentSegmentedWithoutStops": ["'d", "great", "add", "image", "data", "matrix", "test", "suite"], "sentSegmentedWithoutStopsStemmed": ["'d", "great", "add", "imag", "data", "matrix", "test", "suit"]}, {"number": 752, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "@gvsharma Please ask unrelated questions on the mailing list in a new thread.", "sentSegmented": ["gvsharma", "please", "ask", "unrelated", "questions", "on", "the", "mailing", "list", "in", "a", "new", "thread"], "sentSegmentedWithoutStops": ["gvsharma", "please", "ask", "unrelated", "questions", "mailing", "list", "new", "thread"], "sentSegmentedWithoutStopsStemmed": ["gvsharma", "pleas", "ask", "unrel", "question", "mail", "list", "new", "thread"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1NDMzMjg0", "author": {"login": "ychtioui"}, "body": "I will open a PR. I will also add the image to the datamatrix test suite. what do you mean by the unit tests?\nthe fix does read all my 144x144 images (including some with 2335 alphanumeric characters!!).\nBefore Lead Tech. and ClearImage readers were reading 144x144 datamatrix images, not ZXing.\nNow, ZXing also reads 144x144 datamatrix.\n", "bodyText": "I will open a PR. I will also add the image to the datamatrix test suite. what do you mean by the unit tests?\nthe fix does read all my 144x144 images (including some with 2335 alphanumeric characters!!).\nBefore Lead Tech. and ClearImage readers were reading 144x144 datamatrix images, not ZXing.\nNow, ZXing also reads 144x144 datamatrix.", "bodyHTML": "<p>I will open a PR. I will also add the image to the datamatrix test suite. what do you mean by the unit tests?<br>\nthe fix does read all my 144x144 images (including some with 2335 alphanumeric characters!!).<br>\nBefore Lead Tech. and ClearImage readers were reading 144x144 datamatrix images, not ZXing.<br>\nNow, ZXing also reads 144x144 datamatrix.</p>", "createdAt": "2014-12-03T15:59:17Z", "publishedAt": "2014-12-03T15:59:17Z", "lastEditedAt": null, "updatedAt": "2014-12-03T15:59:17Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 753, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I will open a PR.", "sentSegmented": ["i", "will", "open", "a", "pr"], "sentSegmentedWithoutStops": ["open", "pr"], "sentSegmentedWithoutStopsStemmed": ["open", "pr"]}, {"number": 754, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I will also add the image to the datamatrix test suite.", "sentSegmented": ["i", "will", "also", "add", "the", "image", "to", "the", "datamatrix", "test", "suite"], "sentSegmentedWithoutStops": ["also", "add", "image", "datamatrix", "test", "suite"], "sentSegmentedWithoutStopsStemmed": ["also", "add", "imag", "datamatrix", "test", "suit"]}, {"number": 755, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "what do you mean by the unit tests?", "sentSegmented": ["what", "do", "you", "mean", "by", "the", "unit", "tests"], "sentSegmentedWithoutStops": ["mean", "unit", "tests"], "sentSegmentedWithoutStopsStemmed": ["mean", "unit", "test"]}, {"number": 756, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "the fix does read all my 144x144 images (including some with 2335 alphanumeric characters!!", "sentSegmented": ["the", "fix", "does", "read", "all", "my", "144x144", "images", "including", "some", "with", "2335", "alphanumeric", "characters"], "sentSegmentedWithoutStops": ["fix", "read", "144x144", "images", "including", "2335", "alphanumeric", "characters"], "sentSegmentedWithoutStopsStemmed": ["fix", "read", "144x144", "imag", "includ", "2335", "alphanumer", "charact"]}, {"number": 757, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ").", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 758, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Before Lead Tech.", "sentSegmented": ["before", "lead", "tech"], "sentSegmentedWithoutStops": ["lead", "tech"], "sentSegmentedWithoutStopsStemmed": ["lead", "tech"]}, {"number": 759, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "and ClearImage readers were reading 144x144 datamatrix images, not ZXing.", "sentSegmented": ["and", "clearimage", "readers", "were", "reading", "144x144", "datamatrix", "images", "not", "zxing"], "sentSegmentedWithoutStops": ["clearimage", "readers", "reading", "144x144", "datamatrix", "images", "zxing"], "sentSegmentedWithoutStopsStemmed": ["clearimag", "reader", "read", "144x144", "datamatrix", "imag", "zxing"]}, {"number": 760, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Now, ZXing also reads 144x144 datamatrix.", "sentSegmented": ["now", "zxing", "also", "reads", "144x144", "datamatrix"], "sentSegmentedWithoutStops": ["zxing", "also", "reads", "144x144", "datamatrix"], "sentSegmentedWithoutStopsStemmed": ["zxing", "also", "read", "144x144", "datamatrix"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1NDQyODc3", "author": {"login": "srowen"}, "body": "That's great. Yes I just mean add the image and update the test to expect one more success. \n", "bodyText": "That's great. Yes I just mean add the image and update the test to expect one more success.", "bodyHTML": "<p>That's great. Yes I just mean add the image and update the test to expect one more success.</p>", "createdAt": "2014-12-03T16:42:16Z", "publishedAt": "2014-12-03T16:42:16Z", "lastEditedAt": null, "updatedAt": "2014-12-03T16:42:16Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 761, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "That's great.", "sentSegmented": ["that", "'s", "great"], "sentSegmentedWithoutStops": ["'s", "great"], "sentSegmentedWithoutStopsStemmed": ["'s", "great"]}, {"number": 762, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Yes I just mean add the image and update the test to expect one more success.", "sentSegmented": ["yes", "i", "just", "mean", "add", "the", "image", "and", "update", "the", "test", "to", "expect", "one", "more", "success"], "sentSegmentedWithoutStops": ["yes", "mean", "add", "image", "update", "test", "expect", "one", "success"], "sentSegmentedWithoutStopsStemmed": ["ye", "mean", "add", "imag", "updat", "test", "expect", "one", "success"]}]}}, {"node": {"id": "MDEyOklzc3VlQ29tbWVudDY1NzEwMDA3", "author": {"login": "ychtioui"}, "body": "hi, I'm not very familiar with creating aPR and updating the test.\ncan you please do it (I would appreciate if you put my name Younes CHTIOUI in the source file and wherever makes sense).\n.......................................................................\nAgain code change:\nFile DataBlock.java......> function \"getDataBlocks\"\n replace this:\n // Now add in error correction blocks\n int max = result[0].codewords.length;\n for (int i = longerBlocksNumDataCodewords; i < max; i++) {\n for (int j = 0; j < numResultBlocks; j++) {\n int iOffset = specialVersion && j > 7 ? i - 1 : i;\n result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n }\n }\n with this:\n // Now add in error correction blocks\n int max = result[0].codewords.length;\n for (int i = longerBlocksNumDataCodewords; i < max; i++) {\n for (int j = 0; j < numResultBlocks; j++) {\n int jOffset = (specialVersion)?(j+8)%numResultBlocks:j;\n int iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n }\n }\n\nI attached here three 144x144 images:\n1)\n![barcode_144_144](https://cloud.githubusercontent.com/assets/9968625/5306732/e61296c6-7bd4-11e4-9e01-5d053e1d61ba.jpg)\nencodes 0123456789 in a 144x144 datamatrix barcode\n2)\n\n![01190](https://cloud.githubusercontent.com/assets/9968625/5306783/4e60c0ea-7bd5-11e4-862f-b7002eab4550.jpg)\nencodes 2335 alphanumeric characters in a 144x144 datamatrix barcode\n3)\n![01270](https://cloud.githubusercontent.com/assets/9968625/5306809/77d2fc04-7bd5-11e4-9875-da443d9f465a.jpg)\nencodes 2335 alphanumeric characters  in a 144x144 datamatrix barcode\n\nthanks much\n", "bodyText": "hi, I'm not very familiar with creating aPR and updating the test.\ncan you please do it (I would appreciate if you put my name Younes CHTIOUI in the source file and wherever makes sense).\n.......................................................................\nAgain code change:\nFile DataBlock.java......> function \"getDataBlocks\"\nreplace this:\n// Now add in error correction blocks\nint max = result[0].codewords.length;\nfor (int i = longerBlocksNumDataCodewords; i < max; i++) {\nfor (int j = 0; j < numResultBlocks; j++) {\nint iOffset = specialVersion && j > 7 ? i - 1 : i;\nresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n}\n}\nwith this:\n// Now add in error correction blocks\nint max = result[0].codewords.length;\nfor (int i = longerBlocksNumDataCodewords; i < max; i++) {\nfor (int j = 0; j < numResultBlocks; j++) {\nint jOffset = (specialVersion)?(j+8)%numResultBlocks:j;\nint iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\nresult[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n}\n}\nI attached here three 144x144 images:\n1)\n\nencodes 0123456789 in a 144x144 datamatrix barcode\n2)\n\nencodes 2335 alphanumeric characters in a 144x144 datamatrix barcode\n3)\n\nencodes 2335 alphanumeric characters  in a 144x144 datamatrix barcode\nthanks much", "bodyHTML": "<p>hi, I'm not very familiar with creating aPR and updating the test.<br>\ncan you please do it (I would appreciate if you put my name Younes CHTIOUI in the source file and wherever makes sense).<br>\n.......................................................................<br>\nAgain code change:<br>\nFile DataBlock.java......&gt; function \"getDataBlocks\"<br>\nreplace this:<br>\n// Now add in error correction blocks<br>\nint max = result[0].codewords.length;<br>\nfor (int i = longerBlocksNumDataCodewords; i &lt; max; i++) {<br>\nfor (int j = 0; j &lt; numResultBlocks; j++) {<br>\nint iOffset = specialVersion &amp;&amp; j &gt; 7 ? i - 1 : i;<br>\nresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];<br>\n}<br>\n}<br>\nwith this:<br>\n// Now add in error correction blocks<br>\nint max = result[0].codewords.length;<br>\nfor (int i = longerBlocksNumDataCodewords; i &lt; max; i++) {<br>\nfor (int j = 0; j &lt; numResultBlocks; j++) {<br>\nint jOffset = (specialVersion)?(j+8)%numResultBlocks:j;<br>\nint iOffset = specialVersion &amp;&amp; jOffset &gt; 7 ? i - 1 : i;<br>\nresult[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];<br>\n}<br>\n}</p>\n<p>I attached here three 144x144 images:<br>\n1)<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/9968625/5306732/e61296c6-7bd4-11e4-9e01-5d053e1d61ba.jpg\"><img src=\"https://cloud.githubusercontent.com/assets/9968625/5306732/e61296c6-7bd4-11e4-9e01-5d053e1d61ba.jpg\" alt=\"barcode_144_144\" style=\"max-width:100%;\"></a><br>\nencodes 0123456789 in a 144x144 datamatrix barcode<br>\n2)</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/9968625/5306783/4e60c0ea-7bd5-11e4-862f-b7002eab4550.jpg\"><img src=\"https://cloud.githubusercontent.com/assets/9968625/5306783/4e60c0ea-7bd5-11e4-862f-b7002eab4550.jpg\" alt=\"01190\" style=\"max-width:100%;\"></a><br>\nencodes 2335 alphanumeric characters in a 144x144 datamatrix barcode<br>\n3)<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/9968625/5306809/77d2fc04-7bd5-11e4-9875-da443d9f465a.jpg\"><img src=\"https://cloud.githubusercontent.com/assets/9968625/5306809/77d2fc04-7bd5-11e4-9875-da443d9f465a.jpg\" alt=\"01270\" style=\"max-width:100%;\"></a><br>\nencodes 2335 alphanumeric characters  in a 144x144 datamatrix barcode</p>\n<p>thanks much</p>", "createdAt": "2014-12-04T21:50:24Z", "publishedAt": "2014-12-04T21:50:24Z", "lastEditedAt": null, "updatedAt": "2014-12-04T21:50:24Z", "reactions": {"edges": []}, "bodyParsed": [{"number": 763, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "hi, I'm not very familiar with creating aPR and updating the test.", "sentSegmented": ["hi", "i", "'m", "not", "very", "familiar", "with", "creating", "apr", "and", "updating", "the", "test"], "sentSegmentedWithoutStops": ["hi", "'m", "familiar", "creating", "apr", "updating", "test"], "sentSegmentedWithoutStopsStemmed": ["hi", "'m", "familiar", "creat", "apr", "updat", "test"]}, {"number": 764, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "can you please do it (I would appreciate if you put my name Younes CHTIOUI in the source file and wherever makes sense).", "sentSegmented": ["can", "you", "please", "do", "it", "i", "would", "appreciate", "if", "you", "put", "my", "name", "younes", "chtioui", "in", "the", "source", "file", "and", "wherever", "makes", "sense"], "sentSegmentedWithoutStops": ["please", "would", "appreciate", "put", "name", "younes", "chtioui", "source", "file", "wherever", "makes", "sense"], "sentSegmentedWithoutStopsStemmed": ["pleas", "would", "appreci", "put", "name", "youn", "chtioui", "sourc", "file", "wherev", "make", "sens"]}, {"number": 765, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": ".......................................................................", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 766, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "Again code change:", "sentSegmented": ["again", "code", "change"], "sentSegmentedWithoutStops": ["code", "change"], "sentSegmentedWithoutStopsStemmed": ["code", "chang"]}, {"number": 767, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "File DataBlock.java......> function \"getDataBlocks\"", "sentSegmented": ["file", "datablock.java", "function", "getdatablocks"], "sentSegmentedWithoutStops": ["file", "datablock.java", "function", "getdatablocks"], "sentSegmentedWithoutStopsStemmed": ["file", "datablock.java", "function", "getdatablock"]}, {"number": 768, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "replace this:", "sentSegmented": ["replace", "this"], "sentSegmentedWithoutStops": ["replace"], "sentSegmentedWithoutStopsStemmed": ["replac"]}, {"number": 769, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// Now add in error correction blocks", "sentSegmented": ["now", "add", "in", "error", "correction", "blocks"], "sentSegmentedWithoutStops": ["add", "error", "correction", "blocks"], "sentSegmentedWithoutStopsStemmed": ["add", "error", "correct", "block"]}, {"number": 770, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int max = result[0].codewords.length;", "sentSegmented": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStops": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStopsStemmed": ["int", "max", "result", "0", ".codewords.length"]}, {"number": 771, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int i = longerBlocksNumDataCodewords; i < max; i++) {", "sentSegmented": ["for", "int", "i", "longerblocksnumdatacodewords", "i", "max", "i++"], "sentSegmentedWithoutStops": ["int", "longerblocksnumdatacodewords", "max", "i++"], "sentSegmentedWithoutStopsStemmed": ["int", "longerblocksnumdatacodeword", "max", "i++"]}, {"number": 772, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int j = 0; j < numResultBlocks; j++) {", "sentSegmented": ["for", "int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStops": ["int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStopsStemmed": ["int", "j", "0", "j", "numresultblock", "j++"]}, {"number": 773, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int iOffset = specialVersion && j > 7 ?", "sentSegmented": ["int", "ioffset", "specialversion", "j", "7"], "sentSegmentedWithoutStops": ["int", "ioffset", "specialversion", "j", "7"], "sentSegmentedWithoutStopsStemmed": ["int", "ioffset", "specialvers", "j", "7"]}, {"number": 774, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "i - 1 : i;", "sentSegmented": ["i", "1", "i"], "sentSegmentedWithoutStops": ["1"], "sentSegmentedWithoutStopsStemmed": ["1"]}, {"number": 775, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];", "sentSegmented": ["result", "j", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStops": ["result", "j", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStopsStemmed": ["result", "j", ".codeword", "ioffset", "rawcodeword", "rawcodewordsoffset++"]}, {"number": 776, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 777, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 778, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "with this:", "sentSegmented": ["with", "this"], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 779, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "// Now add in error correction blocks", "sentSegmented": ["now", "add", "in", "error", "correction", "blocks"], "sentSegmentedWithoutStops": ["add", "error", "correction", "blocks"], "sentSegmentedWithoutStopsStemmed": ["add", "error", "correct", "block"]}, {"number": 780, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int max = result[0].codewords.length;", "sentSegmented": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStops": ["int", "max", "result", "0", ".codewords.length"], "sentSegmentedWithoutStopsStemmed": ["int", "max", "result", "0", ".codewords.length"]}, {"number": 781, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int i = longerBlocksNumDataCodewords; i < max; i++) {", "sentSegmented": ["for", "int", "i", "longerblocksnumdatacodewords", "i", "max", "i++"], "sentSegmentedWithoutStops": ["int", "longerblocksnumdatacodewords", "max", "i++"], "sentSegmentedWithoutStopsStemmed": ["int", "longerblocksnumdatacodeword", "max", "i++"]}, {"number": 782, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "for (int j = 0; j < numResultBlocks; j++) {", "sentSegmented": ["for", "int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStops": ["int", "j", "0", "j", "numresultblocks", "j++"], "sentSegmentedWithoutStopsStemmed": ["int", "j", "0", "j", "numresultblock", "j++"]}, {"number": 783, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int jOffset = (specialVersion)?", "sentSegmented": ["int", "joffset", "specialversion"], "sentSegmentedWithoutStops": ["int", "joffset", "specialversion"], "sentSegmentedWithoutStopsStemmed": ["int", "joffset", "specialvers"]}, {"number": 784, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "(j+8)%numResultBlocks:j;", "sentSegmented": ["j+8", "numresultblocks", "j"], "sentSegmentedWithoutStops": ["j+8", "numresultblocks", "j"], "sentSegmentedWithoutStopsStemmed": ["j+8", "numresultblock", "j"]}, {"number": 785, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "int iOffset = specialVersion && jOffset > 7 ?", "sentSegmented": ["int", "ioffset", "specialversion", "joffset", "7"], "sentSegmentedWithoutStops": ["int", "ioffset", "specialversion", "joffset", "7"], "sentSegmentedWithoutStopsStemmed": ["int", "ioffset", "specialvers", "joffset", "7"]}, {"number": 786, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "i - 1 : i;", "sentSegmented": ["i", "1", "i"], "sentSegmentedWithoutStops": ["1"], "sentSegmentedWithoutStopsStemmed": ["1"]}, {"number": 787, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];", "sentSegmented": ["result", "joffset", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStops": ["result", "joffset", ".codewords", "ioffset", "rawcodewords", "rawcodewordsoffset++"], "sentSegmentedWithoutStopsStemmed": ["result", "joffset", ".codeword", "ioffset", "rawcodeword", "rawcodewordsoffset++"]}, {"number": 788, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 789, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "}", "sentSegmented": [], "sentSegmentedWithoutStops": [], "sentSegmentedWithoutStopsStemmed": []}, {"number": 790, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I attached here three 144x144 images:", "sentSegmented": ["i", "attached", "here", "three", "144x144", "images"], "sentSegmentedWithoutStops": ["attached", "three", "144x144", "images"], "sentSegmentedWithoutStopsStemmed": ["attach", "three", "144x144", "imag"]}, {"number": 791, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "1)", "sentSegmented": ["1"], "sentSegmentedWithoutStops": ["1"], "sentSegmentedWithoutStopsStemmed": ["1"]}, {"number": 792, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "encodes 0123456789 in a 144x144 datamatrix barcode", "sentSegmented": ["encodes", "0123456789", "in", "a", "144x144", "datamatrix", "barcode"], "sentSegmentedWithoutStops": ["encodes", "0123456789", "144x144", "datamatrix", "barcode"], "sentSegmentedWithoutStopsStemmed": ["encod", "0123456789", "144x144", "datamatrix", "barcod"]}, {"number": 793, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "2)", "sentSegmented": ["2"], "sentSegmentedWithoutStops": ["2"], "sentSegmentedWithoutStopsStemmed": ["2"]}, {"number": 794, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "encodes 2335 alphanumeric characters in a 144x144 datamatrix barcode", "sentSegmented": ["encodes", "2335", "alphanumeric", "characters", "in", "a", "144x144", "datamatrix", "barcode"], "sentSegmentedWithoutStops": ["encodes", "2335", "alphanumeric", "characters", "144x144", "datamatrix", "barcode"], "sentSegmentedWithoutStopsStemmed": ["encod", "2335", "alphanumer", "charact", "144x144", "datamatrix", "barcod"]}, {"number": 795, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "3)", "sentSegmented": ["3"], "sentSegmentedWithoutStops": ["3"], "sentSegmentedWithoutStopsStemmed": ["3"]}, {"number": 796, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "encodes 2335 alphanumeric characters  in a 144x144 datamatrix barcode", "sentSegmented": ["encodes", "2335", "alphanumeric", "characters", "in", "a", "144x144", "datamatrix", "barcode"], "sentSegmentedWithoutStops": ["encodes", "2335", "alphanumeric", "characters", "144x144", "datamatrix", "barcode"], "sentSegmentedWithoutStopsStemmed": ["encod", "2335", "alphanumer", "charact", "144x144", "datamatrix", "barcod"]}, {"number": 797, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "thanks much", "sentSegmented": ["thanks", "much"], "sentSegmentedWithoutStops": ["thanks", "much"], "sentSegmentedWithoutStopsStemmed": ["thank", "much"]}]}}], "pageInfo": {"endCursor": "Y3Vyc29yOnYyOpHOA-qntw==", "hasNextPage": false}, "totalCount": 6}, "labels": {"edges": []}, "milestone": null, "reactions": {"edges": []}, "state": "CLOSED", "titleSegmented": ["any", "datamatrix", "barcode", "144x144", "not", "read"], "titleSegmentedWithoutStops": ["datamatrix", "barcode", "144x144", "read"], "titleSegmentedWithoutStopsStemmed": ["datamatrix", "barcod", "144x144", "read"], "bodyParsed": [{"number": 666, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I integrated Zxing to read DataMatrix barcodes.", "sentSegmented": ["i", "integrated", "zxing", "to", "read", "datamatrix", "barcodes"], "sentSegmentedWithoutStops": ["integrated", "zxing", "read", "datamatrix", "barcodes"], "sentSegmentedWithoutStopsStemmed": ["integr", "zxing", "read", "datamatrix", "barcod"]}, {"number": 667, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I have a database of over 2000 images.", "sentSegmented": ["i", "have", "a", "database", "of", "over", "2000", "images"], "sentSegmentedWithoutStops": ["database", "2000", "images"], "sentSegmentedWithoutStopsStemmed": ["databas", "2000", "imag"]}, {"number": 668, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "all barcodes are read, but 144x144 barcodes.", "sentSegmented": ["all", "barcodes", "are", "read", "but", "144x144", "barcodes"], "sentSegmentedWithoutStops": ["barcodes", "read", "144x144", "barcodes"], "sentSegmentedWithoutStopsStemmed": ["barcod", "read", "144x144", "barcod"]}, {"number": 669, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "I attached an image.", "sentSegmented": ["i", "attached", "an", "image"], "sentSegmentedWithoutStops": ["attached", "image"], "sentSegmentedWithoutStopsStemmed": ["attach", "imag"]}, {"number": 670, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The image encodes a few digits in a 144x144 barcode.", "sentSegmented": ["the", "image", "encodes", "a", "few", "digits", "in", "a", "144x144", "barcode"], "sentSegmentedWithoutStops": ["image", "encodes", "digits", "144x144", "barcode"], "sentSegmentedWithoutStopsStemmed": ["imag", "encod", "digit", "144x144", "barcod"]}, {"number": 671, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "has the datamatrix 144x144 reading fixed?", "sentSegmented": ["has", "the", "datamatrix", "144x144", "reading", "fixed"], "sentSegmentedWithoutStops": ["datamatrix", "144x144", "reading", "fixed"], "sentSegmentedWithoutStopsStemmed": ["datamatrix", "144x144", "read", "fix"]}, {"number": 672, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "is this a known issue?", "sentSegmented": ["is", "this", "a", "known", "issue"], "sentSegmentedWithoutStops": ["known", "issue"], "sentSegmentedWithoutStopsStemmed": ["known", "issu"]}, {"number": 673, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "this barcode has 10 datablocks.", "sentSegmented": ["this", "barcode", "has", "10", "datablocks"], "sentSegmentedWithoutStops": ["barcode", "10", "datablocks"], "sentSegmentedWithoutStopsStemmed": ["barcod", "10", "datablock"]}, {"number": 674, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "The reader decides that each datablocks has errors, and this is not the case.", "sentSegmented": ["the", "reader", "decides", "that", "each", "datablocks", "has", "errors", "and", "this", "is", "not", "the", "case"], "sentSegmentedWithoutStops": ["reader", "decides", "datablocks", "errors", "case"], "sentSegmentedWithoutStopsStemmed": ["reader", "decid", "datablock", "error", "case"]}, {"number": 675, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "When I save and review the bitmatrix, it does match 100% the input image.", "sentSegmented": ["when", "i", "save", "and", "review", "the", "bitmatrix", "it", "does", "match", "100", "the", "input", "image"], "sentSegmentedWithoutStops": ["save", "review", "bitmatrix", "match", "100", "input", "image"], "sentSegmentedWithoutStopsStemmed": ["save", "review", "bitmatrix", "match", "100", "input", "imag"]}, {"number": 676, "isCode": false, "isBlockQuote": false, "blockQuoteDepth": 0, "sent": "thanks", "sentSegmented": ["thanks"], "sentSegmentedWithoutStops": ["thanks"], "sentSegmentedWithoutStopsStemmed": ["thank"]}]}